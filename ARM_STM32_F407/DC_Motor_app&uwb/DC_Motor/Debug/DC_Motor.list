
DC_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c0d0  0800c0d0  0000d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c540  0800c540  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c540  0800c540  0000d540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c548  0800c548  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c54c  0800c54c  0000d54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c550  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          00000880  200001d8  200001d8  0000e1d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  0000e1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ec7  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026ef  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  000227c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2d  00000000  00000000  000238a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d60  00000000  00000000  000245cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000131c4  00000000  00000000  0004832d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd596  00000000  00000000  0005b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138a87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c58  00000000  00000000  00138acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c0b4 	.word	0x0800c0b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c0b4 	.word	0x0800c0b4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
   if (ch == '\n') HAL_UART_Transmit(&huart3, (uint8_t*)"\r", 1, 0xFFFF);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b0a      	cmp	r3, #10
 8000ff0:	d106      	bne.n	8001000 <__io_putchar+0x1c>
 8000ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4907      	ldr	r1, [pc, #28]	@ (8001018 <__io_putchar+0x34>)
 8000ffa:	4808      	ldr	r0, [pc, #32]	@ (800101c <__io_putchar+0x38>)
 8000ffc:	f005 fb26 	bl	800664c <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xFFFF);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001006:	2201      	movs	r2, #1
 8001008:	4804      	ldr	r0, [pc, #16]	@ (800101c <__io_putchar+0x38>)
 800100a:	f005 fb1f 	bl	800664c <HAL_UART_Transmit>
   return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800c0d0 	.word	0x0800c0d0
 800101c:	20000594 	.word	0x20000594

08001020 <HAL_TIM_PeriodElapsedCallback>:

int prev_motor1_enc_counter = 0;
int prev_motor2_enc_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM7)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a58      	ldr	r2, [pc, #352]	@ (8001190 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800102e:	4293      	cmp	r3, r2
 8001030:	f040 8175 	bne.w	800131e <HAL_TIM_PeriodElapsedCallback+0x2fe>
   {//ENCODER
        start_flag = 1;
 8001034:	4b57      	ldr	r3, [pc, #348]	@ (8001194 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]
        motor1_enc_counter = TIM3->CNT;
 800103a:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800103c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800103e:	461a      	mov	r2, r3
 8001040:	4b56      	ldr	r3, [pc, #344]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001042:	601a      	str	r2, [r3, #0]
        TIM3->CNT = 0;
 8001044:	4b54      	ldr	r3, [pc, #336]	@ (8001198 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	@ 0x24

        start_flag_1 ++;
 800104a:	4b55      	ldr	r3, [pc, #340]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a53      	ldr	r2, [pc, #332]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001052:	6013      	str	r3, [r2, #0]

        if(start_flag_1 >= 5)
 8001054:	4b52      	ldr	r3, [pc, #328]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b04      	cmp	r3, #4
 800105a:	dd05      	ble.n	8001068 <HAL_TIM_PeriodElapsedCallback+0x48>
        {
           start_flag_2 = 1;
 800105c:	4b51      	ldr	r3, [pc, #324]	@ (80011a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
           start_flag_1 = 5;
 8001062:	4b4f      	ldr	r3, [pc, #316]	@ (80011a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001064:	2205      	movs	r2, #5
 8001066:	601a      	str	r2, [r3, #0]
        }

        // 모터1 방향 ?   ???
     if (motor1_enc_counter <= 30000)
 8001068:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001070:	4293      	cmp	r3, r2
 8001072:	dc03      	bgt.n	800107c <HAL_TIM_PeriodElapsedCallback+0x5c>
     {
       direction_m1_check = 1;  // ?   ???
 8001074:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]
 800107a:	e024      	b.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0xa6>
     }
     else if (motor1_enc_counter >= 35535)
 800107c:	4b47      	ldr	r3, [pc, #284]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f648 22ce 	movw	r2, #35534	@ 0x8ace
 8001084:	4293      	cmp	r3, r2
 8001086:	dd0a      	ble.n	800109e <HAL_TIM_PeriodElapsedCallback+0x7e>
     {
       motor1_enc_counter = -(65535 - motor1_enc_counter);  // ?   ??? 보정
 8001088:	4b44      	ldr	r3, [pc, #272]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001090:	3bff      	subs	r3, #255	@ 0xff
 8001092:	4a42      	ldr	r2, [pc, #264]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001094:	6013      	str	r3, [r2, #0]
       direction_m1_check = 0;  // ?   ???
 8001096:	4b44      	ldr	r3, [pc, #272]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e013      	b.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0xa6>
     }
     else
     {
       // ?  ?   값과 비교?  ?   방향 ?   ???
       if (motor1_enc_counter > prev_motor1_enc_counter)
 800109e:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b42      	ldr	r3, [pc, #264]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dd03      	ble.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x92>
       {
         direction_m1_check = 1;  // ?   ???
 80010aa:	4b3f      	ldr	r3, [pc, #252]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e009      	b.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0xa6>
       }
       else
       {
         motor1_enc_counter = -(65535 - motor1_enc_counter);  // ?   ??? 보정
 80010b2:	4b3a      	ldr	r3, [pc, #232]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80010ba:	3bff      	subs	r3, #255	@ 0xff
 80010bc:	4a37      	ldr	r2, [pc, #220]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80010be:	6013      	str	r3, [r2, #0]
         direction_m1_check = 0;  // ?   ???
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
       }
     }

      motor2_enc_counter = TIM1->CNT;
 80010c6:	4b3a      	ldr	r3, [pc, #232]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010ce:	601a      	str	r2, [r3, #0]
      TIM1->CNT = 0;
 80010d0:	4b37      	ldr	r3, [pc, #220]	@ (80011b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24

      // 모터2 방향 ?   ???
     if (motor2_enc_counter <= 30000)
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f247 5230 	movw	r2, #30000	@ 0x7530
 80010de:	4293      	cmp	r3, r2
 80010e0:	dc03      	bgt.n	80010ea <HAL_TIM_PeriodElapsedCallback+0xca>
     {
       direction_m2_check = 1;  // ?   ???
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e024      	b.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x114>
     }
     else if (motor2_enc_counter >= 35535)
 80010ea:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f648 22ce 	movw	r2, #35534	@ 0x8ace
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dd0a      	ble.n	800110c <HAL_TIM_PeriodElapsedCallback+0xec>
     {
       motor2_enc_counter = -(65535 - motor2_enc_counter);  // ?   ??? 보정
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 80010fe:	3bff      	subs	r3, #255	@ 0xff
 8001100:	4a2c      	ldr	r2, [pc, #176]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001102:	6013      	str	r3, [r2, #0]
       direction_m2_check = 0;  // ?   ???
 8001104:	4b2c      	ldr	r3, [pc, #176]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001106:	2200      	movs	r2, #0
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e013      	b.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x114>
     }
     else
     {
       // ?  ?   값과 비교?  ?   방향 ?   ???
       if (motor2_enc_counter > prev_motor2_enc_counter)
 800110c:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	429a      	cmp	r2, r3
 8001116:	dd03      	ble.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x100>
       {
         direction_m2_check = 1;  // ?   ???
 8001118:	4b27      	ldr	r3, [pc, #156]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e009      	b.n	8001134 <HAL_TIM_PeriodElapsedCallback+0x114>
       }
       else
       {
         motor2_enc_counter = -(65535 - motor2_enc_counter);  // ?   ??? 보정
 8001120:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f5a3 437f 	sub.w	r3, r3, #65280	@ 0xff00
 8001128:	3bff      	subs	r3, #255	@ 0xff
 800112a:	4a22      	ldr	r2, [pc, #136]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800112c:	6013      	str	r3, [r2, #0]
         direction_m2_check = 0;  // ?   ???
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
       }
     }

     ENCODER1 = motor1_enc_counter;
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001142:	edc3 7a00 	vstr	s15, [r3]
     ENCODER2 = motor2_enc_counter;
 8001146:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	ee07 3a90 	vmov	s15, r3
 800114e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001152:	4b1c      	ldr	r3, [pc, #112]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001154:	edc3 7a00 	vstr	s15, [r3]

      // ?  ?   ?  코더  ??? ?  ?  ?  ?
      //prev_motor1_enc_counter = motor1_enc_counter;
      //prev_motor2_enc_counter = motor2_enc_counter;

      if(motor1_enc_counter - prev_motor1_enc_counter > 170 )
 8001158:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2baa      	cmp	r3, #170	@ 0xaa
 8001164:	dd04      	ble.n	8001170 <HAL_TIM_PeriodElapsedCallback+0x150>
      {
         motor1_enc_counter = prev_motor1_enc_counter ;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0c      	ldr	r2, [pc, #48]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e003      	b.n	8001178 <HAL_TIM_PeriodElapsedCallback+0x158>
      }
      else
      {
         prev_motor1_enc_counter = motor1_enc_counter ;
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001176:	6013      	str	r3, [r2, #0]
      }

      if(motor2_enc_counter - prev_motor2_enc_counter > 170 )
 8001178:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2baa      	cmp	r3, #170	@ 0xaa
 8001184:	dd20      	ble.n	80011c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
      {
        motor2_enc_counter = prev_motor2_enc_counter ;
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e01f      	b.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001190:	40001400 	.word	0x40001400
 8001194:	20000858 	.word	0x20000858
 8001198:	40000400 	.word	0x40000400
 800119c:	20000788 	.word	0x20000788
 80011a0:	2000085c 	.word	0x2000085c
 80011a4:	20000860 	.word	0x20000860
 80011a8:	2000075c 	.word	0x2000075c
 80011ac:	2000086c 	.word	0x2000086c
 80011b0:	40010000 	.word	0x40010000
 80011b4:	2000078c 	.word	0x2000078c
 80011b8:	2000075d 	.word	0x2000075d
 80011bc:	20000870 	.word	0x20000870
 80011c0:	20000864 	.word	0x20000864
 80011c4:	20000868 	.word	0x20000868
      }
      else
      {
        prev_motor2_enc_counter = motor2_enc_counter ;
 80011c8:	4b5f      	ldr	r3, [pc, #380]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5f      	ldr	r2, [pc, #380]	@ (800134c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80011ce:	6013      	str	r3, [r2, #0]
      }

      wheel_1 =  motor1_enc_counter*360.0/302400.0;
 80011d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9a5 	bl	8000524 <__aeabi_i2d>
 80011da:	f04f 0200 	mov.w	r2, #0
 80011de:	4b5d      	ldr	r3, [pc, #372]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80011e0:	f7ff fa0a 	bl	80005f8 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	a34e      	add	r3, pc, #312	@ (adr r3, 8001328 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fb2b 	bl	800084c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4957      	ldr	r1, [pc, #348]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80011fc:	e9c1 2300 	strd	r2, r3, [r1]
      wheel_2 =  motor2_enc_counter*360.0/302400.0;
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	f04f 0200 	mov.w	r2, #0
 800120e:	4b51      	ldr	r3, [pc, #324]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a342      	add	r3, pc, #264	@ (adr r3, 8001328 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff fb13 	bl	800084c <__aeabi_ddiv>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	494c      	ldr	r1, [pc, #304]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800122c:	e9c1 2300 	strd	r2, r3, [r1]

      wheel_1_distance = WHEEL_RADIUS*wheel_1*2*PI/360.0;
 8001230:	4b49      	ldr	r3, [pc, #292]	@ (8001358 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001232:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001236:	a33e      	add	r3, pc, #248	@ (adr r3, 8001330 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9dc 	bl	80005f8 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	f7ff f81e 	bl	800028c <__adddf3>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	a337      	add	r3, pc, #220	@ (adr r3, 8001338 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff f9cb 	bl	80005f8 <__aeabi_dmul>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0200 	mov.w	r2, #0
 800126e:	4b39      	ldr	r3, [pc, #228]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001270:	f7ff faec 	bl	800084c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4939      	ldr	r1, [pc, #228]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800127a:	e9c1 2300 	strd	r2, r3, [r1]
      wheel_2_distance = WHEEL_RADIUS*wheel_2*2*PI/360.0;
 800127e:	4b37      	ldr	r3, [pc, #220]	@ (800135c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001284:	a32a      	add	r3, pc, #168	@ (adr r3, 8001330 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	f7fe fff7 	bl	800028c <__adddf3>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	a324      	add	r3, pc, #144	@ (adr r3, 8001338 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9a4 	bl	80005f8 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b25      	ldr	r3, [pc, #148]	@ (8001354 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80012be:	f7ff fac5 	bl	800084c <__aeabi_ddiv>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4927      	ldr	r1, [pc, #156]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80012c8:	e9c1 2300 	strd	r2, r3, [r1]

      delta_s = (wheel_1_distance+wheel_2_distance)/2*100000;
 80012cc:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80012ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d2:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7fe ffd8 	bl	800028c <__adddf3>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ec:	f7ff faae 	bl	800084c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	a311      	add	r3, pc, #68	@ (adr r3, 8001340 <HAL_TIM_PeriodElapsedCallback+0x320>)
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f7ff f97b 	bl	80005f8 <__aeabi_dmul>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4918      	ldr	r1, [pc, #96]	@ (8001368 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001308:	e9c1 2300 	strd	r2, r3, [r1]

      motor1_enc_counter = 0;
 800130c:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
      motor2_enc_counter = 0;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

      start_flag = 0;
 8001318:	4b14      	ldr	r3, [pc, #80]	@ (800136c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
   }

}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	00000000 	.word	0x00000000
 800132c:	41127500 	.word	0x41127500
 8001330:	5c28f5c3 	.word	0x5c28f5c3
 8001334:	3fc5c28f 	.word	0x3fc5c28f
 8001338:	fc8b007a 	.word	0xfc8b007a
 800133c:	400921fa 	.word	0x400921fa
 8001340:	00000000 	.word	0x00000000
 8001344:	40f86a00 	.word	0x40f86a00
 8001348:	2000078c 	.word	0x2000078c
 800134c:	20000870 	.word	0x20000870
 8001350:	20000788 	.word	0x20000788
 8001354:	40768000 	.word	0x40768000
 8001358:	20000760 	.word	0x20000760
 800135c:	20000768 	.word	0x20000768
 8001360:	20000770 	.word	0x20000770
 8001364:	20000778 	.word	0x20000778
 8001368:	20000780 	.word	0x20000780
 800136c:	20000858 	.word	0x20000858

08001370 <HAL_UART_RxCpltCallback>:
uint16_t app_PWM_L = 0;

unsigned char rx_dma_data4 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af02      	add	r7, sp, #8
 8001376:	6078      	str	r0, [r7, #4]
   //UWB packet
   if(huart->Instance == UART5)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a8d      	ldr	r2, [pc, #564]	@ (80015b4 <HAL_UART_RxCpltCallback+0x244>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 80aa 	bne.w	80014d8 <HAL_UART_RxCpltCallback+0x168>
   {
      //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
      //HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
      //HAL_UART_Transmit(&huart3, "hello\n\r", 6,100);
      for(int i = 0; i<12; i++)
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	e00b      	b.n	80013a2 <HAL_UART_RxCpltCallback+0x32>
      {
        UWB_Rx_buf[i] = rx_dma_data5[i];
 800138a:	4a8b      	ldr	r2, [pc, #556]	@ (80015b8 <HAL_UART_RxCpltCallback+0x248>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	7819      	ldrb	r1, [r3, #0]
 8001392:	4a8a      	ldr	r2, [pc, #552]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	460a      	mov	r2, r1
 800139a:	701a      	strb	r2, [r3, #0]
      for(int i = 0; i<12; i++)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b0b      	cmp	r3, #11
 80013a6:	ddf0      	ble.n	800138a <HAL_UART_RxCpltCallback+0x1a>
      }
        //UWB_Rx_buf[UWB_Rx_index] = rx_dma_data5[UWB_Rx_index];
        //UWB_Rx_index++;

        if(UWB_Rx_buf[11] == 0xEE) //address check
 80013a8:	4b84      	ldr	r3, [pc, #528]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 80013aa:	7adb      	ldrb	r3, [r3, #11]
 80013ac:	2bee      	cmp	r3, #238	@ 0xee
 80013ae:	d10a      	bne.n	80013c6 <HAL_UART_RxCpltCallback+0x56>
        {
        	if(app_flag == 1)
 80013b0:	4b83      	ldr	r3, [pc, #524]	@ (80015c0 <HAL_UART_RxCpltCallback+0x250>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d103      	bne.n	80013c0 <HAL_UART_RxCpltCallback+0x50>
        	{
        		receive_flag_UWB = 0;
 80013b8:	4b82      	ldr	r3, [pc, #520]	@ (80015c4 <HAL_UART_RxCpltCallback+0x254>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	e002      	b.n	80013c6 <HAL_UART_RxCpltCallback+0x56>
        	}
        	else
        	{
        		receive_flag_UWB = 1;
 80013c0:	4b80      	ldr	r3, [pc, #512]	@ (80015c4 <HAL_UART_RxCpltCallback+0x254>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
        	}
        }

        if(receive_flag_UWB == 1)
 80013c6:	4b7f      	ldr	r3, [pc, #508]	@ (80015c4 <HAL_UART_RxCpltCallback+0x254>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d17f      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x15e>
        {
         if((UWB_Rx_buf[0] == 0x11) && (UWB_Rx_buf[1] == 0x22))
 80013ce:	4b7b      	ldr	r3, [pc, #492]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b11      	cmp	r3, #17
 80013d4:	d17b      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x15e>
 80013d6:	4b79      	ldr	r3, [pc, #484]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 80013d8:	785b      	ldrb	r3, [r3, #1]
 80013da:	2b22      	cmp	r3, #34	@ 0x22
 80013dc:	d177      	bne.n	80014ce <HAL_UART_RxCpltCallback+0x15e>
         {
            if(UWB_Rx_buf[10] == 0xaa)
 80013de:	4b77      	ldr	r3, [pc, #476]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 80013e0:	7a9b      	ldrb	r3, [r3, #10]
 80013e2:	2baa      	cmp	r3, #170	@ 0xaa
 80013e4:	d10c      	bne.n	8001400 <HAL_UART_RxCpltCallback+0x90>
            {
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
 80013e6:	2201      	movs	r2, #1
 80013e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013ec:	4876      	ldr	r0, [pc, #472]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 80013ee:	f003 fc33 	bl	8004c58 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013f8:	4873      	ldr	r0, [pc, #460]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 80013fa:	f003 fc2d 	bl	8004c58 <HAL_GPIO_WritePin>
 80013fe:	e020      	b.n	8001442 <HAL_UART_RxCpltCallback+0xd2>
            }
            else if(UWB_Rx_buf[10] == 0xbb)
 8001400:	4b6e      	ldr	r3, [pc, #440]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 8001402:	7a9b      	ldrb	r3, [r3, #10]
 8001404:	2bbb      	cmp	r3, #187	@ 0xbb
 8001406:	d10c      	bne.n	8001422 <HAL_UART_RxCpltCallback+0xb2>
            {
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800140e:	486e      	ldr	r0, [pc, #440]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 8001410:	f003 fc22 	bl	8004c58 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); //dir_motor2 setting
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800141a:	486b      	ldr	r0, [pc, #428]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 800141c:	f003 fc1c 	bl	8004c58 <HAL_GPIO_WritePin>
 8001420:	e00f      	b.n	8001442 <HAL_UART_RxCpltCallback+0xd2>
            }
            else if(UWB_Rx_buf[10] == 0xcc)
 8001422:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 8001424:	7a9b      	ldrb	r3, [r3, #10]
 8001426:	2bcc      	cmp	r3, #204	@ 0xcc
 8001428:	d10b      	bne.n	8001442 <HAL_UART_RxCpltCallback+0xd2>
            {
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0); //dir_motor1 setting
 800142a:	2200      	movs	r2, #0
 800142c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001430:	4865      	ldr	r0, [pc, #404]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 8001432:	f003 fc11 	bl	8004c58 <HAL_GPIO_WritePin>
               HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4862      	ldr	r0, [pc, #392]	@ (80015c8 <HAL_UART_RxCpltCallback+0x258>)
 800143e:	f003 fc0b 	bl	8004c58 <HAL_GPIO_WritePin>
            }

            UWB_PWM_L = (UWB_Rx_buf[2] << 8) | (UWB_Rx_buf[3]) ;
 8001442:	4b5e      	ldr	r3, [pc, #376]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 8001444:	789b      	ldrb	r3, [r3, #2]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	4b5c      	ldr	r3, [pc, #368]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 800144c:	78db      	ldrb	r3, [r3, #3]
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	b29a      	uxth	r2, r3
 8001456:	4b5d      	ldr	r3, [pc, #372]	@ (80015cc <HAL_UART_RxCpltCallback+0x25c>)
 8001458:	801a      	strh	r2, [r3, #0]
            UWB_PWM_R = (UWB_Rx_buf[4] << 8) | (UWB_Rx_buf[5]) ;
 800145a:	4b58      	ldr	r3, [pc, #352]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	b21a      	sxth	r2, r3
 8001462:	4b56      	ldr	r3, [pc, #344]	@ (80015bc <HAL_UART_RxCpltCallback+0x24c>)
 8001464:	795b      	ldrb	r3, [r3, #5]
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	b29a      	uxth	r2, r3
 800146e:	4b58      	ldr	r3, [pc, #352]	@ (80015d0 <HAL_UART_RxCpltCallback+0x260>)
 8001470:	801a      	strh	r2, [r3, #0]

            if(UWB_PWM_R >= 800)
 8001472:	4b57      	ldr	r3, [pc, #348]	@ (80015d0 <HAL_UART_RxCpltCallback+0x260>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800147a:	d304      	bcc.n	8001486 <HAL_UART_RxCpltCallback+0x116>
            {
              UWB_PWM_R = 790;
 800147c:	4b54      	ldr	r3, [pc, #336]	@ (80015d0 <HAL_UART_RxCpltCallback+0x260>)
 800147e:	f240 3216 	movw	r2, #790	@ 0x316
 8001482:	801a      	strh	r2, [r3, #0]
 8001484:	e008      	b.n	8001498 <HAL_UART_RxCpltCallback+0x128>
            }
            else if(UWB_PWM_L >= 800)
 8001486:	4b51      	ldr	r3, [pc, #324]	@ (80015cc <HAL_UART_RxCpltCallback+0x25c>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 800148e:	d303      	bcc.n	8001498 <HAL_UART_RxCpltCallback+0x128>
            {
              UWB_PWM_L = 790;
 8001490:	4b4e      	ldr	r3, [pc, #312]	@ (80015cc <HAL_UART_RxCpltCallback+0x25c>)
 8001492:	f240 3216 	movw	r2, #790	@ 0x316
 8001496:	801a      	strh	r2, [r3, #0]
            }

            __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,UWB_PWM_L); // MOTOR1 , UWB_PWM_L , sum_1
 8001498:	4b4c      	ldr	r3, [pc, #304]	@ (80015cc <HAL_UART_RxCpltCallback+0x25c>)
 800149a:	881a      	ldrh	r2, [r3, #0]
 800149c:	4b4d      	ldr	r3, [pc, #308]	@ (80015d4 <HAL_UART_RxCpltCallback+0x264>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,UWB_PWM_R); // MOTOR2 , UWB_PWM_R , sum_2
 80014a2:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <HAL_UART_RxCpltCallback+0x260>)
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	4b4c      	ldr	r3, [pc, #304]	@ (80015d8 <HAL_UART_RxCpltCallback+0x268>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	639a      	str	r2, [r3, #56]	@ 0x38
            sprintf((char*)msg_uwb, "%d\t %d\t \r\n", UWB_PWM_L, UWB_PWM_R);
 80014ac:	4b47      	ldr	r3, [pc, #284]	@ (80015cc <HAL_UART_RxCpltCallback+0x25c>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <HAL_UART_RxCpltCallback+0x260>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	4949      	ldr	r1, [pc, #292]	@ (80015dc <HAL_UART_RxCpltCallback+0x26c>)
 80014b8:	4849      	ldr	r0, [pc, #292]	@ (80015e0 <HAL_UART_RxCpltCallback+0x270>)
 80014ba:	f007 f9c3 	bl	8008844 <siprintf>
            HAL_UART_Transmit_IT(&huart3, msg_uwb, sizeof(msg_uwb));
 80014be:	2264      	movs	r2, #100	@ 0x64
 80014c0:	4947      	ldr	r1, [pc, #284]	@ (80015e0 <HAL_UART_RxCpltCallback+0x270>)
 80014c2:	4848      	ldr	r0, [pc, #288]	@ (80015e4 <HAL_UART_RxCpltCallback+0x274>)
 80014c4:	f005 f94d 	bl	8006762 <HAL_UART_Transmit_IT>
            receive_flag_UWB = 0;
 80014c8:	4b3e      	ldr	r3, [pc, #248]	@ (80015c4 <HAL_UART_RxCpltCallback+0x254>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
         }
      }
        HAL_UART_Receive_DMA(&huart5, rx_dma_data5, 12);
 80014ce:	220c      	movs	r2, #12
 80014d0:	4939      	ldr	r1, [pc, #228]	@ (80015b8 <HAL_UART_RxCpltCallback+0x248>)
 80014d2:	4845      	ldr	r0, [pc, #276]	@ (80015e8 <HAL_UART_RxCpltCallback+0x278>)
 80014d4:	f005 f97b 	bl	80067ce <HAL_UART_Receive_DMA>
   }

   if(huart->Instance == UART4)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a43      	ldr	r2, [pc, #268]	@ (80015ec <HAL_UART_RxCpltCallback+0x27c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	f040 812c 	bne.w	800173c <HAL_UART_RxCpltCallback+0x3cc>
   {
	  //HAL_UART_Transmit(&huart3, "hello\n\r", 6,100);
	  Rx_buf4[Rx_index4++] = rx_dma_data4;
 80014e4:	4b42      	ldr	r3, [pc, #264]	@ (80015f0 <HAL_UART_RxCpltCallback+0x280>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	b2d1      	uxtb	r1, r2
 80014ec:	4a40      	ldr	r2, [pc, #256]	@ (80015f0 <HAL_UART_RxCpltCallback+0x280>)
 80014ee:	7011      	strb	r1, [r2, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4b40      	ldr	r3, [pc, #256]	@ (80015f4 <HAL_UART_RxCpltCallback+0x284>)
 80014f4:	7819      	ldrb	r1, [r3, #0]
 80014f6:	4b40      	ldr	r3, [pc, #256]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 80014f8:	5499      	strb	r1, [r3, r2]

	  if(Rx_buf4[Rx_index4 - 1] == 0x77)
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <HAL_UART_RxCpltCallback+0x280>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a3d      	ldr	r2, [pc, #244]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	2b77      	cmp	r3, #119	@ 0x77
 8001506:	d105      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x1a4>
	  {//address check
		receive_flag4 = 1;
 8001508:	4b3c      	ldr	r3, [pc, #240]	@ (80015fc <HAL_UART_RxCpltCallback+0x28c>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
		Rx_index4 = 0;
 800150e:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <HAL_UART_RxCpltCallback+0x280>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	  }

	  if(receive_flag4 == 1)
 8001514:	4b39      	ldr	r3, [pc, #228]	@ (80015fc <HAL_UART_RxCpltCallback+0x28c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	f040 810a 	bne.w	8001732 <HAL_UART_RxCpltCallback+0x3c2>
	  {
		  if(Rx_buf4[0] == 0xaa)
 800151e:	4b36      	ldr	r3, [pc, #216]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2baa      	cmp	r3, #170	@ 0xaa
 8001524:	f040 80d5 	bne.w	80016d2 <HAL_UART_RxCpltCallback+0x362>
		  {//ON , UWB_OFF
			  app_flag = 1;
 8001528:	4b25      	ldr	r3, [pc, #148]	@ (80015c0 <HAL_UART_RxCpltCallback+0x250>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
			  app_state++;
 800152e:	4b34      	ldr	r3, [pc, #208]	@ (8001600 <HAL_UART_RxCpltCallback+0x290>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b32      	ldr	r3, [pc, #200]	@ (8001600 <HAL_UART_RxCpltCallback+0x290>)
 8001538:	701a      	strb	r2, [r3, #0]
			  if(app_state == 1)
 800153a:	4b31      	ldr	r3, [pc, #196]	@ (8001600 <HAL_UART_RxCpltCallback+0x290>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d105      	bne.n	800154e <HAL_UART_RxCpltCallback+0x1de>
			  {
				  app_PWM_R = 0;
 8001542:	4b30      	ldr	r3, [pc, #192]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 8001544:	2200      	movs	r2, #0
 8001546:	801a      	strh	r2, [r3, #0]
				  app_PWM_L = 0;
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 800154a:	2200      	movs	r2, #0
 800154c:	801a      	strh	r2, [r3, #0]
			  }

			  if(Rx_buf4[1] == 0xfb)
 800154e:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	2bfb      	cmp	r3, #251	@ 0xfb
 8001554:	d079      	beq.n	800164a <HAL_UART_RxCpltCallback+0x2da>
			  {//wait
				  //값 유지
			  }
			  else if(Rx_buf4[1] == 0xfc)
 8001556:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	2bfc      	cmp	r3, #252	@ 0xfc
 800155c:	d106      	bne.n	800156c <HAL_UART_RxCpltCallback+0x1fc>
			  {//reset
				 app_PWM_R = 0;
 800155e:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 8001560:	2200      	movs	r2, #0
 8001562:	801a      	strh	r2, [r3, #0]
				 app_PWM_L = 0;
 8001564:	4b28      	ldr	r3, [pc, #160]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 8001566:	2200      	movs	r2, #0
 8001568:	801a      	strh	r2, [r3, #0]
 800156a:	e06e      	b.n	800164a <HAL_UART_RxCpltCallback+0x2da>
			  }
			  else if(Rx_buf4[1] == 0xab)
 800156c:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_UART_RxCpltCallback+0x288>)
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	2bab      	cmp	r3, #171	@ 0xab
 8001572:	d14b      	bne.n	800160c <HAL_UART_RxCpltCallback+0x29c>
			  {//speed up
				  if(app_PWM_R >= 450 || app_PWM_L >= 450)
 8001574:	4b23      	ldr	r3, [pc, #140]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800157c:	d204      	bcs.n	8001588 <HAL_UART_RxCpltCallback+0x218>
 800157e:	4b22      	ldr	r3, [pc, #136]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001586:	d308      	bcc.n	800159a <HAL_UART_RxCpltCallback+0x22a>
				  {//최고속도 제한
				  	  app_PWM_R = 450;
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 800158a:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 800158e:	801a      	strh	r2, [r3, #0]
				  	  app_PWM_L = 450;
 8001590:	4b1d      	ldr	r3, [pc, #116]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 8001592:	f44f 72e1 	mov.w	r2, #450	@ 0x1c2
 8001596:	801a      	strh	r2, [r3, #0]
 8001598:	e057      	b.n	800164a <HAL_UART_RxCpltCallback+0x2da>
				  }
				  else
				  {
				  	  app_PWM_R += 50;
 800159a:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	3332      	adds	r3, #50	@ 0x32
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b18      	ldr	r3, [pc, #96]	@ (8001604 <HAL_UART_RxCpltCallback+0x294>)
 80015a4:	801a      	strh	r2, [r3, #0]
				  	  app_PWM_L += 50;
 80015a6:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	3332      	adds	r3, #50	@ 0x32
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_UART_RxCpltCallback+0x298>)
 80015b0:	801a      	strh	r2, [r3, #0]
 80015b2:	e04a      	b.n	800164a <HAL_UART_RxCpltCallback+0x2da>
 80015b4:	40005000 	.word	0x40005000
 80015b8:	20000874 	.word	0x20000874
 80015bc:	20000880 	.word	0x20000880
 80015c0:	200008f9 	.word	0x200008f9
 80015c4:	2000088c 	.word	0x2000088c
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	20000890 	.word	0x20000890
 80015d0:	2000088e 	.word	0x2000088e
 80015d4:	2000039c 	.word	0x2000039c
 80015d8:	20000474 	.word	0x20000474
 80015dc:	0800c0d4 	.word	0x0800c0d4
 80015e0:	20000790 	.word	0x20000790
 80015e4:	20000594 	.word	0x20000594
 80015e8:	20000504 	.word	0x20000504
 80015ec:	40004c00 	.word	0x40004c00
 80015f0:	20000892 	.word	0x20000892
 80015f4:	20000900 	.word	0x20000900
 80015f8:	20000894 	.word	0x20000894
 80015fc:	200008f8 	.word	0x200008f8
 8001600:	200008fa 	.word	0x200008fa
 8001604:	200008fc 	.word	0x200008fc
 8001608:	200008fe 	.word	0x200008fe
				  }
			  }
			  else if(Rx_buf4[1] == 0xac)
 800160c:	4b4d      	ldr	r3, [pc, #308]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	2bac      	cmp	r3, #172	@ 0xac
 8001612:	d11a      	bne.n	800164a <HAL_UART_RxCpltCallback+0x2da>
			  {//speed down
				  if(app_PWM_R <= 50 || app_PWM_L <= 50)
 8001614:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2b32      	cmp	r3, #50	@ 0x32
 800161a:	d903      	bls.n	8001624 <HAL_UART_RxCpltCallback+0x2b4>
 800161c:	4b4b      	ldr	r3, [pc, #300]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	2b32      	cmp	r3, #50	@ 0x32
 8001622:	d806      	bhi.n	8001632 <HAL_UART_RxCpltCallback+0x2c2>
				  {//언더플로우 방지
					  app_PWM_R = 0;
 8001624:	4b48      	ldr	r3, [pc, #288]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 8001626:	2200      	movs	r2, #0
 8001628:	801a      	strh	r2, [r3, #0]
					  app_PWM_L = 0;
 800162a:	4b48      	ldr	r3, [pc, #288]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 800162c:	2200      	movs	r2, #0
 800162e:	801a      	strh	r2, [r3, #0]
 8001630:	e00b      	b.n	800164a <HAL_UART_RxCpltCallback+0x2da>
				  }
				  else
				  {
					  app_PWM_R -= 50;
 8001632:	4b45      	ldr	r3, [pc, #276]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	3b32      	subs	r3, #50	@ 0x32
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b43      	ldr	r3, [pc, #268]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 800163c:	801a      	strh	r2, [r3, #0]
					  app_PWM_L -= 50;
 800163e:	4b43      	ldr	r3, [pc, #268]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	3b32      	subs	r3, #50	@ 0x32
 8001644:	b29a      	uxth	r2, r3
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 8001648:	801a      	strh	r2, [r3, #0]
				  }
			  }

			  if(Rx_buf4[2] == 0xcc)
 800164a:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 800164c:	789b      	ldrb	r3, [r3, #2]
 800164e:	2bcc      	cmp	r3, #204	@ 0xcc
 8001650:	d10c      	bne.n	800166c <HAL_UART_RxCpltCallback+0x2fc>
			  {//forward
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
 8001652:	2201      	movs	r2, #1
 8001654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001658:	483d      	ldr	r0, [pc, #244]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 800165a:	f003 fafd 	bl	8004c58 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
 800165e:	2201      	movs	r2, #1
 8001660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001664:	483a      	ldr	r0, [pc, #232]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 8001666:	f003 faf7 	bl	8004c58 <HAL_GPIO_WritePin>
 800166a:	e042      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
			  }
			  else if(Rx_buf4[2] == 0xdd)
 800166c:	4b35      	ldr	r3, [pc, #212]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	2bdd      	cmp	r3, #221	@ 0xdd
 8001672:	d10c      	bne.n	800168e <HAL_UART_RxCpltCallback+0x31e>
			  {//turn left
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0); //dir_motor1 setting
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800167a:	4835      	ldr	r0, [pc, #212]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 800167c:	f003 faec 	bl	8004c58 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	4832      	ldr	r0, [pc, #200]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 8001688:	f003 fae6 	bl	8004c58 <HAL_GPIO_WritePin>
 800168c:	e031      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
			  }
			  else if(Rx_buf4[2] == 0xee)
 800168e:	4b2d      	ldr	r3, [pc, #180]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 8001690:	789b      	ldrb	r3, [r3, #2]
 8001692:	2bee      	cmp	r3, #238	@ 0xee
 8001694:	d10c      	bne.n	80016b0 <HAL_UART_RxCpltCallback+0x340>
			  {//turn right
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800169c:	482c      	ldr	r0, [pc, #176]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 800169e:	f003 fadb 	bl	8004c58 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); //dir_motor2 setting
 80016a2:	2200      	movs	r2, #0
 80016a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016a8:	4829      	ldr	r0, [pc, #164]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 80016aa:	f003 fad5 	bl	8004c58 <HAL_GPIO_WritePin>
 80016ae:	e020      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
			  }
			  else if(Rx_buf4[2] == 0xfa)
 80016b0:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 80016b2:	789b      	ldrb	r3, [r3, #2]
 80016b4:	2bfa      	cmp	r3, #250	@ 0xfa
 80016b6:	d11c      	bne.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
			  {//backward
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,0); //dir_motor1 setting
 80016b8:	2200      	movs	r2, #0
 80016ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016be:	4824      	ldr	r0, [pc, #144]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 80016c0:	f003 faca 	bl	8004c58 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,0); //dir_motor2 setting
 80016c4:	2200      	movs	r2, #0
 80016c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ca:	4821      	ldr	r0, [pc, #132]	@ (8001750 <HAL_UART_RxCpltCallback+0x3e0>)
 80016cc:	f003 fac4 	bl	8004c58 <HAL_GPIO_WritePin>
 80016d0:	e00f      	b.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
			  }
		  }
		  else if(Rx_buf4[0] == 0xbb)
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <HAL_UART_RxCpltCallback+0x3d4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2bbb      	cmp	r3, #187	@ 0xbb
 80016d8:	d10b      	bne.n	80016f2 <HAL_UART_RxCpltCallback+0x382>
		  {//OFF , UWB_ON
			  app_flag = 0;
 80016da:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <HAL_UART_RxCpltCallback+0x3e4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
			  app_state = 0;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001758 <HAL_UART_RxCpltCallback+0x3e8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
			  app_PWM_R = 0;
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	801a      	strh	r2, [r3, #0]
			  app_PWM_L = 0;
 80016ec:	4b17      	ldr	r3, [pc, #92]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	801a      	strh	r2, [r3, #0]
		 //uint8_t TX_TTTT[100];
		 //sprintf((char*)TX_TTTT, "%f, %f,%.4f\r\n",ENCODER2 , ENCODER1 ,yaw_angle);
		 //sprintf((char*)TX_TTTT, "%f, %f\r\n",ENCODER2 , ENCODER1);
		 //HAL_UART_Transmit(&huart3, TX_TTTT, strlen((const char *)TX_TTTT), 100);

		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,app_PWM_L);
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_UART_RxCpltCallback+0x3ec>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	63da      	str	r2, [r3, #60]	@ 0x3c
		  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,app_PWM_R);
 80016fc:	4b12      	ldr	r3, [pc, #72]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 80016fe:	881a      	ldrh	r2, [r3, #0]
 8001700:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <HAL_UART_RxCpltCallback+0x3f0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	639a      	str	r2, [r3, #56]	@ 0x38

		  sprintf((char*)msg_app, "%d\t %d\t %d\t \r\n", app_PWM_R, app_PWM_L , app_flag);
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_UART_RxCpltCallback+0x3d8>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_UART_RxCpltCallback+0x3dc>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4b10      	ldr	r3, [pc, #64]	@ (8001754 <HAL_UART_RxCpltCallback+0x3e4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	460b      	mov	r3, r1
 800171a:	4912      	ldr	r1, [pc, #72]	@ (8001764 <HAL_UART_RxCpltCallback+0x3f4>)
 800171c:	4812      	ldr	r0, [pc, #72]	@ (8001768 <HAL_UART_RxCpltCallback+0x3f8>)
 800171e:	f007 f891 	bl	8008844 <siprintf>
		  HAL_UART_Transmit_IT(&huart3, msg_app, sizeof(msg_app));
 8001722:	2264      	movs	r2, #100	@ 0x64
 8001724:	4910      	ldr	r1, [pc, #64]	@ (8001768 <HAL_UART_RxCpltCallback+0x3f8>)
 8001726:	4811      	ldr	r0, [pc, #68]	@ (800176c <HAL_UART_RxCpltCallback+0x3fc>)
 8001728:	f005 f81b 	bl	8006762 <HAL_UART_Transmit_IT>
		  receive_flag4 = 0;
 800172c:	4b10      	ldr	r3, [pc, #64]	@ (8001770 <HAL_UART_RxCpltCallback+0x400>)
 800172e:	2200      	movs	r2, #0
 8001730:	701a      	strb	r2, [r3, #0]
	  }

	   HAL_UART_Receive_DMA(&huart4,&rx_dma_data4, 1);
 8001732:	2201      	movs	r2, #1
 8001734:	490f      	ldr	r1, [pc, #60]	@ (8001774 <HAL_UART_RxCpltCallback+0x404>)
 8001736:	4810      	ldr	r0, [pc, #64]	@ (8001778 <HAL_UART_RxCpltCallback+0x408>)
 8001738:	f005 f849 	bl	80067ce <HAL_UART_Receive_DMA>
   }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000894 	.word	0x20000894
 8001748:	200008fc 	.word	0x200008fc
 800174c:	200008fe 	.word	0x200008fe
 8001750:	40020c00 	.word	0x40020c00
 8001754:	200008f9 	.word	0x200008f9
 8001758:	200008fa 	.word	0x200008fa
 800175c:	2000039c 	.word	0x2000039c
 8001760:	20000474 	.word	0x20000474
 8001764:	0800c0e0 	.word	0x0800c0e0
 8001768:	200007f4 	.word	0x200007f4
 800176c:	20000594 	.word	0x20000594
 8001770:	200008f8 	.word	0x200008f8
 8001774:	20000900 	.word	0x20000900
 8001778:	200004bc 	.word	0x200004bc

0800177c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001780:	f001 fc7a 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001784:	f000 f8b2 	bl	80018ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001788:	f000 fcb6 	bl	80020f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800178c:	f000 fc66 	bl	800205c <MX_DMA_Init>
  MX_TIM3_Init();
 8001790:	f000 fa5c 	bl	8001c4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001794:	f000 faae 	bl	8001cf4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001798:	f000 fa00 	bl	8001b9c <MX_TIM1_Init>
  MX_ADC1_Init();
 800179c:	f000 f924 	bl	80019e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 80017a0:	f000 f974 	bl	8001a8c <MX_ADC2_Init>
  MX_UART5_Init();
 80017a4:	f000 fbdc 	bl	8001f60 <MX_UART5_Init>
  MX_TIM7_Init();
 80017a8:	f000 fb34 	bl	8001e14 <MX_TIM7_Init>
  MX_TIM12_Init();
 80017ac:	f000 fb68 	bl	8001e80 <MX_TIM12_Init>
  MX_UART4_Init();
 80017b0:	f000 fbac 	bl	8001f0c <MX_UART4_Init>
  MX_CAN1_Init();
 80017b4:	f000 f9bc 	bl	8001b30 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 80017b8:	f000 fc26 	bl	8002008 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80017bc:	f000 faf4 	bl	8001da8 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80017c0:	f000 fbf8 	bl	8001fb4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80017c4:	f000 f8fc 	bl	80019c0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET); //mc_en set
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ce:	4839      	ldr	r0, [pc, #228]	@ (80018b4 <main+0x138>)
 80017d0:	f003 fa42 	bl	8004c58 <HAL_GPIO_WritePin>

  //MOTOR1 Setting
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET); // nsleep set
 80017d4:	2201      	movs	r2, #1
 80017d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017da:	4837      	ldr	r0, [pc, #220]	@ (80018b8 <main+0x13c>)
 80017dc:	f003 fa3c 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET); // brk control set
 80017e0:	2201      	movs	r2, #1
 80017e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017e6:	4835      	ldr	r0, [pc, #212]	@ (80018bc <main+0x140>)
 80017e8:	f003 fa36 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80017ec:	2108      	movs	r1, #8
 80017ee:	4834      	ldr	r0, [pc, #208]	@ (80018c0 <main+0x144>)
 80017f0:	f003 fff4 	bl	80057dc <HAL_TIM_PWM_Start>
  //__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,200);

  //MOTOR2 Setting
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET); // nsleep set
 80017f4:	2201      	movs	r2, #1
 80017f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017fa:	4832      	ldr	r0, [pc, #200]	@ (80018c4 <main+0x148>)
 80017fc:	f003 fa2c 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_RESET); // dir set
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001806:	482c      	ldr	r0, [pc, #176]	@ (80018b8 <main+0x13c>)
 8001808:	f003 fa26 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); // brk control set
 800180c:	2201      	movs	r2, #1
 800180e:	2180      	movs	r1, #128	@ 0x80
 8001810:	482a      	ldr	r0, [pc, #168]	@ (80018bc <main+0x140>)
 8001812:	f003 fa21 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8001816:	2104      	movs	r1, #4
 8001818:	482b      	ldr	r0, [pc, #172]	@ (80018c8 <main+0x14c>)
 800181a:	f003 ffdf 	bl	80057dc <HAL_TIM_PWM_Start>
  //__HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,200);

  //UART Setting
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 800181e:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <main+0x150>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <main+0x150>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart5,UART_IT_RXNE);
 800182e:	4b28      	ldr	r3, [pc, #160]	@ (80018d0 <main+0x154>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <main+0x154>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f042 0220 	orr.w	r2, r2, #32
 800183c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 800183e:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <main+0x158>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <main+0x158>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f042 0220 	orr.w	r2, r2, #32
 800184c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <main+0x158>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <main+0x158>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800185c:	60da      	str	r2, [r3, #12]

  //-----------------
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Start encoder mode
 800185e:	2104      	movs	r1, #4
 8001860:	481d      	ldr	r0, [pc, #116]	@ (80018d8 <main+0x15c>)
 8001862:	f004 f929 	bl	8005ab8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); // Start encoder mode
 8001866:	2104      	movs	r1, #4
 8001868:	481c      	ldr	r0, [pc, #112]	@ (80018dc <main+0x160>)
 800186a:	f004 f925 	bl	8005ab8 <HAL_TIM_Encoder_Start>

  //HAL_Delay(2000);
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,0); // test motor1
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <main+0x144>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,0); // test motor2
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <main+0x14c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	639a      	str	r2, [r3, #56]	@ 0x38
  //MOTOR1, MOTOR2 20ms timer start
  HAL_TIM_Base_Start_IT(&htim7); // Timer start
 800187e:	4818      	ldr	r0, [pc, #96]	@ (80018e0 <main+0x164>)
 8001880:	f003 feec 	bl	800565c <HAL_TIM_Base_Start_IT>
  //HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_14);

  HAL_UART_Receive_DMA(&huart5, rx_dma_data5, 12); //uwb
 8001884:	220c      	movs	r2, #12
 8001886:	4917      	ldr	r1, [pc, #92]	@ (80018e4 <main+0x168>)
 8001888:	4811      	ldr	r0, [pc, #68]	@ (80018d0 <main+0x154>)
 800188a:	f004 ffa0 	bl	80067ce <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart4,&rx_dma_data4, 1); //app
 800188e:	2201      	movs	r2, #1
 8001890:	4915      	ldr	r1, [pc, #84]	@ (80018e8 <main+0x16c>)
 8001892:	480e      	ldr	r0, [pc, #56]	@ (80018cc <main+0x150>)
 8001894:	f004 ff9b 	bl	80067ce <HAL_UART_Receive_DMA>

  //__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,320); // test motor1
  //__HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,340); // test motor2
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,1); //dir_motor1 setting
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <main+0x13c>)
 80018a0:	f003 f9da 	bl	8004c58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,1); //dir_motor2 setting
 80018a4:	2201      	movs	r2, #1
 80018a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018aa:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <main+0x13c>)
 80018ac:	f003 f9d4 	bl	8004c58 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <main+0x134>
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40020c00 	.word	0x40020c00
 80018bc:	40020800 	.word	0x40020800
 80018c0:	2000039c 	.word	0x2000039c
 80018c4:	40020400 	.word	0x40020400
 80018c8:	20000474 	.word	0x20000474
 80018cc:	200004bc 	.word	0x200004bc
 80018d0:	20000504 	.word	0x20000504
 80018d4:	20000594 	.word	0x20000594
 80018d8:	20000354 	.word	0x20000354
 80018dc:	2000030c 	.word	0x2000030c
 80018e0:	2000042c 	.word	0x2000042c
 80018e4:	20000874 	.word	0x20000874
 80018e8:	20000900 	.word	0x20000900

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b094      	sub	sp, #80	@ 0x50
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2230      	movs	r2, #48	@ 0x30
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 f805 	bl	800890a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	4a27      	ldr	r2, [pc, #156]	@ (80019b8 <SystemClock_Config+0xcc>)
 800191a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <SystemClock_Config+0xcc>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192c:	2300      	movs	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <SystemClock_Config+0xd0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <SystemClock_Config+0xd0>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <SystemClock_Config+0xd0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001948:	2302      	movs	r3, #2
 800194a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800194c:	2301      	movs	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001950:	2310      	movs	r3, #16
 8001952:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001954:	2302      	movs	r3, #2
 8001956:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001958:	2300      	movs	r3, #0
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800195c:	2310      	movs	r3, #16
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001960:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001964:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001966:	2304      	movs	r3, #4
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800196a:	2307      	movs	r3, #7
 800196c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	4618      	mov	r0, r3
 8001974:	f003 f98a 	bl	8004c8c <HAL_RCC_OscConfig>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800197e:	f000 fcc5 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001982:	230f      	movs	r3, #15
 8001984:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001986:	2302      	movs	r3, #2
 8001988:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001992:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2102      	movs	r1, #2
 800199e:	4618      	mov	r0, r3
 80019a0:	f003 fbec 	bl	800517c <HAL_RCC_ClockConfig>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019aa:	f000 fcaf 	bl	800230c <Error_Handler>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3750      	adds	r7, #80	@ 0x50
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000

080019c0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* UART4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	2034      	movs	r0, #52	@ 0x34
 80019ca:	f002 fb70 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019ce:	2034      	movs	r0, #52	@ 0x34
 80019d0:	f002 fb89 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2035      	movs	r0, #53	@ 0x35
 80019da:	f002 fb68 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 80019de:	2035      	movs	r0, #53	@ 0x35
 80019e0:	f002 fb81 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019ee:	463b      	mov	r3, r7
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <MX_ADC1_Init+0x98>)
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <MX_ADC1_Init+0x9c>)
 80019fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a22:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a28:	4b15      	ldr	r3, [pc, #84]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <MX_ADC1_Init+0xa0>)
 8001a2c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2e:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001a34:	4b12      	ldr	r3, [pc, #72]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a48:	480d      	ldr	r0, [pc, #52]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a4a:	f001 fb87 	bl	800315c <HAL_ADC_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a54:	f000 fc5a 	bl	800230c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_ADC1_Init+0x98>)
 8001a6a:	f001 fce9 	bl	8003440 <HAL_ADC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a74:	f000 fc4a 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200001f4 	.word	0x200001f4
 8001a84:	40012000 	.word	0x40012000
 8001a88:	0f000001 	.word	0x0f000001

08001a8c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a92:	463b      	mov	r3, r7
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001aa0:	4a21      	ldr	r2, [pc, #132]	@ (8001b28 <MX_ADC2_Init+0x9c>)
 8001aa2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001aa6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001aaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001aac:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001acc:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ace:	4a17      	ldr	r2, [pc, #92]	@ (8001b2c <MX_ADC2_Init+0xa0>)
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001ade:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001aee:	f001 fb35 	bl	800315c <HAL_ADC_Init>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001af8:	f000 fc08 	bl	800230c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001afc:	2305      	movs	r3, #5
 8001afe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b00:	2301      	movs	r3, #1
 8001b02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4805      	ldr	r0, [pc, #20]	@ (8001b24 <MX_ADC2_Init+0x98>)
 8001b0e:	f001 fc97 	bl	8003440 <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001b18:	f000 fbf8 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	3710      	adds	r7, #16
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	2000023c 	.word	0x2000023c
 8001b28:	40012100 	.word	0x40012100
 8001b2c:	0f000001 	.word	0x0f000001

08001b30 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001b34:	4b17      	ldr	r3, [pc, #92]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b36:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <MX_CAN1_Init+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001b40:	4b14      	ldr	r3, [pc, #80]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b4e:	f44f 2250 	mov.w	r2, #851968	@ 0xd0000
 8001b52:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b56:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8001b5a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001b7a:	4b06      	ldr	r3, [pc, #24]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <MX_CAN1_Init+0x64>)
 8001b82:	f001 fe85 	bl	8003890 <HAL_CAN_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001b8c:	f000 fbbe 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200002e4 	.word	0x200002e4
 8001b98:	40006400 	.word	0x40006400

08001b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08c      	sub	sp, #48	@ 0x30
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ba2:	f107 030c 	add.w	r3, r7, #12
 8001ba6:	2224      	movs	r2, #36	@ 0x24
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fead 	bl	800890a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bba:	4a23      	ldr	r2, [pc, #140]	@ (8001c48 <MX_TIM1_Init+0xac>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bbe:	4b21      	ldr	r3, [pc, #132]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001be4:	2303      	movs	r3, #3
 8001be6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bec:	2301      	movs	r3, #1
 8001bee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480d      	ldr	r0, [pc, #52]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001c10:	f003 feac 	bl	800596c <HAL_TIM_Encoder_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c1a:	f000 fb77 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4806      	ldr	r0, [pc, #24]	@ (8001c44 <MX_TIM1_Init+0xa8>)
 8001c2c:	f004 fc2e 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c36:	f000 fb69 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	3730      	adds	r7, #48	@ 0x30
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000030c 	.word	0x2000030c
 8001c48:	40010000 	.word	0x40010000

08001c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	@ 0x30
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	2224      	movs	r2, #36	@ 0x24
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f006 fe55 	bl	800890a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c68:	4b20      	ldr	r3, [pc, #128]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c6a:	4a21      	ldr	r2, [pc, #132]	@ (8001cf0 <MX_TIM3_Init+0xa4>)
 8001c6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b18      	ldr	r3, [pc, #96]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001caa:	2300      	movs	r3, #0
 8001cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb2:	f107 030c 	add.w	r3, r7, #12
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001cba:	f003 fe57 	bl	800596c <HAL_TIM_Encoder_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f000 fb22 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4805      	ldr	r0, [pc, #20]	@ (8001cec <MX_TIM3_Init+0xa0>)
 8001cd6:	f004 fbd9 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ce0:	f000 fb14 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	3730      	adds	r7, #48	@ 0x30
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000354 	.word	0x20000354
 8001cf0:	40000400 	.word	0x40000400

08001cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	@ 0x28
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfa:	f107 0320 	add.w	r3, r7, #32
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	605a      	str	r2, [r3, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	60da      	str	r2, [r3, #12]
 8001d10:	611a      	str	r2, [r3, #16]
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d16:	4b22      	ldr	r3, [pc, #136]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d18:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <MX_TIM4_Init+0xb0>)
 8001d1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d1c:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3499;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d2a:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001d2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d30:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d3c:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d3e:	f003 fcfd 	bl	800573c <HAL_TIM_PWM_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001d48:	f000 fae0 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d54:	f107 0320 	add.w	r3, r7, #32
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4811      	ldr	r0, [pc, #68]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d5c:	f004 fb96 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001d66:	f000 fad1 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d6a:	2360      	movs	r3, #96	@ 0x60
 8001d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d82:	f004 f817 	bl	8005db4 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001d8c:	f000 fabe 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <MX_TIM4_Init+0xac>)
 8001d92:	f000 fd25 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001d96:	bf00      	nop
 8001d98:	3728      	adds	r7, #40	@ 0x28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	2000039c 	.word	0x2000039c
 8001da4:	40000800 	.word	0x40000800

08001da8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dae:	463b      	mov	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001db6:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001db8:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <MX_TIM6_Init+0x68>)
 8001dba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001dbe:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001dc2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001dca:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001dcc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001dd0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001dda:	f003 fbef 	bl	80055bc <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001de4:	f000 fa92 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001df0:	463b      	mov	r3, r7
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM6_Init+0x64>)
 8001df6:	f004 fb49 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e00:	f000 fa84 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200003e4 	.word	0x200003e4
 8001e10:	40001000 	.word	0x40001000

08001e14 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e24:	4a15      	ldr	r2, [pc, #84]	@ (8001e7c <MX_TIM7_Init+0x68>)
 8001e26:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 840-1;
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e2a:	f240 3247 	movw	r2, #839	@ 0x347
 8001e2e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e38:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001e3c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e44:	480c      	ldr	r0, [pc, #48]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e46:	f003 fbb9 	bl	80055bc <HAL_TIM_Base_Init>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001e50:	f000 fa5c 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4805      	ldr	r0, [pc, #20]	@ (8001e78 <MX_TIM7_Init+0x64>)
 8001e62:	f004 fb13 	bl	800648c <HAL_TIMEx_MasterConfigSynchronization>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001e6c:	f000 fa4e 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000042c 	.word	0x2000042c
 8001e7c:	40001400 	.word	0x40001400

08001e80 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001e98:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f08 <MX_TIM12_Init+0x88>)
 8001e9c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea4:	4b17      	ldr	r3, [pc, #92]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3499;
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001eac:	f640 52ab 	movw	r2, #3499	@ 0xdab
 8001eb0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001ebe:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001ec0:	f003 fc3c 	bl	800573c <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001eca:	f000 fa1f 	bl	800230c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	@ 0x60
 8001ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4807      	ldr	r0, [pc, #28]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001ee6:	f003 ff65 	bl	8005db4 <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001ef0:	f000 fa0c 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <MX_TIM12_Init+0x84>)
 8001ef6:	f000 fc73 	bl	80027e0 <HAL_TIM_MspPostInit>

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000474 	.word	0x20000474
 8001f08:	40001800 	.word	0x40001800

08001f0c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <MX_UART4_Init+0x50>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_UART4_Init+0x4c>)
 8001f44:	f004 fb32 	bl	80065ac <HAL_UART_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001f4e:	f000 f9dd 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200004bc 	.word	0x200004bc
 8001f5c:	40004c00 	.word	0x40004c00

08001f60 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f66:	4a12      	ldr	r2, [pc, #72]	@ (8001fb0 <MX_UART5_Init+0x50>)
 8001f68:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f70:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f86:	220c      	movs	r2, #12
 8001f88:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_UART5_Init+0x4c>)
 8001f98:	f004 fb08 	bl	80065ac <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001fa2:	f000 f9b3 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000504 	.word	0x20000504
 8001fb0:	40005000 	.word	0x40005000

08001fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fba:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <MX_USART1_UART_Init+0x50>)
 8001fbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fbe:	4b10      	ldr	r3, [pc, #64]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fda:	220c      	movs	r2, #12
 8001fdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fde:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <MX_USART1_UART_Init+0x4c>)
 8001fec:	f004 fade 	bl	80065ac <HAL_UART_Init>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ff6:	f000 f989 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	2000054c 	.word	0x2000054c
 8002004:	40011000 	.word	0x40011000

08002008 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800200c:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <MX_USART3_UART_Init+0x50>)
 8002010:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002012:	4b10      	ldr	r3, [pc, #64]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002018:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800202e:	220c      	movs	r2, #12
 8002030:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002034:	2200      	movs	r2, #0
 8002036:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002038:	4b06      	ldr	r3, [pc, #24]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 800203a:	2200      	movs	r2, #0
 800203c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800203e:	4805      	ldr	r0, [pc, #20]	@ (8002054 <MX_USART3_UART_Init+0x4c>)
 8002040:	f004 fab4 	bl	80065ac <HAL_UART_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800204a:	f000 f95f 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000594 	.word	0x20000594
 8002058:	40004800 	.word	0x40004800

0800205c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b23      	ldr	r3, [pc, #140]	@ (80020f4 <MX_DMA_Init+0x98>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a22      	ldr	r2, [pc, #136]	@ (80020f4 <MX_DMA_Init+0x98>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <MX_DMA_Init+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <MX_DMA_Init+0x98>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a1b      	ldr	r2, [pc, #108]	@ (80020f4 <MX_DMA_Init+0x98>)
 8002088:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b19      	ldr	r3, [pc, #100]	@ (80020f4 <MX_DMA_Init+0x98>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	200b      	movs	r0, #11
 80020a0:	f002 f805 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80020a4:	200b      	movs	r0, #11
 80020a6:	f002 f81e 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	200c      	movs	r0, #12
 80020b0:	f001 fffd 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80020b4:	200c      	movs	r0, #12
 80020b6:	f002 f816 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	200d      	movs	r0, #13
 80020c0:	f001 fff5 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80020c4:	200d      	movs	r0, #13
 80020c6:	f002 f80e 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	203a      	movs	r0, #58	@ 0x3a
 80020d0:	f001 ffed 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80020d4:	203a      	movs	r0, #58	@ 0x3a
 80020d6:	f002 f806 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	203b      	movs	r0, #59	@ 0x3b
 80020e0:	f001 ffe5 	bl	80040ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80020e4:	203b      	movs	r0, #59	@ 0x3b
 80020e6:	f001 fffe 	bl	80040e6 <HAL_NVIC_EnableIRQ>

}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800

080020f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08c      	sub	sp, #48	@ 0x30
 80020fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	4b78      	ldr	r3, [pc, #480]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a77      	ldr	r2, [pc, #476]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b75      	ldr	r3, [pc, #468]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	4b71      	ldr	r3, [pc, #452]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a70      	ldr	r2, [pc, #448]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002134:	f043 0304 	orr.w	r3, r3, #4
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b6e      	ldr	r3, [pc, #440]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0304 	and.w	r3, r3, #4
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b6a      	ldr	r3, [pc, #424]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a69      	ldr	r2, [pc, #420]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b67      	ldr	r3, [pc, #412]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b63      	ldr	r3, [pc, #396]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	4a62      	ldr	r2, [pc, #392]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6313      	str	r3, [r2, #48]	@ 0x30
 8002172:	4b60      	ldr	r3, [pc, #384]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b5c      	ldr	r3, [pc, #368]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a5b      	ldr	r2, [pc, #364]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002188:	f043 0302 	orr.w	r3, r3, #2
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b59      	ldr	r3, [pc, #356]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a2:	4a54      	ldr	r2, [pc, #336]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021aa:	4b52      	ldr	r3, [pc, #328]	@ (80022f4 <MX_GPIO_Init+0x1fc>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin, GPIO_PIN_SET);
 80021b6:	2201      	movs	r2, #1
 80021b8:	f24c 1180 	movw	r1, #49536	@ 0xc180
 80021bc:	484e      	ldr	r0, [pc, #312]	@ (80022f8 <MX_GPIO_Init+0x200>)
 80021be:	f002 fd4b 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M2_GPIO_Port, nSLEEP_M2_Pin, GPIO_PIN_RESET);
 80021c2:	2200      	movs	r2, #0
 80021c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80021c8:	484c      	ldr	r0, [pc, #304]	@ (80022fc <MX_GPIO_Init+0x204>)
 80021ca:	f002 fd45 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIR_DC_M2_Pin|DIR_DC_M1_Pin, GPIO_PIN_SET);
 80021ce:	2201      	movs	r2, #1
 80021d0:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80021d4:	484a      	ldr	r0, [pc, #296]	@ (8002300 <MX_GPIO_Init+0x208>)
 80021d6:	f002 fd3f 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M1_GPIO_Port, nSLEEP_M1_Pin, GPIO_PIN_RESET);
 80021da:	2200      	movs	r2, #0
 80021dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021e0:	4847      	ldr	r0, [pc, #284]	@ (8002300 <MX_GPIO_Init+0x208>)
 80021e2:	f002 fd39 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_EN_GPIO_Port, MC_EN_Pin, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80021ec:	4845      	ldr	r0, [pc, #276]	@ (8002304 <MX_GPIO_Init+0x20c>)
 80021ee:	f002 fd33 	bl	8004c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CHK_MC_EN_Pin CHK_MC_DIS_Pin */
  GPIO_InitStruct.Pin = CHK_MC_EN_Pin|CHK_MC_DIS_Pin;
 80021f2:	230c      	movs	r3, #12
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f6:	2300      	movs	r3, #0
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021fa:	2301      	movs	r3, #1
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021fe:	f107 031c 	add.w	r3, r7, #28
 8002202:	4619      	mov	r1, r3
 8002204:	4840      	ldr	r0, [pc, #256]	@ (8002308 <MX_GPIO_Init+0x210>)
 8002206:	f002 fb8b 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin BRK_CONTROL_2_Pin BRK_CONTORL_1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin;
 800220a:	f24c 1380 	movw	r3, #49536	@ 0xc180
 800220e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002210:	2301      	movs	r3, #1
 8002212:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4835      	ldr	r0, [pc, #212]	@ (80022f8 <MX_GPIO_Init+0x200>)
 8002224:	f002 fb7c 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 8002228:	2306      	movs	r3, #6
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002230:	2301      	movs	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4832      	ldr	r0, [pc, #200]	@ (8002304 <MX_GPIO_Init+0x20c>)
 800223c:	f002 fb70 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M2_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M2_Pin;
 8002240:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nSLEEP_M2_GPIO_Port, &GPIO_InitStruct);
 8002252:	f107 031c 	add.w	r3, r7, #28
 8002256:	4619      	mov	r1, r3
 8002258:	4828      	ldr	r0, [pc, #160]	@ (80022fc <MX_GPIO_Init+0x204>)
 800225a:	f002 fb61 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_DC_M2_Pin DIR_DC_M1_Pin */
  GPIO_InitStruct.Pin = DIR_DC_M2_Pin|DIR_DC_M1_Pin;
 800225e:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002268:	2301      	movs	r3, #1
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4822      	ldr	r0, [pc, #136]	@ (8002300 <MX_GPIO_Init+0x208>)
 8002278:	f002 fb52 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULTn_M2_Pin SNSOUT_M2_Pin FAULTn_M1_Pin */
  GPIO_InitStruct.Pin = FAULTn_M2_Pin|SNSOUT_M2_Pin|FAULTn_M1_Pin;
 800227c:	f44f 53d0 	mov.w	r3, #6656	@ 0x1a00
 8002280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002282:	2300      	movs	r3, #0
 8002284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	481b      	ldr	r0, [pc, #108]	@ (8002300 <MX_GPIO_Init+0x208>)
 8002292:	f002 fb45 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M1_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M1_Pin;
 8002296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800229a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(nSLEEP_M1_GPIO_Port, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4814      	ldr	r0, [pc, #80]	@ (8002300 <MX_GPIO_Init+0x208>)
 80022b0:	f002 fb36 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSOUT__M1_Pin */
  GPIO_InitStruct.Pin = SNSOUT__M1_Pin;
 80022b4:	2340      	movs	r3, #64	@ 0x40
 80022b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(SNSOUT__M1_GPIO_Port, &GPIO_InitStruct);
 80022c0:	f107 031c 	add.w	r3, r7, #28
 80022c4:	4619      	mov	r1, r3
 80022c6:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <MX_GPIO_Init+0x200>)
 80022c8:	f002 fb2a 	bl	8004920 <HAL_GPIO_Init>

  /*Configure GPIO pin : MC_EN_Pin */
  GPIO_InitStruct.Pin = MC_EN_Pin;
 80022cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d2:	2301      	movs	r3, #1
 80022d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022d6:	2301      	movs	r3, #1
 80022d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(MC_EN_GPIO_Port, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	4807      	ldr	r0, [pc, #28]	@ (8002304 <MX_GPIO_Init+0x20c>)
 80022e6:	f002 fb1b 	bl	8004920 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022ea:	bf00      	nop
 80022ec:	3730      	adds	r7, #48	@ 0x30
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	40020800 	.word	0x40020800
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40020000 	.word	0x40020000
 8002308:	40021000 	.word	0x40021000

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_MspInit+0x4c>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	4a0f      	ldr	r2, [pc, #60]	@ (8002368 <HAL_MspInit+0x4c>)
 800232c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002330:	6453      	str	r3, [r2, #68]	@ 0x44
 8002332:	4b0d      	ldr	r3, [pc, #52]	@ (8002368 <HAL_MspInit+0x4c>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_MspInit+0x4c>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	4a08      	ldr	r2, [pc, #32]	@ (8002368 <HAL_MspInit+0x4c>)
 8002348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800234c:	6413      	str	r3, [r2, #64]	@ 0x40
 800234e:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_MspInit+0x4c>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800235a:	2007      	movs	r0, #7
 800235c:	f001 fe9c 	bl	8004098 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800

0800236c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	@ 0x30
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a4e      	ldr	r2, [pc, #312]	@ (80024c4 <HAL_ADC_MspInit+0x158>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d130      	bne.n	80023f0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	4b4d      	ldr	r3, [pc, #308]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a4c      	ldr	r2, [pc, #304]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	4a45      	ldr	r2, [pc, #276]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c6:	2310      	movs	r3, #16
 80023c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	2303      	movs	r3, #3
 80023cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 031c 	add.w	r3, r7, #28
 80023d6:	4619      	mov	r1, r3
 80023d8:	483c      	ldr	r0, [pc, #240]	@ (80024cc <HAL_ADC_MspInit+0x160>)
 80023da:	f002 faa1 	bl	8004920 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	2012      	movs	r0, #18
 80023e4:	f001 fe63 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80023e8:	2012      	movs	r0, #18
 80023ea:	f001 fe7c 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023ee:	e064      	b.n	80024ba <HAL_ADC_MspInit+0x14e>
  else if(hadc->Instance==ADC2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a36      	ldr	r2, [pc, #216]	@ (80024d0 <HAL_ADC_MspInit+0x164>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d15f      	bne.n	80024ba <HAL_ADC_MspInit+0x14e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a31      	ldr	r2, [pc, #196]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002404:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_ADC_MspInit+0x15c>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|A2_5_M_SO_M2_Pin;
 8002432:	2330      	movs	r3, #48	@ 0x30
 8002434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002436:	2303      	movs	r3, #3
 8002438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	4821      	ldr	r0, [pc, #132]	@ (80024cc <HAL_ADC_MspInit+0x160>)
 8002446:	f002 fa6b 	bl	8004920 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream3;
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 800244c:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_ADC_MspInit+0x16c>)
 800244e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002450:	4b20      	ldr	r3, [pc, #128]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002452:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002456:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002458:	4b1e      	ldr	r3, [pc, #120]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800245e:	4b1d      	ldr	r3, [pc, #116]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002460:	2200      	movs	r2, #0
 8002462:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800246a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800246c:	4b19      	ldr	r3, [pc, #100]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 800246e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002472:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002474:	4b17      	ldr	r3, [pc, #92]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002476:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800247a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800247c:	4b15      	ldr	r3, [pc, #84]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 800247e:	2200      	movs	r2, #0
 8002480:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002482:	4b14      	ldr	r3, [pc, #80]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002484:	2200      	movs	r2, #0
 8002486:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002488:	4b12      	ldr	r3, [pc, #72]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 800248a:	2200      	movs	r2, #0
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800248e:	4811      	ldr	r0, [pc, #68]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 8002490:	f001 fe44 	bl	800411c <HAL_DMA_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_ADC_MspInit+0x132>
      Error_Handler();
 800249a:	f7ff ff37 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a0c      	ldr	r2, [pc, #48]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 80024a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80024a4:	4a0b      	ldr	r2, [pc, #44]	@ (80024d4 <HAL_ADC_MspInit+0x168>)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80024aa:	2200      	movs	r2, #0
 80024ac:	2100      	movs	r1, #0
 80024ae:	2012      	movs	r0, #18
 80024b0:	f001 fdfd 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024b4:	2012      	movs	r0, #18
 80024b6:	f001 fe16 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3730      	adds	r7, #48	@ 0x30
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40012000 	.word	0x40012000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40012100 	.word	0x40012100
 80024d4:	20000284 	.word	0x20000284
 80024d8:	40026458 	.word	0x40026458

080024dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08a      	sub	sp, #40	@ 0x28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a29      	ldr	r2, [pc, #164]	@ (80025a0 <HAL_CAN_MspInit+0xc4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d14c      	bne.n	8002598 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	4a27      	ldr	r2, [pc, #156]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 8002508:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800250c:	6413      	str	r3, [r2, #64]	@ 0x40
 800250e:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b21      	ldr	r3, [pc, #132]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	4a20      	ldr	r2, [pc, #128]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	@ 0x30
 800252a:	4b1e      	ldr	r3, [pc, #120]	@ (80025a4 <HAL_CAN_MspInit+0xc8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002536:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253c:	2302      	movs	r3, #2
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002548:	2309      	movs	r3, #9
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4619      	mov	r1, r3
 8002552:	4815      	ldr	r0, [pc, #84]	@ (80025a8 <HAL_CAN_MspInit+0xcc>)
 8002554:	f002 f9e4 	bl	8004920 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002558:	2200      	movs	r2, #0
 800255a:	2100      	movs	r1, #0
 800255c:	2013      	movs	r0, #19
 800255e:	f001 fda6 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002562:	2013      	movs	r0, #19
 8002564:	f001 fdbf 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002568:	2200      	movs	r2, #0
 800256a:	2100      	movs	r1, #0
 800256c:	2014      	movs	r0, #20
 800256e:	f001 fd9e 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002572:	2014      	movs	r0, #20
 8002574:	f001 fdb7 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2015      	movs	r0, #21
 800257e:	f001 fd96 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002582:	2015      	movs	r0, #21
 8002584:	f001 fdaf 	bl	80040e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2016      	movs	r0, #22
 800258e:	f001 fd8e 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002592:	2016      	movs	r0, #22
 8002594:	f001 fda7 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40006400 	.word	0x40006400
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020400 	.word	0x40020400

080025ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08c      	sub	sp, #48	@ 0x30
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 031c 	add.w	r3, r7, #28
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3a      	ldr	r2, [pc, #232]	@ (80026b4 <HAL_TIM_Encoder_MspInit+0x108>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d135      	bne.n	800263a <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	4b39      	ldr	r3, [pc, #228]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	4a38      	ldr	r2, [pc, #224]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025de:	4b36      	ldr	r3, [pc, #216]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a31      	ldr	r2, [pc, #196]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b2f      	ldr	r3, [pc, #188]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = T1_1_ENC2_A_Pin|T1_2_ENC2_B_Pin;
 8002606:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800260a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260c:	2302      	movs	r3, #2
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002618:	2301      	movs	r3, #1
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800261c:	f107 031c 	add.w	r3, r7, #28
 8002620:	4619      	mov	r1, r3
 8002622:	4826      	ldr	r0, [pc, #152]	@ (80026bc <HAL_TIM_Encoder_MspInit+0x110>)
 8002624:	f002 f97c 	bl	8004920 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	2019      	movs	r0, #25
 800262e:	f001 fd3e 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002632:	2019      	movs	r0, #25
 8002634:	f001 fd57 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002638:	e038      	b.n	80026ac <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a20      	ldr	r2, [pc, #128]	@ (80026c0 <HAL_TIM_Encoder_MspInit+0x114>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d133      	bne.n	80026ac <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002644:	2300      	movs	r3, #0
 8002646:	613b      	str	r3, [r7, #16]
 8002648:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264c:	4a1a      	ldr	r2, [pc, #104]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	6413      	str	r3, [r2, #64]	@ 0x40
 8002654:	4b18      	ldr	r3, [pc, #96]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	4b14      	ldr	r3, [pc, #80]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T3_1_ENC1_A_Pin|T3_2_ENC1_B_Pin;
 800267c:	23c0      	movs	r3, #192	@ 0xc0
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002688:	2303      	movs	r3, #3
 800268a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800268c:	2302      	movs	r3, #2
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 031c 	add.w	r3, r7, #28
 8002694:	4619      	mov	r1, r3
 8002696:	480b      	ldr	r0, [pc, #44]	@ (80026c4 <HAL_TIM_Encoder_MspInit+0x118>)
 8002698:	f002 f942 	bl	8004920 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269c:	2200      	movs	r2, #0
 800269e:	2100      	movs	r1, #0
 80026a0:	201d      	movs	r0, #29
 80026a2:	f001 fd04 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a6:	201d      	movs	r0, #29
 80026a8:	f001 fd1d 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 80026ac:	bf00      	nop
 80026ae:	3730      	adds	r7, #48	@ 0x30
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40010000 	.word	0x40010000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40020000 	.word	0x40020000

080026c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002748 <HAL_TIM_PWM_MspInit+0x80>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d116      	bne.n	8002708 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b1b      	ldr	r3, [pc, #108]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	4a1a      	ldr	r2, [pc, #104]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 80026e4:	f043 0304 	orr.w	r3, r3, #4
 80026e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ea:	4b18      	ldr	r3, [pc, #96]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026f6:	2200      	movs	r2, #0
 80026f8:	2100      	movs	r1, #0
 80026fa:	201e      	movs	r0, #30
 80026fc:	f001 fcd7 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002700:	201e      	movs	r0, #30
 8002702:	f001 fcf0 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002706:	e01a      	b.n	800273e <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM12)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <HAL_TIM_PWM_MspInit+0x88>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d115      	bne.n	800273e <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 800271c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002720:	6413      	str	r3, [r2, #64]	@ 0x40
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_TIM_PWM_MspInit+0x84>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	202b      	movs	r0, #43	@ 0x2b
 8002734:	f001 fcbb 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002738:	202b      	movs	r0, #43	@ 0x2b
 800273a:	f001 fcd4 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40000800 	.word	0x40000800
 800274c:	40023800 	.word	0x40023800
 8002750:	40001800 	.word	0x40001800

08002754 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1c      	ldr	r2, [pc, #112]	@ (80027d4 <HAL_TIM_Base_MspInit+0x80>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d116      	bne.n	8002794 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	4a1a      	ldr	r2, [pc, #104]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 8002770:	f043 0310 	orr.w	r3, r3, #16
 8002774:	6413      	str	r3, [r2, #64]	@ 0x40
 8002776:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2036      	movs	r0, #54	@ 0x36
 8002788:	f001 fc91 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800278c:	2036      	movs	r0, #54	@ 0x36
 800278e:	f001 fcaa 	bl	80040e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002792:	e01a      	b.n	80027ca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a10      	ldr	r2, [pc, #64]	@ (80027dc <HAL_TIM_Base_MspInit+0x88>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d115      	bne.n	80027ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a0c      	ldr	r2, [pc, #48]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 80027a8:	f043 0320 	orr.w	r3, r3, #32
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_TIM_Base_MspInit+0x84>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 0320 	and.w	r3, r3, #32
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80027ba:	2200      	movs	r2, #0
 80027bc:	2100      	movs	r1, #0
 80027be:	2037      	movs	r0, #55	@ 0x37
 80027c0:	f001 fc75 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027c4:	2037      	movs	r0, #55	@ 0x37
 80027c6:	f001 fc8e 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40001000 	.word	0x40001000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40001400 	.word	0x40001400

080027e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	@ (8002894 <HAL_TIM_MspPostInit+0xb4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d11f      	bne.n	8002842 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 8002808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280a:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	6313      	str	r3, [r2, #48]	@ 0x30
 8002812:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = T4_3_PWM_DC_M1_Pin;
 800281e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002824:	2302      	movs	r3, #2
 8002826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002830:	2302      	movs	r3, #2
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(T4_3_PWM_DC_M1_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	4818      	ldr	r0, [pc, #96]	@ (800289c <HAL_TIM_MspPostInit+0xbc>)
 800283c:	f002 f870 	bl	8004920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002840:	e023      	b.n	800288a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a16      	ldr	r2, [pc, #88]	@ (80028a0 <HAL_TIM_MspPostInit+0xc0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d11e      	bne.n	800288a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4a10      	ldr	r2, [pc, #64]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6313      	str	r3, [r2, #48]	@ 0x30
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <HAL_TIM_MspPostInit+0xb8>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T12_2_PWM_DC_M2_Pin;
 8002868:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800286c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800287a:	2309      	movs	r3, #9
 800287c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(T12_2_PWM_DC_M2_GPIO_Port, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	4807      	ldr	r0, [pc, #28]	@ (80028a4 <HAL_TIM_MspPostInit+0xc4>)
 8002886:	f002 f84b 	bl	8004920 <HAL_GPIO_Init>
}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	@ 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40000800 	.word	0x40000800
 8002898:	40023800 	.word	0x40023800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40001800 	.word	0x40001800
 80028a4:	40020400 	.word	0x40020400

080028a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b090      	sub	sp, #64	@ 0x40
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	605a      	str	r2, [r3, #4]
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6f      	ldr	r2, [pc, #444]	@ (8002a84 <HAL_UART_MspInit+0x1dc>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d15c      	bne.n	8002984 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	4a6d      	ldr	r2, [pc, #436]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028da:	4b6b      	ldr	r3, [pc, #428]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ea:	4b67      	ldr	r3, [pc, #412]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a66      	ldr	r2, [pc, #408]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b64      	ldr	r3, [pc, #400]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002902:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002906:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002908:	2302      	movs	r3, #2
 800290a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002914:	2308      	movs	r3, #8
 8002916:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002918:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800291c:	4619      	mov	r1, r3
 800291e:	485b      	ldr	r0, [pc, #364]	@ (8002a8c <HAL_UART_MspInit+0x1e4>)
 8002920:	f001 fffe 	bl	8004920 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002924:	4b5a      	ldr	r3, [pc, #360]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002926:	4a5b      	ldr	r2, [pc, #364]	@ (8002a94 <HAL_UART_MspInit+0x1ec>)
 8002928:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800292a:	4b59      	ldr	r3, [pc, #356]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800292c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002930:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002932:	4b57      	ldr	r3, [pc, #348]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800293e:	4b54      	ldr	r3, [pc, #336]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002944:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002946:	4b52      	ldr	r3, [pc, #328]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800294c:	4b50      	ldr	r3, [pc, #320]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800294e:	2200      	movs	r2, #0
 8002950:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8002952:	4b4f      	ldr	r3, [pc, #316]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002958:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800295a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800295c:	2200      	movs	r2, #0
 800295e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002960:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002962:	2200      	movs	r2, #0
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002966:	484a      	ldr	r0, [pc, #296]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 8002968:	f001 fbd8 	bl	800411c <HAL_DMA_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002972:	f7ff fccb 	bl	800230c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a45      	ldr	r2, [pc, #276]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800297c:	4a44      	ldr	r2, [pc, #272]	@ (8002a90 <HAL_UART_MspInit+0x1e8>)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002982:	e164      	b.n	8002c4e <HAL_UART_MspInit+0x3a6>
  else if(huart->Instance==UART5)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a43      	ldr	r2, [pc, #268]	@ (8002a98 <HAL_UART_MspInit+0x1f0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	f040 808c 	bne.w	8002aa8 <HAL_UART_MspInit+0x200>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002990:	2300      	movs	r3, #0
 8002992:	623b      	str	r3, [r7, #32]
 8002994:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	4a3b      	ldr	r2, [pc, #236]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 800299a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800299e:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a0:	4b39      	ldr	r3, [pc, #228]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
 80029b0:	4b35      	ldr	r3, [pc, #212]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	4a34      	ldr	r2, [pc, #208]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029b6:	f043 0304 	orr.w	r3, r3, #4
 80029ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80029bc:	4b32      	ldr	r3, [pc, #200]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a88 <HAL_UART_MspInit+0x1e0>)
 80029da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ea:	2302      	movs	r3, #2
 80029ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	2300      	movs	r3, #0
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f2:	2303      	movs	r3, #3
 80029f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029f6:	2308      	movs	r3, #8
 80029f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029fe:	4619      	mov	r1, r3
 8002a00:	4822      	ldr	r0, [pc, #136]	@ (8002a8c <HAL_UART_MspInit+0x1e4>)
 8002a02:	f001 ff8d 	bl	8004920 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a06:	2304      	movs	r3, #4
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a12:	2303      	movs	r3, #3
 8002a14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a16:	2308      	movs	r3, #8
 8002a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a1e:	4619      	mov	r1, r3
 8002a20:	481e      	ldr	r0, [pc, #120]	@ (8002a9c <HAL_UART_MspInit+0x1f4>)
 8002a22:	f001 ff7d 	bl	8004920 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a28:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa4 <HAL_UART_MspInit+0x1fc>)
 8002a2a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a32:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a40:	4b17      	ldr	r3, [pc, #92]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a46:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a48:	4b15      	ldr	r3, [pc, #84]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a4e:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002a54:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002a66:	480e      	ldr	r0, [pc, #56]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a68:	f001 fb58 	bl	800411c <HAL_DMA_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8002a72:	f7ff fc4b 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a09      	ldr	r2, [pc, #36]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a7c:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <HAL_UART_MspInit+0x1f8>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a82:	e0e4      	b.n	8002c4e <HAL_UART_MspInit+0x3a6>
 8002a84:	40004c00 	.word	0x40004c00
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	200005dc 	.word	0x200005dc
 8002a94:	40026040 	.word	0x40026040
 8002a98:	40005000 	.word	0x40005000
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	2000063c 	.word	0x2000063c
 8002aa4:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6a      	ldr	r2, [pc, #424]	@ (8002c58 <HAL_UART_MspInit+0x3b0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d164      	bne.n	8002b7c <HAL_UART_MspInit+0x2d4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
 8002ab6:	4b69      	ldr	r3, [pc, #420]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aba:	4a68      	ldr	r2, [pc, #416]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002abc:	f043 0310 	orr.w	r3, r3, #16
 8002ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ac2:	4b66      	ldr	r3, [pc, #408]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b62      	ldr	r3, [pc, #392]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	4a61      	ldr	r2, [pc, #388]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ade:	4b5f      	ldr	r3, [pc, #380]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002aea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	2303      	movs	r3, #3
 8002afa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002afc:	2307      	movs	r3, #7
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b04:	4619      	mov	r1, r3
 8002b06:	4856      	ldr	r0, [pc, #344]	@ (8002c60 <HAL_UART_MspInit+0x3b8>)
 8002b08:	f001 ff0a 	bl	8004920 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002b0c:	4b55      	ldr	r3, [pc, #340]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b0e:	4a56      	ldr	r2, [pc, #344]	@ (8002c68 <HAL_UART_MspInit+0x3c0>)
 8002b10:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1a:	4b52      	ldr	r3, [pc, #328]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b20:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b26:	4b4f      	ldr	r3, [pc, #316]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b34:	4b4b      	ldr	r3, [pc, #300]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b40:	4b48      	ldr	r3, [pc, #288]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b42:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b48:	4b46      	ldr	r3, [pc, #280]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b4e:	4845      	ldr	r0, [pc, #276]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b50:	f001 fae4 	bl	800411c <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 8002b5a:	f7ff fbd7 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a40      	ldr	r2, [pc, #256]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b64:	4a3f      	ldr	r2, [pc, #252]	@ (8002c64 <HAL_UART_MspInit+0x3bc>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2025      	movs	r0, #37	@ 0x25
 8002b70:	f001 fa9d 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b74:	2025      	movs	r0, #37	@ 0x25
 8002b76:	f001 fab6 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 8002b7a:	e068      	b.n	8002c4e <HAL_UART_MspInit+0x3a6>
  else if(huart->Instance==USART3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a3a      	ldr	r2, [pc, #232]	@ (8002c6c <HAL_UART_MspInit+0x3c4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d163      	bne.n	8002c4e <HAL_UART_MspInit+0x3a6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	4a33      	ldr	r2, [pc, #204]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b96:	4b31      	ldr	r3, [pc, #196]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002baa:	4a2c      	ldr	r2, [pc, #176]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002bac:	f043 0302 	orr.w	r3, r3, #2
 8002bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_UART_MspInit+0x3b4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002bbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4825      	ldr	r0, [pc, #148]	@ (8002c70 <HAL_UART_MspInit+0x3c8>)
 8002bdc:	f001 fea0 	bl	8004920 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002be0:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002be2:	4a25      	ldr	r2, [pc, #148]	@ (8002c78 <HAL_UART_MspInit+0x3d0>)
 8002be4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002be6:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002be8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002bec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bee:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bf4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c00:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c08:	4b1a      	ldr	r3, [pc, #104]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002c0e:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c14:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002c16:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c1c:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002c22:	4814      	ldr	r0, [pc, #80]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c24:	f001 fa7a 	bl	800411c <HAL_DMA_Init>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_UART_MspInit+0x38a>
      Error_Handler();
 8002c2e:	f7ff fb6d 	bl	800230c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a0f      	ldr	r2, [pc, #60]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c36:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002c38:	4a0e      	ldr	r2, [pc, #56]	@ (8002c74 <HAL_UART_MspInit+0x3cc>)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2027      	movs	r0, #39	@ 0x27
 8002c44:	f001 fa33 	bl	80040ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c48:	2027      	movs	r0, #39	@ 0x27
 8002c4a:	f001 fa4c 	bl	80040e6 <HAL_NVIC_EnableIRQ>
}
 8002c4e:	bf00      	nop
 8002c50:	3740      	adds	r7, #64	@ 0x40
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000
 8002c64:	2000069c 	.word	0x2000069c
 8002c68:	40026440 	.word	0x40026440
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	40020400 	.word	0x40020400
 8002c74:	200006fc 	.word	0x200006fc
 8002c78:	40026028 	.word	0x40026028

08002c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c80:	bf00      	nop
 8002c82:	e7fd      	b.n	8002c80 <NMI_Handler+0x4>

08002c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <HardFault_Handler+0x4>

08002c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c90:	bf00      	nop
 8002c92:	e7fd      	b.n	8002c90 <MemManage_Handler+0x4>

08002c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <BusFault_Handler+0x4>

08002c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <UsageFault_Handler+0x4>

08002ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cd2:	f000 fa23 	bl	800311c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <DMA1_Stream0_IRQHandler+0x10>)
 8002ce2:	f001 fbb3 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000063c 	.word	0x2000063c

08002cf0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <DMA1_Stream1_IRQHandler+0x10>)
 8002cf6:	f001 fba9 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	200006fc 	.word	0x200006fc

08002d04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <DMA1_Stream2_IRQHandler+0x10>)
 8002d0a:	f001 fb9f 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	200005dc 	.word	0x200005dc

08002d18 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d1c:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <ADC_IRQHandler+0x14>)
 8002d1e:	f000 fa60 	bl	80031e2 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8002d22:	4803      	ldr	r0, [pc, #12]	@ (8002d30 <ADC_IRQHandler+0x18>)
 8002d24:	f000 fa5d 	bl	80031e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d28:	bf00      	nop
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200001f4 	.word	0x200001f4
 8002d30:	2000023c 	.word	0x2000023c

08002d34 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <CAN1_TX_IRQHandler+0x10>)
 8002d3a:	f000 fea4 	bl	8003a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200002e4 	.word	0x200002e4

08002d48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d4c:	4802      	ldr	r0, [pc, #8]	@ (8002d58 <CAN1_RX0_IRQHandler+0x10>)
 8002d4e:	f000 fe9a 	bl	8003a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200002e4 	.word	0x200002e4

08002d5c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d60:	4802      	ldr	r0, [pc, #8]	@ (8002d6c <CAN1_RX1_IRQHandler+0x10>)
 8002d62:	f000 fe90 	bl	8003a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200002e4 	.word	0x200002e4

08002d70 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <CAN1_SCE_IRQHandler+0x10>)
 8002d76:	f000 fe86 	bl	8003a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200002e4 	.word	0x200002e4

08002d84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d88:	4802      	ldr	r0, [pc, #8]	@ (8002d94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d8a:	f002 ff23 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000030c 	.word	0x2000030c

08002d98 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d9c:	4802      	ldr	r0, [pc, #8]	@ (8002da8 <TIM3_IRQHandler+0x10>)
 8002d9e:	f002 ff19 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000354 	.word	0x20000354

08002dac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <TIM4_IRQHandler+0x10>)
 8002db2:	f002 ff0f 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	2000039c 	.word	0x2000039c

08002dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc4:	4802      	ldr	r0, [pc, #8]	@ (8002dd0 <USART1_IRQHandler+0x10>)
 8002dc6:	f003 fd27 	bl	8006818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	2000054c 	.word	0x2000054c

08002dd4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dd8:	4802      	ldr	r0, [pc, #8]	@ (8002de4 <USART3_IRQHandler+0x10>)
 8002dda:	f003 fd1d 	bl	8006818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000594 	.word	0x20000594

08002de8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002dec:	4802      	ldr	r0, [pc, #8]	@ (8002df8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002dee:	f002 fef1 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000474 	.word	0x20000474

08002dfc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002e00:	4802      	ldr	r0, [pc, #8]	@ (8002e0c <UART4_IRQHandler+0x10>)
 8002e02:	f003 fd09 	bl	8006818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002e06:	bf00      	nop
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200004bc 	.word	0x200004bc

08002e10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <UART5_IRQHandler+0x10>)
 8002e16:	f003 fcff 	bl	8006818 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000504 	.word	0x20000504

08002e24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <TIM6_DAC_IRQHandler+0x10>)
 8002e2a:	f002 fed3 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200003e4 	.word	0x200003e4

08002e38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <TIM7_IRQHandler+0x10>)
 8002e3e:	f002 fec9 	bl	8005bd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	2000042c 	.word	0x2000042c

08002e4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <DMA2_Stream2_IRQHandler+0x10>)
 8002e52:	f001 fafb 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000069c 	.word	0x2000069c

08002e60 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <DMA2_Stream3_IRQHandler+0x10>)
 8002e66:	f001 faf1 	bl	800444c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000284 	.word	0x20000284

08002e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return 1;
 8002e78:	2301      	movs	r3, #1
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <_kill>:

int _kill(int pid, int sig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e8e:	f005 fd8f 	bl	80089b0 <__errno>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2216      	movs	r2, #22
 8002e96:	601a      	str	r2, [r3, #0]
  return -1;
 8002e98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <_exit>:

void _exit (int status)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ffe7 	bl	8002e84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <_exit+0x12>

08002eba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
 8002eca:	e00a      	b.n	8002ee2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	60ba      	str	r2, [r7, #8]
 8002ed8:	b2ca      	uxtb	r2, r1
 8002eda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	dbf0      	blt.n	8002ecc <_read+0x12>
  }

  return len;
 8002eea:	687b      	ldr	r3, [r7, #4]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e009      	b.n	8002f1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	60ba      	str	r2, [r7, #8]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fe f868 	bl	8000fe4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	3301      	adds	r3, #1
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	dbf1      	blt.n	8002f06 <_write+0x12>
  }
  return len;
 8002f22:	687b      	ldr	r3, [r7, #4]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3718      	adds	r7, #24
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <_close>:

int _close(int file)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f54:	605a      	str	r2, [r3, #4]
  return 0;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_isatty>:

int _isatty(int file)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f6c:	2301      	movs	r3, #1
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	@ (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	@ (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f005 fcf4 	bl	80089b0 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	@ (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	@ (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20020000 	.word	0x20020000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	20000904 	.word	0x20000904
 8002ffc:	20000a58 	.word	0x20000a58

08003000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003004:	4b06      	ldr	r3, [pc, #24]	@ (8003020 <SystemInit+0x20>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300a:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <SystemInit+0x20>)
 800300c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800305c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003028:	f7ff ffea 	bl	8003000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800302c:	480c      	ldr	r0, [pc, #48]	@ (8003060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800302e:	490d      	ldr	r1, [pc, #52]	@ (8003064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003030:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003034:	e002      	b.n	800303c <LoopCopyDataInit>

08003036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800303a:	3304      	adds	r3, #4

0800303c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800303c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003040:	d3f9      	bcc.n	8003036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003044:	4c0a      	ldr	r4, [pc, #40]	@ (8003070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003048:	e001      	b.n	800304e <LoopFillZerobss>

0800304a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800304a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800304c:	3204      	adds	r2, #4

0800304e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003050:	d3fb      	bcc.n	800304a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003052:	f005 fcb3 	bl	80089bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7fe fb91 	bl	800177c <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800305c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003068:	0800c550 	.word	0x0800c550
  ldr r2, =_sbss
 800306c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003070:	20000a58 	.word	0x20000a58

08003074 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <CAN2_RX0_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800307c:	4b0e      	ldr	r3, [pc, #56]	@ (80030b8 <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <HAL_Init+0x40>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <HAL_Init+0x40>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003094:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <HAL_Init+0x40>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800309e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f000 fff9 	bl	8004098 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f808 	bl	80030bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ac:	f7ff f936 	bl	800231c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00

080030bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <HAL_InitTick+0x54>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_InitTick+0x58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 f811 	bl	8004102 <HAL_SYSTICK_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00e      	b.n	8003108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	d80a      	bhi.n	8003106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f0:	2200      	movs	r2, #0
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f000 ffd9 	bl	80040ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030fc:	4a06      	ldr	r2, [pc, #24]	@ (8003118 <HAL_InitTick+0x5c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000000 	.word	0x20000000
 8003114:	20000008 	.word	0x20000008
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	@ (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	@ (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000008 	.word	0x20000008
 8003140:	20000908 	.word	0x20000908

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	@ (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000908 	.word	0x20000908

0800315c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e033      	b.n	80031da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff f8f6 	bl	800236c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80031a2:	f023 0302 	bic.w	r3, r3, #2
 80031a6:	f043 0202 	orr.w	r2, r3, #2
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 fa68 	bl	8003684 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80031ca:	e001      	b.n	80031d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]
 80031ee:	2300      	movs	r3, #0
 80031f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d049      	beq.n	80032ac <HAL_ADC_IRQHandler+0xca>
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d046      	beq.n	80032ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d12b      	bne.n	800329c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003248:	2b00      	cmp	r3, #0
 800324a:	d127      	bne.n	800329c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003252:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003264:	2b00      	cmp	r3, #0
 8003266:	d119      	bne.n	800329c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0220 	bic.w	r2, r2, #32
 8003276:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f8b0 	bl	8003402 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f06f 0212 	mvn.w	r2, #18
 80032aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d057      	beq.n	8003372 <HAL_ADC_IRQHandler+0x190>
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d054      	beq.n	8003372 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d139      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d006      	beq.n	800330a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003306:	2b00      	cmp	r3, #0
 8003308:	d12b      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d124      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003322:	2b00      	cmp	r3, #0
 8003324:	d11d      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800332a:	2b00      	cmp	r3, #0
 800332c:	d119      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800333c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003352:	2b00      	cmp	r3, #0
 8003354:	d105      	bne.n	8003362 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa8a 	bl	800387c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 020c 	mvn.w	r2, #12
 8003370:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003380:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d017      	beq.n	80033b8 <HAL_ADC_IRQHandler+0x1d6>
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10d      	bne.n	80033b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f834 	bl	8003416 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f06f 0201 	mvn.w	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_ADC_IRQHandler+0x218>
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0220 	mvn.w	r2, #32
 80033e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f81d 	bl	800342a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0220 	mvn.w	r2, #32
 80033f8:	601a      	str	r2, [r3, #0]
  }
}
 80033fa:	bf00      	nop
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_ADC_ConfigChannel+0x1c>
 8003458:	2302      	movs	r3, #2
 800345a:	e105      	b.n	8003668 <HAL_ADC_ConfigChannel+0x228>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b09      	cmp	r3, #9
 800346a:	d925      	bls.n	80034b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68d9      	ldr	r1, [r3, #12]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	3b1e      	subs	r3, #30
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43da      	mvns	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	400a      	ands	r2, r1
 8003490:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	4603      	mov	r3, r0
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4403      	add	r3, r0
 80034aa:	3b1e      	subs	r3, #30
 80034ac:	409a      	lsls	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e022      	b.n	80034fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6919      	ldr	r1, [r3, #16]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	2207      	movs	r2, #7
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	400a      	ands	r2, r1
 80034da:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6919      	ldr	r1, [r3, #16]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	4618      	mov	r0, r3
 80034ee:	4603      	mov	r3, r0
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4403      	add	r3, r0
 80034f4:	409a      	lsls	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b06      	cmp	r3, #6
 8003504:	d824      	bhi.n	8003550 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	3b05      	subs	r3, #5
 8003518:	221f      	movs	r2, #31
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	400a      	ands	r2, r1
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	4618      	mov	r0, r3
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	3b05      	subs	r3, #5
 8003542:	fa00 f203 	lsl.w	r2, r0, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34
 800354e:	e04c      	b.n	80035ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d824      	bhi.n	80035a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3b23      	subs	r3, #35	@ 0x23
 800356a:	221f      	movs	r2, #31
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b23      	subs	r3, #35	@ 0x23
 8003594:	fa00 f203 	lsl.w	r2, r0, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
 80035a0:	e023      	b.n	80035ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	3b41      	subs	r3, #65	@ 0x41
 80035b4:	221f      	movs	r2, #31
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43da      	mvns	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	400a      	ands	r2, r1
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4618      	mov	r0, r3
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b41      	subs	r3, #65	@ 0x41
 80035de:	fa00 f203 	lsl.w	r2, r0, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035ea:	4b22      	ldr	r3, [pc, #136]	@ (8003674 <HAL_ADC_ConfigChannel+0x234>)
 80035ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <HAL_ADC_ConfigChannel+0x238>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d109      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1cc>
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b12      	cmp	r3, #18
 80035fe:	d105      	bne.n	800360c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a19      	ldr	r2, [pc, #100]	@ (8003678 <HAL_ADC_ConfigChannel+0x238>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d123      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b10      	cmp	r3, #16
 800361c:	d003      	beq.n	8003626 <HAL_ADC_ConfigChannel+0x1e6>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b11      	cmp	r3, #17
 8003624:	d11b      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b10      	cmp	r3, #16
 8003638:	d111      	bne.n	800365e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800363a:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_ADC_ConfigChannel+0x23c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <HAL_ADC_ConfigChannel+0x240>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	0c9a      	lsrs	r2, r3, #18
 8003646:	4613      	mov	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	4413      	add	r3, r2
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003650:	e002      	b.n	8003658 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f9      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40012300 	.word	0x40012300
 8003678:	40012000 	.word	0x40012000
 800367c:	20000000 	.word	0x20000000
 8003680:	431bde83 	.word	0x431bde83

08003684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800368c:	4b79      	ldr	r3, [pc, #484]	@ (8003874 <ADC_Init+0x1f0>)
 800368e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	021a      	lsls	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6899      	ldr	r1, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003716:	4a58      	ldr	r2, [pc, #352]	@ (8003878 <ADC_Init+0x1f4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800372a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6899      	ldr	r1, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800374c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6899      	ldr	r1, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e00f      	b.n	8003782 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003780:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0202 	bic.w	r2, r2, #2
 8003790:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6899      	ldr	r1, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	7e1b      	ldrb	r3, [r3, #24]
 800379c:	005a      	lsls	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01b      	beq.n	80037e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037be:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	3b01      	subs	r3, #1
 80037dc:	035a      	lsls	r2, r3, #13
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
 80037e6:	e007      	b.n	80037f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	3b01      	subs	r3, #1
 8003814:	051a      	lsls	r2, r3, #20
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800382c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800383a:	025a      	lsls	r2, r3, #9
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003852:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6899      	ldr	r1, [r3, #8]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	029a      	lsls	r2, r3, #10
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	609a      	str	r2, [r3, #8]
}
 8003868:	bf00      	nop
 800386a:	3714      	adds	r7, #20
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40012300 	.word	0x40012300
 8003878:	0f000001 	.word	0x0f000001

0800387c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e0ed      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fe14 	bl	80024dc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c4:	f7ff fc3e 	bl	8003144 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038ca:	e012      	b.n	80038f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80038cc:	f7ff fc3a 	bl	8003144 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b0a      	cmp	r3, #10
 80038d8:	d90b      	bls.n	80038f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2205      	movs	r2, #5
 80038ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e0c5      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0e5      	beq.n	80038cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0202 	bic.w	r2, r2, #2
 800390e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003910:	f7ff fc18 	bl	8003144 <HAL_GetTick>
 8003914:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003916:	e012      	b.n	800393e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003918:	f7ff fc14 	bl	8003144 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b0a      	cmp	r3, #10
 8003924:	d90b      	bls.n	800393e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2205      	movs	r2, #5
 8003936:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e09f      	b.n	8003a7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	7e1b      	ldrb	r3, [r3, #24]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d108      	bne.n	8003966 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	e007      	b.n	8003976 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7e5b      	ldrb	r3, [r3, #25]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d108      	bne.n	8003990 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e007      	b.n	80039a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800399e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	7e9b      	ldrb	r3, [r3, #26]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d108      	bne.n	80039ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e007      	b.n	80039ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0220 	bic.w	r2, r2, #32
 80039c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7edb      	ldrb	r3, [r3, #27]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d108      	bne.n	80039e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0210 	bic.w	r2, r2, #16
 80039e0:	601a      	str	r2, [r3, #0]
 80039e2:	e007      	b.n	80039f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0210 	orr.w	r2, r2, #16
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	7f1b      	ldrb	r3, [r3, #28]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d108      	bne.n	8003a0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e007      	b.n	8003a1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0208 	bic.w	r2, r2, #8
 8003a1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7f5b      	ldrb	r3, [r3, #29]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0204 	orr.w	r2, r2, #4
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e007      	b.n	8003a48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0204 	bic.w	r2, r2, #4
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	ea42 0103 	orr.w	r1, r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	1e5a      	subs	r2, r3, #1
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b08a      	sub	sp, #40	@ 0x28
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d07c      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d023      	beq.n	8003b1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2201      	movs	r2, #1
 8003adc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f983 	bl	8003df4 <HAL_CAN_TxMailbox0CompleteCallback>
 8003aee:	e016      	b.n	8003b1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b02:	e00c      	b.n	8003b1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b16:	e002      	b.n	8003b1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f989 	bl	8003e30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d024      	beq.n	8003b72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f963 	bl	8003e08 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b42:	e016      	b.n	8003b72 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b56:	e00c      	b.n	8003b72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d004      	beq.n	8003b6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6a:	e002      	b.n	8003b72 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f969 	bl	8003e44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d024      	beq.n	8003bc6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003b84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 f943 	bl	8003e1c <HAL_CAN_TxMailbox2CompleteCallback>
 8003b96:	e016      	b.n	8003bc6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d004      	beq.n	8003bac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003baa:	e00c      	b.n	8003bc6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d004      	beq.n	8003bc0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bbe:	e002      	b.n	8003bc6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f949 	bl	8003e58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	f003 0308 	and.w	r3, r3, #8
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00c      	beq.n	8003bea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f003 0310 	and.w	r3, r3, #16
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003be0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2210      	movs	r2, #16
 8003be8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2208      	movs	r2, #8
 8003c04:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f93a 	bl	8003e80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f921 	bl	8003e6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2210      	movs	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00b      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d006      	beq.n	8003c70 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2208      	movs	r2, #8
 8003c68:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f91c 	bl	8003ea8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d009      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f903 	bl	8003e94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f906 	bl	8003ebc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	f003 0308 	and.w	r3, r3, #8
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d006      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f8ff 	bl	8003ed0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003cd2:	6a3b      	ldr	r3, [r7, #32]
 8003cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d07b      	beq.n	8003dd4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d072      	beq.n	8003dcc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	f043 0301 	orr.w	r3, r3, #1
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d008      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	f043 0302 	orr.w	r3, r3, #2
 8003d1c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d008      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	f043 0304 	orr.w	r3, r3, #4
 8003d38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d043      	beq.n	8003dcc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d03e      	beq.n	8003dcc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d54:	2b60      	cmp	r3, #96	@ 0x60
 8003d56:	d02b      	beq.n	8003db0 <HAL_CAN_IRQHandler+0x32a>
 8003d58:	2b60      	cmp	r3, #96	@ 0x60
 8003d5a:	d82e      	bhi.n	8003dba <HAL_CAN_IRQHandler+0x334>
 8003d5c:	2b50      	cmp	r3, #80	@ 0x50
 8003d5e:	d022      	beq.n	8003da6 <HAL_CAN_IRQHandler+0x320>
 8003d60:	2b50      	cmp	r3, #80	@ 0x50
 8003d62:	d82a      	bhi.n	8003dba <HAL_CAN_IRQHandler+0x334>
 8003d64:	2b40      	cmp	r3, #64	@ 0x40
 8003d66:	d019      	beq.n	8003d9c <HAL_CAN_IRQHandler+0x316>
 8003d68:	2b40      	cmp	r3, #64	@ 0x40
 8003d6a:	d826      	bhi.n	8003dba <HAL_CAN_IRQHandler+0x334>
 8003d6c:	2b30      	cmp	r3, #48	@ 0x30
 8003d6e:	d010      	beq.n	8003d92 <HAL_CAN_IRQHandler+0x30c>
 8003d70:	2b30      	cmp	r3, #48	@ 0x30
 8003d72:	d822      	bhi.n	8003dba <HAL_CAN_IRQHandler+0x334>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d002      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x2f8>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d005      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d7c:	e01d      	b.n	8003dba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	f043 0308 	orr.w	r3, r3, #8
 8003d84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d86:	e019      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	f043 0310 	orr.w	r3, r3, #16
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d90:	e014      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	f043 0320 	orr.w	r3, r3, #32
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003d9a:	e00f      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003da2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003da4:	e00a      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003dae:	e005      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003db8:	e000      	b.n	8003dbc <HAL_CAN_IRQHandler+0x336>
            break;
 8003dba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003dca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f87c 	bl	8003ee4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003dec:	bf00      	nop
 8003dee:	3728      	adds	r7, #40	@ 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f14:	4013      	ands	r3, r2
 8003f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f2a:	4a04      	ldr	r2, [pc, #16]	@ (8003f3c <__NVIC_SetPriorityGrouping+0x44>)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	60d3      	str	r3, [r2, #12]
}
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	e000ed00 	.word	0xe000ed00

08003f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f44:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <__NVIC_GetPriorityGrouping+0x18>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	0a1b      	lsrs	r3, r3, #8
 8003f4a:	f003 0307 	and.w	r3, r3, #7
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db0b      	blt.n	8003f86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f6e:	79fb      	ldrb	r3, [r7, #7]
 8003f70:	f003 021f 	and.w	r2, r3, #31
 8003f74:	4907      	ldr	r1, [pc, #28]	@ (8003f94 <__NVIC_EnableIRQ+0x38>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	095b      	lsrs	r3, r3, #5
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	e000e100 	.word	0xe000e100

08003f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	db0a      	blt.n	8003fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	490c      	ldr	r1, [pc, #48]	@ (8003fe4 <__NVIC_SetPriority+0x4c>)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	0112      	lsls	r2, r2, #4
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	440b      	add	r3, r1
 8003fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fc0:	e00a      	b.n	8003fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	4908      	ldr	r1, [pc, #32]	@ (8003fe8 <__NVIC_SetPriority+0x50>)
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	3b04      	subs	r3, #4
 8003fd0:	0112      	lsls	r2, r2, #4
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	761a      	strb	r2, [r3, #24]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	e000e100 	.word	0xe000e100
 8003fe8:	e000ed00 	.word	0xe000ed00

08003fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b089      	sub	sp, #36	@ 0x24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	f1c3 0307 	rsb	r3, r3, #7
 8004006:	2b04      	cmp	r3, #4
 8004008:	bf28      	it	cs
 800400a:	2304      	movcs	r3, #4
 800400c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	3304      	adds	r3, #4
 8004012:	2b06      	cmp	r3, #6
 8004014:	d902      	bls.n	800401c <NVIC_EncodePriority+0x30>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3b03      	subs	r3, #3
 800401a:	e000      	b.n	800401e <NVIC_EncodePriority+0x32>
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	fa02 f303 	lsl.w	r3, r2, r3
 800402a:	43da      	mvns	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	401a      	ands	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004034:	f04f 31ff 	mov.w	r1, #4294967295
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	fa01 f303 	lsl.w	r3, r1, r3
 800403e:	43d9      	mvns	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004044:	4313      	orrs	r3, r2
         );
}
 8004046:	4618      	mov	r0, r3
 8004048:	3724      	adds	r7, #36	@ 0x24
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004064:	d301      	bcc.n	800406a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004066:	2301      	movs	r3, #1
 8004068:	e00f      	b.n	800408a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800406a:	4a0a      	ldr	r2, [pc, #40]	@ (8004094 <SysTick_Config+0x40>)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3b01      	subs	r3, #1
 8004070:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004072:	210f      	movs	r1, #15
 8004074:	f04f 30ff 	mov.w	r0, #4294967295
 8004078:	f7ff ff8e 	bl	8003f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800407c:	4b05      	ldr	r3, [pc, #20]	@ (8004094 <SysTick_Config+0x40>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004082:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <SysTick_Config+0x40>)
 8004084:	2207      	movs	r2, #7
 8004086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3708      	adds	r7, #8
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	e000e010 	.word	0xe000e010

08004098 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff29 	bl	8003ef8 <__NVIC_SetPriorityGrouping>
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b086      	sub	sp, #24
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	4603      	mov	r3, r0
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
 80040ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040c0:	f7ff ff3e 	bl	8003f40 <__NVIC_GetPriorityGrouping>
 80040c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7ff ff8e 	bl	8003fec <NVIC_EncodePriority>
 80040d0:	4602      	mov	r2, r0
 80040d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040d6:	4611      	mov	r1, r2
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff ff5d 	bl	8003f98 <__NVIC_SetPriority>
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	4603      	mov	r3, r0
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff ff31 	bl	8003f5c <__NVIC_EnableIRQ>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ffa2 	bl	8004054 <SysTick_Config>
 8004110:	4603      	mov	r3, r0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3708      	adds	r7, #8
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004128:	f7ff f80c 	bl	8003144 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e099      	b.n	800426c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0201 	bic.w	r2, r2, #1
 8004156:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004158:	e00f      	b.n	800417a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800415a:	f7fe fff3 	bl	8003144 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b05      	cmp	r3, #5
 8004166:	d908      	bls.n	800417a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2220      	movs	r2, #32
 800416c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2203      	movs	r2, #3
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e078      	b.n	800426c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e8      	bne.n	800415a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_DMA_Init+0x158>)
 8004194:	4013      	ands	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d107      	bne.n	80041e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	4313      	orrs	r3, r2
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	f023 0307 	bic.w	r3, r3, #7
 80041fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	2b04      	cmp	r3, #4
 800420c:	d117      	bne.n	800423e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	4313      	orrs	r3, r2
 8004216:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00e      	beq.n	800423e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fb01 	bl	8004828 <DMA_CheckFifoParam>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2240      	movs	r2, #64	@ 0x40
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800423a:	2301      	movs	r3, #1
 800423c:	e016      	b.n	800426c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fab8 	bl	80047bc <DMA_CalcBaseAndBitshift>
 800424c:	4603      	mov	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	223f      	movs	r2, #63	@ 0x3f
 8004256:	409a      	lsls	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3718      	adds	r7, #24
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	f010803f 	.word	0xf010803f

08004278 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_DMA_Start_IT+0x26>
 800429a:	2302      	movs	r3, #2
 800429c:	e040      	b.n	8004320 <HAL_DMA_Start_IT+0xa8>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d12f      	bne.n	8004312 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2202      	movs	r2, #2
 80042b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa4a 	bl	8004760 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d0:	223f      	movs	r2, #63	@ 0x3f
 80042d2:	409a      	lsls	r2, r3
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0216 	orr.w	r2, r2, #22
 80042e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d007      	beq.n	8004300 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0208 	orr.w	r2, r2, #8
 80042fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	e005      	b.n	800431e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800431a:	2302      	movs	r3, #2
 800431c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004336:	f7fe ff05 	bl	8003144 <HAL_GetTick>
 800433a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d008      	beq.n	800435a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2280      	movs	r2, #128	@ 0x80
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e052      	b.n	8004400 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0216 	bic.w	r2, r2, #22
 8004368:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004378:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d103      	bne.n	800438a <HAL_DMA_Abort+0x62>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004386:	2b00      	cmp	r3, #0
 8004388:	d007      	beq.n	800439a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0208 	bic.w	r2, r2, #8
 8004398:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0201 	bic.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043aa:	e013      	b.n	80043d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043ac:	f7fe feca 	bl	8003144 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b05      	cmp	r3, #5
 80043b8:	d90c      	bls.n	80043d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2203      	movs	r2, #3
 80043c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e015      	b.n	8004400 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e4      	bne.n	80043ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e6:	223f      	movs	r2, #63	@ 0x3f
 80043e8:	409a      	lsls	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3710      	adds	r7, #16
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d004      	beq.n	8004426 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e00c      	b.n	8004440 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2205      	movs	r2, #5
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004458:	4b8e      	ldr	r3, [pc, #568]	@ (8004694 <HAL_DMA_IRQHandler+0x248>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a8e      	ldr	r2, [pc, #568]	@ (8004698 <HAL_DMA_IRQHandler+0x24c>)
 800445e:	fba2 2303 	umull	r2, r3, r2, r3
 8004462:	0a9b      	lsrs	r3, r3, #10
 8004464:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	2208      	movs	r2, #8
 8004478:	409a      	lsls	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d01a      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	d013      	beq.n	80044b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0204 	bic.w	r2, r2, #4
 800449e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a4:	2208      	movs	r2, #8
 80044a6:	409a      	lsls	r2, r3
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b0:	f043 0201 	orr.w	r2, r3, #1
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044bc:	2201      	movs	r2, #1
 80044be:	409a      	lsls	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d012      	beq.n	80044ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044da:	2201      	movs	r2, #1
 80044dc:	409a      	lsls	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f043 0202 	orr.w	r2, r3, #2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044f2:	2204      	movs	r2, #4
 80044f4:	409a      	lsls	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d012      	beq.n	8004524 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004510:	2204      	movs	r2, #4
 8004512:	409a      	lsls	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	f043 0204 	orr.w	r2, r3, #4
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004528:	2210      	movs	r2, #16
 800452a:	409a      	lsls	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4013      	ands	r3, r2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d043      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d03c      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004546:	2210      	movs	r2, #16
 8004548:	409a      	lsls	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d018      	beq.n	800458e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d108      	bne.n	800457c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d024      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e01f      	b.n	80045bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01b      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	4798      	blx	r3
 800458c:	e016      	b.n	80045bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0208 	bic.w	r2, r2, #8
 80045aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c0:	2220      	movs	r2, #32
 80045c2:	409a      	lsls	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 808f 	beq.w	80046ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 8087 	beq.w	80046ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	2220      	movs	r2, #32
 80045e4:	409a      	lsls	r2, r3
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d136      	bne.n	8004664 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0216 	bic.w	r2, r2, #22
 8004604:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004614:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_DMA_IRQHandler+0x1da>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 0208 	bic.w	r2, r2, #8
 8004634:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800463a:	223f      	movs	r2, #63	@ 0x3f
 800463c:	409a      	lsls	r2, r3
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004656:	2b00      	cmp	r3, #0
 8004658:	d07e      	beq.n	8004758 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	4798      	blx	r3
        }
        return;
 8004662:	e079      	b.n	8004758 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01d      	beq.n	80046ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10d      	bne.n	800469c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004684:	2b00      	cmp	r3, #0
 8004686:	d031      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	4798      	blx	r3
 8004690:	e02c      	b.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
 8004692:	bf00      	nop
 8004694:	20000000 	.word	0x20000000
 8004698:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d023      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
 80046ac:	e01e      	b.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0210 	bic.w	r2, r2, #16
 80046ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d032      	beq.n	800475a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d022      	beq.n	8004746 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2205      	movs	r2, #5
 8004704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0201 	bic.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3301      	adds	r3, #1
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	d307      	bcc.n	8004734 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f2      	bne.n	8004718 <HAL_DMA_IRQHandler+0x2cc>
 8004732:	e000      	b.n	8004736 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004734:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	4798      	blx	r3
 8004756:	e000      	b.n	800475a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004758:	bf00      	nop
    }
  }
}
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800477c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b40      	cmp	r3, #64	@ 0x40
 800478c:	d108      	bne.n	80047a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800479e:	e007      	b.n	80047b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	60da      	str	r2, [r3, #12]
}
 80047b0:	bf00      	nop
 80047b2:	3714      	adds	r7, #20
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3b10      	subs	r3, #16
 80047cc:	4a14      	ldr	r2, [pc, #80]	@ (8004820 <DMA_CalcBaseAndBitshift+0x64>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047d6:	4a13      	ldr	r2, [pc, #76]	@ (8004824 <DMA_CalcBaseAndBitshift+0x68>)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d909      	bls.n	80047fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	1d1a      	adds	r2, r3, #4
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80047fc:	e007      	b.n	800480e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004806:	f023 0303 	bic.w	r3, r3, #3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	aaaaaaab 	.word	0xaaaaaaab
 8004824:	0800c108 	.word	0x0800c108

08004828 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004830:	2300      	movs	r3, #0
 8004832:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d11f      	bne.n	8004882 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b03      	cmp	r3, #3
 8004846:	d856      	bhi.n	80048f6 <DMA_CheckFifoParam+0xce>
 8004848:	a201      	add	r2, pc, #4	@ (adr r2, 8004850 <DMA_CheckFifoParam+0x28>)
 800484a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484e:	bf00      	nop
 8004850:	08004861 	.word	0x08004861
 8004854:	08004873 	.word	0x08004873
 8004858:	08004861 	.word	0x08004861
 800485c:	080048f7 	.word	0x080048f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d046      	beq.n	80048fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004870:	e043      	b.n	80048fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004876:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800487a:	d140      	bne.n	80048fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e03d      	b.n	80048fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488a:	d121      	bne.n	80048d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b03      	cmp	r3, #3
 8004890:	d837      	bhi.n	8004902 <DMA_CheckFifoParam+0xda>
 8004892:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <DMA_CheckFifoParam+0x70>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048a9 	.word	0x080048a9
 800489c:	080048af 	.word	0x080048af
 80048a0:	080048a9 	.word	0x080048a9
 80048a4:	080048c1 	.word	0x080048c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	73fb      	strb	r3, [r7, #15]
      break;
 80048ac:	e030      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d025      	beq.n	8004906 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048be:	e022      	b.n	8004906 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048c8:	d11f      	bne.n	800490a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ce:	e01c      	b.n	800490a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d903      	bls.n	80048de <DMA_CheckFifoParam+0xb6>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b03      	cmp	r3, #3
 80048da:	d003      	beq.n	80048e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048dc:	e018      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
      break;
 80048e2:	e015      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00e      	beq.n	800490e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
      break;
 80048f4:	e00b      	b.n	800490e <DMA_CheckFifoParam+0xe6>
      break;
 80048f6:	bf00      	nop
 80048f8:	e00a      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 80048fa:	bf00      	nop
 80048fc:	e008      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 80048fe:	bf00      	nop
 8004900:	e006      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 8004902:	bf00      	nop
 8004904:	e004      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 8004906:	bf00      	nop
 8004908:	e002      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;   
 800490a:	bf00      	nop
 800490c:	e000      	b.n	8004910 <DMA_CheckFifoParam+0xe8>
      break;
 800490e:	bf00      	nop
    }
  } 
  
  return status; 
 8004910:	7bfb      	ldrb	r3, [r7, #15]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop

08004920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
 800493a:	e16b      	b.n	8004c14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800493c:	2201      	movs	r2, #1
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4013      	ands	r3, r2
 800494e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	429a      	cmp	r2, r3
 8004956:	f040 815a 	bne.w	8004c0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b01      	cmp	r3, #1
 8004964:	d005      	beq.n	8004972 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800496e:	2b02      	cmp	r3, #2
 8004970:	d130      	bne.n	80049d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	2203      	movs	r2, #3
 800497e:	fa02 f303 	lsl.w	r3, r2, r3
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049a8:	2201      	movs	r2, #1
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	091b      	lsrs	r3, r3, #4
 80049be:	f003 0201 	and.w	r2, r3, #1
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	2b03      	cmp	r3, #3
 80049de:	d017      	beq.n	8004a10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	2203      	movs	r2, #3
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	43db      	mvns	r3, r3
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	4013      	ands	r3, r2
 80049f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d123      	bne.n	8004a64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	08da      	lsrs	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3208      	adds	r2, #8
 8004a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	220f      	movs	r2, #15
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	69b9      	ldr	r1, [r7, #24]
 8004a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	2203      	movs	r2, #3
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	43db      	mvns	r3, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0203 	and.w	r2, r3, #3
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80b4 	beq.w	8004c0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	4b60      	ldr	r3, [pc, #384]	@ (8004c2c <HAL_GPIO_Init+0x30c>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aae:	4a5f      	ldr	r2, [pc, #380]	@ (8004c2c <HAL_GPIO_Init+0x30c>)
 8004ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c2c <HAL_GPIO_Init+0x30c>)
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ac2:	4a5b      	ldr	r2, [pc, #364]	@ (8004c30 <HAL_GPIO_Init+0x310>)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	3302      	adds	r3, #2
 8004aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f003 0303 	and.w	r3, r3, #3
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	220f      	movs	r2, #15
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a52      	ldr	r2, [pc, #328]	@ (8004c34 <HAL_GPIO_Init+0x314>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02b      	beq.n	8004b46 <HAL_GPIO_Init+0x226>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a51      	ldr	r2, [pc, #324]	@ (8004c38 <HAL_GPIO_Init+0x318>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d025      	beq.n	8004b42 <HAL_GPIO_Init+0x222>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a50      	ldr	r2, [pc, #320]	@ (8004c3c <HAL_GPIO_Init+0x31c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01f      	beq.n	8004b3e <HAL_GPIO_Init+0x21e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a4f      	ldr	r2, [pc, #316]	@ (8004c40 <HAL_GPIO_Init+0x320>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d019      	beq.n	8004b3a <HAL_GPIO_Init+0x21a>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a4e      	ldr	r2, [pc, #312]	@ (8004c44 <HAL_GPIO_Init+0x324>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_GPIO_Init+0x216>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a4d      	ldr	r2, [pc, #308]	@ (8004c48 <HAL_GPIO_Init+0x328>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00d      	beq.n	8004b32 <HAL_GPIO_Init+0x212>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a4c      	ldr	r2, [pc, #304]	@ (8004c4c <HAL_GPIO_Init+0x32c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <HAL_GPIO_Init+0x20e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a4b      	ldr	r2, [pc, #300]	@ (8004c50 <HAL_GPIO_Init+0x330>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <HAL_GPIO_Init+0x20a>
 8004b26:	2307      	movs	r3, #7
 8004b28:	e00e      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b2a:	2308      	movs	r3, #8
 8004b2c:	e00c      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b2e:	2306      	movs	r3, #6
 8004b30:	e00a      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b32:	2305      	movs	r3, #5
 8004b34:	e008      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b36:	2304      	movs	r3, #4
 8004b38:	e006      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e004      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e002      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <HAL_GPIO_Init+0x228>
 8004b46:	2300      	movs	r3, #0
 8004b48:	69fa      	ldr	r2, [r7, #28]
 8004b4a:	f002 0203 	and.w	r2, r2, #3
 8004b4e:	0092      	lsls	r2, r2, #2
 8004b50:	4093      	lsls	r3, r2
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b58:	4935      	ldr	r1, [pc, #212]	@ (8004c30 <HAL_GPIO_Init+0x310>)
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	089b      	lsrs	r3, r3, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b66:	4b3b      	ldr	r3, [pc, #236]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b8a:	4a32      	ldr	r2, [pc, #200]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b90:	4b30      	ldr	r3, [pc, #192]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bb4:	4a27      	ldr	r2, [pc, #156]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004bba:	4b26      	ldr	r3, [pc, #152]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004bde:	4a1d      	ldr	r2, [pc, #116]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004be4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c08:	4a12      	ldr	r2, [pc, #72]	@ (8004c54 <HAL_GPIO_Init+0x334>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	3301      	adds	r3, #1
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	2b0f      	cmp	r3, #15
 8004c18:	f67f ae90 	bls.w	800493c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3724      	adds	r7, #36	@ 0x24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40013800 	.word	0x40013800
 8004c34:	40020000 	.word	0x40020000
 8004c38:	40020400 	.word	0x40020400
 8004c3c:	40020800 	.word	0x40020800
 8004c40:	40020c00 	.word	0x40020c00
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40021400 	.word	0x40021400
 8004c4c:	40021800 	.word	0x40021800
 8004c50:	40021c00 	.word	0x40021c00
 8004c54:	40013c00 	.word	0x40013c00

08004c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	460b      	mov	r3, r1
 8004c62:	807b      	strh	r3, [r7, #2]
 8004c64:	4613      	mov	r3, r2
 8004c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c68:	787b      	ldrb	r3, [r7, #1]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c6e:	887a      	ldrh	r2, [r7, #2]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c74:	e003      	b.n	8004c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c76:	887b      	ldrh	r3, [r7, #2]
 8004c78:	041a      	lsls	r2, r3, #16
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	619a      	str	r2, [r3, #24]
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e267      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d075      	beq.n	8004d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004caa:	4b88      	ldr	r3, [pc, #544]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cb6:	4b85      	ldr	r3, [pc, #532]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d112      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cc2:	4b82      	ldr	r3, [pc, #520]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004cce:	d10b      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d05b      	beq.n	8004d94 <HAL_RCC_OscConfig+0x108>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d157      	bne.n	8004d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e242      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d106      	bne.n	8004d00 <HAL_RCC_OscConfig+0x74>
 8004cf2:	4b76      	ldr	r3, [pc, #472]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a75      	ldr	r2, [pc, #468]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e01d      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d08:	d10c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x98>
 8004d0a:	4b70      	ldr	r3, [pc, #448]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d14:	6013      	str	r3, [r2, #0]
 8004d16:	4b6d      	ldr	r3, [pc, #436]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_RCC_OscConfig+0xb0>
 8004d24:	4b69      	ldr	r3, [pc, #420]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a68      	ldr	r2, [pc, #416]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d2e:	6013      	str	r3, [r2, #0]
 8004d30:	4b66      	ldr	r3, [pc, #408]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d013      	beq.n	8004d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d44:	f7fe f9fe 	bl	8003144 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe f9fa 	bl	8003144 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e207      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0xc0>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d6c:	f7fe f9ea 	bl	8003144 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d74:	f7fe f9e6 	bl	8003144 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	@ 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e1f3      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d86:	4b51      	ldr	r3, [pc, #324]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f0      	bne.n	8004d74 <HAL_RCC_OscConfig+0xe8>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d063      	beq.n	8004e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004da2:	4b4a      	ldr	r3, [pc, #296]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 030c 	and.w	r3, r3, #12
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11c      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004dba:	4b44      	ldr	r3, [pc, #272]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d116      	bne.n	8004df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc6:	4b41      	ldr	r3, [pc, #260]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e1c7      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4937      	ldr	r1, [pc, #220]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004df2:	e03a      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d020      	beq.n	8004e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dfc:	4b34      	ldr	r3, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fe f99f 	bl	8003144 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e0a:	f7fe f99b 	bl	8003144 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e1a8      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0f0      	beq.n	8004e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4925      	ldr	r1, [pc, #148]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	600b      	str	r3, [r1, #0]
 8004e3c:	e015      	b.n	8004e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <HAL_RCC_OscConfig+0x244>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e44:	f7fe f97e 	bl	8003144 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e4a:	e008      	b.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e4c:	f7fe f97a 	bl	8003144 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e187      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d1f0      	bne.n	8004e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d016      	beq.n	8004eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fe f95e 	bl	8003144 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e8c:	f7fe f95a 	bl	8003144 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e167      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCC_OscConfig+0x200>
 8004eaa:	e01b      	b.n	8004ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eac:	4b09      	ldr	r3, [pc, #36]	@ (8004ed4 <HAL_RCC_OscConfig+0x248>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb2:	f7fe f947 	bl	8003144 <HAL_GetTick>
 8004eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb8:	e00e      	b.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004eba:	f7fe f943 	bl	8003144 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d907      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e150      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	42470000 	.word	0x42470000
 8004ed4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ed8:	4b88      	ldr	r3, [pc, #544]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ea      	bne.n	8004eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	f000 8097 	beq.w	8005020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ef6:	4b81      	ldr	r3, [pc, #516]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10f      	bne.n	8004f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]
 8004f06:	4b7d      	ldr	r3, [pc, #500]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f12:	4b7a      	ldr	r3, [pc, #488]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f2e:	4b74      	ldr	r3, [pc, #464]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a73      	ldr	r2, [pc, #460]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe f903 	bl	8003144 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fe f8ff 	bl	8003144 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f54:	4b6a      	ldr	r3, [pc, #424]	@ (8005100 <HAL_RCC_OscConfig+0x474>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d106      	bne.n	8004f76 <HAL_RCC_OscConfig+0x2ea>
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f6c:	4a63      	ldr	r2, [pc, #396]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f74:	e01c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b05      	cmp	r3, #5
 8004f7c:	d10c      	bne.n	8004f98 <HAL_RCC_OscConfig+0x30c>
 8004f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f82:	4a5e      	ldr	r2, [pc, #376]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f96:	e00b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x324>
 8004f98:	4b58      	ldr	r3, [pc, #352]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	4a57      	ldr	r2, [pc, #348]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fa4:	4b55      	ldr	r3, [pc, #340]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa8:	4a54      	ldr	r2, [pc, #336]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d015      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb8:	f7fe f8c4 	bl	8003144 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fbe:	e00a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc0:	f7fe f8c0 	bl	8003144 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e0cb      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	4b49      	ldr	r3, [pc, #292]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8004fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0ee      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x334>
 8004fe2:	e014      	b.n	800500e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fe4:	f7fe f8ae 	bl	8003144 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fea:	e00a      	b.n	8005002 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fec:	f7fe f8aa 	bl	8003144 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d901      	bls.n	8005002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0b5      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005002:	4b3e      	ldr	r3, [pc, #248]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1ee      	bne.n	8004fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800500e:	7dfb      	ldrb	r3, [r7, #23]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d105      	bne.n	8005020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005014:	4b39      	ldr	r3, [pc, #228]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	4a38      	ldr	r2, [pc, #224]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800501a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800501e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80a1 	beq.w	800516c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800502a:	4b34      	ldr	r3, [pc, #208]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b08      	cmp	r3, #8
 8005034:	d05c      	beq.n	80050f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d141      	bne.n	80050c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005040:	2200      	movs	r2, #0
 8005042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7fe f87e 	bl	8003144 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504c:	f7fe f87a 	bl	8003144 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e087      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800505e:	4b27      	ldr	r3, [pc, #156]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69da      	ldr	r2, [r3, #28]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	019b      	lsls	r3, r3, #6
 800507a:	431a      	orrs	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005080:	085b      	lsrs	r3, r3, #1
 8005082:	3b01      	subs	r3, #1
 8005084:	041b      	lsls	r3, r3, #16
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	061b      	lsls	r3, r3, #24
 800508e:	491b      	ldr	r1, [pc, #108]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509a:	f7fe f853 	bl	8003144 <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a0:	e008      	b.n	80050b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fe f84f 	bl	8003144 <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e05c      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0f0      	beq.n	80050a2 <HAL_RCC_OscConfig+0x416>
 80050c0:	e054      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fe f83c 	bl	8003144 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fe f838 	bl	8003144 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e045      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b06      	ldr	r3, [pc, #24]	@ (80050fc <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x444>
 80050ee:	e03d      	b.n	800516c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
 8005104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4ec>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d028      	beq.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d121      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512e:	429a      	cmp	r2, r3
 8005130:	d11a      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800513e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005140:	4293      	cmp	r3, r2
 8005142:	d111      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	3b01      	subs	r3, #1
 8005152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005154:	429a      	cmp	r2, r3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005164:	429a      	cmp	r2, r3
 8005166:	d001      	beq.n	800516c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0cc      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b68      	ldr	r3, [pc, #416]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d90c      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b65      	ldr	r3, [pc, #404]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	b2d2      	uxtb	r2, r2
 80051a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d044      	beq.n	800529c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d119      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d003      	beq.n	800523a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005236:	2b03      	cmp	r3, #3
 8005238:	d107      	bne.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523a:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d109      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e06f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800524a:	4b3b      	ldr	r3, [pc, #236]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e067      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800525a:	4b37      	ldr	r3, [pc, #220]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 0203 	bic.w	r2, r3, #3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	4934      	ldr	r1, [pc, #208]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 8005268:	4313      	orrs	r3, r2
 800526a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800526c:	f7fd ff6a 	bl	8003144 <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005272:	e00a      	b.n	800528a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005274:	f7fd ff66 	bl	8003144 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e04f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800528a:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f003 020c 	and.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	429a      	cmp	r2, r3
 800529a:	d1eb      	bne.n	8005274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0307 	and.w	r3, r3, #7
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20c      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052aa:	4b22      	ldr	r3, [pc, #136]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	@ (8005334 <HAL_RCC_ClockConfig+0x1b8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	@ (800533c <HAL_RCC_ClockConfig+0x1c0>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	@ (8005340 <HAL_RCC_ClockConfig+0x1c4>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <HAL_RCC_ClockConfig+0x1c8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fd feca 	bl	80030bc <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	0800c0f0 	.word	0x0800c0f0
 8005340:	20000000 	.word	0x20000000
 8005344:	20000004 	.word	0x20000004

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b094      	sub	sp, #80	@ 0x50
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	647b      	str	r3, [r7, #68]	@ 0x44
 8005354:	2300      	movs	r3, #0
 8005356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005358:	2300      	movs	r3, #0
 800535a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800535c:	2300      	movs	r3, #0
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b79      	ldr	r3, [pc, #484]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80e1 	bhi.w	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e0db      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b73      	ldr	r3, [pc, #460]	@ (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005380:	e0db      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b73      	ldr	r3, [pc, #460]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x208>)
 8005384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005386:	e0d8      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b6f      	ldr	r3, [pc, #444]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005390:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005392:	4b6d      	ldr	r3, [pc, #436]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b6a      	ldr	r3, [pc, #424]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b2:	2300      	movs	r3, #0
 80053b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	0159      	lsls	r1, r3, #5
 80053c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053cc:	0150      	lsls	r0, r2, #5
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4621      	mov	r1, r4
 80053d4:	1a51      	subs	r1, r2, r1
 80053d6:	6139      	str	r1, [r7, #16]
 80053d8:	4629      	mov	r1, r5
 80053da:	eb63 0301 	sbc.w	r3, r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	018b      	lsls	r3, r1, #6
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f6:	4651      	mov	r1, sl
 80053f8:	018a      	lsls	r2, r1, #6
 80053fa:	4651      	mov	r1, sl
 80053fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005400:	4659      	mov	r1, fp
 8005402:	eb63 0901 	sbc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	462b      	mov	r3, r5
 8005428:	eb49 0303 	adc.w	r3, r9, r3
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543a:	4629      	mov	r1, r5
 800543c:	024b      	lsls	r3, r1, #9
 800543e:	4621      	mov	r1, r4
 8005440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005444:	4621      	mov	r1, r4
 8005446:	024a      	lsls	r2, r1, #9
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544e:	2200      	movs	r2, #0
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005458:	f7fb fc16 	bl	8000c88 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005464:	e058      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005466:	4b38      	ldr	r3, [pc, #224]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	4611      	mov	r1, r2
 8005472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	@ 0x24
 800547c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	0159      	lsls	r1, r3, #5
 800548e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005492:	0150      	lsls	r0, r2, #5
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4641      	mov	r1, r8
 800549a:	ebb2 0a01 	subs.w	sl, r2, r1
 800549e:	4649      	mov	r1, r9
 80054a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b8:	ebb2 040a 	subs.w	r4, r2, sl
 80054bc:	eb63 050b 	sbc.w	r5, r3, fp
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	00eb      	lsls	r3, r5, #3
 80054ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4643      	mov	r3, r8
 80054d6:	18e3      	adds	r3, r4, r3
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	464b      	mov	r3, r9
 80054dc:	eb45 0303 	adc.w	r3, r5, r3
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ee:	4629      	mov	r1, r5
 80054f0:	028b      	lsls	r3, r1, #10
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f8:	4621      	mov	r1, r4
 80054fa:	028a      	lsls	r2, r1, #10
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550c:	f7fb fbbc 	bl	8000c88 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005518:	4b0b      	ldr	r3, [pc, #44]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	3301      	adds	r3, #1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800552a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005532:	e002      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b05      	ldr	r3, [pc, #20]	@ (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 8005536:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800553c:	4618      	mov	r0, r3
 800553e:	3750      	adds	r7, #80	@ 0x50
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000000 	.word	0x20000000

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	@ (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	0800c100 	.word	0x0800c100

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffdc 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	@ (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	0800c100 	.word	0x0800c100

080055bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e041      	b.n	8005652 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fd f8b6 	bl	8002754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4619      	mov	r1, r3
 80055fa:	4610      	mov	r0, r2
 80055fc:	f000 fcc4 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
	...

0800565c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b01      	cmp	r3, #1
 800566e:	d001      	beq.n	8005674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e04e      	b.n	8005712 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a23      	ldr	r2, [pc, #140]	@ (8005720 <HAL_TIM_Base_Start_IT+0xc4>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d022      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800569e:	d01d      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005724 <HAL_TIM_Base_Start_IT+0xc8>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d018      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005728 <HAL_TIM_Base_Start_IT+0xcc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d013      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1c      	ldr	r2, [pc, #112]	@ (800572c <HAL_TIM_Base_Start_IT+0xd0>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00e      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <HAL_TIM_Base_Start_IT+0xd4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d009      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <HAL_TIM_Base_Start_IT+0xd8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d004      	beq.n	80056dc <HAL_TIM_Base_Start_IT+0x80>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <HAL_TIM_Base_Start_IT+0xdc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d111      	bne.n	8005700 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b06      	cmp	r3, #6
 80056ec:	d010      	beq.n	8005710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	e007      	b.n	8005710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40001800 	.word	0x40001800

0800573c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e041      	b.n	80057d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f7fc ffb0 	bl	80026c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	3304      	adds	r3, #4
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f000 fc04 	bl	8005f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
	...

080057dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d109      	bne.n	8005800 <HAL_TIM_PWM_Start+0x24>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	e022      	b.n	8005846 <HAL_TIM_PWM_Start+0x6a>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b04      	cmp	r3, #4
 8005804:	d109      	bne.n	800581a <HAL_TIM_PWM_Start+0x3e>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b01      	cmp	r3, #1
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e015      	b.n	8005846 <HAL_TIM_PWM_Start+0x6a>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d109      	bne.n	8005834 <HAL_TIM_PWM_Start+0x58>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b01      	cmp	r3, #1
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e008      	b.n	8005846 <HAL_TIM_PWM_Start+0x6a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e07c      	b.n	8005948 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_TIM_PWM_Start+0x82>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800585c:	e013      	b.n	8005886 <HAL_TIM_PWM_Start+0xaa>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b04      	cmp	r3, #4
 8005862:	d104      	bne.n	800586e <HAL_TIM_PWM_Start+0x92>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800586c:	e00b      	b.n	8005886 <HAL_TIM_PWM_Start+0xaa>
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b08      	cmp	r3, #8
 8005872:	d104      	bne.n	800587e <HAL_TIM_PWM_Start+0xa2>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800587c:	e003      	b.n	8005886 <HAL_TIM_PWM_Start+0xaa>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2201      	movs	r2, #1
 800588c:	6839      	ldr	r1, [r7, #0]
 800588e:	4618      	mov	r0, r3
 8005890:	f000 fdd6 	bl	8006440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2d      	ldr	r2, [pc, #180]	@ (8005950 <HAL_TIM_PWM_Start+0x174>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d004      	beq.n	80058a8 <HAL_TIM_PWM_Start+0xcc>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005954 <HAL_TIM_PWM_Start+0x178>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d101      	bne.n	80058ac <HAL_TIM_PWM_Start+0xd0>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_TIM_PWM_Start+0xd2>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d007      	beq.n	80058c2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a22      	ldr	r2, [pc, #136]	@ (8005950 <HAL_TIM_PWM_Start+0x174>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d4:	d01d      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a1f      	ldr	r2, [pc, #124]	@ (8005958 <HAL_TIM_PWM_Start+0x17c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a1d      	ldr	r2, [pc, #116]	@ (800595c <HAL_TIM_PWM_Start+0x180>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005960 <HAL_TIM_PWM_Start+0x184>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a16      	ldr	r2, [pc, #88]	@ (8005954 <HAL_TIM_PWM_Start+0x178>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a18      	ldr	r2, [pc, #96]	@ (8005964 <HAL_TIM_PWM_Start+0x188>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_TIM_PWM_Start+0x136>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a16      	ldr	r2, [pc, #88]	@ (8005968 <HAL_TIM_PWM_Start+0x18c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d111      	bne.n	8005936 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2b06      	cmp	r3, #6
 8005922:	d010      	beq.n	8005946 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0201 	orr.w	r2, r2, #1
 8005932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	e007      	b.n	8005946 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f042 0201 	orr.w	r2, r2, #1
 8005944:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	40010000 	.word	0x40010000
 8005954:	40010400 	.word	0x40010400
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40014000 	.word	0x40014000
 8005968:	40001800 	.word	0x40001800

0800596c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e097      	b.n	8005ab0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7fc fe09 	bl	80025ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6812      	ldr	r2, [r2, #0]
 80059ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059b0:	f023 0307 	bic.w	r3, r3, #7
 80059b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	3304      	adds	r3, #4
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f000 fae1 	bl	8005f88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ee:	f023 0303 	bic.w	r3, r3, #3
 80059f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	021b      	lsls	r3, r3, #8
 80059fe:	4313      	orrs	r3, r2
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005a0c:	f023 030c 	bic.w	r3, r3, #12
 8005a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	693a      	ldr	r2, [r7, #16]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	011a      	lsls	r2, r3, #4
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	031b      	lsls	r3, r3, #12
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	695b      	ldr	r3, [r3, #20]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3718      	adds	r7, #24
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ac8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ad0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ad8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ae0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d110      	bne.n	8005b0a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d102      	bne.n	8005af4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aee:	7b7b      	ldrb	r3, [r7, #13]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e069      	b.n	8005bcc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2202      	movs	r2, #2
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b08:	e031      	b.n	8005b6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b04      	cmp	r3, #4
 8005b0e:	d110      	bne.n	8005b32 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d102      	bne.n	8005b1c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b16:	7b3b      	ldrb	r3, [r7, #12]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d001      	beq.n	8005b20 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e055      	b.n	8005bcc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b30:	e01d      	b.n	8005b6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d108      	bne.n	8005b4a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b3e:	7b7b      	ldrb	r3, [r7, #13]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d102      	bne.n	8005b4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b44:	7b3b      	ldrb	r3, [r7, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d001      	beq.n	8005b4e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e03e      	b.n	8005bcc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2202      	movs	r2, #2
 8005b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2202      	movs	r2, #2
 8005b6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_TIM_Encoder_Start+0xc4>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d008      	beq.n	8005b8c <HAL_TIM_Encoder_Start+0xd4>
 8005b7a:	e00f      	b.n	8005b9c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2201      	movs	r2, #1
 8005b82:	2100      	movs	r1, #0
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fc5b 	bl	8006440 <TIM_CCxChannelCmd>
      break;
 8005b8a:	e016      	b.n	8005bba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2201      	movs	r2, #1
 8005b92:	2104      	movs	r1, #4
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fc53 	bl	8006440 <TIM_CCxChannelCmd>
      break;
 8005b9a:	e00e      	b.n	8005bba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fc4b 	bl	8006440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fc44 	bl	8006440 <TIM_CCxChannelCmd>
      break;
 8005bb8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f042 0201 	orr.w	r2, r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d020      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d01b      	beq.n	8005c38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f06f 0202 	mvn.w	r2, #2
 8005c08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f994 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005c24:	e005      	b.n	8005c32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f986 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f997 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	f003 0304 	and.w	r3, r3, #4
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d020      	beq.n	8005c84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01b      	beq.n	8005c84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0204 	mvn.w	r2, #4
 8005c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f96e 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005c70:	e005      	b.n	8005c7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 f960 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f971 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d020      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d01b      	beq.n	8005cd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0208 	mvn.w	r2, #8
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f948 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f93a 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f94b 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01b      	beq.n	8005d1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0210 	mvn.w	r2, #16
 8005cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f922 	bl	8005f4c <HAL_TIM_IC_CaptureCallback>
 8005d08:	e005      	b.n	8005d16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f914 	bl	8005f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f925 	bl	8005f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00c      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0201 	mvn.w	r2, #1
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7fb f970 	bl	8001020 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d007      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fc1a 	bl	8006598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f8f6 	bl	8005f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d007      	beq.n	8005dac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f06f 0220 	mvn.w	r2, #32
 8005da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fbec 	bl	8006584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dac:	bf00      	nop
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0ae      	b.n	8005f30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2b0c      	cmp	r3, #12
 8005dde:	f200 809f 	bhi.w	8005f20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005de2:	a201      	add	r2, pc, #4	@ (adr r2, 8005de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e1d 	.word	0x08005e1d
 8005dec:	08005f21 	.word	0x08005f21
 8005df0:	08005f21 	.word	0x08005f21
 8005df4:	08005f21 	.word	0x08005f21
 8005df8:	08005e5d 	.word	0x08005e5d
 8005dfc:	08005f21 	.word	0x08005f21
 8005e00:	08005f21 	.word	0x08005f21
 8005e04:	08005f21 	.word	0x08005f21
 8005e08:	08005e9f 	.word	0x08005e9f
 8005e0c:	08005f21 	.word	0x08005f21
 8005e10:	08005f21 	.word	0x08005f21
 8005e14:	08005f21 	.word	0x08005f21
 8005e18:	08005edf 	.word	0x08005edf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f95c 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699a      	ldr	r2, [r3, #24]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0208 	orr.w	r2, r2, #8
 8005e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	699a      	ldr	r2, [r3, #24]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 0204 	bic.w	r2, r2, #4
 8005e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6999      	ldr	r1, [r3, #24]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	619a      	str	r2, [r3, #24]
      break;
 8005e5a:	e064      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 f9ac 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699a      	ldr	r2, [r3, #24]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6999      	ldr	r1, [r3, #24]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	021a      	lsls	r2, r3, #8
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	619a      	str	r2, [r3, #24]
      break;
 8005e9c:	e043      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fa01 	bl	80062ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0208 	orr.w	r2, r2, #8
 8005eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	69da      	ldr	r2, [r3, #28]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0204 	bic.w	r2, r2, #4
 8005ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69d9      	ldr	r1, [r3, #28]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	61da      	str	r2, [r3, #28]
      break;
 8005edc:	e023      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fa55 	bl	8006394 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	69da      	ldr	r2, [r3, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69d9      	ldr	r1, [r3, #28]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	021a      	lsls	r2, r3, #8
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	61da      	str	r2, [r3, #28]
      break;
 8005f1e:	e002      	b.n	8005f26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	75fb      	strb	r3, [r7, #23]
      break;
 8005f24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a46      	ldr	r2, [pc, #280]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fa6:	d00f      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a43      	ldr	r2, [pc, #268]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a42      	ldr	r2, [pc, #264]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d007      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a41      	ldr	r2, [pc, #260]	@ (80060c0 <TIM_Base_SetConfig+0x138>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a40      	ldr	r2, [pc, #256]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d108      	bne.n	8005fda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a35      	ldr	r2, [pc, #212]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d02b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe8:	d027      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a32      	ldr	r2, [pc, #200]	@ (80060b8 <TIM_Base_SetConfig+0x130>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d023      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a31      	ldr	r2, [pc, #196]	@ (80060bc <TIM_Base_SetConfig+0x134>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d01f      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <TIM_Base_SetConfig+0x138>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d01b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a2f      	ldr	r2, [pc, #188]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d017      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a2e      	ldr	r2, [pc, #184]	@ (80060c8 <TIM_Base_SetConfig+0x140>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a2d      	ldr	r2, [pc, #180]	@ (80060cc <TIM_Base_SetConfig+0x144>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d00f      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2c      	ldr	r2, [pc, #176]	@ (80060d0 <TIM_Base_SetConfig+0x148>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d00b      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2b      	ldr	r2, [pc, #172]	@ (80060d4 <TIM_Base_SetConfig+0x14c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d007      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2a      	ldr	r2, [pc, #168]	@ (80060d8 <TIM_Base_SetConfig+0x150>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d003      	beq.n	800603a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a29      	ldr	r2, [pc, #164]	@ (80060dc <TIM_Base_SetConfig+0x154>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d108      	bne.n	800604c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a10      	ldr	r2, [pc, #64]	@ (80060b4 <TIM_Base_SetConfig+0x12c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d003      	beq.n	8006080 <TIM_Base_SetConfig+0xf8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a12      	ldr	r2, [pc, #72]	@ (80060c4 <TIM_Base_SetConfig+0x13c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d103      	bne.n	8006088 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	611a      	str	r2, [r3, #16]
  }
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC1_SetConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a1f      	ldr	r2, [pc, #124]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0308 	bic.w	r3, r3, #8
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a15      	ldr	r2, [pc, #84]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC1_SetConfig+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a14      	ldr	r2, [pc, #80]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40010000 	.word	0x40010000
 80061bc:	40010400 	.word	0x40010400

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f023 0210 	bic.w	r2, r3, #16
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	021b      	lsls	r3, r3, #8
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f023 0320 	bic.w	r3, r3, #32
 800620a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	011b      	lsls	r3, r3, #4
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a22      	ldr	r2, [pc, #136]	@ (80062a4 <TIM_OC2_SetConfig+0xe4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_OC2_SetConfig+0x68>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a21      	ldr	r2, [pc, #132]	@ (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d10d      	bne.n	8006244 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800622e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006242:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a17      	ldr	r2, [pc, #92]	@ (80062a4 <TIM_OC2_SetConfig+0xe4>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x94>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a16      	ldr	r2, [pc, #88]	@ (80062a8 <TIM_OC2_SetConfig+0xe8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d113      	bne.n	800627c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	621a      	str	r2, [r3, #32]
}
 8006296:	bf00      	nop
 8006298:	371c      	adds	r7, #28
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40010400 	.word	0x40010400

080062ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a1b      	ldr	r3, [r3, #32]
 80062ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0303 	bic.w	r3, r3, #3
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	021b      	lsls	r3, r3, #8
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	4313      	orrs	r3, r2
 8006300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a21      	ldr	r2, [pc, #132]	@ (800638c <TIM_OC3_SetConfig+0xe0>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC3_SetConfig+0x66>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <TIM_OC3_SetConfig+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10d      	bne.n	800632e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	021b      	lsls	r3, r3, #8
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	4313      	orrs	r3, r2
 8006324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800632c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <TIM_OC3_SetConfig+0xe0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x92>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a15      	ldr	r2, [pc, #84]	@ (8006390 <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d113      	bne.n	8006366 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000
 8006390:	40010400 	.word	0x40010400

08006394 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	69db      	ldr	r3, [r3, #28]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	021b      	lsls	r3, r3, #8
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	031b      	lsls	r3, r3, #12
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a12      	ldr	r2, [pc, #72]	@ (8006438 <TIM_OC4_SetConfig+0xa4>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d003      	beq.n	80063fc <TIM_OC4_SetConfig+0x68>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a11      	ldr	r2, [pc, #68]	@ (800643c <TIM_OC4_SetConfig+0xa8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d109      	bne.n	8006410 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006402:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	019b      	lsls	r3, r3, #6
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	621a      	str	r2, [r3, #32]
}
 800642a:	bf00      	nop
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40010400 	.word	0x40010400

08006440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006440:	b480      	push	{r7}
 8006442:	b087      	sub	sp, #28
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 031f 	and.w	r3, r3, #31
 8006452:	2201      	movs	r2, #1
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1a      	ldr	r2, [r3, #32]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	43db      	mvns	r3, r3
 8006462:	401a      	ands	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	f003 031f 	and.w	r3, r3, #31
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	fa01 f303 	lsl.w	r3, r1, r3
 8006478:	431a      	orrs	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800649c:	2b01      	cmp	r3, #1
 800649e:	d101      	bne.n	80064a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064a0:	2302      	movs	r3, #2
 80064a2:	e05a      	b.n	800655a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a21      	ldr	r2, [pc, #132]	@ (8006568 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d022      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064f0:	d01d      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a1d      	ldr	r2, [pc, #116]	@ (800656c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a1b      	ldr	r2, [pc, #108]	@ (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d013      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a1a      	ldr	r2, [pc, #104]	@ (8006574 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a17      	ldr	r2, [pc, #92]	@ (800657c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a15      	ldr	r2, [pc, #84]	@ (8006580 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d10c      	bne.n	8006548 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4313      	orrs	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006558:	2300      	movs	r3, #0
}
 800655a:	4618      	mov	r0, r3
 800655c:	3714      	adds	r7, #20
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40010400 	.word	0x40010400
 800657c:	40014000 	.word	0x40014000
 8006580:	40001800 	.word	0x40001800

08006584 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e042      	b.n	8006644 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fc f968 	bl	80028a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2224      	movs	r2, #36	@ 0x24
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 ff85 	bl	8007500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006604:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006614:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006624:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	@ 0x28
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b20      	cmp	r3, #32
 800666a:	d175      	bne.n	8006758 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d002      	beq.n	8006678 <HAL_UART_Transmit+0x2c>
 8006672:	88fb      	ldrh	r3, [r7, #6]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e06e      	b.n	800675a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2221      	movs	r2, #33	@ 0x21
 8006686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800668a:	f7fc fd5b 	bl	8003144 <HAL_GetTick>
 800668e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	88fa      	ldrh	r2, [r7, #6]
 800669a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066a4:	d108      	bne.n	80066b8 <HAL_UART_Transmit+0x6c>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d104      	bne.n	80066b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e003      	b.n	80066c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066c0:	e02e      	b.n	8006720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2200      	movs	r2, #0
 80066ca:	2180      	movs	r1, #128	@ 0x80
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 fc5d 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d005      	beq.n	80066e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e03a      	b.n	800675a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	3302      	adds	r3, #2
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e007      	b.n	8006712 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	781a      	ldrb	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	3301      	adds	r3, #1
 8006710:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006716:	b29b      	uxth	r3, r3
 8006718:	3b01      	subs	r3, #1
 800671a:	b29a      	uxth	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1cb      	bne.n	80066c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	9300      	str	r3, [sp, #0]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2200      	movs	r2, #0
 8006732:	2140      	movs	r1, #64	@ 0x40
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 fc29 	bl	8006f8c <UART_WaitOnFlagUntilTimeout>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e006      	b.n	800675a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006754:	2300      	movs	r3, #0
 8006756:	e000      	b.n	800675a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006758:	2302      	movs	r3, #2
  }
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
 800676a:	60b9      	str	r1, [r7, #8]
 800676c:	4613      	mov	r3, r2
 800676e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b20      	cmp	r3, #32
 800677a:	d121      	bne.n	80067c0 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d002      	beq.n	8006788 <HAL_UART_Transmit_IT+0x26>
 8006782:	88fb      	ldrh	r3, [r7, #6]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e01a      	b.n	80067c2 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	88fa      	ldrh	r2, [r7, #6]
 8006796:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	88fa      	ldrh	r2, [r7, #6]
 800679c:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2221      	movs	r2, #33	@ 0x21
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80067ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b084      	sub	sp, #16
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	60f8      	str	r0, [r7, #12]
 80067d6:	60b9      	str	r1, [r7, #8]
 80067d8:	4613      	mov	r3, r2
 80067da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	d112      	bne.n	800680e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <HAL_UART_Receive_DMA+0x26>
 80067ee:	88fb      	ldrh	r3, [r7, #6]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e00b      	b.n	8006810 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067fe:	88fb      	ldrh	r3, [r7, #6]
 8006800:	461a      	mov	r2, r3
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 fc1b 	bl	8007040 <UART_Start_Receive_DMA>
 800680a:	4603      	mov	r3, r0
 800680c:	e000      	b.n	8006810 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800680e:	2302      	movs	r3, #2
  }
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b0ba      	sub	sp, #232	@ 0xe8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006844:	2300      	movs	r3, #0
 8006846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800684a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006856:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10f      	bne.n	800687e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_UART_IRQHandler+0x66>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fd83 	bl	8007382 <UART_Receive_IT>
      return;
 800687c:	e25b      	b.n	8006d36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800687e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80de 	beq.w	8006a44 <HAL_UART_IRQHandler+0x22c>
 8006888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b00      	cmp	r3, #0
 8006892:	d106      	bne.n	80068a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006898:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 80d1 	beq.w	8006a44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <HAL_UART_IRQHandler+0xae>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d005      	beq.n	80068c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068be:	f043 0201 	orr.w	r2, r3, #1
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <HAL_UART_IRQHandler+0xd2>
 80068d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e2:	f043 0202 	orr.w	r2, r3, #2
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0xf6>
 80068f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d005      	beq.n	800690e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006906:	f043 0204 	orr.w	r2, r3, #4
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800690e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006912:	f003 0308 	and.w	r3, r3, #8
 8006916:	2b00      	cmp	r3, #0
 8006918:	d011      	beq.n	800693e <HAL_UART_IRQHandler+0x126>
 800691a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d105      	bne.n	8006932 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d005      	beq.n	800693e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006936:	f043 0208 	orr.w	r2, r3, #8
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 81f2 	beq.w	8006d2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694c:	f003 0320 	and.w	r3, r3, #32
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_UART_IRQHandler+0x14e>
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006958:	f003 0320 	and.w	r3, r3, #32
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 fd0e 	bl	8007382 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006970:	2b40      	cmp	r3, #64	@ 0x40
 8006972:	bf0c      	ite	eq
 8006974:	2301      	moveq	r3, #1
 8006976:	2300      	movne	r3, #0
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b00      	cmp	r3, #0
 8006988:	d103      	bne.n	8006992 <HAL_UART_IRQHandler+0x17a>
 800698a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d04f      	beq.n	8006a32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fc16 	bl	80071c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a2:	2b40      	cmp	r3, #64	@ 0x40
 80069a4:	d141      	bne.n	8006a2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80069bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80069c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3314      	adds	r3, #20
 80069ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80069d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80069d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80069de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80069ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1d9      	bne.n	80069a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d013      	beq.n	8006a22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	4a7e      	ldr	r2, [pc, #504]	@ (8006bf8 <HAL_UART_IRQHandler+0x3e0>)
 8006a00:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fd fcfe 	bl	8004408 <HAL_DMA_Abort_IT>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d016      	beq.n	8006a40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a20:	e00e      	b.n	8006a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f99e 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	e00a      	b.n	8006a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f99a 	bl	8006d64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e006      	b.n	8006a40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f996 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006a3e:	e175      	b.n	8006d2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	bf00      	nop
    return;
 8006a42:	e173      	b.n	8006d2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	f040 814f 	bne.w	8006cec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8148 	beq.w	8006cec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a60:	f003 0310 	and.w	r3, r3, #16
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 8141 	beq.w	8006cec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	f040 80b6 	bne.w	8006bfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8145 	beq.w	8006d30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006aaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	f080 813e 	bcs.w	8006d30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006aba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ac6:	f000 8088 	beq.w	8006bda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	330c      	adds	r3, #12
 8006ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ad8:	e853 3f00 	ldrex	r3, [r3]
 8006adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ae4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006af6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006afa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1d9      	bne.n	8006aca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3314      	adds	r3, #20
 8006b1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006b26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3314      	adds	r3, #20
 8006b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006b3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006b3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e1      	bne.n	8006b16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3314      	adds	r3, #20
 8006b58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3314      	adds	r3, #20
 8006b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006b76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006b78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006b84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e3      	bne.n	8006b52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	330c      	adds	r3, #12
 8006b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006baa:	f023 0310 	bic.w	r3, r3, #16
 8006bae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006bbc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006bbe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bc2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006bca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e3      	bne.n	8006b98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fd fba7 	bl	8004328 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2202      	movs	r2, #2
 8006bde:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f8c1 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bf6:	e09b      	b.n	8006d30 <HAL_UART_IRQHandler+0x518>
 8006bf8:	0800728b 	.word	0x0800728b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 808e 	beq.w	8006d34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8089 	beq.w	8006d34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	330c      	adds	r3, #12
 8006c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	330c      	adds	r3, #12
 8006c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006c46:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c48:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e3      	bne.n	8006c22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3314      	adds	r3, #20
 8006c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	e853 3f00 	ldrex	r3, [r3]
 8006c68:	623b      	str	r3, [r7, #32]
   return(result);
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3314      	adds	r3, #20
 8006c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006c7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c86:	e841 2300 	strex	r3, r2, [r1]
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e3      	bne.n	8006c5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2220      	movs	r2, #32
 8006c96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	330c      	adds	r3, #12
 8006ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0310 	bic.w	r3, r3, #16
 8006cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006cc4:	61fa      	str	r2, [r7, #28]
 8006cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	69fa      	ldr	r2, [r7, #28]
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e3      	bne.n	8006ca0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f847 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cea:	e023      	b.n	8006d34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d009      	beq.n	8006d0c <HAL_UART_IRQHandler+0x4f4>
 8006cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fad4 	bl	80072b2 <UART_Transmit_IT>
    return;
 8006d0a:	e014      	b.n	8006d36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <HAL_UART_IRQHandler+0x51e>
 8006d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d008      	beq.n	8006d36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fb14 	bl	8007352 <UART_EndTransmit_IT>
    return;
 8006d2a:	e004      	b.n	8006d36 <HAL_UART_IRQHandler+0x51e>
    return;
 8006d2c:	bf00      	nop
 8006d2e:	e002      	b.n	8006d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d30:	bf00      	nop
 8006d32:	e000      	b.n	8006d36 <HAL_UART_IRQHandler+0x51e>
      return;
 8006d34:	bf00      	nop
  }
}
 8006d36:	37e8      	adds	r7, #232	@ 0xe8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	460b      	mov	r3, r1
 8006d82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b09c      	sub	sp, #112	@ 0x70
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d172      	bne.n	8006e92 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006dac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dae:	2200      	movs	r2, #0
 8006db0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	330c      	adds	r3, #12
 8006db8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	330c      	adds	r3, #12
 8006dd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006dd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dd4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dd8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e5      	bne.n	8006db2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3314      	adds	r3, #20
 8006dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	f023 0301 	bic.w	r3, r3, #1
 8006dfc:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	3314      	adds	r3, #20
 8006e04:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e06:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e5      	bne.n	8006de6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	3314      	adds	r3, #20
 8006e20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	623b      	str	r3, [r7, #32]
   return(result);
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	3314      	adds	r3, #20
 8006e38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e5      	bne.n	8006e1a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d119      	bne.n	8006e92 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0310 	bic.w	r3, r3, #16
 8006e74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e7e:	61fa      	str	r2, [r7, #28]
 8006e80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	69b9      	ldr	r1, [r7, #24]
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e94:	2200      	movs	r2, #0
 8006e96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d106      	bne.n	8006eae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006ea8:	f7ff ff66 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006eac:	e002      	b.n	8006eb4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006eae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006eb0:	f7fa fa5e 	bl	8001370 <HAL_UART_RxCpltCallback>
}
 8006eb4:	bf00      	nop
 8006eb6:	3770      	adds	r7, #112	@ 0x70
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d108      	bne.n	8006eea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f7ff ff48 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ee8:	e002      	b.n	8006ef0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff ff30 	bl	8006d50 <HAL_UART_RxHalfCpltCallback>
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f08:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f14:	2b80      	cmp	r3, #128	@ 0x80
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b21      	cmp	r3, #33	@ 0x21
 8006f2a:	d108      	bne.n	8006f3e <UART_DMAError+0x46>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2200      	movs	r2, #0
 8006f36:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006f38:	68b8      	ldr	r0, [r7, #8]
 8006f3a:	f000 f91b 	bl	8007174 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f48:	2b40      	cmp	r3, #64	@ 0x40
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b22      	cmp	r3, #34	@ 0x22
 8006f5e:	d108      	bne.n	8006f72 <UART_DMAError+0x7a>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006f6c:	68b8      	ldr	r0, [r7, #8]
 8006f6e:	f000 f929 	bl	80071c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f76:	f043 0210 	orr.w	r2, r3, #16
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7ff fef0 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f9c:	e03b      	b.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
 8006fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa4:	d037      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fa6:	f7fc f8cd 	bl	8003144 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	6a3a      	ldr	r2, [r7, #32]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d302      	bcc.n	8006fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d101      	bne.n	8006fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e03a      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d023      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b80      	cmp	r3, #128	@ 0x80
 8006fd2:	d020      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d01d      	beq.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d116      	bne.n	8007016 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	617b      	str	r3, [r7, #20]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 f8e0 	bl	80071c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2208      	movs	r2, #8
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e00f      	b.n	8007036 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	429a      	cmp	r2, r3
 8007024:	bf0c      	ite	eq
 8007026:	2301      	moveq	r3, #1
 8007028:	2300      	movne	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	461a      	mov	r2, r3
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	429a      	cmp	r2, r3
 8007032:	d0b4      	beq.n	8006f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b098      	sub	sp, #96	@ 0x60
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	88fa      	ldrh	r2, [r7, #6]
 8007058:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2222      	movs	r2, #34	@ 0x22
 8007064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800706c:	4a3e      	ldr	r2, [pc, #248]	@ (8007168 <UART_Start_Receive_DMA+0x128>)
 800706e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007074:	4a3d      	ldr	r2, [pc, #244]	@ (800716c <UART_Start_Receive_DMA+0x12c>)
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800707c:	4a3c      	ldr	r2, [pc, #240]	@ (8007170 <UART_Start_Receive_DMA+0x130>)
 800707e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007084:	2200      	movs	r2, #0
 8007086:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007088:	f107 0308 	add.w	r3, r7, #8
 800708c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	f7fd f8ea 	bl	8004278 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d019      	beq.n	80070f6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	330c      	adds	r3, #12
 80070e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070e2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80070e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80070e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80070f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e5      	bne.n	80070c2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3314      	adds	r3, #20
 80070fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	f043 0301 	orr.w	r3, r3, #1
 800710c:	657b      	str	r3, [r7, #84]	@ 0x54
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3314      	adds	r3, #20
 8007114:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007116:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800711c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	3314      	adds	r3, #20
 8007130:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	e853 3f00 	ldrex	r3, [r3]
 8007138:	617b      	str	r3, [r7, #20]
   return(result);
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3314      	adds	r3, #20
 8007148:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800714a:	627a      	str	r2, [r7, #36]	@ 0x24
 800714c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714e:	6a39      	ldr	r1, [r7, #32]
 8007150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	61fb      	str	r3, [r7, #28]
   return(result);
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e5      	bne.n	800712a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3760      	adds	r7, #96	@ 0x60
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	08006d91 	.word	0x08006d91
 800716c:	08006ebd 	.word	0x08006ebd
 8007170:	08006ef9 	.word	0x08006ef9

08007174 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b089      	sub	sp, #36	@ 0x24
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	330c      	adds	r3, #12
 8007182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	60bb      	str	r3, [r7, #8]
   return(result);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007192:	61fb      	str	r3, [r7, #28]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	330c      	adds	r3, #12
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	61ba      	str	r2, [r7, #24]
 800719e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6979      	ldr	r1, [r7, #20]
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	613b      	str	r3, [r7, #16]
   return(result);
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80071b8:	bf00      	nop
 80071ba:	3724      	adds	r7, #36	@ 0x24
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b095      	sub	sp, #84	@ 0x54
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	330c      	adds	r3, #12
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d6:	e853 3f00 	ldrex	r3, [r3]
 80071da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	330c      	adds	r3, #12
 80071ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80071ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80071ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e5      	bne.n	80071cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3314      	adds	r3, #20
 8007206:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	e853 3f00 	ldrex	r3, [r3]
 800720e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	3314      	adds	r3, #20
 800721e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007220:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007228:	e841 2300 	strex	r3, r2, [r1]
 800722c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1e5      	bne.n	8007200 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	2b01      	cmp	r3, #1
 800723a:	d119      	bne.n	8007270 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	330c      	adds	r3, #12
 8007242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	e853 3f00 	ldrex	r3, [r3]
 800724a:	60bb      	str	r3, [r7, #8]
   return(result);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f023 0310 	bic.w	r3, r3, #16
 8007252:	647b      	str	r3, [r7, #68]	@ 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	330c      	adds	r3, #12
 800725a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800725c:	61ba      	str	r2, [r7, #24]
 800725e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6979      	ldr	r1, [r7, #20]
 8007262:	69ba      	ldr	r2, [r7, #24]
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	613b      	str	r3, [r7, #16]
   return(result);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e5      	bne.n	800723c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800727e:	bf00      	nop
 8007280:	3754      	adds	r7, #84	@ 0x54
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007296:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f7ff fd5d 	bl	8006d64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072aa:	bf00      	nop
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b21      	cmp	r3, #33	@ 0x21
 80072c4:	d13e      	bne.n	8007344 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ce:	d114      	bne.n	80072fa <UART_Transmit_IT+0x48>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d110      	bne.n	80072fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a1b      	ldr	r3, [r3, #32]
 80072dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	1c9a      	adds	r2, r3, #2
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	621a      	str	r2, [r3, #32]
 80072f8:	e008      	b.n	800730c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	1c59      	adds	r1, r3, #1
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6211      	str	r1, [r2, #32]
 8007304:	781a      	ldrb	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007310:	b29b      	uxth	r3, r3
 8007312:	3b01      	subs	r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4619      	mov	r1, r3
 800731a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10f      	bne.n	8007340 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800732e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800733e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007340:	2300      	movs	r3, #0
 8007342:	e000      	b.n	8007346 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007344:	2302      	movs	r3, #2
  }
}
 8007346:	4618      	mov	r0, r3
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b082      	sub	sp, #8
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68da      	ldr	r2, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007368:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff fce2 	bl	8006d3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b08c      	sub	sp, #48	@ 0x30
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b22      	cmp	r3, #34	@ 0x22
 8007394:	f040 80ae 	bne.w	80074f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a0:	d117      	bne.n	80073d2 <UART_Receive_IT+0x50>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d113      	bne.n	80073d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	1c9a      	adds	r2, r3, #2
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80073d0:	e026      	b.n	8007420 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073e4:	d007      	beq.n	80073f6 <UART_Receive_IT+0x74>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10a      	bne.n	8007404 <UART_Receive_IT+0x82>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d106      	bne.n	8007404 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	e008      	b.n	8007416 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007410:	b2da      	uxtb	r2, r3
 8007412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007414:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b01      	subs	r3, #1
 8007428:	b29b      	uxth	r3, r3
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4619      	mov	r1, r3
 800742e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007430:	2b00      	cmp	r3, #0
 8007432:	d15d      	bne.n	80074f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f022 0220 	bic.w	r2, r2, #32
 8007442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	695a      	ldr	r2, [r3, #20]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007476:	2b01      	cmp	r3, #1
 8007478:	d135      	bne.n	80074e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	330c      	adds	r3, #12
 800749e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0310 	and.w	r3, r3, #16
 80074be:	2b10      	cmp	r3, #16
 80074c0:	d10a      	bne.n	80074d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074c2:	2300      	movs	r3, #0
 80074c4:	60fb      	str	r3, [r7, #12]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80074dc:	4619      	mov	r1, r3
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f7ff fc4a 	bl	8006d78 <HAL_UARTEx_RxEventCallback>
 80074e4:	e002      	b.n	80074ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f7f9 ff42 	bl	8001370 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e002      	b.n	80074f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80074f0:	2300      	movs	r3, #0
 80074f2:	e000      	b.n	80074f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
  }
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3730      	adds	r7, #48	@ 0x30
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007504:	b0c0      	sub	sp, #256	@ 0x100
 8007506:	af00      	add	r7, sp, #0
 8007508:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	ea40 0301 	orr.w	r3, r0, r1
 8007528:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800752a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800752e:	689a      	ldr	r2, [r3, #8]
 8007530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	431a      	orrs	r2, r3
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	431a      	orrs	r2, r3
 8007540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007544:	69db      	ldr	r3, [r3, #28]
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800754c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007558:	f021 010c 	bic.w	r1, r1, #12
 800755c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007566:	430b      	orrs	r3, r1
 8007568:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800756a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757a:	6999      	ldr	r1, [r3, #24]
 800757c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	ea40 0301 	orr.w	r3, r0, r1
 8007586:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	4b8f      	ldr	r3, [pc, #572]	@ (80077cc <UART_SetConfig+0x2cc>)
 8007590:	429a      	cmp	r2, r3
 8007592:	d005      	beq.n	80075a0 <UART_SetConfig+0xa0>
 8007594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b8d      	ldr	r3, [pc, #564]	@ (80077d0 <UART_SetConfig+0x2d0>)
 800759c:	429a      	cmp	r2, r3
 800759e:	d104      	bne.n	80075aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075a0:	f7fd fff8 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 80075a4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80075a8:	e003      	b.n	80075b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80075aa:	f7fd ffdf 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80075ae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075bc:	f040 810c 	bne.w	80077d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80075ca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80075ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80075d2:	4622      	mov	r2, r4
 80075d4:	462b      	mov	r3, r5
 80075d6:	1891      	adds	r1, r2, r2
 80075d8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80075da:	415b      	adcs	r3, r3
 80075dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80075de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80075e2:	4621      	mov	r1, r4
 80075e4:	eb12 0801 	adds.w	r8, r2, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	eb43 0901 	adc.w	r9, r3, r1
 80075ee:	f04f 0200 	mov.w	r2, #0
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007602:	4690      	mov	r8, r2
 8007604:	4699      	mov	r9, r3
 8007606:	4623      	mov	r3, r4
 8007608:	eb18 0303 	adds.w	r3, r8, r3
 800760c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007610:	462b      	mov	r3, r5
 8007612:	eb49 0303 	adc.w	r3, r9, r3
 8007616:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007626:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800762a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800762e:	460b      	mov	r3, r1
 8007630:	18db      	adds	r3, r3, r3
 8007632:	653b      	str	r3, [r7, #80]	@ 0x50
 8007634:	4613      	mov	r3, r2
 8007636:	eb42 0303 	adc.w	r3, r2, r3
 800763a:	657b      	str	r3, [r7, #84]	@ 0x54
 800763c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007640:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007644:	f7f9 fb20 	bl	8000c88 <__aeabi_uldivmod>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4b61      	ldr	r3, [pc, #388]	@ (80077d4 <UART_SetConfig+0x2d4>)
 800764e:	fba3 2302 	umull	r2, r3, r3, r2
 8007652:	095b      	lsrs	r3, r3, #5
 8007654:	011c      	lsls	r4, r3, #4
 8007656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800765a:	2200      	movs	r2, #0
 800765c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007660:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007664:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007668:	4642      	mov	r2, r8
 800766a:	464b      	mov	r3, r9
 800766c:	1891      	adds	r1, r2, r2
 800766e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007670:	415b      	adcs	r3, r3
 8007672:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007674:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007678:	4641      	mov	r1, r8
 800767a:	eb12 0a01 	adds.w	sl, r2, r1
 800767e:	4649      	mov	r1, r9
 8007680:	eb43 0b01 	adc.w	fp, r3, r1
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007690:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007698:	4692      	mov	sl, r2
 800769a:	469b      	mov	fp, r3
 800769c:	4643      	mov	r3, r8
 800769e:	eb1a 0303 	adds.w	r3, sl, r3
 80076a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80076a6:	464b      	mov	r3, r9
 80076a8:	eb4b 0303 	adc.w	r3, fp, r3
 80076ac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80076b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80076bc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80076c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80076c4:	460b      	mov	r3, r1
 80076c6:	18db      	adds	r3, r3, r3
 80076c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80076ca:	4613      	mov	r3, r2
 80076cc:	eb42 0303 	adc.w	r3, r2, r3
 80076d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80076d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80076da:	f7f9 fad5 	bl	8000c88 <__aeabi_uldivmod>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4611      	mov	r1, r2
 80076e4:	4b3b      	ldr	r3, [pc, #236]	@ (80077d4 <UART_SetConfig+0x2d4>)
 80076e6:	fba3 2301 	umull	r2, r3, r3, r1
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	2264      	movs	r2, #100	@ 0x64
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	1acb      	subs	r3, r1, r3
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80076fa:	4b36      	ldr	r3, [pc, #216]	@ (80077d4 <UART_SetConfig+0x2d4>)
 80076fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007700:	095b      	lsrs	r3, r3, #5
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007708:	441c      	add	r4, r3
 800770a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800770e:	2200      	movs	r2, #0
 8007710:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007714:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007718:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800771c:	4642      	mov	r2, r8
 800771e:	464b      	mov	r3, r9
 8007720:	1891      	adds	r1, r2, r2
 8007722:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007724:	415b      	adcs	r3, r3
 8007726:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007728:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800772c:	4641      	mov	r1, r8
 800772e:	1851      	adds	r1, r2, r1
 8007730:	6339      	str	r1, [r7, #48]	@ 0x30
 8007732:	4649      	mov	r1, r9
 8007734:	414b      	adcs	r3, r1
 8007736:	637b      	str	r3, [r7, #52]	@ 0x34
 8007738:	f04f 0200 	mov.w	r2, #0
 800773c:	f04f 0300 	mov.w	r3, #0
 8007740:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007744:	4659      	mov	r1, fp
 8007746:	00cb      	lsls	r3, r1, #3
 8007748:	4651      	mov	r1, sl
 800774a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800774e:	4651      	mov	r1, sl
 8007750:	00ca      	lsls	r2, r1, #3
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	4603      	mov	r3, r0
 8007758:	4642      	mov	r2, r8
 800775a:	189b      	adds	r3, r3, r2
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007760:	464b      	mov	r3, r9
 8007762:	460a      	mov	r2, r1
 8007764:	eb42 0303 	adc.w	r3, r2, r3
 8007768:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800776c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007778:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800777c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007780:	460b      	mov	r3, r1
 8007782:	18db      	adds	r3, r3, r3
 8007784:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007786:	4613      	mov	r3, r2
 8007788:	eb42 0303 	adc.w	r3, r2, r3
 800778c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800778e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007792:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007796:	f7f9 fa77 	bl	8000c88 <__aeabi_uldivmod>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <UART_SetConfig+0x2d4>)
 80077a0:	fba3 1302 	umull	r1, r3, r3, r2
 80077a4:	095b      	lsrs	r3, r3, #5
 80077a6:	2164      	movs	r1, #100	@ 0x64
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	3332      	adds	r3, #50	@ 0x32
 80077b2:	4a08      	ldr	r2, [pc, #32]	@ (80077d4 <UART_SetConfig+0x2d4>)
 80077b4:	fba2 2303 	umull	r2, r3, r2, r3
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	f003 0207 	and.w	r2, r3, #7
 80077be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4422      	add	r2, r4
 80077c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80077c8:	e106      	b.n	80079d8 <UART_SetConfig+0x4d8>
 80077ca:	bf00      	nop
 80077cc:	40011000 	.word	0x40011000
 80077d0:	40011400 	.word	0x40011400
 80077d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80077d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077dc:	2200      	movs	r2, #0
 80077de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077e2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80077e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80077ea:	4642      	mov	r2, r8
 80077ec:	464b      	mov	r3, r9
 80077ee:	1891      	adds	r1, r2, r2
 80077f0:	6239      	str	r1, [r7, #32]
 80077f2:	415b      	adcs	r3, r3
 80077f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077fa:	4641      	mov	r1, r8
 80077fc:	1854      	adds	r4, r2, r1
 80077fe:	4649      	mov	r1, r9
 8007800:	eb43 0501 	adc.w	r5, r3, r1
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	00eb      	lsls	r3, r5, #3
 800780e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007812:	00e2      	lsls	r2, r4, #3
 8007814:	4614      	mov	r4, r2
 8007816:	461d      	mov	r5, r3
 8007818:	4643      	mov	r3, r8
 800781a:	18e3      	adds	r3, r4, r3
 800781c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007820:	464b      	mov	r3, r9
 8007822:	eb45 0303 	adc.w	r3, r5, r3
 8007826:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007836:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f04f 0300 	mov.w	r3, #0
 8007842:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007846:	4629      	mov	r1, r5
 8007848:	008b      	lsls	r3, r1, #2
 800784a:	4621      	mov	r1, r4
 800784c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007850:	4621      	mov	r1, r4
 8007852:	008a      	lsls	r2, r1, #2
 8007854:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007858:	f7f9 fa16 	bl	8000c88 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4b60      	ldr	r3, [pc, #384]	@ (80079e4 <UART_SetConfig+0x4e4>)
 8007862:	fba3 2302 	umull	r2, r3, r3, r2
 8007866:	095b      	lsrs	r3, r3, #5
 8007868:	011c      	lsls	r4, r3, #4
 800786a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800786e:	2200      	movs	r2, #0
 8007870:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007874:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007878:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800787c:	4642      	mov	r2, r8
 800787e:	464b      	mov	r3, r9
 8007880:	1891      	adds	r1, r2, r2
 8007882:	61b9      	str	r1, [r7, #24]
 8007884:	415b      	adcs	r3, r3
 8007886:	61fb      	str	r3, [r7, #28]
 8007888:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800788c:	4641      	mov	r1, r8
 800788e:	1851      	adds	r1, r2, r1
 8007890:	6139      	str	r1, [r7, #16]
 8007892:	4649      	mov	r1, r9
 8007894:	414b      	adcs	r3, r1
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80078a4:	4659      	mov	r1, fp
 80078a6:	00cb      	lsls	r3, r1, #3
 80078a8:	4651      	mov	r1, sl
 80078aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ae:	4651      	mov	r1, sl
 80078b0:	00ca      	lsls	r2, r1, #3
 80078b2:	4610      	mov	r0, r2
 80078b4:	4619      	mov	r1, r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	4642      	mov	r2, r8
 80078ba:	189b      	adds	r3, r3, r2
 80078bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80078c0:	464b      	mov	r3, r9
 80078c2:	460a      	mov	r2, r1
 80078c4:	eb42 0303 	adc.w	r3, r2, r3
 80078c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80078cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80078d8:	f04f 0200 	mov.w	r2, #0
 80078dc:	f04f 0300 	mov.w	r3, #0
 80078e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80078e4:	4649      	mov	r1, r9
 80078e6:	008b      	lsls	r3, r1, #2
 80078e8:	4641      	mov	r1, r8
 80078ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078ee:	4641      	mov	r1, r8
 80078f0:	008a      	lsls	r2, r1, #2
 80078f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80078f6:	f7f9 f9c7 	bl	8000c88 <__aeabi_uldivmod>
 80078fa:	4602      	mov	r2, r0
 80078fc:	460b      	mov	r3, r1
 80078fe:	4611      	mov	r1, r2
 8007900:	4b38      	ldr	r3, [pc, #224]	@ (80079e4 <UART_SetConfig+0x4e4>)
 8007902:	fba3 2301 	umull	r2, r3, r3, r1
 8007906:	095b      	lsrs	r3, r3, #5
 8007908:	2264      	movs	r2, #100	@ 0x64
 800790a:	fb02 f303 	mul.w	r3, r2, r3
 800790e:	1acb      	subs	r3, r1, r3
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	3332      	adds	r3, #50	@ 0x32
 8007914:	4a33      	ldr	r2, [pc, #204]	@ (80079e4 <UART_SetConfig+0x4e4>)
 8007916:	fba2 2303 	umull	r2, r3, r2, r3
 800791a:	095b      	lsrs	r3, r3, #5
 800791c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007920:	441c      	add	r4, r3
 8007922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007926:	2200      	movs	r2, #0
 8007928:	673b      	str	r3, [r7, #112]	@ 0x70
 800792a:	677a      	str	r2, [r7, #116]	@ 0x74
 800792c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007930:	4642      	mov	r2, r8
 8007932:	464b      	mov	r3, r9
 8007934:	1891      	adds	r1, r2, r2
 8007936:	60b9      	str	r1, [r7, #8]
 8007938:	415b      	adcs	r3, r3
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007940:	4641      	mov	r1, r8
 8007942:	1851      	adds	r1, r2, r1
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	4649      	mov	r1, r9
 8007948:	414b      	adcs	r3, r1
 800794a:	607b      	str	r3, [r7, #4]
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	f04f 0300 	mov.w	r3, #0
 8007954:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007958:	4659      	mov	r1, fp
 800795a:	00cb      	lsls	r3, r1, #3
 800795c:	4651      	mov	r1, sl
 800795e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007962:	4651      	mov	r1, sl
 8007964:	00ca      	lsls	r2, r1, #3
 8007966:	4610      	mov	r0, r2
 8007968:	4619      	mov	r1, r3
 800796a:	4603      	mov	r3, r0
 800796c:	4642      	mov	r2, r8
 800796e:	189b      	adds	r3, r3, r2
 8007970:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007972:	464b      	mov	r3, r9
 8007974:	460a      	mov	r2, r1
 8007976:	eb42 0303 	adc.w	r3, r2, r3
 800797a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	663b      	str	r3, [r7, #96]	@ 0x60
 8007986:	667a      	str	r2, [r7, #100]	@ 0x64
 8007988:	f04f 0200 	mov.w	r2, #0
 800798c:	f04f 0300 	mov.w	r3, #0
 8007990:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007994:	4649      	mov	r1, r9
 8007996:	008b      	lsls	r3, r1, #2
 8007998:	4641      	mov	r1, r8
 800799a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800799e:	4641      	mov	r1, r8
 80079a0:	008a      	lsls	r2, r1, #2
 80079a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80079a6:	f7f9 f96f 	bl	8000c88 <__aeabi_uldivmod>
 80079aa:	4602      	mov	r2, r0
 80079ac:	460b      	mov	r3, r1
 80079ae:	4b0d      	ldr	r3, [pc, #52]	@ (80079e4 <UART_SetConfig+0x4e4>)
 80079b0:	fba3 1302 	umull	r1, r3, r3, r2
 80079b4:	095b      	lsrs	r3, r3, #5
 80079b6:	2164      	movs	r1, #100	@ 0x64
 80079b8:	fb01 f303 	mul.w	r3, r1, r3
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	3332      	adds	r3, #50	@ 0x32
 80079c2:	4a08      	ldr	r2, [pc, #32]	@ (80079e4 <UART_SetConfig+0x4e4>)
 80079c4:	fba2 2303 	umull	r2, r3, r2, r3
 80079c8:	095b      	lsrs	r3, r3, #5
 80079ca:	f003 020f 	and.w	r2, r3, #15
 80079ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4422      	add	r2, r4
 80079d6:	609a      	str	r2, [r3, #8]
}
 80079d8:	bf00      	nop
 80079da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80079de:	46bd      	mov	sp, r7
 80079e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e4:	51eb851f 	.word	0x51eb851f

080079e8 <__cvt>:
 80079e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079ec:	ec57 6b10 	vmov	r6, r7, d0
 80079f0:	2f00      	cmp	r7, #0
 80079f2:	460c      	mov	r4, r1
 80079f4:	4619      	mov	r1, r3
 80079f6:	463b      	mov	r3, r7
 80079f8:	bfbb      	ittet	lt
 80079fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80079fe:	461f      	movlt	r7, r3
 8007a00:	2300      	movge	r3, #0
 8007a02:	232d      	movlt	r3, #45	@ 0x2d
 8007a04:	700b      	strb	r3, [r1, #0]
 8007a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a08:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a0c:	4691      	mov	r9, r2
 8007a0e:	f023 0820 	bic.w	r8, r3, #32
 8007a12:	bfbc      	itt	lt
 8007a14:	4632      	movlt	r2, r6
 8007a16:	4616      	movlt	r6, r2
 8007a18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a1c:	d005      	beq.n	8007a2a <__cvt+0x42>
 8007a1e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a22:	d100      	bne.n	8007a26 <__cvt+0x3e>
 8007a24:	3401      	adds	r4, #1
 8007a26:	2102      	movs	r1, #2
 8007a28:	e000      	b.n	8007a2c <__cvt+0x44>
 8007a2a:	2103      	movs	r1, #3
 8007a2c:	ab03      	add	r3, sp, #12
 8007a2e:	9301      	str	r3, [sp, #4]
 8007a30:	ab02      	add	r3, sp, #8
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	ec47 6b10 	vmov	d0, r6, r7
 8007a38:	4653      	mov	r3, sl
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	f001 f874 	bl	8008b28 <_dtoa_r>
 8007a40:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a44:	4605      	mov	r5, r0
 8007a46:	d119      	bne.n	8007a7c <__cvt+0x94>
 8007a48:	f019 0f01 	tst.w	r9, #1
 8007a4c:	d00e      	beq.n	8007a6c <__cvt+0x84>
 8007a4e:	eb00 0904 	add.w	r9, r0, r4
 8007a52:	2200      	movs	r2, #0
 8007a54:	2300      	movs	r3, #0
 8007a56:	4630      	mov	r0, r6
 8007a58:	4639      	mov	r1, r7
 8007a5a:	f7f9 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a5e:	b108      	cbz	r0, 8007a64 <__cvt+0x7c>
 8007a60:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a64:	2230      	movs	r2, #48	@ 0x30
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	454b      	cmp	r3, r9
 8007a6a:	d31e      	bcc.n	8007aaa <__cvt+0xc2>
 8007a6c:	9b03      	ldr	r3, [sp, #12]
 8007a6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a70:	1b5b      	subs	r3, r3, r5
 8007a72:	4628      	mov	r0, r5
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	b004      	add	sp, #16
 8007a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a80:	eb00 0904 	add.w	r9, r0, r4
 8007a84:	d1e5      	bne.n	8007a52 <__cvt+0x6a>
 8007a86:	7803      	ldrb	r3, [r0, #0]
 8007a88:	2b30      	cmp	r3, #48	@ 0x30
 8007a8a:	d10a      	bne.n	8007aa2 <__cvt+0xba>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2300      	movs	r3, #0
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f9 f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a98:	b918      	cbnz	r0, 8007aa2 <__cvt+0xba>
 8007a9a:	f1c4 0401 	rsb	r4, r4, #1
 8007a9e:	f8ca 4000 	str.w	r4, [sl]
 8007aa2:	f8da 3000 	ldr.w	r3, [sl]
 8007aa6:	4499      	add	r9, r3
 8007aa8:	e7d3      	b.n	8007a52 <__cvt+0x6a>
 8007aaa:	1c59      	adds	r1, r3, #1
 8007aac:	9103      	str	r1, [sp, #12]
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	e7d9      	b.n	8007a66 <__cvt+0x7e>

08007ab2 <__exponent>:
 8007ab2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ab4:	2900      	cmp	r1, #0
 8007ab6:	bfba      	itte	lt
 8007ab8:	4249      	neglt	r1, r1
 8007aba:	232d      	movlt	r3, #45	@ 0x2d
 8007abc:	232b      	movge	r3, #43	@ 0x2b
 8007abe:	2909      	cmp	r1, #9
 8007ac0:	7002      	strb	r2, [r0, #0]
 8007ac2:	7043      	strb	r3, [r0, #1]
 8007ac4:	dd29      	ble.n	8007b1a <__exponent+0x68>
 8007ac6:	f10d 0307 	add.w	r3, sp, #7
 8007aca:	461d      	mov	r5, r3
 8007acc:	270a      	movs	r7, #10
 8007ace:	461a      	mov	r2, r3
 8007ad0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007ad4:	fb07 1416 	mls	r4, r7, r6, r1
 8007ad8:	3430      	adds	r4, #48	@ 0x30
 8007ada:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007ade:	460c      	mov	r4, r1
 8007ae0:	2c63      	cmp	r4, #99	@ 0x63
 8007ae2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	dcf1      	bgt.n	8007ace <__exponent+0x1c>
 8007aea:	3130      	adds	r1, #48	@ 0x30
 8007aec:	1e94      	subs	r4, r2, #2
 8007aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007af2:	1c41      	adds	r1, r0, #1
 8007af4:	4623      	mov	r3, r4
 8007af6:	42ab      	cmp	r3, r5
 8007af8:	d30a      	bcc.n	8007b10 <__exponent+0x5e>
 8007afa:	f10d 0309 	add.w	r3, sp, #9
 8007afe:	1a9b      	subs	r3, r3, r2
 8007b00:	42ac      	cmp	r4, r5
 8007b02:	bf88      	it	hi
 8007b04:	2300      	movhi	r3, #0
 8007b06:	3302      	adds	r3, #2
 8007b08:	4403      	add	r3, r0
 8007b0a:	1a18      	subs	r0, r3, r0
 8007b0c:	b003      	add	sp, #12
 8007b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b10:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b14:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b18:	e7ed      	b.n	8007af6 <__exponent+0x44>
 8007b1a:	2330      	movs	r3, #48	@ 0x30
 8007b1c:	3130      	adds	r1, #48	@ 0x30
 8007b1e:	7083      	strb	r3, [r0, #2]
 8007b20:	70c1      	strb	r1, [r0, #3]
 8007b22:	1d03      	adds	r3, r0, #4
 8007b24:	e7f1      	b.n	8007b0a <__exponent+0x58>
	...

08007b28 <_printf_float>:
 8007b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2c:	b08d      	sub	sp, #52	@ 0x34
 8007b2e:	460c      	mov	r4, r1
 8007b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007b34:	4616      	mov	r6, r2
 8007b36:	461f      	mov	r7, r3
 8007b38:	4605      	mov	r5, r0
 8007b3a:	f000 feef 	bl	800891c <_localeconv_r>
 8007b3e:	6803      	ldr	r3, [r0, #0]
 8007b40:	9304      	str	r3, [sp, #16]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7f8 fb94 	bl	8000270 <strlen>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8007b50:	9005      	str	r0, [sp, #20]
 8007b52:	3307      	adds	r3, #7
 8007b54:	f023 0307 	bic.w	r3, r3, #7
 8007b58:	f103 0208 	add.w	r2, r3, #8
 8007b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b60:	f8d4 b000 	ldr.w	fp, [r4]
 8007b64:	f8c8 2000 	str.w	r2, [r8]
 8007b68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b6c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007b70:	9307      	str	r3, [sp, #28]
 8007b72:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b76:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b7e:	4b9c      	ldr	r3, [pc, #624]	@ (8007df0 <_printf_float+0x2c8>)
 8007b80:	f04f 32ff 	mov.w	r2, #4294967295
 8007b84:	f7f8 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 8007b88:	bb70      	cbnz	r0, 8007be8 <_printf_float+0xc0>
 8007b8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b8e:	4b98      	ldr	r3, [pc, #608]	@ (8007df0 <_printf_float+0x2c8>)
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295
 8007b94:	f7f8 ffac 	bl	8000af0 <__aeabi_dcmple>
 8007b98:	bb30      	cbnz	r0, 8007be8 <_printf_float+0xc0>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	f7f8 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8007ba6:	b110      	cbz	r0, 8007bae <_printf_float+0x86>
 8007ba8:	232d      	movs	r3, #45	@ 0x2d
 8007baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bae:	4a91      	ldr	r2, [pc, #580]	@ (8007df4 <_printf_float+0x2cc>)
 8007bb0:	4b91      	ldr	r3, [pc, #580]	@ (8007df8 <_printf_float+0x2d0>)
 8007bb2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bb6:	bf94      	ite	ls
 8007bb8:	4690      	movls	r8, r2
 8007bba:	4698      	movhi	r8, r3
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	f02b 0304 	bic.w	r3, fp, #4
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	f04f 0900 	mov.w	r9, #0
 8007bca:	9700      	str	r7, [sp, #0]
 8007bcc:	4633      	mov	r3, r6
 8007bce:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 f9d2 	bl	8007f7c <_printf_common>
 8007bd8:	3001      	adds	r0, #1
 8007bda:	f040 808d 	bne.w	8007cf8 <_printf_float+0x1d0>
 8007bde:	f04f 30ff 	mov.w	r0, #4294967295
 8007be2:	b00d      	add	sp, #52	@ 0x34
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	4642      	mov	r2, r8
 8007bea:	464b      	mov	r3, r9
 8007bec:	4640      	mov	r0, r8
 8007bee:	4649      	mov	r1, r9
 8007bf0:	f7f8 ff9c 	bl	8000b2c <__aeabi_dcmpun>
 8007bf4:	b140      	cbz	r0, 8007c08 <_printf_float+0xe0>
 8007bf6:	464b      	mov	r3, r9
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	bfbc      	itt	lt
 8007bfc:	232d      	movlt	r3, #45	@ 0x2d
 8007bfe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c02:	4a7e      	ldr	r2, [pc, #504]	@ (8007dfc <_printf_float+0x2d4>)
 8007c04:	4b7e      	ldr	r3, [pc, #504]	@ (8007e00 <_printf_float+0x2d8>)
 8007c06:	e7d4      	b.n	8007bb2 <_printf_float+0x8a>
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c0e:	9206      	str	r2, [sp, #24]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	d13b      	bne.n	8007c8c <_printf_float+0x164>
 8007c14:	2306      	movs	r3, #6
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	9303      	str	r3, [sp, #12]
 8007c22:	ab0a      	add	r3, sp, #40	@ 0x28
 8007c24:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007c28:	ab09      	add	r3, sp, #36	@ 0x24
 8007c2a:	9300      	str	r3, [sp, #0]
 8007c2c:	6861      	ldr	r1, [r4, #4]
 8007c2e:	ec49 8b10 	vmov	d0, r8, r9
 8007c32:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007c36:	4628      	mov	r0, r5
 8007c38:	f7ff fed6 	bl	80079e8 <__cvt>
 8007c3c:	9b06      	ldr	r3, [sp, #24]
 8007c3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c40:	2b47      	cmp	r3, #71	@ 0x47
 8007c42:	4680      	mov	r8, r0
 8007c44:	d129      	bne.n	8007c9a <_printf_float+0x172>
 8007c46:	1cc8      	adds	r0, r1, #3
 8007c48:	db02      	blt.n	8007c50 <_printf_float+0x128>
 8007c4a:	6863      	ldr	r3, [r4, #4]
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	dd41      	ble.n	8007cd4 <_printf_float+0x1ac>
 8007c50:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c54:	fa5f fa8a 	uxtb.w	sl, sl
 8007c58:	3901      	subs	r1, #1
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007c60:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c62:	f7ff ff26 	bl	8007ab2 <__exponent>
 8007c66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c68:	1813      	adds	r3, r2, r0
 8007c6a:	2a01      	cmp	r2, #1
 8007c6c:	4681      	mov	r9, r0
 8007c6e:	6123      	str	r3, [r4, #16]
 8007c70:	dc02      	bgt.n	8007c78 <_printf_float+0x150>
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	07d2      	lsls	r2, r2, #31
 8007c76:	d501      	bpl.n	8007c7c <_printf_float+0x154>
 8007c78:	3301      	adds	r3, #1
 8007c7a:	6123      	str	r3, [r4, #16]
 8007c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0a2      	beq.n	8007bca <_printf_float+0xa2>
 8007c84:	232d      	movs	r3, #45	@ 0x2d
 8007c86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c8a:	e79e      	b.n	8007bca <_printf_float+0xa2>
 8007c8c:	9a06      	ldr	r2, [sp, #24]
 8007c8e:	2a47      	cmp	r2, #71	@ 0x47
 8007c90:	d1c2      	bne.n	8007c18 <_printf_float+0xf0>
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1c0      	bne.n	8007c18 <_printf_float+0xf0>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e7bd      	b.n	8007c16 <_printf_float+0xee>
 8007c9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c9e:	d9db      	bls.n	8007c58 <_printf_float+0x130>
 8007ca0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ca4:	d118      	bne.n	8007cd8 <_printf_float+0x1b0>
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	dd0b      	ble.n	8007cc4 <_printf_float+0x19c>
 8007cac:	6121      	str	r1, [r4, #16]
 8007cae:	b913      	cbnz	r3, 8007cb6 <_printf_float+0x18e>
 8007cb0:	6822      	ldr	r2, [r4, #0]
 8007cb2:	07d0      	lsls	r0, r2, #31
 8007cb4:	d502      	bpl.n	8007cbc <_printf_float+0x194>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	440b      	add	r3, r1
 8007cba:	6123      	str	r3, [r4, #16]
 8007cbc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007cbe:	f04f 0900 	mov.w	r9, #0
 8007cc2:	e7db      	b.n	8007c7c <_printf_float+0x154>
 8007cc4:	b913      	cbnz	r3, 8007ccc <_printf_float+0x1a4>
 8007cc6:	6822      	ldr	r2, [r4, #0]
 8007cc8:	07d2      	lsls	r2, r2, #31
 8007cca:	d501      	bpl.n	8007cd0 <_printf_float+0x1a8>
 8007ccc:	3302      	adds	r3, #2
 8007cce:	e7f4      	b.n	8007cba <_printf_float+0x192>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e7f2      	b.n	8007cba <_printf_float+0x192>
 8007cd4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cda:	4299      	cmp	r1, r3
 8007cdc:	db05      	blt.n	8007cea <_printf_float+0x1c2>
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	6121      	str	r1, [r4, #16]
 8007ce2:	07d8      	lsls	r0, r3, #31
 8007ce4:	d5ea      	bpl.n	8007cbc <_printf_float+0x194>
 8007ce6:	1c4b      	adds	r3, r1, #1
 8007ce8:	e7e7      	b.n	8007cba <_printf_float+0x192>
 8007cea:	2900      	cmp	r1, #0
 8007cec:	bfd4      	ite	le
 8007cee:	f1c1 0202 	rsble	r2, r1, #2
 8007cf2:	2201      	movgt	r2, #1
 8007cf4:	4413      	add	r3, r2
 8007cf6:	e7e0      	b.n	8007cba <_printf_float+0x192>
 8007cf8:	6823      	ldr	r3, [r4, #0]
 8007cfa:	055a      	lsls	r2, r3, #21
 8007cfc:	d407      	bmi.n	8007d0e <_printf_float+0x1e6>
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	4642      	mov	r2, r8
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d12b      	bne.n	8007d64 <_printf_float+0x23c>
 8007d0c:	e767      	b.n	8007bde <_printf_float+0xb6>
 8007d0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d12:	f240 80dd 	bls.w	8007ed0 <_printf_float+0x3a8>
 8007d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f7f8 fed3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	d033      	beq.n	8007d8e <_printf_float+0x266>
 8007d26:	4a37      	ldr	r2, [pc, #220]	@ (8007e04 <_printf_float+0x2dc>)
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4631      	mov	r1, r6
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	47b8      	blx	r7
 8007d30:	3001      	adds	r0, #1
 8007d32:	f43f af54 	beq.w	8007bde <_printf_float+0xb6>
 8007d36:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007d3a:	4543      	cmp	r3, r8
 8007d3c:	db02      	blt.n	8007d44 <_printf_float+0x21c>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	07d8      	lsls	r0, r3, #31
 8007d42:	d50f      	bpl.n	8007d64 <_printf_float+0x23c>
 8007d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d48:	4631      	mov	r1, r6
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	47b8      	blx	r7
 8007d4e:	3001      	adds	r0, #1
 8007d50:	f43f af45 	beq.w	8007bde <_printf_float+0xb6>
 8007d54:	f04f 0900 	mov.w	r9, #0
 8007d58:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d5c:	f104 0a1a 	add.w	sl, r4, #26
 8007d60:	45c8      	cmp	r8, r9
 8007d62:	dc09      	bgt.n	8007d78 <_printf_float+0x250>
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	079b      	lsls	r3, r3, #30
 8007d68:	f100 8103 	bmi.w	8007f72 <_printf_float+0x44a>
 8007d6c:	68e0      	ldr	r0, [r4, #12]
 8007d6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d70:	4298      	cmp	r0, r3
 8007d72:	bfb8      	it	lt
 8007d74:	4618      	movlt	r0, r3
 8007d76:	e734      	b.n	8007be2 <_printf_float+0xba>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4652      	mov	r2, sl
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	4628      	mov	r0, r5
 8007d80:	47b8      	blx	r7
 8007d82:	3001      	adds	r0, #1
 8007d84:	f43f af2b 	beq.w	8007bde <_printf_float+0xb6>
 8007d88:	f109 0901 	add.w	r9, r9, #1
 8007d8c:	e7e8      	b.n	8007d60 <_printf_float+0x238>
 8007d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	dc39      	bgt.n	8007e08 <_printf_float+0x2e0>
 8007d94:	4a1b      	ldr	r2, [pc, #108]	@ (8007e04 <_printf_float+0x2dc>)
 8007d96:	2301      	movs	r3, #1
 8007d98:	4631      	mov	r1, r6
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	47b8      	blx	r7
 8007d9e:	3001      	adds	r0, #1
 8007da0:	f43f af1d 	beq.w	8007bde <_printf_float+0xb6>
 8007da4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007da8:	ea59 0303 	orrs.w	r3, r9, r3
 8007dac:	d102      	bne.n	8007db4 <_printf_float+0x28c>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	07d9      	lsls	r1, r3, #31
 8007db2:	d5d7      	bpl.n	8007d64 <_printf_float+0x23c>
 8007db4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f43f af0d 	beq.w	8007bde <_printf_float+0xb6>
 8007dc4:	f04f 0a00 	mov.w	sl, #0
 8007dc8:	f104 0b1a 	add.w	fp, r4, #26
 8007dcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dce:	425b      	negs	r3, r3
 8007dd0:	4553      	cmp	r3, sl
 8007dd2:	dc01      	bgt.n	8007dd8 <_printf_float+0x2b0>
 8007dd4:	464b      	mov	r3, r9
 8007dd6:	e793      	b.n	8007d00 <_printf_float+0x1d8>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	465a      	mov	r2, fp
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f aefb 	beq.w	8007bde <_printf_float+0xb6>
 8007de8:	f10a 0a01 	add.w	sl, sl, #1
 8007dec:	e7ee      	b.n	8007dcc <_printf_float+0x2a4>
 8007dee:	bf00      	nop
 8007df0:	7fefffff 	.word	0x7fefffff
 8007df4:	0800c110 	.word	0x0800c110
 8007df8:	0800c114 	.word	0x0800c114
 8007dfc:	0800c118 	.word	0x0800c118
 8007e00:	0800c11c 	.word	0x0800c11c
 8007e04:	0800c120 	.word	0x0800c120
 8007e08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e0a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e0e:	4553      	cmp	r3, sl
 8007e10:	bfa8      	it	ge
 8007e12:	4653      	movge	r3, sl
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	4699      	mov	r9, r3
 8007e18:	dc36      	bgt.n	8007e88 <_printf_float+0x360>
 8007e1a:	f04f 0b00 	mov.w	fp, #0
 8007e1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e22:	f104 021a 	add.w	r2, r4, #26
 8007e26:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e28:	9306      	str	r3, [sp, #24]
 8007e2a:	eba3 0309 	sub.w	r3, r3, r9
 8007e2e:	455b      	cmp	r3, fp
 8007e30:	dc31      	bgt.n	8007e96 <_printf_float+0x36e>
 8007e32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e34:	459a      	cmp	sl, r3
 8007e36:	dc3a      	bgt.n	8007eae <_printf_float+0x386>
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	07da      	lsls	r2, r3, #31
 8007e3c:	d437      	bmi.n	8007eae <_printf_float+0x386>
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	ebaa 0903 	sub.w	r9, sl, r3
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	ebaa 0303 	sub.w	r3, sl, r3
 8007e4a:	4599      	cmp	r9, r3
 8007e4c:	bfa8      	it	ge
 8007e4e:	4699      	movge	r9, r3
 8007e50:	f1b9 0f00 	cmp.w	r9, #0
 8007e54:	dc33      	bgt.n	8007ebe <_printf_float+0x396>
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e5e:	f104 0b1a 	add.w	fp, r4, #26
 8007e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e64:	ebaa 0303 	sub.w	r3, sl, r3
 8007e68:	eba3 0309 	sub.w	r3, r3, r9
 8007e6c:	4543      	cmp	r3, r8
 8007e6e:	f77f af79 	ble.w	8007d64 <_printf_float+0x23c>
 8007e72:	2301      	movs	r3, #1
 8007e74:	465a      	mov	r2, fp
 8007e76:	4631      	mov	r1, r6
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b8      	blx	r7
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	f43f aeae 	beq.w	8007bde <_printf_float+0xb6>
 8007e82:	f108 0801 	add.w	r8, r8, #1
 8007e86:	e7ec      	b.n	8007e62 <_printf_float+0x33a>
 8007e88:	4642      	mov	r2, r8
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47b8      	blx	r7
 8007e90:	3001      	adds	r0, #1
 8007e92:	d1c2      	bne.n	8007e1a <_printf_float+0x2f2>
 8007e94:	e6a3      	b.n	8007bde <_printf_float+0xb6>
 8007e96:	2301      	movs	r3, #1
 8007e98:	4631      	mov	r1, r6
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	9206      	str	r2, [sp, #24]
 8007e9e:	47b8      	blx	r7
 8007ea0:	3001      	adds	r0, #1
 8007ea2:	f43f ae9c 	beq.w	8007bde <_printf_float+0xb6>
 8007ea6:	9a06      	ldr	r2, [sp, #24]
 8007ea8:	f10b 0b01 	add.w	fp, fp, #1
 8007eac:	e7bb      	b.n	8007e26 <_printf_float+0x2fe>
 8007eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eb2:	4631      	mov	r1, r6
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b8      	blx	r7
 8007eb8:	3001      	adds	r0, #1
 8007eba:	d1c0      	bne.n	8007e3e <_printf_float+0x316>
 8007ebc:	e68f      	b.n	8007bde <_printf_float+0xb6>
 8007ebe:	9a06      	ldr	r2, [sp, #24]
 8007ec0:	464b      	mov	r3, r9
 8007ec2:	4442      	add	r2, r8
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d1c3      	bne.n	8007e56 <_printf_float+0x32e>
 8007ece:	e686      	b.n	8007bde <_printf_float+0xb6>
 8007ed0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007ed4:	f1ba 0f01 	cmp.w	sl, #1
 8007ed8:	dc01      	bgt.n	8007ede <_printf_float+0x3b6>
 8007eda:	07db      	lsls	r3, r3, #31
 8007edc:	d536      	bpl.n	8007f4c <_printf_float+0x424>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	4642      	mov	r2, r8
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b8      	blx	r7
 8007ee8:	3001      	adds	r0, #1
 8007eea:	f43f ae78 	beq.w	8007bde <_printf_float+0xb6>
 8007eee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ef2:	4631      	mov	r1, r6
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f43f ae70 	beq.w	8007bde <_printf_float+0xb6>
 8007efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f02:	2200      	movs	r2, #0
 8007f04:	2300      	movs	r3, #0
 8007f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f0a:	f7f8 fddd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f0e:	b9c0      	cbnz	r0, 8007f42 <_printf_float+0x41a>
 8007f10:	4653      	mov	r3, sl
 8007f12:	f108 0201 	add.w	r2, r8, #1
 8007f16:	4631      	mov	r1, r6
 8007f18:	4628      	mov	r0, r5
 8007f1a:	47b8      	blx	r7
 8007f1c:	3001      	adds	r0, #1
 8007f1e:	d10c      	bne.n	8007f3a <_printf_float+0x412>
 8007f20:	e65d      	b.n	8007bde <_printf_float+0xb6>
 8007f22:	2301      	movs	r3, #1
 8007f24:	465a      	mov	r2, fp
 8007f26:	4631      	mov	r1, r6
 8007f28:	4628      	mov	r0, r5
 8007f2a:	47b8      	blx	r7
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	f43f ae56 	beq.w	8007bde <_printf_float+0xb6>
 8007f32:	f108 0801 	add.w	r8, r8, #1
 8007f36:	45d0      	cmp	r8, sl
 8007f38:	dbf3      	blt.n	8007f22 <_printf_float+0x3fa>
 8007f3a:	464b      	mov	r3, r9
 8007f3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f40:	e6df      	b.n	8007d02 <_printf_float+0x1da>
 8007f42:	f04f 0800 	mov.w	r8, #0
 8007f46:	f104 0b1a 	add.w	fp, r4, #26
 8007f4a:	e7f4      	b.n	8007f36 <_printf_float+0x40e>
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	4642      	mov	r2, r8
 8007f50:	e7e1      	b.n	8007f16 <_printf_float+0x3ee>
 8007f52:	2301      	movs	r3, #1
 8007f54:	464a      	mov	r2, r9
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	f43f ae3e 	beq.w	8007bde <_printf_float+0xb6>
 8007f62:	f108 0801 	add.w	r8, r8, #1
 8007f66:	68e3      	ldr	r3, [r4, #12]
 8007f68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f6a:	1a5b      	subs	r3, r3, r1
 8007f6c:	4543      	cmp	r3, r8
 8007f6e:	dcf0      	bgt.n	8007f52 <_printf_float+0x42a>
 8007f70:	e6fc      	b.n	8007d6c <_printf_float+0x244>
 8007f72:	f04f 0800 	mov.w	r8, #0
 8007f76:	f104 0919 	add.w	r9, r4, #25
 8007f7a:	e7f4      	b.n	8007f66 <_printf_float+0x43e>

08007f7c <_printf_common>:
 8007f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	4616      	mov	r6, r2
 8007f82:	4698      	mov	r8, r3
 8007f84:	688a      	ldr	r2, [r1, #8]
 8007f86:	690b      	ldr	r3, [r1, #16]
 8007f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	bfb8      	it	lt
 8007f90:	4613      	movlt	r3, r2
 8007f92:	6033      	str	r3, [r6, #0]
 8007f94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007f98:	4607      	mov	r7, r0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	b10a      	cbz	r2, 8007fa2 <_printf_common+0x26>
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	6033      	str	r3, [r6, #0]
 8007fa2:	6823      	ldr	r3, [r4, #0]
 8007fa4:	0699      	lsls	r1, r3, #26
 8007fa6:	bf42      	ittt	mi
 8007fa8:	6833      	ldrmi	r3, [r6, #0]
 8007faa:	3302      	addmi	r3, #2
 8007fac:	6033      	strmi	r3, [r6, #0]
 8007fae:	6825      	ldr	r5, [r4, #0]
 8007fb0:	f015 0506 	ands.w	r5, r5, #6
 8007fb4:	d106      	bne.n	8007fc4 <_printf_common+0x48>
 8007fb6:	f104 0a19 	add.w	sl, r4, #25
 8007fba:	68e3      	ldr	r3, [r4, #12]
 8007fbc:	6832      	ldr	r2, [r6, #0]
 8007fbe:	1a9b      	subs	r3, r3, r2
 8007fc0:	42ab      	cmp	r3, r5
 8007fc2:	dc26      	bgt.n	8008012 <_printf_common+0x96>
 8007fc4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	3b00      	subs	r3, #0
 8007fcc:	bf18      	it	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	0692      	lsls	r2, r2, #26
 8007fd2:	d42b      	bmi.n	800802c <_printf_common+0xb0>
 8007fd4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007fd8:	4641      	mov	r1, r8
 8007fda:	4638      	mov	r0, r7
 8007fdc:	47c8      	blx	r9
 8007fde:	3001      	adds	r0, #1
 8007fe0:	d01e      	beq.n	8008020 <_printf_common+0xa4>
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	6922      	ldr	r2, [r4, #16]
 8007fe6:	f003 0306 	and.w	r3, r3, #6
 8007fea:	2b04      	cmp	r3, #4
 8007fec:	bf02      	ittt	eq
 8007fee:	68e5      	ldreq	r5, [r4, #12]
 8007ff0:	6833      	ldreq	r3, [r6, #0]
 8007ff2:	1aed      	subeq	r5, r5, r3
 8007ff4:	68a3      	ldr	r3, [r4, #8]
 8007ff6:	bf0c      	ite	eq
 8007ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ffc:	2500      	movne	r5, #0
 8007ffe:	4293      	cmp	r3, r2
 8008000:	bfc4      	itt	gt
 8008002:	1a9b      	subgt	r3, r3, r2
 8008004:	18ed      	addgt	r5, r5, r3
 8008006:	2600      	movs	r6, #0
 8008008:	341a      	adds	r4, #26
 800800a:	42b5      	cmp	r5, r6
 800800c:	d11a      	bne.n	8008044 <_printf_common+0xc8>
 800800e:	2000      	movs	r0, #0
 8008010:	e008      	b.n	8008024 <_printf_common+0xa8>
 8008012:	2301      	movs	r3, #1
 8008014:	4652      	mov	r2, sl
 8008016:	4641      	mov	r1, r8
 8008018:	4638      	mov	r0, r7
 800801a:	47c8      	blx	r9
 800801c:	3001      	adds	r0, #1
 800801e:	d103      	bne.n	8008028 <_printf_common+0xac>
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008028:	3501      	adds	r5, #1
 800802a:	e7c6      	b.n	8007fba <_printf_common+0x3e>
 800802c:	18e1      	adds	r1, r4, r3
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	2030      	movs	r0, #48	@ 0x30
 8008032:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008036:	4422      	add	r2, r4
 8008038:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800803c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008040:	3302      	adds	r3, #2
 8008042:	e7c7      	b.n	8007fd4 <_printf_common+0x58>
 8008044:	2301      	movs	r3, #1
 8008046:	4622      	mov	r2, r4
 8008048:	4641      	mov	r1, r8
 800804a:	4638      	mov	r0, r7
 800804c:	47c8      	blx	r9
 800804e:	3001      	adds	r0, #1
 8008050:	d0e6      	beq.n	8008020 <_printf_common+0xa4>
 8008052:	3601      	adds	r6, #1
 8008054:	e7d9      	b.n	800800a <_printf_common+0x8e>
	...

08008058 <_printf_i>:
 8008058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	7e0f      	ldrb	r7, [r1, #24]
 800805e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008060:	2f78      	cmp	r7, #120	@ 0x78
 8008062:	4691      	mov	r9, r2
 8008064:	4680      	mov	r8, r0
 8008066:	460c      	mov	r4, r1
 8008068:	469a      	mov	sl, r3
 800806a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800806e:	d807      	bhi.n	8008080 <_printf_i+0x28>
 8008070:	2f62      	cmp	r7, #98	@ 0x62
 8008072:	d80a      	bhi.n	800808a <_printf_i+0x32>
 8008074:	2f00      	cmp	r7, #0
 8008076:	f000 80d2 	beq.w	800821e <_printf_i+0x1c6>
 800807a:	2f58      	cmp	r7, #88	@ 0x58
 800807c:	f000 80b9 	beq.w	80081f2 <_printf_i+0x19a>
 8008080:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008084:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008088:	e03a      	b.n	8008100 <_printf_i+0xa8>
 800808a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800808e:	2b15      	cmp	r3, #21
 8008090:	d8f6      	bhi.n	8008080 <_printf_i+0x28>
 8008092:	a101      	add	r1, pc, #4	@ (adr r1, 8008098 <_printf_i+0x40>)
 8008094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008098:	080080f1 	.word	0x080080f1
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008081 	.word	0x08008081
 80080a4:	08008081 	.word	0x08008081
 80080a8:	08008081 	.word	0x08008081
 80080ac:	08008081 	.word	0x08008081
 80080b0:	08008105 	.word	0x08008105
 80080b4:	08008081 	.word	0x08008081
 80080b8:	08008081 	.word	0x08008081
 80080bc:	08008081 	.word	0x08008081
 80080c0:	08008081 	.word	0x08008081
 80080c4:	08008205 	.word	0x08008205
 80080c8:	0800812f 	.word	0x0800812f
 80080cc:	080081bf 	.word	0x080081bf
 80080d0:	08008081 	.word	0x08008081
 80080d4:	08008081 	.word	0x08008081
 80080d8:	08008227 	.word	0x08008227
 80080dc:	08008081 	.word	0x08008081
 80080e0:	0800812f 	.word	0x0800812f
 80080e4:	08008081 	.word	0x08008081
 80080e8:	08008081 	.word	0x08008081
 80080ec:	080081c7 	.word	0x080081c7
 80080f0:	6833      	ldr	r3, [r6, #0]
 80080f2:	1d1a      	adds	r2, r3, #4
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	6032      	str	r2, [r6, #0]
 80080f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008100:	2301      	movs	r3, #1
 8008102:	e09d      	b.n	8008240 <_printf_i+0x1e8>
 8008104:	6833      	ldr	r3, [r6, #0]
 8008106:	6820      	ldr	r0, [r4, #0]
 8008108:	1d19      	adds	r1, r3, #4
 800810a:	6031      	str	r1, [r6, #0]
 800810c:	0606      	lsls	r6, r0, #24
 800810e:	d501      	bpl.n	8008114 <_printf_i+0xbc>
 8008110:	681d      	ldr	r5, [r3, #0]
 8008112:	e003      	b.n	800811c <_printf_i+0xc4>
 8008114:	0645      	lsls	r5, r0, #25
 8008116:	d5fb      	bpl.n	8008110 <_printf_i+0xb8>
 8008118:	f9b3 5000 	ldrsh.w	r5, [r3]
 800811c:	2d00      	cmp	r5, #0
 800811e:	da03      	bge.n	8008128 <_printf_i+0xd0>
 8008120:	232d      	movs	r3, #45	@ 0x2d
 8008122:	426d      	negs	r5, r5
 8008124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008128:	4859      	ldr	r0, [pc, #356]	@ (8008290 <_printf_i+0x238>)
 800812a:	230a      	movs	r3, #10
 800812c:	e011      	b.n	8008152 <_printf_i+0xfa>
 800812e:	6821      	ldr	r1, [r4, #0]
 8008130:	6833      	ldr	r3, [r6, #0]
 8008132:	0608      	lsls	r0, r1, #24
 8008134:	f853 5b04 	ldr.w	r5, [r3], #4
 8008138:	d402      	bmi.n	8008140 <_printf_i+0xe8>
 800813a:	0649      	lsls	r1, r1, #25
 800813c:	bf48      	it	mi
 800813e:	b2ad      	uxthmi	r5, r5
 8008140:	2f6f      	cmp	r7, #111	@ 0x6f
 8008142:	4853      	ldr	r0, [pc, #332]	@ (8008290 <_printf_i+0x238>)
 8008144:	6033      	str	r3, [r6, #0]
 8008146:	bf14      	ite	ne
 8008148:	230a      	movne	r3, #10
 800814a:	2308      	moveq	r3, #8
 800814c:	2100      	movs	r1, #0
 800814e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008152:	6866      	ldr	r6, [r4, #4]
 8008154:	60a6      	str	r6, [r4, #8]
 8008156:	2e00      	cmp	r6, #0
 8008158:	bfa2      	ittt	ge
 800815a:	6821      	ldrge	r1, [r4, #0]
 800815c:	f021 0104 	bicge.w	r1, r1, #4
 8008160:	6021      	strge	r1, [r4, #0]
 8008162:	b90d      	cbnz	r5, 8008168 <_printf_i+0x110>
 8008164:	2e00      	cmp	r6, #0
 8008166:	d04b      	beq.n	8008200 <_printf_i+0x1a8>
 8008168:	4616      	mov	r6, r2
 800816a:	fbb5 f1f3 	udiv	r1, r5, r3
 800816e:	fb03 5711 	mls	r7, r3, r1, r5
 8008172:	5dc7      	ldrb	r7, [r0, r7]
 8008174:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008178:	462f      	mov	r7, r5
 800817a:	42bb      	cmp	r3, r7
 800817c:	460d      	mov	r5, r1
 800817e:	d9f4      	bls.n	800816a <_printf_i+0x112>
 8008180:	2b08      	cmp	r3, #8
 8008182:	d10b      	bne.n	800819c <_printf_i+0x144>
 8008184:	6823      	ldr	r3, [r4, #0]
 8008186:	07df      	lsls	r7, r3, #31
 8008188:	d508      	bpl.n	800819c <_printf_i+0x144>
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	6861      	ldr	r1, [r4, #4]
 800818e:	4299      	cmp	r1, r3
 8008190:	bfde      	ittt	le
 8008192:	2330      	movle	r3, #48	@ 0x30
 8008194:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008198:	f106 36ff 	addle.w	r6, r6, #4294967295
 800819c:	1b92      	subs	r2, r2, r6
 800819e:	6122      	str	r2, [r4, #16]
 80081a0:	f8cd a000 	str.w	sl, [sp]
 80081a4:	464b      	mov	r3, r9
 80081a6:	aa03      	add	r2, sp, #12
 80081a8:	4621      	mov	r1, r4
 80081aa:	4640      	mov	r0, r8
 80081ac:	f7ff fee6 	bl	8007f7c <_printf_common>
 80081b0:	3001      	adds	r0, #1
 80081b2:	d14a      	bne.n	800824a <_printf_i+0x1f2>
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	b004      	add	sp, #16
 80081ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	f043 0320 	orr.w	r3, r3, #32
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	4833      	ldr	r0, [pc, #204]	@ (8008294 <_printf_i+0x23c>)
 80081c8:	2778      	movs	r7, #120	@ 0x78
 80081ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	6831      	ldr	r1, [r6, #0]
 80081d2:	061f      	lsls	r7, r3, #24
 80081d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80081d8:	d402      	bmi.n	80081e0 <_printf_i+0x188>
 80081da:	065f      	lsls	r7, r3, #25
 80081dc:	bf48      	it	mi
 80081de:	b2ad      	uxthmi	r5, r5
 80081e0:	6031      	str	r1, [r6, #0]
 80081e2:	07d9      	lsls	r1, r3, #31
 80081e4:	bf44      	itt	mi
 80081e6:	f043 0320 	orrmi.w	r3, r3, #32
 80081ea:	6023      	strmi	r3, [r4, #0]
 80081ec:	b11d      	cbz	r5, 80081f6 <_printf_i+0x19e>
 80081ee:	2310      	movs	r3, #16
 80081f0:	e7ac      	b.n	800814c <_printf_i+0xf4>
 80081f2:	4827      	ldr	r0, [pc, #156]	@ (8008290 <_printf_i+0x238>)
 80081f4:	e7e9      	b.n	80081ca <_printf_i+0x172>
 80081f6:	6823      	ldr	r3, [r4, #0]
 80081f8:	f023 0320 	bic.w	r3, r3, #32
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	e7f6      	b.n	80081ee <_printf_i+0x196>
 8008200:	4616      	mov	r6, r2
 8008202:	e7bd      	b.n	8008180 <_printf_i+0x128>
 8008204:	6833      	ldr	r3, [r6, #0]
 8008206:	6825      	ldr	r5, [r4, #0]
 8008208:	6961      	ldr	r1, [r4, #20]
 800820a:	1d18      	adds	r0, r3, #4
 800820c:	6030      	str	r0, [r6, #0]
 800820e:	062e      	lsls	r6, r5, #24
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	d501      	bpl.n	8008218 <_printf_i+0x1c0>
 8008214:	6019      	str	r1, [r3, #0]
 8008216:	e002      	b.n	800821e <_printf_i+0x1c6>
 8008218:	0668      	lsls	r0, r5, #25
 800821a:	d5fb      	bpl.n	8008214 <_printf_i+0x1bc>
 800821c:	8019      	strh	r1, [r3, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	4616      	mov	r6, r2
 8008224:	e7bc      	b.n	80081a0 <_printf_i+0x148>
 8008226:	6833      	ldr	r3, [r6, #0]
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	6032      	str	r2, [r6, #0]
 800822c:	681e      	ldr	r6, [r3, #0]
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	2100      	movs	r1, #0
 8008232:	4630      	mov	r0, r6
 8008234:	f7f7 ffcc 	bl	80001d0 <memchr>
 8008238:	b108      	cbz	r0, 800823e <_printf_i+0x1e6>
 800823a:	1b80      	subs	r0, r0, r6
 800823c:	6060      	str	r0, [r4, #4]
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	2300      	movs	r3, #0
 8008244:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008248:	e7aa      	b.n	80081a0 <_printf_i+0x148>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	4632      	mov	r2, r6
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	47d0      	blx	sl
 8008254:	3001      	adds	r0, #1
 8008256:	d0ad      	beq.n	80081b4 <_printf_i+0x15c>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	079b      	lsls	r3, r3, #30
 800825c:	d413      	bmi.n	8008286 <_printf_i+0x22e>
 800825e:	68e0      	ldr	r0, [r4, #12]
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	4298      	cmp	r0, r3
 8008264:	bfb8      	it	lt
 8008266:	4618      	movlt	r0, r3
 8008268:	e7a6      	b.n	80081b8 <_printf_i+0x160>
 800826a:	2301      	movs	r3, #1
 800826c:	4632      	mov	r2, r6
 800826e:	4649      	mov	r1, r9
 8008270:	4640      	mov	r0, r8
 8008272:	47d0      	blx	sl
 8008274:	3001      	adds	r0, #1
 8008276:	d09d      	beq.n	80081b4 <_printf_i+0x15c>
 8008278:	3501      	adds	r5, #1
 800827a:	68e3      	ldr	r3, [r4, #12]
 800827c:	9903      	ldr	r1, [sp, #12]
 800827e:	1a5b      	subs	r3, r3, r1
 8008280:	42ab      	cmp	r3, r5
 8008282:	dcf2      	bgt.n	800826a <_printf_i+0x212>
 8008284:	e7eb      	b.n	800825e <_printf_i+0x206>
 8008286:	2500      	movs	r5, #0
 8008288:	f104 0619 	add.w	r6, r4, #25
 800828c:	e7f5      	b.n	800827a <_printf_i+0x222>
 800828e:	bf00      	nop
 8008290:	0800c122 	.word	0x0800c122
 8008294:	0800c133 	.word	0x0800c133

08008298 <_scanf_float>:
 8008298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800829c:	b087      	sub	sp, #28
 800829e:	4617      	mov	r7, r2
 80082a0:	9303      	str	r3, [sp, #12]
 80082a2:	688b      	ldr	r3, [r1, #8]
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80082aa:	bf81      	itttt	hi
 80082ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80082b0:	eb03 0b05 	addhi.w	fp, r3, r5
 80082b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80082b8:	608b      	strhi	r3, [r1, #8]
 80082ba:	680b      	ldr	r3, [r1, #0]
 80082bc:	460a      	mov	r2, r1
 80082be:	f04f 0500 	mov.w	r5, #0
 80082c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80082c6:	f842 3b1c 	str.w	r3, [r2], #28
 80082ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082ce:	4680      	mov	r8, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	bf98      	it	ls
 80082d4:	f04f 0b00 	movls.w	fp, #0
 80082d8:	9201      	str	r2, [sp, #4]
 80082da:	4616      	mov	r6, r2
 80082dc:	46aa      	mov	sl, r5
 80082de:	46a9      	mov	r9, r5
 80082e0:	9502      	str	r5, [sp, #8]
 80082e2:	68a2      	ldr	r2, [r4, #8]
 80082e4:	b152      	cbz	r2, 80082fc <_scanf_float+0x64>
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	2b4e      	cmp	r3, #78	@ 0x4e
 80082ec:	d864      	bhi.n	80083b8 <_scanf_float+0x120>
 80082ee:	2b40      	cmp	r3, #64	@ 0x40
 80082f0:	d83c      	bhi.n	800836c <_scanf_float+0xd4>
 80082f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80082f6:	b2c8      	uxtb	r0, r1
 80082f8:	280e      	cmp	r0, #14
 80082fa:	d93a      	bls.n	8008372 <_scanf_float+0xda>
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	d003      	beq.n	800830a <_scanf_float+0x72>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800830e:	f1ba 0f01 	cmp.w	sl, #1
 8008312:	f200 8117 	bhi.w	8008544 <_scanf_float+0x2ac>
 8008316:	9b01      	ldr	r3, [sp, #4]
 8008318:	429e      	cmp	r6, r3
 800831a:	f200 8108 	bhi.w	800852e <_scanf_float+0x296>
 800831e:	2001      	movs	r0, #1
 8008320:	b007      	add	sp, #28
 8008322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008326:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800832a:	2a0d      	cmp	r2, #13
 800832c:	d8e6      	bhi.n	80082fc <_scanf_float+0x64>
 800832e:	a101      	add	r1, pc, #4	@ (adr r1, 8008334 <_scanf_float+0x9c>)
 8008330:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008334:	0800847b 	.word	0x0800847b
 8008338:	080082fd 	.word	0x080082fd
 800833c:	080082fd 	.word	0x080082fd
 8008340:	080082fd 	.word	0x080082fd
 8008344:	080084db 	.word	0x080084db
 8008348:	080084b3 	.word	0x080084b3
 800834c:	080082fd 	.word	0x080082fd
 8008350:	080082fd 	.word	0x080082fd
 8008354:	08008489 	.word	0x08008489
 8008358:	080082fd 	.word	0x080082fd
 800835c:	080082fd 	.word	0x080082fd
 8008360:	080082fd 	.word	0x080082fd
 8008364:	080082fd 	.word	0x080082fd
 8008368:	08008441 	.word	0x08008441
 800836c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008370:	e7db      	b.n	800832a <_scanf_float+0x92>
 8008372:	290e      	cmp	r1, #14
 8008374:	d8c2      	bhi.n	80082fc <_scanf_float+0x64>
 8008376:	a001      	add	r0, pc, #4	@ (adr r0, 800837c <_scanf_float+0xe4>)
 8008378:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800837c:	08008431 	.word	0x08008431
 8008380:	080082fd 	.word	0x080082fd
 8008384:	08008431 	.word	0x08008431
 8008388:	080084c7 	.word	0x080084c7
 800838c:	080082fd 	.word	0x080082fd
 8008390:	080083d9 	.word	0x080083d9
 8008394:	08008417 	.word	0x08008417
 8008398:	08008417 	.word	0x08008417
 800839c:	08008417 	.word	0x08008417
 80083a0:	08008417 	.word	0x08008417
 80083a4:	08008417 	.word	0x08008417
 80083a8:	08008417 	.word	0x08008417
 80083ac:	08008417 	.word	0x08008417
 80083b0:	08008417 	.word	0x08008417
 80083b4:	08008417 	.word	0x08008417
 80083b8:	2b6e      	cmp	r3, #110	@ 0x6e
 80083ba:	d809      	bhi.n	80083d0 <_scanf_float+0x138>
 80083bc:	2b60      	cmp	r3, #96	@ 0x60
 80083be:	d8b2      	bhi.n	8008326 <_scanf_float+0x8e>
 80083c0:	2b54      	cmp	r3, #84	@ 0x54
 80083c2:	d07b      	beq.n	80084bc <_scanf_float+0x224>
 80083c4:	2b59      	cmp	r3, #89	@ 0x59
 80083c6:	d199      	bne.n	80082fc <_scanf_float+0x64>
 80083c8:	2d07      	cmp	r5, #7
 80083ca:	d197      	bne.n	80082fc <_scanf_float+0x64>
 80083cc:	2508      	movs	r5, #8
 80083ce:	e02c      	b.n	800842a <_scanf_float+0x192>
 80083d0:	2b74      	cmp	r3, #116	@ 0x74
 80083d2:	d073      	beq.n	80084bc <_scanf_float+0x224>
 80083d4:	2b79      	cmp	r3, #121	@ 0x79
 80083d6:	e7f6      	b.n	80083c6 <_scanf_float+0x12e>
 80083d8:	6821      	ldr	r1, [r4, #0]
 80083da:	05c8      	lsls	r0, r1, #23
 80083dc:	d51b      	bpl.n	8008416 <_scanf_float+0x17e>
 80083de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80083e2:	6021      	str	r1, [r4, #0]
 80083e4:	f109 0901 	add.w	r9, r9, #1
 80083e8:	f1bb 0f00 	cmp.w	fp, #0
 80083ec:	d003      	beq.n	80083f6 <_scanf_float+0x15e>
 80083ee:	3201      	adds	r2, #1
 80083f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80083f4:	60a2      	str	r2, [r4, #8]
 80083f6:	68a3      	ldr	r3, [r4, #8]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	60a3      	str	r3, [r4, #8]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	3301      	adds	r3, #1
 8008400:	6123      	str	r3, [r4, #16]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	3b01      	subs	r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	f340 8087 	ble.w	800851c <_scanf_float+0x284>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	603b      	str	r3, [r7, #0]
 8008414:	e765      	b.n	80082e2 <_scanf_float+0x4a>
 8008416:	eb1a 0105 	adds.w	r1, sl, r5
 800841a:	f47f af6f 	bne.w	80082fc <_scanf_float+0x64>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	460d      	mov	r5, r1
 8008428:	468a      	mov	sl, r1
 800842a:	f806 3b01 	strb.w	r3, [r6], #1
 800842e:	e7e2      	b.n	80083f6 <_scanf_float+0x15e>
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	0610      	lsls	r0, r2, #24
 8008434:	f57f af62 	bpl.w	80082fc <_scanf_float+0x64>
 8008438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800843c:	6022      	str	r2, [r4, #0]
 800843e:	e7f4      	b.n	800842a <_scanf_float+0x192>
 8008440:	f1ba 0f00 	cmp.w	sl, #0
 8008444:	d10e      	bne.n	8008464 <_scanf_float+0x1cc>
 8008446:	f1b9 0f00 	cmp.w	r9, #0
 800844a:	d10e      	bne.n	800846a <_scanf_float+0x1d2>
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008452:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008456:	d108      	bne.n	800846a <_scanf_float+0x1d2>
 8008458:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800845c:	6022      	str	r2, [r4, #0]
 800845e:	f04f 0a01 	mov.w	sl, #1
 8008462:	e7e2      	b.n	800842a <_scanf_float+0x192>
 8008464:	f1ba 0f02 	cmp.w	sl, #2
 8008468:	d055      	beq.n	8008516 <_scanf_float+0x27e>
 800846a:	2d01      	cmp	r5, #1
 800846c:	d002      	beq.n	8008474 <_scanf_float+0x1dc>
 800846e:	2d04      	cmp	r5, #4
 8008470:	f47f af44 	bne.w	80082fc <_scanf_float+0x64>
 8008474:	3501      	adds	r5, #1
 8008476:	b2ed      	uxtb	r5, r5
 8008478:	e7d7      	b.n	800842a <_scanf_float+0x192>
 800847a:	f1ba 0f01 	cmp.w	sl, #1
 800847e:	f47f af3d 	bne.w	80082fc <_scanf_float+0x64>
 8008482:	f04f 0a02 	mov.w	sl, #2
 8008486:	e7d0      	b.n	800842a <_scanf_float+0x192>
 8008488:	b97d      	cbnz	r5, 80084aa <_scanf_float+0x212>
 800848a:	f1b9 0f00 	cmp.w	r9, #0
 800848e:	f47f af38 	bne.w	8008302 <_scanf_float+0x6a>
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008498:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800849c:	f040 8108 	bne.w	80086b0 <_scanf_float+0x418>
 80084a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084a4:	6022      	str	r2, [r4, #0]
 80084a6:	2501      	movs	r5, #1
 80084a8:	e7bf      	b.n	800842a <_scanf_float+0x192>
 80084aa:	2d03      	cmp	r5, #3
 80084ac:	d0e2      	beq.n	8008474 <_scanf_float+0x1dc>
 80084ae:	2d05      	cmp	r5, #5
 80084b0:	e7de      	b.n	8008470 <_scanf_float+0x1d8>
 80084b2:	2d02      	cmp	r5, #2
 80084b4:	f47f af22 	bne.w	80082fc <_scanf_float+0x64>
 80084b8:	2503      	movs	r5, #3
 80084ba:	e7b6      	b.n	800842a <_scanf_float+0x192>
 80084bc:	2d06      	cmp	r5, #6
 80084be:	f47f af1d 	bne.w	80082fc <_scanf_float+0x64>
 80084c2:	2507      	movs	r5, #7
 80084c4:	e7b1      	b.n	800842a <_scanf_float+0x192>
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	0591      	lsls	r1, r2, #22
 80084ca:	f57f af17 	bpl.w	80082fc <_scanf_float+0x64>
 80084ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80084d2:	6022      	str	r2, [r4, #0]
 80084d4:	f8cd 9008 	str.w	r9, [sp, #8]
 80084d8:	e7a7      	b.n	800842a <_scanf_float+0x192>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80084e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80084e4:	d006      	beq.n	80084f4 <_scanf_float+0x25c>
 80084e6:	0550      	lsls	r0, r2, #21
 80084e8:	f57f af08 	bpl.w	80082fc <_scanf_float+0x64>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	f000 80de 	beq.w	80086b0 <_scanf_float+0x418>
 80084f4:	0591      	lsls	r1, r2, #22
 80084f6:	bf58      	it	pl
 80084f8:	9902      	ldrpl	r1, [sp, #8]
 80084fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084fe:	bf58      	it	pl
 8008500:	eba9 0101 	subpl.w	r1, r9, r1
 8008504:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008508:	bf58      	it	pl
 800850a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800850e:	6022      	str	r2, [r4, #0]
 8008510:	f04f 0900 	mov.w	r9, #0
 8008514:	e789      	b.n	800842a <_scanf_float+0x192>
 8008516:	f04f 0a03 	mov.w	sl, #3
 800851a:	e786      	b.n	800842a <_scanf_float+0x192>
 800851c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008520:	4639      	mov	r1, r7
 8008522:	4640      	mov	r0, r8
 8008524:	4798      	blx	r3
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f aedb 	beq.w	80082e2 <_scanf_float+0x4a>
 800852c:	e6e6      	b.n	80082fc <_scanf_float+0x64>
 800852e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008532:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008536:	463a      	mov	r2, r7
 8008538:	4640      	mov	r0, r8
 800853a:	4798      	blx	r3
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	3b01      	subs	r3, #1
 8008540:	6123      	str	r3, [r4, #16]
 8008542:	e6e8      	b.n	8008316 <_scanf_float+0x7e>
 8008544:	1e6b      	subs	r3, r5, #1
 8008546:	2b06      	cmp	r3, #6
 8008548:	d824      	bhi.n	8008594 <_scanf_float+0x2fc>
 800854a:	2d02      	cmp	r5, #2
 800854c:	d836      	bhi.n	80085bc <_scanf_float+0x324>
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	429e      	cmp	r6, r3
 8008552:	f67f aee4 	bls.w	800831e <_scanf_float+0x86>
 8008556:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800855a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800855e:	463a      	mov	r2, r7
 8008560:	4640      	mov	r0, r8
 8008562:	4798      	blx	r3
 8008564:	6923      	ldr	r3, [r4, #16]
 8008566:	3b01      	subs	r3, #1
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	e7f0      	b.n	800854e <_scanf_float+0x2b6>
 800856c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008570:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008574:	463a      	mov	r2, r7
 8008576:	4640      	mov	r0, r8
 8008578:	4798      	blx	r3
 800857a:	6923      	ldr	r3, [r4, #16]
 800857c:	3b01      	subs	r3, #1
 800857e:	6123      	str	r3, [r4, #16]
 8008580:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008584:	fa5f fa8a 	uxtb.w	sl, sl
 8008588:	f1ba 0f02 	cmp.w	sl, #2
 800858c:	d1ee      	bne.n	800856c <_scanf_float+0x2d4>
 800858e:	3d03      	subs	r5, #3
 8008590:	b2ed      	uxtb	r5, r5
 8008592:	1b76      	subs	r6, r6, r5
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	05da      	lsls	r2, r3, #23
 8008598:	d530      	bpl.n	80085fc <_scanf_float+0x364>
 800859a:	055b      	lsls	r3, r3, #21
 800859c:	d511      	bpl.n	80085c2 <_scanf_float+0x32a>
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	429e      	cmp	r6, r3
 80085a2:	f67f aebc 	bls.w	800831e <_scanf_float+0x86>
 80085a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ae:	463a      	mov	r2, r7
 80085b0:	4640      	mov	r0, r8
 80085b2:	4798      	blx	r3
 80085b4:	6923      	ldr	r3, [r4, #16]
 80085b6:	3b01      	subs	r3, #1
 80085b8:	6123      	str	r3, [r4, #16]
 80085ba:	e7f0      	b.n	800859e <_scanf_float+0x306>
 80085bc:	46aa      	mov	sl, r5
 80085be:	46b3      	mov	fp, r6
 80085c0:	e7de      	b.n	8008580 <_scanf_float+0x2e8>
 80085c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	2965      	cmp	r1, #101	@ 0x65
 80085ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80085ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80085d2:	6123      	str	r3, [r4, #16]
 80085d4:	d00c      	beq.n	80085f0 <_scanf_float+0x358>
 80085d6:	2945      	cmp	r1, #69	@ 0x45
 80085d8:	d00a      	beq.n	80085f0 <_scanf_float+0x358>
 80085da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085de:	463a      	mov	r2, r7
 80085e0:	4640      	mov	r0, r8
 80085e2:	4798      	blx	r3
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	1eb5      	subs	r5, r6, #2
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085f4:	463a      	mov	r2, r7
 80085f6:	4640      	mov	r0, r8
 80085f8:	4798      	blx	r3
 80085fa:	462e      	mov	r6, r5
 80085fc:	6822      	ldr	r2, [r4, #0]
 80085fe:	f012 0210 	ands.w	r2, r2, #16
 8008602:	d001      	beq.n	8008608 <_scanf_float+0x370>
 8008604:	2000      	movs	r0, #0
 8008606:	e68b      	b.n	8008320 <_scanf_float+0x88>
 8008608:	7032      	strb	r2, [r6, #0]
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008614:	d11c      	bne.n	8008650 <_scanf_float+0x3b8>
 8008616:	9b02      	ldr	r3, [sp, #8]
 8008618:	454b      	cmp	r3, r9
 800861a:	eba3 0209 	sub.w	r2, r3, r9
 800861e:	d123      	bne.n	8008668 <_scanf_float+0x3d0>
 8008620:	9901      	ldr	r1, [sp, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	4640      	mov	r0, r8
 8008626:	f002 fbf7 	bl	800ae18 <_strtod_r>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	6821      	ldr	r1, [r4, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f011 0f02 	tst.w	r1, #2
 8008634:	ec57 6b10 	vmov	r6, r7, d0
 8008638:	f103 0204 	add.w	r2, r3, #4
 800863c:	d01f      	beq.n	800867e <_scanf_float+0x3e6>
 800863e:	9903      	ldr	r1, [sp, #12]
 8008640:	600a      	str	r2, [r1, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	e9c3 6700 	strd	r6, r7, [r3]
 8008648:	68e3      	ldr	r3, [r4, #12]
 800864a:	3301      	adds	r3, #1
 800864c:	60e3      	str	r3, [r4, #12]
 800864e:	e7d9      	b.n	8008604 <_scanf_float+0x36c>
 8008650:	9b04      	ldr	r3, [sp, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0e4      	beq.n	8008620 <_scanf_float+0x388>
 8008656:	9905      	ldr	r1, [sp, #20]
 8008658:	230a      	movs	r3, #10
 800865a:	3101      	adds	r1, #1
 800865c:	4640      	mov	r0, r8
 800865e:	f002 fc5b 	bl	800af18 <_strtol_r>
 8008662:	9b04      	ldr	r3, [sp, #16]
 8008664:	9e05      	ldr	r6, [sp, #20]
 8008666:	1ac2      	subs	r2, r0, r3
 8008668:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800866c:	429e      	cmp	r6, r3
 800866e:	bf28      	it	cs
 8008670:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008674:	4910      	ldr	r1, [pc, #64]	@ (80086b8 <_scanf_float+0x420>)
 8008676:	4630      	mov	r0, r6
 8008678:	f000 f8e4 	bl	8008844 <siprintf>
 800867c:	e7d0      	b.n	8008620 <_scanf_float+0x388>
 800867e:	f011 0f04 	tst.w	r1, #4
 8008682:	9903      	ldr	r1, [sp, #12]
 8008684:	600a      	str	r2, [r1, #0]
 8008686:	d1dc      	bne.n	8008642 <_scanf_float+0x3aa>
 8008688:	681d      	ldr	r5, [r3, #0]
 800868a:	4632      	mov	r2, r6
 800868c:	463b      	mov	r3, r7
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f8 fa4b 	bl	8000b2c <__aeabi_dcmpun>
 8008696:	b128      	cbz	r0, 80086a4 <_scanf_float+0x40c>
 8008698:	4808      	ldr	r0, [pc, #32]	@ (80086bc <_scanf_float+0x424>)
 800869a:	f000 f9b7 	bl	8008a0c <nanf>
 800869e:	ed85 0a00 	vstr	s0, [r5]
 80086a2:	e7d1      	b.n	8008648 <_scanf_float+0x3b0>
 80086a4:	4630      	mov	r0, r6
 80086a6:	4639      	mov	r1, r7
 80086a8:	f7f8 fa9e 	bl	8000be8 <__aeabi_d2f>
 80086ac:	6028      	str	r0, [r5, #0]
 80086ae:	e7cb      	b.n	8008648 <_scanf_float+0x3b0>
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	e629      	b.n	800830a <_scanf_float+0x72>
 80086b6:	bf00      	nop
 80086b8:	0800c144 	.word	0x0800c144
 80086bc:	0800c4dd 	.word	0x0800c4dd

080086c0 <std>:
 80086c0:	2300      	movs	r3, #0
 80086c2:	b510      	push	{r4, lr}
 80086c4:	4604      	mov	r4, r0
 80086c6:	e9c0 3300 	strd	r3, r3, [r0]
 80086ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80086ce:	6083      	str	r3, [r0, #8]
 80086d0:	8181      	strh	r1, [r0, #12]
 80086d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80086d4:	81c2      	strh	r2, [r0, #14]
 80086d6:	6183      	str	r3, [r0, #24]
 80086d8:	4619      	mov	r1, r3
 80086da:	2208      	movs	r2, #8
 80086dc:	305c      	adds	r0, #92	@ 0x5c
 80086de:	f000 f914 	bl	800890a <memset>
 80086e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008718 <std+0x58>)
 80086e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80086e6:	4b0d      	ldr	r3, [pc, #52]	@ (800871c <std+0x5c>)
 80086e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80086ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008720 <std+0x60>)
 80086ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80086ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008724 <std+0x64>)
 80086f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80086f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008728 <std+0x68>)
 80086f4:	6224      	str	r4, [r4, #32]
 80086f6:	429c      	cmp	r4, r3
 80086f8:	d006      	beq.n	8008708 <std+0x48>
 80086fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80086fe:	4294      	cmp	r4, r2
 8008700:	d002      	beq.n	8008708 <std+0x48>
 8008702:	33d0      	adds	r3, #208	@ 0xd0
 8008704:	429c      	cmp	r4, r3
 8008706:	d105      	bne.n	8008714 <std+0x54>
 8008708:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800870c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008710:	f000 b978 	b.w	8008a04 <__retarget_lock_init_recursive>
 8008714:	bd10      	pop	{r4, pc}
 8008716:	bf00      	nop
 8008718:	08008885 	.word	0x08008885
 800871c:	080088a7 	.word	0x080088a7
 8008720:	080088df 	.word	0x080088df
 8008724:	08008903 	.word	0x08008903
 8008728:	2000090c 	.word	0x2000090c

0800872c <stdio_exit_handler>:
 800872c:	4a02      	ldr	r2, [pc, #8]	@ (8008738 <stdio_exit_handler+0xc>)
 800872e:	4903      	ldr	r1, [pc, #12]	@ (800873c <stdio_exit_handler+0x10>)
 8008730:	4803      	ldr	r0, [pc, #12]	@ (8008740 <stdio_exit_handler+0x14>)
 8008732:	f000 b869 	b.w	8008808 <_fwalk_sglue>
 8008736:	bf00      	nop
 8008738:	2000000c 	.word	0x2000000c
 800873c:	0800b2d5 	.word	0x0800b2d5
 8008740:	2000001c 	.word	0x2000001c

08008744 <cleanup_stdio>:
 8008744:	6841      	ldr	r1, [r0, #4]
 8008746:	4b0c      	ldr	r3, [pc, #48]	@ (8008778 <cleanup_stdio+0x34>)
 8008748:	4299      	cmp	r1, r3
 800874a:	b510      	push	{r4, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	d001      	beq.n	8008754 <cleanup_stdio+0x10>
 8008750:	f002 fdc0 	bl	800b2d4 <_fflush_r>
 8008754:	68a1      	ldr	r1, [r4, #8]
 8008756:	4b09      	ldr	r3, [pc, #36]	@ (800877c <cleanup_stdio+0x38>)
 8008758:	4299      	cmp	r1, r3
 800875a:	d002      	beq.n	8008762 <cleanup_stdio+0x1e>
 800875c:	4620      	mov	r0, r4
 800875e:	f002 fdb9 	bl	800b2d4 <_fflush_r>
 8008762:	68e1      	ldr	r1, [r4, #12]
 8008764:	4b06      	ldr	r3, [pc, #24]	@ (8008780 <cleanup_stdio+0x3c>)
 8008766:	4299      	cmp	r1, r3
 8008768:	d004      	beq.n	8008774 <cleanup_stdio+0x30>
 800876a:	4620      	mov	r0, r4
 800876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008770:	f002 bdb0 	b.w	800b2d4 <_fflush_r>
 8008774:	bd10      	pop	{r4, pc}
 8008776:	bf00      	nop
 8008778:	2000090c 	.word	0x2000090c
 800877c:	20000974 	.word	0x20000974
 8008780:	200009dc 	.word	0x200009dc

08008784 <global_stdio_init.part.0>:
 8008784:	b510      	push	{r4, lr}
 8008786:	4b0b      	ldr	r3, [pc, #44]	@ (80087b4 <global_stdio_init.part.0+0x30>)
 8008788:	4c0b      	ldr	r4, [pc, #44]	@ (80087b8 <global_stdio_init.part.0+0x34>)
 800878a:	4a0c      	ldr	r2, [pc, #48]	@ (80087bc <global_stdio_init.part.0+0x38>)
 800878c:	601a      	str	r2, [r3, #0]
 800878e:	4620      	mov	r0, r4
 8008790:	2200      	movs	r2, #0
 8008792:	2104      	movs	r1, #4
 8008794:	f7ff ff94 	bl	80086c0 <std>
 8008798:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800879c:	2201      	movs	r2, #1
 800879e:	2109      	movs	r1, #9
 80087a0:	f7ff ff8e 	bl	80086c0 <std>
 80087a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80087a8:	2202      	movs	r2, #2
 80087aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ae:	2112      	movs	r1, #18
 80087b0:	f7ff bf86 	b.w	80086c0 <std>
 80087b4:	20000a44 	.word	0x20000a44
 80087b8:	2000090c 	.word	0x2000090c
 80087bc:	0800872d 	.word	0x0800872d

080087c0 <__sfp_lock_acquire>:
 80087c0:	4801      	ldr	r0, [pc, #4]	@ (80087c8 <__sfp_lock_acquire+0x8>)
 80087c2:	f000 b920 	b.w	8008a06 <__retarget_lock_acquire_recursive>
 80087c6:	bf00      	nop
 80087c8:	20000a4d 	.word	0x20000a4d

080087cc <__sfp_lock_release>:
 80087cc:	4801      	ldr	r0, [pc, #4]	@ (80087d4 <__sfp_lock_release+0x8>)
 80087ce:	f000 b91b 	b.w	8008a08 <__retarget_lock_release_recursive>
 80087d2:	bf00      	nop
 80087d4:	20000a4d 	.word	0x20000a4d

080087d8 <__sinit>:
 80087d8:	b510      	push	{r4, lr}
 80087da:	4604      	mov	r4, r0
 80087dc:	f7ff fff0 	bl	80087c0 <__sfp_lock_acquire>
 80087e0:	6a23      	ldr	r3, [r4, #32]
 80087e2:	b11b      	cbz	r3, 80087ec <__sinit+0x14>
 80087e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e8:	f7ff bff0 	b.w	80087cc <__sfp_lock_release>
 80087ec:	4b04      	ldr	r3, [pc, #16]	@ (8008800 <__sinit+0x28>)
 80087ee:	6223      	str	r3, [r4, #32]
 80087f0:	4b04      	ldr	r3, [pc, #16]	@ (8008804 <__sinit+0x2c>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1f5      	bne.n	80087e4 <__sinit+0xc>
 80087f8:	f7ff ffc4 	bl	8008784 <global_stdio_init.part.0>
 80087fc:	e7f2      	b.n	80087e4 <__sinit+0xc>
 80087fe:	bf00      	nop
 8008800:	08008745 	.word	0x08008745
 8008804:	20000a44 	.word	0x20000a44

08008808 <_fwalk_sglue>:
 8008808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800880c:	4607      	mov	r7, r0
 800880e:	4688      	mov	r8, r1
 8008810:	4614      	mov	r4, r2
 8008812:	2600      	movs	r6, #0
 8008814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008818:	f1b9 0901 	subs.w	r9, r9, #1
 800881c:	d505      	bpl.n	800882a <_fwalk_sglue+0x22>
 800881e:	6824      	ldr	r4, [r4, #0]
 8008820:	2c00      	cmp	r4, #0
 8008822:	d1f7      	bne.n	8008814 <_fwalk_sglue+0xc>
 8008824:	4630      	mov	r0, r6
 8008826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800882a:	89ab      	ldrh	r3, [r5, #12]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d907      	bls.n	8008840 <_fwalk_sglue+0x38>
 8008830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008834:	3301      	adds	r3, #1
 8008836:	d003      	beq.n	8008840 <_fwalk_sglue+0x38>
 8008838:	4629      	mov	r1, r5
 800883a:	4638      	mov	r0, r7
 800883c:	47c0      	blx	r8
 800883e:	4306      	orrs	r6, r0
 8008840:	3568      	adds	r5, #104	@ 0x68
 8008842:	e7e9      	b.n	8008818 <_fwalk_sglue+0x10>

08008844 <siprintf>:
 8008844:	b40e      	push	{r1, r2, r3}
 8008846:	b500      	push	{lr}
 8008848:	b09c      	sub	sp, #112	@ 0x70
 800884a:	ab1d      	add	r3, sp, #116	@ 0x74
 800884c:	9002      	str	r0, [sp, #8]
 800884e:	9006      	str	r0, [sp, #24]
 8008850:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008854:	4809      	ldr	r0, [pc, #36]	@ (800887c <siprintf+0x38>)
 8008856:	9107      	str	r1, [sp, #28]
 8008858:	9104      	str	r1, [sp, #16]
 800885a:	4909      	ldr	r1, [pc, #36]	@ (8008880 <siprintf+0x3c>)
 800885c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008860:	9105      	str	r1, [sp, #20]
 8008862:	6800      	ldr	r0, [r0, #0]
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	a902      	add	r1, sp, #8
 8008868:	f002 fbb4 	bl	800afd4 <_svfiprintf_r>
 800886c:	9b02      	ldr	r3, [sp, #8]
 800886e:	2200      	movs	r2, #0
 8008870:	701a      	strb	r2, [r3, #0]
 8008872:	b01c      	add	sp, #112	@ 0x70
 8008874:	f85d eb04 	ldr.w	lr, [sp], #4
 8008878:	b003      	add	sp, #12
 800887a:	4770      	bx	lr
 800887c:	20000018 	.word	0x20000018
 8008880:	ffff0208 	.word	0xffff0208

08008884 <__sread>:
 8008884:	b510      	push	{r4, lr}
 8008886:	460c      	mov	r4, r1
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	f000 f86c 	bl	8008968 <_read_r>
 8008890:	2800      	cmp	r0, #0
 8008892:	bfab      	itete	ge
 8008894:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008896:	89a3      	ldrhlt	r3, [r4, #12]
 8008898:	181b      	addge	r3, r3, r0
 800889a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800889e:	bfac      	ite	ge
 80088a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088a2:	81a3      	strhlt	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__swrite>:
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	461f      	mov	r7, r3
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	4616      	mov	r6, r2
 80088b6:	d505      	bpl.n	80088c4 <__swrite+0x1e>
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f000 f840 	bl	8008944 <_lseek_r>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	4632      	mov	r2, r6
 80088d2:	463b      	mov	r3, r7
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	f000 b857 	b.w	800898c <_write_r>

080088de <__sseek>:
 80088de:	b510      	push	{r4, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 f82d 	bl	8008944 <_lseek_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	bf15      	itete	ne
 80088f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80088f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80088f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80088fa:	81a3      	strheq	r3, [r4, #12]
 80088fc:	bf18      	it	ne
 80088fe:	81a3      	strhne	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__sclose>:
 8008902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008906:	f000 b80d 	b.w	8008924 <_close_r>

0800890a <memset>:
 800890a:	4402      	add	r2, r0
 800890c:	4603      	mov	r3, r0
 800890e:	4293      	cmp	r3, r2
 8008910:	d100      	bne.n	8008914 <memset+0xa>
 8008912:	4770      	bx	lr
 8008914:	f803 1b01 	strb.w	r1, [r3], #1
 8008918:	e7f9      	b.n	800890e <memset+0x4>
	...

0800891c <_localeconv_r>:
 800891c:	4800      	ldr	r0, [pc, #0]	@ (8008920 <_localeconv_r+0x4>)
 800891e:	4770      	bx	lr
 8008920:	20000158 	.word	0x20000158

08008924 <_close_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d06      	ldr	r5, [pc, #24]	@ (8008940 <_close_r+0x1c>)
 8008928:	2300      	movs	r3, #0
 800892a:	4604      	mov	r4, r0
 800892c:	4608      	mov	r0, r1
 800892e:	602b      	str	r3, [r5, #0]
 8008930:	f7fa fafc 	bl	8002f2c <_close>
 8008934:	1c43      	adds	r3, r0, #1
 8008936:	d102      	bne.n	800893e <_close_r+0x1a>
 8008938:	682b      	ldr	r3, [r5, #0]
 800893a:	b103      	cbz	r3, 800893e <_close_r+0x1a>
 800893c:	6023      	str	r3, [r4, #0]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	20000a48 	.word	0x20000a48

08008944 <_lseek_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4d07      	ldr	r5, [pc, #28]	@ (8008964 <_lseek_r+0x20>)
 8008948:	4604      	mov	r4, r0
 800894a:	4608      	mov	r0, r1
 800894c:	4611      	mov	r1, r2
 800894e:	2200      	movs	r2, #0
 8008950:	602a      	str	r2, [r5, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	f7fa fb11 	bl	8002f7a <_lseek>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_lseek_r+0x1e>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_lseek_r+0x1e>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	20000a48 	.word	0x20000a48

08008968 <_read_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	@ (8008988 <_read_r+0x20>)
 800896c:	4604      	mov	r4, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7fa fa9f 	bl	8002eba <_read>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_read_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_read_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	20000a48 	.word	0x20000a48

0800898c <_write_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	@ (80089ac <_write_r+0x20>)
 8008990:	4604      	mov	r4, r0
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	2200      	movs	r2, #0
 8008998:	602a      	str	r2, [r5, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f7fa faaa 	bl	8002ef4 <_write>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_write_r+0x1e>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_write_r+0x1e>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	20000a48 	.word	0x20000a48

080089b0 <__errno>:
 80089b0:	4b01      	ldr	r3, [pc, #4]	@ (80089b8 <__errno+0x8>)
 80089b2:	6818      	ldr	r0, [r3, #0]
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000018 	.word	0x20000018

080089bc <__libc_init_array>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4d0d      	ldr	r5, [pc, #52]	@ (80089f4 <__libc_init_array+0x38>)
 80089c0:	4c0d      	ldr	r4, [pc, #52]	@ (80089f8 <__libc_init_array+0x3c>)
 80089c2:	1b64      	subs	r4, r4, r5
 80089c4:	10a4      	asrs	r4, r4, #2
 80089c6:	2600      	movs	r6, #0
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	d109      	bne.n	80089e0 <__libc_init_array+0x24>
 80089cc:	4d0b      	ldr	r5, [pc, #44]	@ (80089fc <__libc_init_array+0x40>)
 80089ce:	4c0c      	ldr	r4, [pc, #48]	@ (8008a00 <__libc_init_array+0x44>)
 80089d0:	f003 fb70 	bl	800c0b4 <_init>
 80089d4:	1b64      	subs	r4, r4, r5
 80089d6:	10a4      	asrs	r4, r4, #2
 80089d8:	2600      	movs	r6, #0
 80089da:	42a6      	cmp	r6, r4
 80089dc:	d105      	bne.n	80089ea <__libc_init_array+0x2e>
 80089de:	bd70      	pop	{r4, r5, r6, pc}
 80089e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e4:	4798      	blx	r3
 80089e6:	3601      	adds	r6, #1
 80089e8:	e7ee      	b.n	80089c8 <__libc_init_array+0xc>
 80089ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ee:	4798      	blx	r3
 80089f0:	3601      	adds	r6, #1
 80089f2:	e7f2      	b.n	80089da <__libc_init_array+0x1e>
 80089f4:	0800c548 	.word	0x0800c548
 80089f8:	0800c548 	.word	0x0800c548
 80089fc:	0800c548 	.word	0x0800c548
 8008a00:	0800c54c 	.word	0x0800c54c

08008a04 <__retarget_lock_init_recursive>:
 8008a04:	4770      	bx	lr

08008a06 <__retarget_lock_acquire_recursive>:
 8008a06:	4770      	bx	lr

08008a08 <__retarget_lock_release_recursive>:
 8008a08:	4770      	bx	lr
	...

08008a0c <nanf>:
 8008a0c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008a14 <nanf+0x8>
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	7fc00000 	.word	0x7fc00000

08008a18 <quorem>:
 8008a18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	6903      	ldr	r3, [r0, #16]
 8008a1e:	690c      	ldr	r4, [r1, #16]
 8008a20:	42a3      	cmp	r3, r4
 8008a22:	4607      	mov	r7, r0
 8008a24:	db7e      	blt.n	8008b24 <quorem+0x10c>
 8008a26:	3c01      	subs	r4, #1
 8008a28:	f101 0814 	add.w	r8, r1, #20
 8008a2c:	00a3      	lsls	r3, r4, #2
 8008a2e:	f100 0514 	add.w	r5, r0, #20
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a38:	9301      	str	r3, [sp, #4]
 8008a3a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a42:	3301      	adds	r3, #1
 8008a44:	429a      	cmp	r2, r3
 8008a46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a4e:	d32e      	bcc.n	8008aae <quorem+0x96>
 8008a50:	f04f 0a00 	mov.w	sl, #0
 8008a54:	46c4      	mov	ip, r8
 8008a56:	46ae      	mov	lr, r5
 8008a58:	46d3      	mov	fp, sl
 8008a5a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008a5e:	b298      	uxth	r0, r3
 8008a60:	fb06 a000 	mla	r0, r6, r0, sl
 8008a64:	0c02      	lsrs	r2, r0, #16
 8008a66:	0c1b      	lsrs	r3, r3, #16
 8008a68:	fb06 2303 	mla	r3, r6, r3, r2
 8008a6c:	f8de 2000 	ldr.w	r2, [lr]
 8008a70:	b280      	uxth	r0, r0
 8008a72:	b292      	uxth	r2, r2
 8008a74:	1a12      	subs	r2, r2, r0
 8008a76:	445a      	add	r2, fp
 8008a78:	f8de 0000 	ldr.w	r0, [lr]
 8008a7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008a86:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008a8a:	b292      	uxth	r2, r2
 8008a8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008a90:	45e1      	cmp	r9, ip
 8008a92:	f84e 2b04 	str.w	r2, [lr], #4
 8008a96:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008a9a:	d2de      	bcs.n	8008a5a <quorem+0x42>
 8008a9c:	9b00      	ldr	r3, [sp, #0]
 8008a9e:	58eb      	ldr	r3, [r5, r3]
 8008aa0:	b92b      	cbnz	r3, 8008aae <quorem+0x96>
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	3b04      	subs	r3, #4
 8008aa6:	429d      	cmp	r5, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	d32f      	bcc.n	8008b0c <quorem+0xf4>
 8008aac:	613c      	str	r4, [r7, #16]
 8008aae:	4638      	mov	r0, r7
 8008ab0:	f001 f9c2 	bl	8009e38 <__mcmp>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	db25      	blt.n	8008b04 <quorem+0xec>
 8008ab8:	4629      	mov	r1, r5
 8008aba:	2000      	movs	r0, #0
 8008abc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ac0:	f8d1 c000 	ldr.w	ip, [r1]
 8008ac4:	fa1f fe82 	uxth.w	lr, r2
 8008ac8:	fa1f f38c 	uxth.w	r3, ip
 8008acc:	eba3 030e 	sub.w	r3, r3, lr
 8008ad0:	4403      	add	r3, r0
 8008ad2:	0c12      	lsrs	r2, r2, #16
 8008ad4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ad8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae2:	45c1      	cmp	r9, r8
 8008ae4:	f841 3b04 	str.w	r3, [r1], #4
 8008ae8:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008aec:	d2e6      	bcs.n	8008abc <quorem+0xa4>
 8008aee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008af2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008af6:	b922      	cbnz	r2, 8008b02 <quorem+0xea>
 8008af8:	3b04      	subs	r3, #4
 8008afa:	429d      	cmp	r5, r3
 8008afc:	461a      	mov	r2, r3
 8008afe:	d30b      	bcc.n	8008b18 <quorem+0x100>
 8008b00:	613c      	str	r4, [r7, #16]
 8008b02:	3601      	adds	r6, #1
 8008b04:	4630      	mov	r0, r6
 8008b06:	b003      	add	sp, #12
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	6812      	ldr	r2, [r2, #0]
 8008b0e:	3b04      	subs	r3, #4
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d1cb      	bne.n	8008aac <quorem+0x94>
 8008b14:	3c01      	subs	r4, #1
 8008b16:	e7c6      	b.n	8008aa6 <quorem+0x8e>
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	3b04      	subs	r3, #4
 8008b1c:	2a00      	cmp	r2, #0
 8008b1e:	d1ef      	bne.n	8008b00 <quorem+0xe8>
 8008b20:	3c01      	subs	r4, #1
 8008b22:	e7ea      	b.n	8008afa <quorem+0xe2>
 8008b24:	2000      	movs	r0, #0
 8008b26:	e7ee      	b.n	8008b06 <quorem+0xee>

08008b28 <_dtoa_r>:
 8008b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	69c7      	ldr	r7, [r0, #28]
 8008b2e:	b099      	sub	sp, #100	@ 0x64
 8008b30:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b34:	ec55 4b10 	vmov	r4, r5, d0
 8008b38:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008b3a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b3c:	4683      	mov	fp, r0
 8008b3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b42:	b97f      	cbnz	r7, 8008b64 <_dtoa_r+0x3c>
 8008b44:	2010      	movs	r0, #16
 8008b46:	f000 fdfd 	bl	8009744 <malloc>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008b50:	b920      	cbnz	r0, 8008b5c <_dtoa_r+0x34>
 8008b52:	4ba7      	ldr	r3, [pc, #668]	@ (8008df0 <_dtoa_r+0x2c8>)
 8008b54:	21ef      	movs	r1, #239	@ 0xef
 8008b56:	48a7      	ldr	r0, [pc, #668]	@ (8008df4 <_dtoa_r+0x2cc>)
 8008b58:	f002 fc36 	bl	800b3c8 <__assert_func>
 8008b5c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008b60:	6007      	str	r7, [r0, #0]
 8008b62:	60c7      	str	r7, [r0, #12]
 8008b64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b68:	6819      	ldr	r1, [r3, #0]
 8008b6a:	b159      	cbz	r1, 8008b84 <_dtoa_r+0x5c>
 8008b6c:	685a      	ldr	r2, [r3, #4]
 8008b6e:	604a      	str	r2, [r1, #4]
 8008b70:	2301      	movs	r3, #1
 8008b72:	4093      	lsls	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 feda 	bl	8009930 <_Bfree>
 8008b7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	1e2b      	subs	r3, r5, #0
 8008b86:	bfb9      	ittee	lt
 8008b88:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008b8c:	9303      	strlt	r3, [sp, #12]
 8008b8e:	2300      	movge	r3, #0
 8008b90:	6033      	strge	r3, [r6, #0]
 8008b92:	9f03      	ldr	r7, [sp, #12]
 8008b94:	4b98      	ldr	r3, [pc, #608]	@ (8008df8 <_dtoa_r+0x2d0>)
 8008b96:	bfbc      	itt	lt
 8008b98:	2201      	movlt	r2, #1
 8008b9a:	6032      	strlt	r2, [r6, #0]
 8008b9c:	43bb      	bics	r3, r7
 8008b9e:	d112      	bne.n	8008bc6 <_dtoa_r+0x9e>
 8008ba0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ba2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008bac:	4323      	orrs	r3, r4
 8008bae:	f000 854d 	beq.w	800964c <_dtoa_r+0xb24>
 8008bb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008bb4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008e0c <_dtoa_r+0x2e4>
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 854f 	beq.w	800965c <_dtoa_r+0xb34>
 8008bbe:	f10a 0303 	add.w	r3, sl, #3
 8008bc2:	f000 bd49 	b.w	8009658 <_dtoa_r+0xb30>
 8008bc6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	ec51 0b17 	vmov	r0, r1, d7
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008bd6:	f7f7 ff77 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bda:	4680      	mov	r8, r0
 8008bdc:	b158      	cbz	r0, 8008bf6 <_dtoa_r+0xce>
 8008bde:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008be0:	2301      	movs	r3, #1
 8008be2:	6013      	str	r3, [r2, #0]
 8008be4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008be6:	b113      	cbz	r3, 8008bee <_dtoa_r+0xc6>
 8008be8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008bea:	4b84      	ldr	r3, [pc, #528]	@ (8008dfc <_dtoa_r+0x2d4>)
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008e10 <_dtoa_r+0x2e8>
 8008bf2:	f000 bd33 	b.w	800965c <_dtoa_r+0xb34>
 8008bf6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bfa:	aa16      	add	r2, sp, #88	@ 0x58
 8008bfc:	a917      	add	r1, sp, #92	@ 0x5c
 8008bfe:	4658      	mov	r0, fp
 8008c00:	f001 fa3a 	bl	800a078 <__d2b>
 8008c04:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008c08:	4681      	mov	r9, r0
 8008c0a:	2e00      	cmp	r6, #0
 8008c0c:	d077      	beq.n	8008cfe <_dtoa_r+0x1d6>
 8008c0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c10:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c1c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008c20:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008c24:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008c28:	4619      	mov	r1, r3
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4b74      	ldr	r3, [pc, #464]	@ (8008e00 <_dtoa_r+0x2d8>)
 8008c2e:	f7f7 fb2b 	bl	8000288 <__aeabi_dsub>
 8008c32:	a369      	add	r3, pc, #420	@ (adr r3, 8008dd8 <_dtoa_r+0x2b0>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fcde 	bl	80005f8 <__aeabi_dmul>
 8008c3c:	a368      	add	r3, pc, #416	@ (adr r3, 8008de0 <_dtoa_r+0x2b8>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 fb23 	bl	800028c <__adddf3>
 8008c46:	4604      	mov	r4, r0
 8008c48:	4630      	mov	r0, r6
 8008c4a:	460d      	mov	r5, r1
 8008c4c:	f7f7 fc6a 	bl	8000524 <__aeabi_i2d>
 8008c50:	a365      	add	r3, pc, #404	@ (adr r3, 8008de8 <_dtoa_r+0x2c0>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fb13 	bl	800028c <__adddf3>
 8008c66:	4604      	mov	r4, r0
 8008c68:	460d      	mov	r5, r1
 8008c6a:	f7f7 ff75 	bl	8000b58 <__aeabi_d2iz>
 8008c6e:	2200      	movs	r2, #0
 8008c70:	4607      	mov	r7, r0
 8008c72:	2300      	movs	r3, #0
 8008c74:	4620      	mov	r0, r4
 8008c76:	4629      	mov	r1, r5
 8008c78:	f7f7 ff30 	bl	8000adc <__aeabi_dcmplt>
 8008c7c:	b140      	cbz	r0, 8008c90 <_dtoa_r+0x168>
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7f7 fc50 	bl	8000524 <__aeabi_i2d>
 8008c84:	4622      	mov	r2, r4
 8008c86:	462b      	mov	r3, r5
 8008c88:	f7f7 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c8c:	b900      	cbnz	r0, 8008c90 <_dtoa_r+0x168>
 8008c8e:	3f01      	subs	r7, #1
 8008c90:	2f16      	cmp	r7, #22
 8008c92:	d851      	bhi.n	8008d38 <_dtoa_r+0x210>
 8008c94:	4b5b      	ldr	r3, [pc, #364]	@ (8008e04 <_dtoa_r+0x2dc>)
 8008c96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ca2:	f7f7 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d048      	beq.n	8008d3c <_dtoa_r+0x214>
 8008caa:	3f01      	subs	r7, #1
 8008cac:	2300      	movs	r3, #0
 8008cae:	9312      	str	r3, [sp, #72]	@ 0x48
 8008cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cb2:	1b9b      	subs	r3, r3, r6
 8008cb4:	1e5a      	subs	r2, r3, #1
 8008cb6:	bf44      	itt	mi
 8008cb8:	f1c3 0801 	rsbmi	r8, r3, #1
 8008cbc:	2300      	movmi	r3, #0
 8008cbe:	9208      	str	r2, [sp, #32]
 8008cc0:	bf54      	ite	pl
 8008cc2:	f04f 0800 	movpl.w	r8, #0
 8008cc6:	9308      	strmi	r3, [sp, #32]
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	db39      	blt.n	8008d40 <_dtoa_r+0x218>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008cd0:	443b      	add	r3, r7
 8008cd2:	9308      	str	r3, [sp, #32]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	d864      	bhi.n	8008da8 <_dtoa_r+0x280>
 8008cde:	2b05      	cmp	r3, #5
 8008ce0:	bfc4      	itt	gt
 8008ce2:	3b04      	subgt	r3, #4
 8008ce4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce8:	f1a3 0302 	sub.w	r3, r3, #2
 8008cec:	bfcc      	ite	gt
 8008cee:	2400      	movgt	r4, #0
 8008cf0:	2401      	movle	r4, #1
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d863      	bhi.n	8008dbe <_dtoa_r+0x296>
 8008cf6:	e8df f003 	tbb	[pc, r3]
 8008cfa:	372a      	.short	0x372a
 8008cfc:	5535      	.short	0x5535
 8008cfe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008d02:	441e      	add	r6, r3
 8008d04:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008d08:	2b20      	cmp	r3, #32
 8008d0a:	bfc1      	itttt	gt
 8008d0c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008d10:	409f      	lslgt	r7, r3
 8008d12:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008d16:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008d1a:	bfd6      	itet	le
 8008d1c:	f1c3 0320 	rsble	r3, r3, #32
 8008d20:	ea47 0003 	orrgt.w	r0, r7, r3
 8008d24:	fa04 f003 	lslle.w	r0, r4, r3
 8008d28:	f7f7 fbec 	bl	8000504 <__aeabi_ui2d>
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008d32:	3e01      	subs	r6, #1
 8008d34:	9214      	str	r2, [sp, #80]	@ 0x50
 8008d36:	e777      	b.n	8008c28 <_dtoa_r+0x100>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e7b8      	b.n	8008cae <_dtoa_r+0x186>
 8008d3c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008d3e:	e7b7      	b.n	8008cb0 <_dtoa_r+0x188>
 8008d40:	427b      	negs	r3, r7
 8008d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d44:	2300      	movs	r3, #0
 8008d46:	eba8 0807 	sub.w	r8, r8, r7
 8008d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008d4c:	e7c4      	b.n	8008cd8 <_dtoa_r+0x1b0>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	dc35      	bgt.n	8008dc4 <_dtoa_r+0x29c>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d62:	e00b      	b.n	8008d7c <_dtoa_r+0x254>
 8008d64:	2301      	movs	r3, #1
 8008d66:	e7f3      	b.n	8008d50 <_dtoa_r+0x228>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d6e:	18fb      	adds	r3, r7, r3
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	bfb8      	it	lt
 8008d7a:	2301      	movlt	r3, #1
 8008d7c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008d80:	2100      	movs	r1, #0
 8008d82:	2204      	movs	r2, #4
 8008d84:	f102 0514 	add.w	r5, r2, #20
 8008d88:	429d      	cmp	r5, r3
 8008d8a:	d91f      	bls.n	8008dcc <_dtoa_r+0x2a4>
 8008d8c:	6041      	str	r1, [r0, #4]
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 fd8e 	bl	80098b0 <_Balloc>
 8008d94:	4682      	mov	sl, r0
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d13c      	bne.n	8008e14 <_dtoa_r+0x2ec>
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e08 <_dtoa_r+0x2e0>)
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008da2:	e6d8      	b.n	8008b56 <_dtoa_r+0x2e>
 8008da4:	2301      	movs	r3, #1
 8008da6:	e7e0      	b.n	8008d6a <_dtoa_r+0x242>
 8008da8:	2401      	movs	r4, #1
 8008daa:	2300      	movs	r3, #0
 8008dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dae:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008db0:	f04f 33ff 	mov.w	r3, #4294967295
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2312      	movs	r3, #18
 8008dbc:	e7d0      	b.n	8008d60 <_dtoa_r+0x238>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dc2:	e7f5      	b.n	8008db0 <_dtoa_r+0x288>
 8008dc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dc6:	9300      	str	r3, [sp, #0]
 8008dc8:	9307      	str	r3, [sp, #28]
 8008dca:	e7d7      	b.n	8008d7c <_dtoa_r+0x254>
 8008dcc:	3101      	adds	r1, #1
 8008dce:	0052      	lsls	r2, r2, #1
 8008dd0:	e7d8      	b.n	8008d84 <_dtoa_r+0x25c>
 8008dd2:	bf00      	nop
 8008dd4:	f3af 8000 	nop.w
 8008dd8:	636f4361 	.word	0x636f4361
 8008ddc:	3fd287a7 	.word	0x3fd287a7
 8008de0:	8b60c8b3 	.word	0x8b60c8b3
 8008de4:	3fc68a28 	.word	0x3fc68a28
 8008de8:	509f79fb 	.word	0x509f79fb
 8008dec:	3fd34413 	.word	0x3fd34413
 8008df0:	0800c156 	.word	0x0800c156
 8008df4:	0800c16d 	.word	0x0800c16d
 8008df8:	7ff00000 	.word	0x7ff00000
 8008dfc:	0800c121 	.word	0x0800c121
 8008e00:	3ff80000 	.word	0x3ff80000
 8008e04:	0800c268 	.word	0x0800c268
 8008e08:	0800c1c5 	.word	0x0800c1c5
 8008e0c:	0800c152 	.word	0x0800c152
 8008e10:	0800c120 	.word	0x0800c120
 8008e14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e18:	6018      	str	r0, [r3, #0]
 8008e1a:	9b07      	ldr	r3, [sp, #28]
 8008e1c:	2b0e      	cmp	r3, #14
 8008e1e:	f200 80a4 	bhi.w	8008f6a <_dtoa_r+0x442>
 8008e22:	2c00      	cmp	r4, #0
 8008e24:	f000 80a1 	beq.w	8008f6a <_dtoa_r+0x442>
 8008e28:	2f00      	cmp	r7, #0
 8008e2a:	dd33      	ble.n	8008e94 <_dtoa_r+0x36c>
 8008e2c:	4bad      	ldr	r3, [pc, #692]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008e2e:	f007 020f 	and.w	r2, r7, #15
 8008e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e36:	ed93 7b00 	vldr	d7, [r3]
 8008e3a:	05f8      	lsls	r0, r7, #23
 8008e3c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008e40:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008e44:	d516      	bpl.n	8008e74 <_dtoa_r+0x34c>
 8008e46:	4ba8      	ldr	r3, [pc, #672]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e50:	f7f7 fcfc 	bl	800084c <__aeabi_ddiv>
 8008e54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e58:	f004 040f 	and.w	r4, r4, #15
 8008e5c:	2603      	movs	r6, #3
 8008e5e:	4da2      	ldr	r5, [pc, #648]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e60:	b954      	cbnz	r4, 8008e78 <_dtoa_r+0x350>
 8008e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e6a:	f7f7 fcef 	bl	800084c <__aeabi_ddiv>
 8008e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e72:	e028      	b.n	8008ec6 <_dtoa_r+0x39e>
 8008e74:	2602      	movs	r6, #2
 8008e76:	e7f2      	b.n	8008e5e <_dtoa_r+0x336>
 8008e78:	07e1      	lsls	r1, r4, #31
 8008e7a:	d508      	bpl.n	8008e8e <_dtoa_r+0x366>
 8008e7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e84:	f7f7 fbb8 	bl	80005f8 <__aeabi_dmul>
 8008e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e8c:	3601      	adds	r6, #1
 8008e8e:	1064      	asrs	r4, r4, #1
 8008e90:	3508      	adds	r5, #8
 8008e92:	e7e5      	b.n	8008e60 <_dtoa_r+0x338>
 8008e94:	f000 80d2 	beq.w	800903c <_dtoa_r+0x514>
 8008e98:	427c      	negs	r4, r7
 8008e9a:	4b92      	ldr	r3, [pc, #584]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008e9c:	4d92      	ldr	r5, [pc, #584]	@ (80090e8 <_dtoa_r+0x5c0>)
 8008e9e:	f004 020f 	and.w	r2, r4, #15
 8008ea2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eae:	f7f7 fba3 	bl	80005f8 <__aeabi_dmul>
 8008eb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb6:	1124      	asrs	r4, r4, #4
 8008eb8:	2300      	movs	r3, #0
 8008eba:	2602      	movs	r6, #2
 8008ebc:	2c00      	cmp	r4, #0
 8008ebe:	f040 80b2 	bne.w	8009026 <_dtoa_r+0x4fe>
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1d3      	bne.n	8008e6e <_dtoa_r+0x346>
 8008ec6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ec8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 80b7 	beq.w	8009040 <_dtoa_r+0x518>
 8008ed2:	4b86      	ldr	r3, [pc, #536]	@ (80090ec <_dtoa_r+0x5c4>)
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	4629      	mov	r1, r5
 8008eda:	f7f7 fdff 	bl	8000adc <__aeabi_dcmplt>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f000 80ae 	beq.w	8009040 <_dtoa_r+0x518>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 80aa 	beq.w	8009040 <_dtoa_r+0x518>
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	dd37      	ble.n	8008f62 <_dtoa_r+0x43a>
 8008ef2:	1e7b      	subs	r3, r7, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	4620      	mov	r0, r4
 8008ef8:	4b7d      	ldr	r3, [pc, #500]	@ (80090f0 <_dtoa_r+0x5c8>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f06:	9c00      	ldr	r4, [sp, #0]
 8008f08:	3601      	adds	r6, #1
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 fb0a 	bl	8000524 <__aeabi_i2d>
 8008f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f14:	f7f7 fb70 	bl	80005f8 <__aeabi_dmul>
 8008f18:	4b76      	ldr	r3, [pc, #472]	@ (80090f4 <_dtoa_r+0x5cc>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f7f7 f9b6 	bl	800028c <__adddf3>
 8008f20:	4605      	mov	r5, r0
 8008f22:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008f26:	2c00      	cmp	r4, #0
 8008f28:	f040 808d 	bne.w	8009046 <_dtoa_r+0x51e>
 8008f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f30:	4b71      	ldr	r3, [pc, #452]	@ (80090f8 <_dtoa_r+0x5d0>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	f7f7 f9a8 	bl	8000288 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f40:	462a      	mov	r2, r5
 8008f42:	4633      	mov	r3, r6
 8008f44:	f7f7 fde8 	bl	8000b18 <__aeabi_dcmpgt>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	f040 828b 	bne.w	8009464 <_dtoa_r+0x93c>
 8008f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f52:	462a      	mov	r2, r5
 8008f54:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008f58:	f7f7 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 8128 	bne.w	80091b2 <_dtoa_r+0x68a>
 8008f62:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008f66:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f2c0 815a 	blt.w	8009226 <_dtoa_r+0x6fe>
 8008f72:	2f0e      	cmp	r7, #14
 8008f74:	f300 8157 	bgt.w	8009226 <_dtoa_r+0x6fe>
 8008f78:	4b5a      	ldr	r3, [pc, #360]	@ (80090e4 <_dtoa_r+0x5bc>)
 8008f7a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f7e:	ed93 7b00 	vldr	d7, [r3]
 8008f82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	ed8d 7b00 	vstr	d7, [sp]
 8008f8a:	da03      	bge.n	8008f94 <_dtoa_r+0x46c>
 8008f8c:	9b07      	ldr	r3, [sp, #28]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f340 8101 	ble.w	8009196 <_dtoa_r+0x66e>
 8008f94:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008f98:	4656      	mov	r6, sl
 8008f9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	f7f7 fc53 	bl	800084c <__aeabi_ddiv>
 8008fa6:	f7f7 fdd7 	bl	8000b58 <__aeabi_d2iz>
 8008faa:	4680      	mov	r8, r0
 8008fac:	f7f7 faba 	bl	8000524 <__aeabi_i2d>
 8008fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fb4:	f7f7 fb20 	bl	80005f8 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008fc4:	f7f7 f960 	bl	8000288 <__aeabi_dsub>
 8008fc8:	f806 4b01 	strb.w	r4, [r6], #1
 8008fcc:	9d07      	ldr	r5, [sp, #28]
 8008fce:	eba6 040a 	sub.w	r4, r6, sl
 8008fd2:	42a5      	cmp	r5, r4
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	f040 8117 	bne.w	800920a <_dtoa_r+0x6e2>
 8008fdc:	f7f7 f956 	bl	800028c <__adddf3>
 8008fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	460d      	mov	r5, r1
 8008fe8:	f7f7 fd96 	bl	8000b18 <__aeabi_dcmpgt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f040 80f9 	bne.w	80091e4 <_dtoa_r+0x6bc>
 8008ff2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	4629      	mov	r1, r5
 8008ffa:	f7f7 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffe:	b118      	cbz	r0, 8009008 <_dtoa_r+0x4e0>
 8009000:	f018 0f01 	tst.w	r8, #1
 8009004:	f040 80ee 	bne.w	80091e4 <_dtoa_r+0x6bc>
 8009008:	4649      	mov	r1, r9
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fc90 	bl	8009930 <_Bfree>
 8009010:	2300      	movs	r3, #0
 8009012:	7033      	strb	r3, [r6, #0]
 8009014:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009016:	3701      	adds	r7, #1
 8009018:	601f      	str	r7, [r3, #0]
 800901a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 831d 	beq.w	800965c <_dtoa_r+0xb34>
 8009022:	601e      	str	r6, [r3, #0]
 8009024:	e31a      	b.n	800965c <_dtoa_r+0xb34>
 8009026:	07e2      	lsls	r2, r4, #31
 8009028:	d505      	bpl.n	8009036 <_dtoa_r+0x50e>
 800902a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800902e:	f7f7 fae3 	bl	80005f8 <__aeabi_dmul>
 8009032:	3601      	adds	r6, #1
 8009034:	2301      	movs	r3, #1
 8009036:	1064      	asrs	r4, r4, #1
 8009038:	3508      	adds	r5, #8
 800903a:	e73f      	b.n	8008ebc <_dtoa_r+0x394>
 800903c:	2602      	movs	r6, #2
 800903e:	e742      	b.n	8008ec6 <_dtoa_r+0x39e>
 8009040:	9c07      	ldr	r4, [sp, #28]
 8009042:	9704      	str	r7, [sp, #16]
 8009044:	e761      	b.n	8008f0a <_dtoa_r+0x3e2>
 8009046:	4b27      	ldr	r3, [pc, #156]	@ (80090e4 <_dtoa_r+0x5bc>)
 8009048:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800904a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800904e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009052:	4454      	add	r4, sl
 8009054:	2900      	cmp	r1, #0
 8009056:	d053      	beq.n	8009100 <_dtoa_r+0x5d8>
 8009058:	4928      	ldr	r1, [pc, #160]	@ (80090fc <_dtoa_r+0x5d4>)
 800905a:	2000      	movs	r0, #0
 800905c:	f7f7 fbf6 	bl	800084c <__aeabi_ddiv>
 8009060:	4633      	mov	r3, r6
 8009062:	462a      	mov	r2, r5
 8009064:	f7f7 f910 	bl	8000288 <__aeabi_dsub>
 8009068:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800906c:	4656      	mov	r6, sl
 800906e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009072:	f7f7 fd71 	bl	8000b58 <__aeabi_d2iz>
 8009076:	4605      	mov	r5, r0
 8009078:	f7f7 fa54 	bl	8000524 <__aeabi_i2d>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009084:	f7f7 f900 	bl	8000288 <__aeabi_dsub>
 8009088:	3530      	adds	r5, #48	@ 0x30
 800908a:	4602      	mov	r2, r0
 800908c:	460b      	mov	r3, r1
 800908e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009092:	f806 5b01 	strb.w	r5, [r6], #1
 8009096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800909a:	f7f7 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800909e:	2800      	cmp	r0, #0
 80090a0:	d171      	bne.n	8009186 <_dtoa_r+0x65e>
 80090a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090a6:	4911      	ldr	r1, [pc, #68]	@ (80090ec <_dtoa_r+0x5c4>)
 80090a8:	2000      	movs	r0, #0
 80090aa:	f7f7 f8ed 	bl	8000288 <__aeabi_dsub>
 80090ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80090b2:	f7f7 fd13 	bl	8000adc <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f040 8095 	bne.w	80091e6 <_dtoa_r+0x6be>
 80090bc:	42a6      	cmp	r6, r4
 80090be:	f43f af50 	beq.w	8008f62 <_dtoa_r+0x43a>
 80090c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80090c6:	4b0a      	ldr	r3, [pc, #40]	@ (80090f0 <_dtoa_r+0x5c8>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4b08      	ldr	r3, [pc, #32]	@ (80090f0 <_dtoa_r+0x5c8>)
 80090d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80090d4:	2200      	movs	r2, #0
 80090d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090da:	f7f7 fa8d 	bl	80005f8 <__aeabi_dmul>
 80090de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e2:	e7c4      	b.n	800906e <_dtoa_r+0x546>
 80090e4:	0800c268 	.word	0x0800c268
 80090e8:	0800c240 	.word	0x0800c240
 80090ec:	3ff00000 	.word	0x3ff00000
 80090f0:	40240000 	.word	0x40240000
 80090f4:	401c0000 	.word	0x401c0000
 80090f8:	40140000 	.word	0x40140000
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	4631      	mov	r1, r6
 8009102:	4628      	mov	r0, r5
 8009104:	f7f7 fa78 	bl	80005f8 <__aeabi_dmul>
 8009108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800910c:	9415      	str	r4, [sp, #84]	@ 0x54
 800910e:	4656      	mov	r6, sl
 8009110:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009114:	f7f7 fd20 	bl	8000b58 <__aeabi_d2iz>
 8009118:	4605      	mov	r5, r0
 800911a:	f7f7 fa03 	bl	8000524 <__aeabi_i2d>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009126:	f7f7 f8af 	bl	8000288 <__aeabi_dsub>
 800912a:	3530      	adds	r5, #48	@ 0x30
 800912c:	f806 5b01 	strb.w	r5, [r6], #1
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	42a6      	cmp	r6, r4
 8009136:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800913a:	f04f 0200 	mov.w	r2, #0
 800913e:	d124      	bne.n	800918a <_dtoa_r+0x662>
 8009140:	4bac      	ldr	r3, [pc, #688]	@ (80093f4 <_dtoa_r+0x8cc>)
 8009142:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009146:	f7f7 f8a1 	bl	800028c <__adddf3>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009152:	f7f7 fce1 	bl	8000b18 <__aeabi_dcmpgt>
 8009156:	2800      	cmp	r0, #0
 8009158:	d145      	bne.n	80091e6 <_dtoa_r+0x6be>
 800915a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800915e:	49a5      	ldr	r1, [pc, #660]	@ (80093f4 <_dtoa_r+0x8cc>)
 8009160:	2000      	movs	r0, #0
 8009162:	f7f7 f891 	bl	8000288 <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916e:	f7f7 fcb5 	bl	8000adc <__aeabi_dcmplt>
 8009172:	2800      	cmp	r0, #0
 8009174:	f43f aef5 	beq.w	8008f62 <_dtoa_r+0x43a>
 8009178:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800917a:	1e73      	subs	r3, r6, #1
 800917c:	9315      	str	r3, [sp, #84]	@ 0x54
 800917e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009182:	2b30      	cmp	r3, #48	@ 0x30
 8009184:	d0f8      	beq.n	8009178 <_dtoa_r+0x650>
 8009186:	9f04      	ldr	r7, [sp, #16]
 8009188:	e73e      	b.n	8009008 <_dtoa_r+0x4e0>
 800918a:	4b9b      	ldr	r3, [pc, #620]	@ (80093f8 <_dtoa_r+0x8d0>)
 800918c:	f7f7 fa34 	bl	80005f8 <__aeabi_dmul>
 8009190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009194:	e7bc      	b.n	8009110 <_dtoa_r+0x5e8>
 8009196:	d10c      	bne.n	80091b2 <_dtoa_r+0x68a>
 8009198:	4b98      	ldr	r3, [pc, #608]	@ (80093fc <_dtoa_r+0x8d4>)
 800919a:	2200      	movs	r2, #0
 800919c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a8:	f7f7 fcac 	bl	8000b04 <__aeabi_dcmpge>
 80091ac:	2800      	cmp	r0, #0
 80091ae:	f000 8157 	beq.w	8009460 <_dtoa_r+0x938>
 80091b2:	2400      	movs	r4, #0
 80091b4:	4625      	mov	r5, r4
 80091b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091b8:	43db      	mvns	r3, r3
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	4656      	mov	r6, sl
 80091be:	2700      	movs	r7, #0
 80091c0:	4621      	mov	r1, r4
 80091c2:	4658      	mov	r0, fp
 80091c4:	f000 fbb4 	bl	8009930 <_Bfree>
 80091c8:	2d00      	cmp	r5, #0
 80091ca:	d0dc      	beq.n	8009186 <_dtoa_r+0x65e>
 80091cc:	b12f      	cbz	r7, 80091da <_dtoa_r+0x6b2>
 80091ce:	42af      	cmp	r7, r5
 80091d0:	d003      	beq.n	80091da <_dtoa_r+0x6b2>
 80091d2:	4639      	mov	r1, r7
 80091d4:	4658      	mov	r0, fp
 80091d6:	f000 fbab 	bl	8009930 <_Bfree>
 80091da:	4629      	mov	r1, r5
 80091dc:	4658      	mov	r0, fp
 80091de:	f000 fba7 	bl	8009930 <_Bfree>
 80091e2:	e7d0      	b.n	8009186 <_dtoa_r+0x65e>
 80091e4:	9704      	str	r7, [sp, #16]
 80091e6:	4633      	mov	r3, r6
 80091e8:	461e      	mov	r6, r3
 80091ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091ee:	2a39      	cmp	r2, #57	@ 0x39
 80091f0:	d107      	bne.n	8009202 <_dtoa_r+0x6da>
 80091f2:	459a      	cmp	sl, r3
 80091f4:	d1f8      	bne.n	80091e8 <_dtoa_r+0x6c0>
 80091f6:	9a04      	ldr	r2, [sp, #16]
 80091f8:	3201      	adds	r2, #1
 80091fa:	9204      	str	r2, [sp, #16]
 80091fc:	2230      	movs	r2, #48	@ 0x30
 80091fe:	f88a 2000 	strb.w	r2, [sl]
 8009202:	781a      	ldrb	r2, [r3, #0]
 8009204:	3201      	adds	r2, #1
 8009206:	701a      	strb	r2, [r3, #0]
 8009208:	e7bd      	b.n	8009186 <_dtoa_r+0x65e>
 800920a:	4b7b      	ldr	r3, [pc, #492]	@ (80093f8 <_dtoa_r+0x8d0>)
 800920c:	2200      	movs	r2, #0
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	2200      	movs	r2, #0
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	460d      	mov	r5, r1
 800921a:	f7f7 fc55 	bl	8000ac8 <__aeabi_dcmpeq>
 800921e:	2800      	cmp	r0, #0
 8009220:	f43f aebb 	beq.w	8008f9a <_dtoa_r+0x472>
 8009224:	e6f0      	b.n	8009008 <_dtoa_r+0x4e0>
 8009226:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009228:	2a00      	cmp	r2, #0
 800922a:	f000 80db 	beq.w	80093e4 <_dtoa_r+0x8bc>
 800922e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009230:	2a01      	cmp	r2, #1
 8009232:	f300 80bf 	bgt.w	80093b4 <_dtoa_r+0x88c>
 8009236:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009238:	2a00      	cmp	r2, #0
 800923a:	f000 80b7 	beq.w	80093ac <_dtoa_r+0x884>
 800923e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009242:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009244:	4646      	mov	r6, r8
 8009246:	9a08      	ldr	r2, [sp, #32]
 8009248:	2101      	movs	r1, #1
 800924a:	441a      	add	r2, r3
 800924c:	4658      	mov	r0, fp
 800924e:	4498      	add	r8, r3
 8009250:	9208      	str	r2, [sp, #32]
 8009252:	f000 fc6b 	bl	8009b2c <__i2b>
 8009256:	4605      	mov	r5, r0
 8009258:	b15e      	cbz	r6, 8009272 <_dtoa_r+0x74a>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	2b00      	cmp	r3, #0
 800925e:	dd08      	ble.n	8009272 <_dtoa_r+0x74a>
 8009260:	42b3      	cmp	r3, r6
 8009262:	9a08      	ldr	r2, [sp, #32]
 8009264:	bfa8      	it	ge
 8009266:	4633      	movge	r3, r6
 8009268:	eba8 0803 	sub.w	r8, r8, r3
 800926c:	1af6      	subs	r6, r6, r3
 800926e:	1ad3      	subs	r3, r2, r3
 8009270:	9308      	str	r3, [sp, #32]
 8009272:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009274:	b1f3      	cbz	r3, 80092b4 <_dtoa_r+0x78c>
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	2b00      	cmp	r3, #0
 800927a:	f000 80b7 	beq.w	80093ec <_dtoa_r+0x8c4>
 800927e:	b18c      	cbz	r4, 80092a4 <_dtoa_r+0x77c>
 8009280:	4629      	mov	r1, r5
 8009282:	4622      	mov	r2, r4
 8009284:	4658      	mov	r0, fp
 8009286:	f000 fd11 	bl	8009cac <__pow5mult>
 800928a:	464a      	mov	r2, r9
 800928c:	4601      	mov	r1, r0
 800928e:	4605      	mov	r5, r0
 8009290:	4658      	mov	r0, fp
 8009292:	f000 fc61 	bl	8009b58 <__multiply>
 8009296:	4649      	mov	r1, r9
 8009298:	9004      	str	r0, [sp, #16]
 800929a:	4658      	mov	r0, fp
 800929c:	f000 fb48 	bl	8009930 <_Bfree>
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	4699      	mov	r9, r3
 80092a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092a6:	1b1a      	subs	r2, r3, r4
 80092a8:	d004      	beq.n	80092b4 <_dtoa_r+0x78c>
 80092aa:	4649      	mov	r1, r9
 80092ac:	4658      	mov	r0, fp
 80092ae:	f000 fcfd 	bl	8009cac <__pow5mult>
 80092b2:	4681      	mov	r9, r0
 80092b4:	2101      	movs	r1, #1
 80092b6:	4658      	mov	r0, fp
 80092b8:	f000 fc38 	bl	8009b2c <__i2b>
 80092bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092be:	4604      	mov	r4, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f000 81cf 	beq.w	8009664 <_dtoa_r+0xb3c>
 80092c6:	461a      	mov	r2, r3
 80092c8:	4601      	mov	r1, r0
 80092ca:	4658      	mov	r0, fp
 80092cc:	f000 fcee 	bl	8009cac <__pow5mult>
 80092d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	4604      	mov	r4, r0
 80092d6:	f300 8095 	bgt.w	8009404 <_dtoa_r+0x8dc>
 80092da:	9b02      	ldr	r3, [sp, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	f040 8087 	bne.w	80093f0 <_dtoa_r+0x8c8>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 8089 	bne.w	8009400 <_dtoa_r+0x8d8>
 80092ee:	9b03      	ldr	r3, [sp, #12]
 80092f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80092f4:	0d1b      	lsrs	r3, r3, #20
 80092f6:	051b      	lsls	r3, r3, #20
 80092f8:	b12b      	cbz	r3, 8009306 <_dtoa_r+0x7de>
 80092fa:	9b08      	ldr	r3, [sp, #32]
 80092fc:	3301      	adds	r3, #1
 80092fe:	9308      	str	r3, [sp, #32]
 8009300:	f108 0801 	add.w	r8, r8, #1
 8009304:	2301      	movs	r3, #1
 8009306:	930a      	str	r3, [sp, #40]	@ 0x28
 8009308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 81b0 	beq.w	8009670 <_dtoa_r+0xb48>
 8009310:	6923      	ldr	r3, [r4, #16]
 8009312:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009316:	6918      	ldr	r0, [r3, #16]
 8009318:	f000 fbbc 	bl	8009a94 <__hi0bits>
 800931c:	f1c0 0020 	rsb	r0, r0, #32
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	4418      	add	r0, r3
 8009324:	f010 001f 	ands.w	r0, r0, #31
 8009328:	d077      	beq.n	800941a <_dtoa_r+0x8f2>
 800932a:	f1c0 0320 	rsb	r3, r0, #32
 800932e:	2b04      	cmp	r3, #4
 8009330:	dd6b      	ble.n	800940a <_dtoa_r+0x8e2>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	f1c0 001c 	rsb	r0, r0, #28
 8009338:	4403      	add	r3, r0
 800933a:	4480      	add	r8, r0
 800933c:	4406      	add	r6, r0
 800933e:	9308      	str	r3, [sp, #32]
 8009340:	f1b8 0f00 	cmp.w	r8, #0
 8009344:	dd05      	ble.n	8009352 <_dtoa_r+0x82a>
 8009346:	4649      	mov	r1, r9
 8009348:	4642      	mov	r2, r8
 800934a:	4658      	mov	r0, fp
 800934c:	f000 fd08 	bl	8009d60 <__lshift>
 8009350:	4681      	mov	r9, r0
 8009352:	9b08      	ldr	r3, [sp, #32]
 8009354:	2b00      	cmp	r3, #0
 8009356:	dd05      	ble.n	8009364 <_dtoa_r+0x83c>
 8009358:	4621      	mov	r1, r4
 800935a:	461a      	mov	r2, r3
 800935c:	4658      	mov	r0, fp
 800935e:	f000 fcff 	bl	8009d60 <__lshift>
 8009362:	4604      	mov	r4, r0
 8009364:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009366:	2b00      	cmp	r3, #0
 8009368:	d059      	beq.n	800941e <_dtoa_r+0x8f6>
 800936a:	4621      	mov	r1, r4
 800936c:	4648      	mov	r0, r9
 800936e:	f000 fd63 	bl	8009e38 <__mcmp>
 8009372:	2800      	cmp	r0, #0
 8009374:	da53      	bge.n	800941e <_dtoa_r+0x8f6>
 8009376:	1e7b      	subs	r3, r7, #1
 8009378:	9304      	str	r3, [sp, #16]
 800937a:	4649      	mov	r1, r9
 800937c:	2300      	movs	r3, #0
 800937e:	220a      	movs	r2, #10
 8009380:	4658      	mov	r0, fp
 8009382:	f000 faf7 	bl	8009974 <__multadd>
 8009386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009388:	4681      	mov	r9, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 8172 	beq.w	8009674 <_dtoa_r+0xb4c>
 8009390:	2300      	movs	r3, #0
 8009392:	4629      	mov	r1, r5
 8009394:	220a      	movs	r2, #10
 8009396:	4658      	mov	r0, fp
 8009398:	f000 faec 	bl	8009974 <__multadd>
 800939c:	9b00      	ldr	r3, [sp, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	4605      	mov	r5, r0
 80093a2:	dc67      	bgt.n	8009474 <_dtoa_r+0x94c>
 80093a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093a6:	2b02      	cmp	r3, #2
 80093a8:	dc41      	bgt.n	800942e <_dtoa_r+0x906>
 80093aa:	e063      	b.n	8009474 <_dtoa_r+0x94c>
 80093ac:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80093ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80093b2:	e746      	b.n	8009242 <_dtoa_r+0x71a>
 80093b4:	9b07      	ldr	r3, [sp, #28]
 80093b6:	1e5c      	subs	r4, r3, #1
 80093b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ba:	42a3      	cmp	r3, r4
 80093bc:	bfbf      	itttt	lt
 80093be:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80093c0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80093c2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80093c4:	1ae3      	sublt	r3, r4, r3
 80093c6:	bfb4      	ite	lt
 80093c8:	18d2      	addlt	r2, r2, r3
 80093ca:	1b1c      	subge	r4, r3, r4
 80093cc:	9b07      	ldr	r3, [sp, #28]
 80093ce:	bfbc      	itt	lt
 80093d0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80093d2:	2400      	movlt	r4, #0
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bfb5      	itete	lt
 80093d8:	eba8 0603 	sublt.w	r6, r8, r3
 80093dc:	9b07      	ldrge	r3, [sp, #28]
 80093de:	2300      	movlt	r3, #0
 80093e0:	4646      	movge	r6, r8
 80093e2:	e730      	b.n	8009246 <_dtoa_r+0x71e>
 80093e4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80093e6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80093e8:	4646      	mov	r6, r8
 80093ea:	e735      	b.n	8009258 <_dtoa_r+0x730>
 80093ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80093ee:	e75c      	b.n	80092aa <_dtoa_r+0x782>
 80093f0:	2300      	movs	r3, #0
 80093f2:	e788      	b.n	8009306 <_dtoa_r+0x7de>
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	40240000 	.word	0x40240000
 80093fc:	40140000 	.word	0x40140000
 8009400:	9b02      	ldr	r3, [sp, #8]
 8009402:	e780      	b.n	8009306 <_dtoa_r+0x7de>
 8009404:	2300      	movs	r3, #0
 8009406:	930a      	str	r3, [sp, #40]	@ 0x28
 8009408:	e782      	b.n	8009310 <_dtoa_r+0x7e8>
 800940a:	d099      	beq.n	8009340 <_dtoa_r+0x818>
 800940c:	9a08      	ldr	r2, [sp, #32]
 800940e:	331c      	adds	r3, #28
 8009410:	441a      	add	r2, r3
 8009412:	4498      	add	r8, r3
 8009414:	441e      	add	r6, r3
 8009416:	9208      	str	r2, [sp, #32]
 8009418:	e792      	b.n	8009340 <_dtoa_r+0x818>
 800941a:	4603      	mov	r3, r0
 800941c:	e7f6      	b.n	800940c <_dtoa_r+0x8e4>
 800941e:	9b07      	ldr	r3, [sp, #28]
 8009420:	9704      	str	r7, [sp, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dc20      	bgt.n	8009468 <_dtoa_r+0x940>
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800942a:	2b02      	cmp	r3, #2
 800942c:	dd1e      	ble.n	800946c <_dtoa_r+0x944>
 800942e:	9b00      	ldr	r3, [sp, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f47f aec0 	bne.w	80091b6 <_dtoa_r+0x68e>
 8009436:	4621      	mov	r1, r4
 8009438:	2205      	movs	r2, #5
 800943a:	4658      	mov	r0, fp
 800943c:	f000 fa9a 	bl	8009974 <__multadd>
 8009440:	4601      	mov	r1, r0
 8009442:	4604      	mov	r4, r0
 8009444:	4648      	mov	r0, r9
 8009446:	f000 fcf7 	bl	8009e38 <__mcmp>
 800944a:	2800      	cmp	r0, #0
 800944c:	f77f aeb3 	ble.w	80091b6 <_dtoa_r+0x68e>
 8009450:	4656      	mov	r6, sl
 8009452:	2331      	movs	r3, #49	@ 0x31
 8009454:	f806 3b01 	strb.w	r3, [r6], #1
 8009458:	9b04      	ldr	r3, [sp, #16]
 800945a:	3301      	adds	r3, #1
 800945c:	9304      	str	r3, [sp, #16]
 800945e:	e6ae      	b.n	80091be <_dtoa_r+0x696>
 8009460:	9c07      	ldr	r4, [sp, #28]
 8009462:	9704      	str	r7, [sp, #16]
 8009464:	4625      	mov	r5, r4
 8009466:	e7f3      	b.n	8009450 <_dtoa_r+0x928>
 8009468:	9b07      	ldr	r3, [sp, #28]
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800946e:	2b00      	cmp	r3, #0
 8009470:	f000 8104 	beq.w	800967c <_dtoa_r+0xb54>
 8009474:	2e00      	cmp	r6, #0
 8009476:	dd05      	ble.n	8009484 <_dtoa_r+0x95c>
 8009478:	4629      	mov	r1, r5
 800947a:	4632      	mov	r2, r6
 800947c:	4658      	mov	r0, fp
 800947e:	f000 fc6f 	bl	8009d60 <__lshift>
 8009482:	4605      	mov	r5, r0
 8009484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d05a      	beq.n	8009540 <_dtoa_r+0xa18>
 800948a:	6869      	ldr	r1, [r5, #4]
 800948c:	4658      	mov	r0, fp
 800948e:	f000 fa0f 	bl	80098b0 <_Balloc>
 8009492:	4606      	mov	r6, r0
 8009494:	b928      	cbnz	r0, 80094a2 <_dtoa_r+0x97a>
 8009496:	4b84      	ldr	r3, [pc, #528]	@ (80096a8 <_dtoa_r+0xb80>)
 8009498:	4602      	mov	r2, r0
 800949a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800949e:	f7ff bb5a 	b.w	8008b56 <_dtoa_r+0x2e>
 80094a2:	692a      	ldr	r2, [r5, #16]
 80094a4:	3202      	adds	r2, #2
 80094a6:	0092      	lsls	r2, r2, #2
 80094a8:	f105 010c 	add.w	r1, r5, #12
 80094ac:	300c      	adds	r0, #12
 80094ae:	f001 ff75 	bl	800b39c <memcpy>
 80094b2:	2201      	movs	r2, #1
 80094b4:	4631      	mov	r1, r6
 80094b6:	4658      	mov	r0, fp
 80094b8:	f000 fc52 	bl	8009d60 <__lshift>
 80094bc:	f10a 0301 	add.w	r3, sl, #1
 80094c0:	9307      	str	r3, [sp, #28]
 80094c2:	9b00      	ldr	r3, [sp, #0]
 80094c4:	4453      	add	r3, sl
 80094c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80094c8:	9b02      	ldr	r3, [sp, #8]
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	462f      	mov	r7, r5
 80094d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80094d2:	4605      	mov	r5, r0
 80094d4:	9b07      	ldr	r3, [sp, #28]
 80094d6:	4621      	mov	r1, r4
 80094d8:	3b01      	subs	r3, #1
 80094da:	4648      	mov	r0, r9
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	f7ff fa9b 	bl	8008a18 <quorem>
 80094e2:	4639      	mov	r1, r7
 80094e4:	9002      	str	r0, [sp, #8]
 80094e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094ea:	4648      	mov	r0, r9
 80094ec:	f000 fca4 	bl	8009e38 <__mcmp>
 80094f0:	462a      	mov	r2, r5
 80094f2:	9008      	str	r0, [sp, #32]
 80094f4:	4621      	mov	r1, r4
 80094f6:	4658      	mov	r0, fp
 80094f8:	f000 fcba 	bl	8009e70 <__mdiff>
 80094fc:	68c2      	ldr	r2, [r0, #12]
 80094fe:	4606      	mov	r6, r0
 8009500:	bb02      	cbnz	r2, 8009544 <_dtoa_r+0xa1c>
 8009502:	4601      	mov	r1, r0
 8009504:	4648      	mov	r0, r9
 8009506:	f000 fc97 	bl	8009e38 <__mcmp>
 800950a:	4602      	mov	r2, r0
 800950c:	4631      	mov	r1, r6
 800950e:	4658      	mov	r0, fp
 8009510:	920e      	str	r2, [sp, #56]	@ 0x38
 8009512:	f000 fa0d 	bl	8009930 <_Bfree>
 8009516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009518:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800951a:	9e07      	ldr	r6, [sp, #28]
 800951c:	ea43 0102 	orr.w	r1, r3, r2
 8009520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009522:	4319      	orrs	r1, r3
 8009524:	d110      	bne.n	8009548 <_dtoa_r+0xa20>
 8009526:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800952a:	d029      	beq.n	8009580 <_dtoa_r+0xa58>
 800952c:	9b08      	ldr	r3, [sp, #32]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dd02      	ble.n	8009538 <_dtoa_r+0xa10>
 8009532:	9b02      	ldr	r3, [sp, #8]
 8009534:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	f883 8000 	strb.w	r8, [r3]
 800953e:	e63f      	b.n	80091c0 <_dtoa_r+0x698>
 8009540:	4628      	mov	r0, r5
 8009542:	e7bb      	b.n	80094bc <_dtoa_r+0x994>
 8009544:	2201      	movs	r2, #1
 8009546:	e7e1      	b.n	800950c <_dtoa_r+0x9e4>
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	2b00      	cmp	r3, #0
 800954c:	db04      	blt.n	8009558 <_dtoa_r+0xa30>
 800954e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009550:	430b      	orrs	r3, r1
 8009552:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009554:	430b      	orrs	r3, r1
 8009556:	d120      	bne.n	800959a <_dtoa_r+0xa72>
 8009558:	2a00      	cmp	r2, #0
 800955a:	dded      	ble.n	8009538 <_dtoa_r+0xa10>
 800955c:	4649      	mov	r1, r9
 800955e:	2201      	movs	r2, #1
 8009560:	4658      	mov	r0, fp
 8009562:	f000 fbfd 	bl	8009d60 <__lshift>
 8009566:	4621      	mov	r1, r4
 8009568:	4681      	mov	r9, r0
 800956a:	f000 fc65 	bl	8009e38 <__mcmp>
 800956e:	2800      	cmp	r0, #0
 8009570:	dc03      	bgt.n	800957a <_dtoa_r+0xa52>
 8009572:	d1e1      	bne.n	8009538 <_dtoa_r+0xa10>
 8009574:	f018 0f01 	tst.w	r8, #1
 8009578:	d0de      	beq.n	8009538 <_dtoa_r+0xa10>
 800957a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800957e:	d1d8      	bne.n	8009532 <_dtoa_r+0xa0a>
 8009580:	9a00      	ldr	r2, [sp, #0]
 8009582:	2339      	movs	r3, #57	@ 0x39
 8009584:	7013      	strb	r3, [r2, #0]
 8009586:	4633      	mov	r3, r6
 8009588:	461e      	mov	r6, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009590:	2a39      	cmp	r2, #57	@ 0x39
 8009592:	d052      	beq.n	800963a <_dtoa_r+0xb12>
 8009594:	3201      	adds	r2, #1
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e612      	b.n	80091c0 <_dtoa_r+0x698>
 800959a:	2a00      	cmp	r2, #0
 800959c:	dd07      	ble.n	80095ae <_dtoa_r+0xa86>
 800959e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80095a2:	d0ed      	beq.n	8009580 <_dtoa_r+0xa58>
 80095a4:	9a00      	ldr	r2, [sp, #0]
 80095a6:	f108 0301 	add.w	r3, r8, #1
 80095aa:	7013      	strb	r3, [r2, #0]
 80095ac:	e608      	b.n	80091c0 <_dtoa_r+0x698>
 80095ae:	9b07      	ldr	r3, [sp, #28]
 80095b0:	9a07      	ldr	r2, [sp, #28]
 80095b2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80095b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d028      	beq.n	800960e <_dtoa_r+0xae6>
 80095bc:	4649      	mov	r1, r9
 80095be:	2300      	movs	r3, #0
 80095c0:	220a      	movs	r2, #10
 80095c2:	4658      	mov	r0, fp
 80095c4:	f000 f9d6 	bl	8009974 <__multadd>
 80095c8:	42af      	cmp	r7, r5
 80095ca:	4681      	mov	r9, r0
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	f04f 020a 	mov.w	r2, #10
 80095d4:	4639      	mov	r1, r7
 80095d6:	4658      	mov	r0, fp
 80095d8:	d107      	bne.n	80095ea <_dtoa_r+0xac2>
 80095da:	f000 f9cb 	bl	8009974 <__multadd>
 80095de:	4607      	mov	r7, r0
 80095e0:	4605      	mov	r5, r0
 80095e2:	9b07      	ldr	r3, [sp, #28]
 80095e4:	3301      	adds	r3, #1
 80095e6:	9307      	str	r3, [sp, #28]
 80095e8:	e774      	b.n	80094d4 <_dtoa_r+0x9ac>
 80095ea:	f000 f9c3 	bl	8009974 <__multadd>
 80095ee:	4629      	mov	r1, r5
 80095f0:	4607      	mov	r7, r0
 80095f2:	2300      	movs	r3, #0
 80095f4:	220a      	movs	r2, #10
 80095f6:	4658      	mov	r0, fp
 80095f8:	f000 f9bc 	bl	8009974 <__multadd>
 80095fc:	4605      	mov	r5, r0
 80095fe:	e7f0      	b.n	80095e2 <_dtoa_r+0xaba>
 8009600:	9b00      	ldr	r3, [sp, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	bfcc      	ite	gt
 8009606:	461e      	movgt	r6, r3
 8009608:	2601      	movle	r6, #1
 800960a:	4456      	add	r6, sl
 800960c:	2700      	movs	r7, #0
 800960e:	4649      	mov	r1, r9
 8009610:	2201      	movs	r2, #1
 8009612:	4658      	mov	r0, fp
 8009614:	f000 fba4 	bl	8009d60 <__lshift>
 8009618:	4621      	mov	r1, r4
 800961a:	4681      	mov	r9, r0
 800961c:	f000 fc0c 	bl	8009e38 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	dcb0      	bgt.n	8009586 <_dtoa_r+0xa5e>
 8009624:	d102      	bne.n	800962c <_dtoa_r+0xb04>
 8009626:	f018 0f01 	tst.w	r8, #1
 800962a:	d1ac      	bne.n	8009586 <_dtoa_r+0xa5e>
 800962c:	4633      	mov	r3, r6
 800962e:	461e      	mov	r6, r3
 8009630:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009634:	2a30      	cmp	r2, #48	@ 0x30
 8009636:	d0fa      	beq.n	800962e <_dtoa_r+0xb06>
 8009638:	e5c2      	b.n	80091c0 <_dtoa_r+0x698>
 800963a:	459a      	cmp	sl, r3
 800963c:	d1a4      	bne.n	8009588 <_dtoa_r+0xa60>
 800963e:	9b04      	ldr	r3, [sp, #16]
 8009640:	3301      	adds	r3, #1
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	2331      	movs	r3, #49	@ 0x31
 8009646:	f88a 3000 	strb.w	r3, [sl]
 800964a:	e5b9      	b.n	80091c0 <_dtoa_r+0x698>
 800964c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800964e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80096ac <_dtoa_r+0xb84>
 8009652:	b11b      	cbz	r3, 800965c <_dtoa_r+0xb34>
 8009654:	f10a 0308 	add.w	r3, sl, #8
 8009658:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	4650      	mov	r0, sl
 800965e:	b019      	add	sp, #100	@ 0x64
 8009660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009666:	2b01      	cmp	r3, #1
 8009668:	f77f ae37 	ble.w	80092da <_dtoa_r+0x7b2>
 800966c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800966e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009670:	2001      	movs	r0, #1
 8009672:	e655      	b.n	8009320 <_dtoa_r+0x7f8>
 8009674:	9b00      	ldr	r3, [sp, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f77f aed6 	ble.w	8009428 <_dtoa_r+0x900>
 800967c:	4656      	mov	r6, sl
 800967e:	4621      	mov	r1, r4
 8009680:	4648      	mov	r0, r9
 8009682:	f7ff f9c9 	bl	8008a18 <quorem>
 8009686:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800968a:	f806 8b01 	strb.w	r8, [r6], #1
 800968e:	9b00      	ldr	r3, [sp, #0]
 8009690:	eba6 020a 	sub.w	r2, r6, sl
 8009694:	4293      	cmp	r3, r2
 8009696:	ddb3      	ble.n	8009600 <_dtoa_r+0xad8>
 8009698:	4649      	mov	r1, r9
 800969a:	2300      	movs	r3, #0
 800969c:	220a      	movs	r2, #10
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 f968 	bl	8009974 <__multadd>
 80096a4:	4681      	mov	r9, r0
 80096a6:	e7ea      	b.n	800967e <_dtoa_r+0xb56>
 80096a8:	0800c1c5 	.word	0x0800c1c5
 80096ac:	0800c149 	.word	0x0800c149

080096b0 <_free_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4605      	mov	r5, r0
 80096b4:	2900      	cmp	r1, #0
 80096b6:	d041      	beq.n	800973c <_free_r+0x8c>
 80096b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096bc:	1f0c      	subs	r4, r1, #4
 80096be:	2b00      	cmp	r3, #0
 80096c0:	bfb8      	it	lt
 80096c2:	18e4      	addlt	r4, r4, r3
 80096c4:	f000 f8e8 	bl	8009898 <__malloc_lock>
 80096c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009740 <_free_r+0x90>)
 80096ca:	6813      	ldr	r3, [r2, #0]
 80096cc:	b933      	cbnz	r3, 80096dc <_free_r+0x2c>
 80096ce:	6063      	str	r3, [r4, #4]
 80096d0:	6014      	str	r4, [r2, #0]
 80096d2:	4628      	mov	r0, r5
 80096d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096d8:	f000 b8e4 	b.w	80098a4 <__malloc_unlock>
 80096dc:	42a3      	cmp	r3, r4
 80096de:	d908      	bls.n	80096f2 <_free_r+0x42>
 80096e0:	6820      	ldr	r0, [r4, #0]
 80096e2:	1821      	adds	r1, r4, r0
 80096e4:	428b      	cmp	r3, r1
 80096e6:	bf01      	itttt	eq
 80096e8:	6819      	ldreq	r1, [r3, #0]
 80096ea:	685b      	ldreq	r3, [r3, #4]
 80096ec:	1809      	addeq	r1, r1, r0
 80096ee:	6021      	streq	r1, [r4, #0]
 80096f0:	e7ed      	b.n	80096ce <_free_r+0x1e>
 80096f2:	461a      	mov	r2, r3
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	b10b      	cbz	r3, 80096fc <_free_r+0x4c>
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d9fa      	bls.n	80096f2 <_free_r+0x42>
 80096fc:	6811      	ldr	r1, [r2, #0]
 80096fe:	1850      	adds	r0, r2, r1
 8009700:	42a0      	cmp	r0, r4
 8009702:	d10b      	bne.n	800971c <_free_r+0x6c>
 8009704:	6820      	ldr	r0, [r4, #0]
 8009706:	4401      	add	r1, r0
 8009708:	1850      	adds	r0, r2, r1
 800970a:	4283      	cmp	r3, r0
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	d1e0      	bne.n	80096d2 <_free_r+0x22>
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	6053      	str	r3, [r2, #4]
 8009716:	4408      	add	r0, r1
 8009718:	6010      	str	r0, [r2, #0]
 800971a:	e7da      	b.n	80096d2 <_free_r+0x22>
 800971c:	d902      	bls.n	8009724 <_free_r+0x74>
 800971e:	230c      	movs	r3, #12
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	e7d6      	b.n	80096d2 <_free_r+0x22>
 8009724:	6820      	ldr	r0, [r4, #0]
 8009726:	1821      	adds	r1, r4, r0
 8009728:	428b      	cmp	r3, r1
 800972a:	bf04      	itt	eq
 800972c:	6819      	ldreq	r1, [r3, #0]
 800972e:	685b      	ldreq	r3, [r3, #4]
 8009730:	6063      	str	r3, [r4, #4]
 8009732:	bf04      	itt	eq
 8009734:	1809      	addeq	r1, r1, r0
 8009736:	6021      	streq	r1, [r4, #0]
 8009738:	6054      	str	r4, [r2, #4]
 800973a:	e7ca      	b.n	80096d2 <_free_r+0x22>
 800973c:	bd38      	pop	{r3, r4, r5, pc}
 800973e:	bf00      	nop
 8009740:	20000a54 	.word	0x20000a54

08009744 <malloc>:
 8009744:	4b02      	ldr	r3, [pc, #8]	@ (8009750 <malloc+0xc>)
 8009746:	4601      	mov	r1, r0
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	f000 b825 	b.w	8009798 <_malloc_r>
 800974e:	bf00      	nop
 8009750:	20000018 	.word	0x20000018

08009754 <sbrk_aligned>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4e0f      	ldr	r6, [pc, #60]	@ (8009794 <sbrk_aligned+0x40>)
 8009758:	460c      	mov	r4, r1
 800975a:	6831      	ldr	r1, [r6, #0]
 800975c:	4605      	mov	r5, r0
 800975e:	b911      	cbnz	r1, 8009766 <sbrk_aligned+0x12>
 8009760:	f001 fe0c 	bl	800b37c <_sbrk_r>
 8009764:	6030      	str	r0, [r6, #0]
 8009766:	4621      	mov	r1, r4
 8009768:	4628      	mov	r0, r5
 800976a:	f001 fe07 	bl	800b37c <_sbrk_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	d103      	bne.n	800977a <sbrk_aligned+0x26>
 8009772:	f04f 34ff 	mov.w	r4, #4294967295
 8009776:	4620      	mov	r0, r4
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	1cc4      	adds	r4, r0, #3
 800977c:	f024 0403 	bic.w	r4, r4, #3
 8009780:	42a0      	cmp	r0, r4
 8009782:	d0f8      	beq.n	8009776 <sbrk_aligned+0x22>
 8009784:	1a21      	subs	r1, r4, r0
 8009786:	4628      	mov	r0, r5
 8009788:	f001 fdf8 	bl	800b37c <_sbrk_r>
 800978c:	3001      	adds	r0, #1
 800978e:	d1f2      	bne.n	8009776 <sbrk_aligned+0x22>
 8009790:	e7ef      	b.n	8009772 <sbrk_aligned+0x1e>
 8009792:	bf00      	nop
 8009794:	20000a50 	.word	0x20000a50

08009798 <_malloc_r>:
 8009798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800979c:	1ccd      	adds	r5, r1, #3
 800979e:	f025 0503 	bic.w	r5, r5, #3
 80097a2:	3508      	adds	r5, #8
 80097a4:	2d0c      	cmp	r5, #12
 80097a6:	bf38      	it	cc
 80097a8:	250c      	movcc	r5, #12
 80097aa:	2d00      	cmp	r5, #0
 80097ac:	4606      	mov	r6, r0
 80097ae:	db01      	blt.n	80097b4 <_malloc_r+0x1c>
 80097b0:	42a9      	cmp	r1, r5
 80097b2:	d904      	bls.n	80097be <_malloc_r+0x26>
 80097b4:	230c      	movs	r3, #12
 80097b6:	6033      	str	r3, [r6, #0]
 80097b8:	2000      	movs	r0, #0
 80097ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009894 <_malloc_r+0xfc>
 80097c2:	f000 f869 	bl	8009898 <__malloc_lock>
 80097c6:	f8d8 3000 	ldr.w	r3, [r8]
 80097ca:	461c      	mov	r4, r3
 80097cc:	bb44      	cbnz	r4, 8009820 <_malloc_r+0x88>
 80097ce:	4629      	mov	r1, r5
 80097d0:	4630      	mov	r0, r6
 80097d2:	f7ff ffbf 	bl	8009754 <sbrk_aligned>
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	4604      	mov	r4, r0
 80097da:	d158      	bne.n	800988e <_malloc_r+0xf6>
 80097dc:	f8d8 4000 	ldr.w	r4, [r8]
 80097e0:	4627      	mov	r7, r4
 80097e2:	2f00      	cmp	r7, #0
 80097e4:	d143      	bne.n	800986e <_malloc_r+0xd6>
 80097e6:	2c00      	cmp	r4, #0
 80097e8:	d04b      	beq.n	8009882 <_malloc_r+0xea>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	4639      	mov	r1, r7
 80097ee:	4630      	mov	r0, r6
 80097f0:	eb04 0903 	add.w	r9, r4, r3
 80097f4:	f001 fdc2 	bl	800b37c <_sbrk_r>
 80097f8:	4581      	cmp	r9, r0
 80097fa:	d142      	bne.n	8009882 <_malloc_r+0xea>
 80097fc:	6821      	ldr	r1, [r4, #0]
 80097fe:	1a6d      	subs	r5, r5, r1
 8009800:	4629      	mov	r1, r5
 8009802:	4630      	mov	r0, r6
 8009804:	f7ff ffa6 	bl	8009754 <sbrk_aligned>
 8009808:	3001      	adds	r0, #1
 800980a:	d03a      	beq.n	8009882 <_malloc_r+0xea>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	442b      	add	r3, r5
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	f8d8 3000 	ldr.w	r3, [r8]
 8009816:	685a      	ldr	r2, [r3, #4]
 8009818:	bb62      	cbnz	r2, 8009874 <_malloc_r+0xdc>
 800981a:	f8c8 7000 	str.w	r7, [r8]
 800981e:	e00f      	b.n	8009840 <_malloc_r+0xa8>
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	1b52      	subs	r2, r2, r5
 8009824:	d420      	bmi.n	8009868 <_malloc_r+0xd0>
 8009826:	2a0b      	cmp	r2, #11
 8009828:	d917      	bls.n	800985a <_malloc_r+0xc2>
 800982a:	1961      	adds	r1, r4, r5
 800982c:	42a3      	cmp	r3, r4
 800982e:	6025      	str	r5, [r4, #0]
 8009830:	bf18      	it	ne
 8009832:	6059      	strne	r1, [r3, #4]
 8009834:	6863      	ldr	r3, [r4, #4]
 8009836:	bf08      	it	eq
 8009838:	f8c8 1000 	streq.w	r1, [r8]
 800983c:	5162      	str	r2, [r4, r5]
 800983e:	604b      	str	r3, [r1, #4]
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f82f 	bl	80098a4 <__malloc_unlock>
 8009846:	f104 000b 	add.w	r0, r4, #11
 800984a:	1d23      	adds	r3, r4, #4
 800984c:	f020 0007 	bic.w	r0, r0, #7
 8009850:	1ac2      	subs	r2, r0, r3
 8009852:	bf1c      	itt	ne
 8009854:	1a1b      	subne	r3, r3, r0
 8009856:	50a3      	strne	r3, [r4, r2]
 8009858:	e7af      	b.n	80097ba <_malloc_r+0x22>
 800985a:	6862      	ldr	r2, [r4, #4]
 800985c:	42a3      	cmp	r3, r4
 800985e:	bf0c      	ite	eq
 8009860:	f8c8 2000 	streq.w	r2, [r8]
 8009864:	605a      	strne	r2, [r3, #4]
 8009866:	e7eb      	b.n	8009840 <_malloc_r+0xa8>
 8009868:	4623      	mov	r3, r4
 800986a:	6864      	ldr	r4, [r4, #4]
 800986c:	e7ae      	b.n	80097cc <_malloc_r+0x34>
 800986e:	463c      	mov	r4, r7
 8009870:	687f      	ldr	r7, [r7, #4]
 8009872:	e7b6      	b.n	80097e2 <_malloc_r+0x4a>
 8009874:	461a      	mov	r2, r3
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	42a3      	cmp	r3, r4
 800987a:	d1fb      	bne.n	8009874 <_malloc_r+0xdc>
 800987c:	2300      	movs	r3, #0
 800987e:	6053      	str	r3, [r2, #4]
 8009880:	e7de      	b.n	8009840 <_malloc_r+0xa8>
 8009882:	230c      	movs	r3, #12
 8009884:	6033      	str	r3, [r6, #0]
 8009886:	4630      	mov	r0, r6
 8009888:	f000 f80c 	bl	80098a4 <__malloc_unlock>
 800988c:	e794      	b.n	80097b8 <_malloc_r+0x20>
 800988e:	6005      	str	r5, [r0, #0]
 8009890:	e7d6      	b.n	8009840 <_malloc_r+0xa8>
 8009892:	bf00      	nop
 8009894:	20000a54 	.word	0x20000a54

08009898 <__malloc_lock>:
 8009898:	4801      	ldr	r0, [pc, #4]	@ (80098a0 <__malloc_lock+0x8>)
 800989a:	f7ff b8b4 	b.w	8008a06 <__retarget_lock_acquire_recursive>
 800989e:	bf00      	nop
 80098a0:	20000a4c 	.word	0x20000a4c

080098a4 <__malloc_unlock>:
 80098a4:	4801      	ldr	r0, [pc, #4]	@ (80098ac <__malloc_unlock+0x8>)
 80098a6:	f7ff b8af 	b.w	8008a08 <__retarget_lock_release_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000a4c 	.word	0x20000a4c

080098b0 <_Balloc>:
 80098b0:	b570      	push	{r4, r5, r6, lr}
 80098b2:	69c6      	ldr	r6, [r0, #28]
 80098b4:	4604      	mov	r4, r0
 80098b6:	460d      	mov	r5, r1
 80098b8:	b976      	cbnz	r6, 80098d8 <_Balloc+0x28>
 80098ba:	2010      	movs	r0, #16
 80098bc:	f7ff ff42 	bl	8009744 <malloc>
 80098c0:	4602      	mov	r2, r0
 80098c2:	61e0      	str	r0, [r4, #28]
 80098c4:	b920      	cbnz	r0, 80098d0 <_Balloc+0x20>
 80098c6:	4b18      	ldr	r3, [pc, #96]	@ (8009928 <_Balloc+0x78>)
 80098c8:	4818      	ldr	r0, [pc, #96]	@ (800992c <_Balloc+0x7c>)
 80098ca:	216b      	movs	r1, #107	@ 0x6b
 80098cc:	f001 fd7c 	bl	800b3c8 <__assert_func>
 80098d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098d4:	6006      	str	r6, [r0, #0]
 80098d6:	60c6      	str	r6, [r0, #12]
 80098d8:	69e6      	ldr	r6, [r4, #28]
 80098da:	68f3      	ldr	r3, [r6, #12]
 80098dc:	b183      	cbz	r3, 8009900 <_Balloc+0x50>
 80098de:	69e3      	ldr	r3, [r4, #28]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098e6:	b9b8      	cbnz	r0, 8009918 <_Balloc+0x68>
 80098e8:	2101      	movs	r1, #1
 80098ea:	fa01 f605 	lsl.w	r6, r1, r5
 80098ee:	1d72      	adds	r2, r6, #5
 80098f0:	0092      	lsls	r2, r2, #2
 80098f2:	4620      	mov	r0, r4
 80098f4:	f001 fd86 	bl	800b404 <_calloc_r>
 80098f8:	b160      	cbz	r0, 8009914 <_Balloc+0x64>
 80098fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098fe:	e00e      	b.n	800991e <_Balloc+0x6e>
 8009900:	2221      	movs	r2, #33	@ 0x21
 8009902:	2104      	movs	r1, #4
 8009904:	4620      	mov	r0, r4
 8009906:	f001 fd7d 	bl	800b404 <_calloc_r>
 800990a:	69e3      	ldr	r3, [r4, #28]
 800990c:	60f0      	str	r0, [r6, #12]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d1e4      	bne.n	80098de <_Balloc+0x2e>
 8009914:	2000      	movs	r0, #0
 8009916:	bd70      	pop	{r4, r5, r6, pc}
 8009918:	6802      	ldr	r2, [r0, #0]
 800991a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800991e:	2300      	movs	r3, #0
 8009920:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009924:	e7f7      	b.n	8009916 <_Balloc+0x66>
 8009926:	bf00      	nop
 8009928:	0800c156 	.word	0x0800c156
 800992c:	0800c1d6 	.word	0x0800c1d6

08009930 <_Bfree>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	69c6      	ldr	r6, [r0, #28]
 8009934:	4605      	mov	r5, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b976      	cbnz	r6, 8009958 <_Bfree+0x28>
 800993a:	2010      	movs	r0, #16
 800993c:	f7ff ff02 	bl	8009744 <malloc>
 8009940:	4602      	mov	r2, r0
 8009942:	61e8      	str	r0, [r5, #28]
 8009944:	b920      	cbnz	r0, 8009950 <_Bfree+0x20>
 8009946:	4b09      	ldr	r3, [pc, #36]	@ (800996c <_Bfree+0x3c>)
 8009948:	4809      	ldr	r0, [pc, #36]	@ (8009970 <_Bfree+0x40>)
 800994a:	218f      	movs	r1, #143	@ 0x8f
 800994c:	f001 fd3c 	bl	800b3c8 <__assert_func>
 8009950:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009954:	6006      	str	r6, [r0, #0]
 8009956:	60c6      	str	r6, [r0, #12]
 8009958:	b13c      	cbz	r4, 800996a <_Bfree+0x3a>
 800995a:	69eb      	ldr	r3, [r5, #28]
 800995c:	6862      	ldr	r2, [r4, #4]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009964:	6021      	str	r1, [r4, #0]
 8009966:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	0800c156 	.word	0x0800c156
 8009970:	0800c1d6 	.word	0x0800c1d6

08009974 <__multadd>:
 8009974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009978:	690d      	ldr	r5, [r1, #16]
 800997a:	4607      	mov	r7, r0
 800997c:	460c      	mov	r4, r1
 800997e:	461e      	mov	r6, r3
 8009980:	f101 0c14 	add.w	ip, r1, #20
 8009984:	2000      	movs	r0, #0
 8009986:	f8dc 3000 	ldr.w	r3, [ip]
 800998a:	b299      	uxth	r1, r3
 800998c:	fb02 6101 	mla	r1, r2, r1, r6
 8009990:	0c1e      	lsrs	r6, r3, #16
 8009992:	0c0b      	lsrs	r3, r1, #16
 8009994:	fb02 3306 	mla	r3, r2, r6, r3
 8009998:	b289      	uxth	r1, r1
 800999a:	3001      	adds	r0, #1
 800999c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099a0:	4285      	cmp	r5, r0
 80099a2:	f84c 1b04 	str.w	r1, [ip], #4
 80099a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099aa:	dcec      	bgt.n	8009986 <__multadd+0x12>
 80099ac:	b30e      	cbz	r6, 80099f2 <__multadd+0x7e>
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	dc19      	bgt.n	80099e8 <__multadd+0x74>
 80099b4:	6861      	ldr	r1, [r4, #4]
 80099b6:	4638      	mov	r0, r7
 80099b8:	3101      	adds	r1, #1
 80099ba:	f7ff ff79 	bl	80098b0 <_Balloc>
 80099be:	4680      	mov	r8, r0
 80099c0:	b928      	cbnz	r0, 80099ce <__multadd+0x5a>
 80099c2:	4602      	mov	r2, r0
 80099c4:	4b0c      	ldr	r3, [pc, #48]	@ (80099f8 <__multadd+0x84>)
 80099c6:	480d      	ldr	r0, [pc, #52]	@ (80099fc <__multadd+0x88>)
 80099c8:	21ba      	movs	r1, #186	@ 0xba
 80099ca:	f001 fcfd 	bl	800b3c8 <__assert_func>
 80099ce:	6922      	ldr	r2, [r4, #16]
 80099d0:	3202      	adds	r2, #2
 80099d2:	f104 010c 	add.w	r1, r4, #12
 80099d6:	0092      	lsls	r2, r2, #2
 80099d8:	300c      	adds	r0, #12
 80099da:	f001 fcdf 	bl	800b39c <memcpy>
 80099de:	4621      	mov	r1, r4
 80099e0:	4638      	mov	r0, r7
 80099e2:	f7ff ffa5 	bl	8009930 <_Bfree>
 80099e6:	4644      	mov	r4, r8
 80099e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099ec:	3501      	adds	r5, #1
 80099ee:	615e      	str	r6, [r3, #20]
 80099f0:	6125      	str	r5, [r4, #16]
 80099f2:	4620      	mov	r0, r4
 80099f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099f8:	0800c1c5 	.word	0x0800c1c5
 80099fc:	0800c1d6 	.word	0x0800c1d6

08009a00 <__s2b>:
 8009a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a04:	460c      	mov	r4, r1
 8009a06:	4615      	mov	r5, r2
 8009a08:	461f      	mov	r7, r3
 8009a0a:	2209      	movs	r2, #9
 8009a0c:	3308      	adds	r3, #8
 8009a0e:	4606      	mov	r6, r0
 8009a10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a14:	2100      	movs	r1, #0
 8009a16:	2201      	movs	r2, #1
 8009a18:	429a      	cmp	r2, r3
 8009a1a:	db09      	blt.n	8009a30 <__s2b+0x30>
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7ff ff47 	bl	80098b0 <_Balloc>
 8009a22:	b940      	cbnz	r0, 8009a36 <__s2b+0x36>
 8009a24:	4602      	mov	r2, r0
 8009a26:	4b19      	ldr	r3, [pc, #100]	@ (8009a8c <__s2b+0x8c>)
 8009a28:	4819      	ldr	r0, [pc, #100]	@ (8009a90 <__s2b+0x90>)
 8009a2a:	21d3      	movs	r1, #211	@ 0xd3
 8009a2c:	f001 fccc 	bl	800b3c8 <__assert_func>
 8009a30:	0052      	lsls	r2, r2, #1
 8009a32:	3101      	adds	r1, #1
 8009a34:	e7f0      	b.n	8009a18 <__s2b+0x18>
 8009a36:	9b08      	ldr	r3, [sp, #32]
 8009a38:	6143      	str	r3, [r0, #20]
 8009a3a:	2d09      	cmp	r5, #9
 8009a3c:	f04f 0301 	mov.w	r3, #1
 8009a40:	6103      	str	r3, [r0, #16]
 8009a42:	dd16      	ble.n	8009a72 <__s2b+0x72>
 8009a44:	f104 0909 	add.w	r9, r4, #9
 8009a48:	46c8      	mov	r8, r9
 8009a4a:	442c      	add	r4, r5
 8009a4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a50:	4601      	mov	r1, r0
 8009a52:	3b30      	subs	r3, #48	@ 0x30
 8009a54:	220a      	movs	r2, #10
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff ff8c 	bl	8009974 <__multadd>
 8009a5c:	45a0      	cmp	r8, r4
 8009a5e:	d1f5      	bne.n	8009a4c <__s2b+0x4c>
 8009a60:	f1a5 0408 	sub.w	r4, r5, #8
 8009a64:	444c      	add	r4, r9
 8009a66:	1b2d      	subs	r5, r5, r4
 8009a68:	1963      	adds	r3, r4, r5
 8009a6a:	42bb      	cmp	r3, r7
 8009a6c:	db04      	blt.n	8009a78 <__s2b+0x78>
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	340a      	adds	r4, #10
 8009a74:	2509      	movs	r5, #9
 8009a76:	e7f6      	b.n	8009a66 <__s2b+0x66>
 8009a78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a7c:	4601      	mov	r1, r0
 8009a7e:	3b30      	subs	r3, #48	@ 0x30
 8009a80:	220a      	movs	r2, #10
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ff76 	bl	8009974 <__multadd>
 8009a88:	e7ee      	b.n	8009a68 <__s2b+0x68>
 8009a8a:	bf00      	nop
 8009a8c:	0800c1c5 	.word	0x0800c1c5
 8009a90:	0800c1d6 	.word	0x0800c1d6

08009a94 <__hi0bits>:
 8009a94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a98:	4603      	mov	r3, r0
 8009a9a:	bf36      	itet	cc
 8009a9c:	0403      	lslcc	r3, r0, #16
 8009a9e:	2000      	movcs	r0, #0
 8009aa0:	2010      	movcc	r0, #16
 8009aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009aa6:	bf3c      	itt	cc
 8009aa8:	021b      	lslcc	r3, r3, #8
 8009aaa:	3008      	addcc	r0, #8
 8009aac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ab0:	bf3c      	itt	cc
 8009ab2:	011b      	lslcc	r3, r3, #4
 8009ab4:	3004      	addcc	r0, #4
 8009ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aba:	bf3c      	itt	cc
 8009abc:	009b      	lslcc	r3, r3, #2
 8009abe:	3002      	addcc	r0, #2
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	db05      	blt.n	8009ad0 <__hi0bits+0x3c>
 8009ac4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ac8:	f100 0001 	add.w	r0, r0, #1
 8009acc:	bf08      	it	eq
 8009ace:	2020      	moveq	r0, #32
 8009ad0:	4770      	bx	lr

08009ad2 <__lo0bits>:
 8009ad2:	6803      	ldr	r3, [r0, #0]
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	f013 0007 	ands.w	r0, r3, #7
 8009ada:	d00b      	beq.n	8009af4 <__lo0bits+0x22>
 8009adc:	07d9      	lsls	r1, r3, #31
 8009ade:	d421      	bmi.n	8009b24 <__lo0bits+0x52>
 8009ae0:	0798      	lsls	r0, r3, #30
 8009ae2:	bf49      	itett	mi
 8009ae4:	085b      	lsrmi	r3, r3, #1
 8009ae6:	089b      	lsrpl	r3, r3, #2
 8009ae8:	2001      	movmi	r0, #1
 8009aea:	6013      	strmi	r3, [r2, #0]
 8009aec:	bf5c      	itt	pl
 8009aee:	6013      	strpl	r3, [r2, #0]
 8009af0:	2002      	movpl	r0, #2
 8009af2:	4770      	bx	lr
 8009af4:	b299      	uxth	r1, r3
 8009af6:	b909      	cbnz	r1, 8009afc <__lo0bits+0x2a>
 8009af8:	0c1b      	lsrs	r3, r3, #16
 8009afa:	2010      	movs	r0, #16
 8009afc:	b2d9      	uxtb	r1, r3
 8009afe:	b909      	cbnz	r1, 8009b04 <__lo0bits+0x32>
 8009b00:	3008      	adds	r0, #8
 8009b02:	0a1b      	lsrs	r3, r3, #8
 8009b04:	0719      	lsls	r1, r3, #28
 8009b06:	bf04      	itt	eq
 8009b08:	091b      	lsreq	r3, r3, #4
 8009b0a:	3004      	addeq	r0, #4
 8009b0c:	0799      	lsls	r1, r3, #30
 8009b0e:	bf04      	itt	eq
 8009b10:	089b      	lsreq	r3, r3, #2
 8009b12:	3002      	addeq	r0, #2
 8009b14:	07d9      	lsls	r1, r3, #31
 8009b16:	d403      	bmi.n	8009b20 <__lo0bits+0x4e>
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	f100 0001 	add.w	r0, r0, #1
 8009b1e:	d003      	beq.n	8009b28 <__lo0bits+0x56>
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	4770      	bx	lr
 8009b24:	2000      	movs	r0, #0
 8009b26:	4770      	bx	lr
 8009b28:	2020      	movs	r0, #32
 8009b2a:	4770      	bx	lr

08009b2c <__i2b>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	2101      	movs	r1, #1
 8009b32:	f7ff febd 	bl	80098b0 <_Balloc>
 8009b36:	4602      	mov	r2, r0
 8009b38:	b928      	cbnz	r0, 8009b46 <__i2b+0x1a>
 8009b3a:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <__i2b+0x24>)
 8009b3c:	4805      	ldr	r0, [pc, #20]	@ (8009b54 <__i2b+0x28>)
 8009b3e:	f240 1145 	movw	r1, #325	@ 0x145
 8009b42:	f001 fc41 	bl	800b3c8 <__assert_func>
 8009b46:	2301      	movs	r3, #1
 8009b48:	6144      	str	r4, [r0, #20]
 8009b4a:	6103      	str	r3, [r0, #16]
 8009b4c:	bd10      	pop	{r4, pc}
 8009b4e:	bf00      	nop
 8009b50:	0800c1c5 	.word	0x0800c1c5
 8009b54:	0800c1d6 	.word	0x0800c1d6

08009b58 <__multiply>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	4614      	mov	r4, r2
 8009b5e:	690a      	ldr	r2, [r1, #16]
 8009b60:	6923      	ldr	r3, [r4, #16]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	bfa8      	it	ge
 8009b66:	4623      	movge	r3, r4
 8009b68:	460f      	mov	r7, r1
 8009b6a:	bfa4      	itt	ge
 8009b6c:	460c      	movge	r4, r1
 8009b6e:	461f      	movge	r7, r3
 8009b70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	6861      	ldr	r1, [r4, #4]
 8009b7c:	eb0a 0609 	add.w	r6, sl, r9
 8009b80:	42b3      	cmp	r3, r6
 8009b82:	b085      	sub	sp, #20
 8009b84:	bfb8      	it	lt
 8009b86:	3101      	addlt	r1, #1
 8009b88:	f7ff fe92 	bl	80098b0 <_Balloc>
 8009b8c:	b930      	cbnz	r0, 8009b9c <__multiply+0x44>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	4b44      	ldr	r3, [pc, #272]	@ (8009ca4 <__multiply+0x14c>)
 8009b92:	4845      	ldr	r0, [pc, #276]	@ (8009ca8 <__multiply+0x150>)
 8009b94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b98:	f001 fc16 	bl	800b3c8 <__assert_func>
 8009b9c:	f100 0514 	add.w	r5, r0, #20
 8009ba0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ba4:	462b      	mov	r3, r5
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4543      	cmp	r3, r8
 8009baa:	d321      	bcc.n	8009bf0 <__multiply+0x98>
 8009bac:	f107 0114 	add.w	r1, r7, #20
 8009bb0:	f104 0214 	add.w	r2, r4, #20
 8009bb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009bb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009bbc:	9302      	str	r3, [sp, #8]
 8009bbe:	1b13      	subs	r3, r2, r4
 8009bc0:	3b15      	subs	r3, #21
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	f104 0715 	add.w	r7, r4, #21
 8009bcc:	42ba      	cmp	r2, r7
 8009bce:	bf38      	it	cc
 8009bd0:	2304      	movcc	r3, #4
 8009bd2:	9301      	str	r3, [sp, #4]
 8009bd4:	9b02      	ldr	r3, [sp, #8]
 8009bd6:	9103      	str	r1, [sp, #12]
 8009bd8:	428b      	cmp	r3, r1
 8009bda:	d80c      	bhi.n	8009bf6 <__multiply+0x9e>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	dd03      	ble.n	8009be8 <__multiply+0x90>
 8009be0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d05b      	beq.n	8009ca0 <__multiply+0x148>
 8009be8:	6106      	str	r6, [r0, #16]
 8009bea:	b005      	add	sp, #20
 8009bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf0:	f843 2b04 	str.w	r2, [r3], #4
 8009bf4:	e7d8      	b.n	8009ba8 <__multiply+0x50>
 8009bf6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009bfa:	f1ba 0f00 	cmp.w	sl, #0
 8009bfe:	d024      	beq.n	8009c4a <__multiply+0xf2>
 8009c00:	f104 0e14 	add.w	lr, r4, #20
 8009c04:	46a9      	mov	r9, r5
 8009c06:	f04f 0c00 	mov.w	ip, #0
 8009c0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c0e:	f8d9 3000 	ldr.w	r3, [r9]
 8009c12:	fa1f fb87 	uxth.w	fp, r7
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	fb0a 330b 	mla	r3, sl, fp, r3
 8009c1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009c20:	f8d9 7000 	ldr.w	r7, [r9]
 8009c24:	4463      	add	r3, ip
 8009c26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009c2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c38:	4572      	cmp	r2, lr
 8009c3a:	f849 3b04 	str.w	r3, [r9], #4
 8009c3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009c42:	d8e2      	bhi.n	8009c0a <__multiply+0xb2>
 8009c44:	9b01      	ldr	r3, [sp, #4]
 8009c46:	f845 c003 	str.w	ip, [r5, r3]
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009c50:	3104      	adds	r1, #4
 8009c52:	f1b9 0f00 	cmp.w	r9, #0
 8009c56:	d021      	beq.n	8009c9c <__multiply+0x144>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	f104 0c14 	add.w	ip, r4, #20
 8009c5e:	46ae      	mov	lr, r5
 8009c60:	f04f 0a00 	mov.w	sl, #0
 8009c64:	f8bc b000 	ldrh.w	fp, [ip]
 8009c68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c6c:	fb09 770b 	mla	r7, r9, fp, r7
 8009c70:	4457      	add	r7, sl
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c78:	f84e 3b04 	str.w	r3, [lr], #4
 8009c7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c84:	f8be 3000 	ldrh.w	r3, [lr]
 8009c88:	fb09 330a 	mla	r3, r9, sl, r3
 8009c8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c90:	4562      	cmp	r2, ip
 8009c92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c96:	d8e5      	bhi.n	8009c64 <__multiply+0x10c>
 8009c98:	9f01      	ldr	r7, [sp, #4]
 8009c9a:	51eb      	str	r3, [r5, r7]
 8009c9c:	3504      	adds	r5, #4
 8009c9e:	e799      	b.n	8009bd4 <__multiply+0x7c>
 8009ca0:	3e01      	subs	r6, #1
 8009ca2:	e79b      	b.n	8009bdc <__multiply+0x84>
 8009ca4:	0800c1c5 	.word	0x0800c1c5
 8009ca8:	0800c1d6 	.word	0x0800c1d6

08009cac <__pow5mult>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4615      	mov	r5, r2
 8009cb2:	f012 0203 	ands.w	r2, r2, #3
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	460e      	mov	r6, r1
 8009cba:	d007      	beq.n	8009ccc <__pow5mult+0x20>
 8009cbc:	4c25      	ldr	r4, [pc, #148]	@ (8009d54 <__pow5mult+0xa8>)
 8009cbe:	3a01      	subs	r2, #1
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cc6:	f7ff fe55 	bl	8009974 <__multadd>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	10ad      	asrs	r5, r5, #2
 8009cce:	d03d      	beq.n	8009d4c <__pow5mult+0xa0>
 8009cd0:	69fc      	ldr	r4, [r7, #28]
 8009cd2:	b97c      	cbnz	r4, 8009cf4 <__pow5mult+0x48>
 8009cd4:	2010      	movs	r0, #16
 8009cd6:	f7ff fd35 	bl	8009744 <malloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	61f8      	str	r0, [r7, #28]
 8009cde:	b928      	cbnz	r0, 8009cec <__pow5mult+0x40>
 8009ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d58 <__pow5mult+0xac>)
 8009ce2:	481e      	ldr	r0, [pc, #120]	@ (8009d5c <__pow5mult+0xb0>)
 8009ce4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ce8:	f001 fb6e 	bl	800b3c8 <__assert_func>
 8009cec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cf0:	6004      	str	r4, [r0, #0]
 8009cf2:	60c4      	str	r4, [r0, #12]
 8009cf4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009cf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cfc:	b94c      	cbnz	r4, 8009d12 <__pow5mult+0x66>
 8009cfe:	f240 2171 	movw	r1, #625	@ 0x271
 8009d02:	4638      	mov	r0, r7
 8009d04:	f7ff ff12 	bl	8009b2c <__i2b>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d0e:	4604      	mov	r4, r0
 8009d10:	6003      	str	r3, [r0, #0]
 8009d12:	f04f 0900 	mov.w	r9, #0
 8009d16:	07eb      	lsls	r3, r5, #31
 8009d18:	d50a      	bpl.n	8009d30 <__pow5mult+0x84>
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	4638      	mov	r0, r7
 8009d20:	f7ff ff1a 	bl	8009b58 <__multiply>
 8009d24:	4631      	mov	r1, r6
 8009d26:	4680      	mov	r8, r0
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f7ff fe01 	bl	8009930 <_Bfree>
 8009d2e:	4646      	mov	r6, r8
 8009d30:	106d      	asrs	r5, r5, #1
 8009d32:	d00b      	beq.n	8009d4c <__pow5mult+0xa0>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	b938      	cbnz	r0, 8009d48 <__pow5mult+0x9c>
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4621      	mov	r1, r4
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff ff0b 	bl	8009b58 <__multiply>
 8009d42:	6020      	str	r0, [r4, #0]
 8009d44:	f8c0 9000 	str.w	r9, [r0]
 8009d48:	4604      	mov	r4, r0
 8009d4a:	e7e4      	b.n	8009d16 <__pow5mult+0x6a>
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d52:	bf00      	nop
 8009d54:	0800c230 	.word	0x0800c230
 8009d58:	0800c156 	.word	0x0800c156
 8009d5c:	0800c1d6 	.word	0x0800c1d6

08009d60 <__lshift>:
 8009d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	6849      	ldr	r1, [r1, #4]
 8009d68:	6923      	ldr	r3, [r4, #16]
 8009d6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d6e:	68a3      	ldr	r3, [r4, #8]
 8009d70:	4607      	mov	r7, r0
 8009d72:	4691      	mov	r9, r2
 8009d74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d78:	f108 0601 	add.w	r6, r8, #1
 8009d7c:	42b3      	cmp	r3, r6
 8009d7e:	db0b      	blt.n	8009d98 <__lshift+0x38>
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7ff fd95 	bl	80098b0 <_Balloc>
 8009d86:	4605      	mov	r5, r0
 8009d88:	b948      	cbnz	r0, 8009d9e <__lshift+0x3e>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	4b28      	ldr	r3, [pc, #160]	@ (8009e30 <__lshift+0xd0>)
 8009d8e:	4829      	ldr	r0, [pc, #164]	@ (8009e34 <__lshift+0xd4>)
 8009d90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d94:	f001 fb18 	bl	800b3c8 <__assert_func>
 8009d98:	3101      	adds	r1, #1
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	e7ee      	b.n	8009d7c <__lshift+0x1c>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f100 0114 	add.w	r1, r0, #20
 8009da4:	f100 0210 	add.w	r2, r0, #16
 8009da8:	4618      	mov	r0, r3
 8009daa:	4553      	cmp	r3, sl
 8009dac:	db33      	blt.n	8009e16 <__lshift+0xb6>
 8009dae:	6920      	ldr	r0, [r4, #16]
 8009db0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009db4:	f104 0314 	add.w	r3, r4, #20
 8009db8:	f019 091f 	ands.w	r9, r9, #31
 8009dbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009dc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009dc4:	d02b      	beq.n	8009e1e <__lshift+0xbe>
 8009dc6:	f1c9 0e20 	rsb	lr, r9, #32
 8009dca:	468a      	mov	sl, r1
 8009dcc:	2200      	movs	r2, #0
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	fa00 f009 	lsl.w	r0, r0, r9
 8009dd4:	4310      	orrs	r0, r2
 8009dd6:	f84a 0b04 	str.w	r0, [sl], #4
 8009dda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dde:	459c      	cmp	ip, r3
 8009de0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009de4:	d8f3      	bhi.n	8009dce <__lshift+0x6e>
 8009de6:	ebac 0304 	sub.w	r3, ip, r4
 8009dea:	3b15      	subs	r3, #21
 8009dec:	f023 0303 	bic.w	r3, r3, #3
 8009df0:	3304      	adds	r3, #4
 8009df2:	f104 0015 	add.w	r0, r4, #21
 8009df6:	4584      	cmp	ip, r0
 8009df8:	bf38      	it	cc
 8009dfa:	2304      	movcc	r3, #4
 8009dfc:	50ca      	str	r2, [r1, r3]
 8009dfe:	b10a      	cbz	r2, 8009e04 <__lshift+0xa4>
 8009e00:	f108 0602 	add.w	r6, r8, #2
 8009e04:	3e01      	subs	r6, #1
 8009e06:	4638      	mov	r0, r7
 8009e08:	612e      	str	r6, [r5, #16]
 8009e0a:	4621      	mov	r1, r4
 8009e0c:	f7ff fd90 	bl	8009930 <_Bfree>
 8009e10:	4628      	mov	r0, r5
 8009e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	e7c5      	b.n	8009daa <__lshift+0x4a>
 8009e1e:	3904      	subs	r1, #4
 8009e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e28:	459c      	cmp	ip, r3
 8009e2a:	d8f9      	bhi.n	8009e20 <__lshift+0xc0>
 8009e2c:	e7ea      	b.n	8009e04 <__lshift+0xa4>
 8009e2e:	bf00      	nop
 8009e30:	0800c1c5 	.word	0x0800c1c5
 8009e34:	0800c1d6 	.word	0x0800c1d6

08009e38 <__mcmp>:
 8009e38:	690a      	ldr	r2, [r1, #16]
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	6900      	ldr	r0, [r0, #16]
 8009e3e:	1a80      	subs	r0, r0, r2
 8009e40:	b530      	push	{r4, r5, lr}
 8009e42:	d10e      	bne.n	8009e62 <__mcmp+0x2a>
 8009e44:	3314      	adds	r3, #20
 8009e46:	3114      	adds	r1, #20
 8009e48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009e4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e58:	4295      	cmp	r5, r2
 8009e5a:	d003      	beq.n	8009e64 <__mcmp+0x2c>
 8009e5c:	d205      	bcs.n	8009e6a <__mcmp+0x32>
 8009e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e62:	bd30      	pop	{r4, r5, pc}
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	d3f3      	bcc.n	8009e50 <__mcmp+0x18>
 8009e68:	e7fb      	b.n	8009e62 <__mcmp+0x2a>
 8009e6a:	2001      	movs	r0, #1
 8009e6c:	e7f9      	b.n	8009e62 <__mcmp+0x2a>
	...

08009e70 <__mdiff>:
 8009e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	4689      	mov	r9, r1
 8009e76:	4606      	mov	r6, r0
 8009e78:	4611      	mov	r1, r2
 8009e7a:	4648      	mov	r0, r9
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	f7ff ffdb 	bl	8009e38 <__mcmp>
 8009e82:	1e05      	subs	r5, r0, #0
 8009e84:	d112      	bne.n	8009eac <__mdiff+0x3c>
 8009e86:	4629      	mov	r1, r5
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f7ff fd11 	bl	80098b0 <_Balloc>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	b928      	cbnz	r0, 8009e9e <__mdiff+0x2e>
 8009e92:	4b3f      	ldr	r3, [pc, #252]	@ (8009f90 <__mdiff+0x120>)
 8009e94:	f240 2137 	movw	r1, #567	@ 0x237
 8009e98:	483e      	ldr	r0, [pc, #248]	@ (8009f94 <__mdiff+0x124>)
 8009e9a:	f001 fa95 	bl	800b3c8 <__assert_func>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	b003      	add	sp, #12
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	bfbc      	itt	lt
 8009eae:	464b      	movlt	r3, r9
 8009eb0:	46a1      	movlt	r9, r4
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009eb8:	bfba      	itte	lt
 8009eba:	461c      	movlt	r4, r3
 8009ebc:	2501      	movlt	r5, #1
 8009ebe:	2500      	movge	r5, #0
 8009ec0:	f7ff fcf6 	bl	80098b0 <_Balloc>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	b918      	cbnz	r0, 8009ed0 <__mdiff+0x60>
 8009ec8:	4b31      	ldr	r3, [pc, #196]	@ (8009f90 <__mdiff+0x120>)
 8009eca:	f240 2145 	movw	r1, #581	@ 0x245
 8009ece:	e7e3      	b.n	8009e98 <__mdiff+0x28>
 8009ed0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009ed4:	6926      	ldr	r6, [r4, #16]
 8009ed6:	60c5      	str	r5, [r0, #12]
 8009ed8:	f109 0310 	add.w	r3, r9, #16
 8009edc:	f109 0514 	add.w	r5, r9, #20
 8009ee0:	f104 0e14 	add.w	lr, r4, #20
 8009ee4:	f100 0b14 	add.w	fp, r0, #20
 8009ee8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009eec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	46d9      	mov	r9, fp
 8009ef4:	f04f 0c00 	mov.w	ip, #0
 8009ef8:	9b01      	ldr	r3, [sp, #4]
 8009efa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009efe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	fa1f f38a 	uxth.w	r3, sl
 8009f08:	4619      	mov	r1, r3
 8009f0a:	b283      	uxth	r3, r0
 8009f0c:	1acb      	subs	r3, r1, r3
 8009f0e:	0c00      	lsrs	r0, r0, #16
 8009f10:	4463      	add	r3, ip
 8009f12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009f16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009f20:	4576      	cmp	r6, lr
 8009f22:	f849 3b04 	str.w	r3, [r9], #4
 8009f26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f2a:	d8e5      	bhi.n	8009ef8 <__mdiff+0x88>
 8009f2c:	1b33      	subs	r3, r6, r4
 8009f2e:	3b15      	subs	r3, #21
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	3415      	adds	r4, #21
 8009f36:	3304      	adds	r3, #4
 8009f38:	42a6      	cmp	r6, r4
 8009f3a:	bf38      	it	cc
 8009f3c:	2304      	movcc	r3, #4
 8009f3e:	441d      	add	r5, r3
 8009f40:	445b      	add	r3, fp
 8009f42:	461e      	mov	r6, r3
 8009f44:	462c      	mov	r4, r5
 8009f46:	4544      	cmp	r4, r8
 8009f48:	d30e      	bcc.n	8009f68 <__mdiff+0xf8>
 8009f4a:	f108 0103 	add.w	r1, r8, #3
 8009f4e:	1b49      	subs	r1, r1, r5
 8009f50:	f021 0103 	bic.w	r1, r1, #3
 8009f54:	3d03      	subs	r5, #3
 8009f56:	45a8      	cmp	r8, r5
 8009f58:	bf38      	it	cc
 8009f5a:	2100      	movcc	r1, #0
 8009f5c:	440b      	add	r3, r1
 8009f5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f62:	b191      	cbz	r1, 8009f8a <__mdiff+0x11a>
 8009f64:	6117      	str	r7, [r2, #16]
 8009f66:	e79d      	b.n	8009ea4 <__mdiff+0x34>
 8009f68:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f6c:	46e6      	mov	lr, ip
 8009f6e:	0c08      	lsrs	r0, r1, #16
 8009f70:	fa1c fc81 	uxtah	ip, ip, r1
 8009f74:	4471      	add	r1, lr
 8009f76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f7a:	b289      	uxth	r1, r1
 8009f7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f80:	f846 1b04 	str.w	r1, [r6], #4
 8009f84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f88:	e7dd      	b.n	8009f46 <__mdiff+0xd6>
 8009f8a:	3f01      	subs	r7, #1
 8009f8c:	e7e7      	b.n	8009f5e <__mdiff+0xee>
 8009f8e:	bf00      	nop
 8009f90:	0800c1c5 	.word	0x0800c1c5
 8009f94:	0800c1d6 	.word	0x0800c1d6

08009f98 <__ulp>:
 8009f98:	b082      	sub	sp, #8
 8009f9a:	ed8d 0b00 	vstr	d0, [sp]
 8009f9e:	9a01      	ldr	r2, [sp, #4]
 8009fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8009fe0 <__ulp+0x48>)
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dc08      	bgt.n	8009fbe <__ulp+0x26>
 8009fac:	425b      	negs	r3, r3
 8009fae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009fb2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009fb6:	da04      	bge.n	8009fc2 <__ulp+0x2a>
 8009fb8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009fbc:	4113      	asrs	r3, r2
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	e008      	b.n	8009fd4 <__ulp+0x3c>
 8009fc2:	f1a2 0314 	sub.w	r3, r2, #20
 8009fc6:	2b1e      	cmp	r3, #30
 8009fc8:	bfda      	itte	le
 8009fca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009fce:	40da      	lsrle	r2, r3
 8009fd0:	2201      	movgt	r2, #1
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	ec41 0b10 	vmov	d0, r0, r1
 8009fdc:	b002      	add	sp, #8
 8009fde:	4770      	bx	lr
 8009fe0:	7ff00000 	.word	0x7ff00000

08009fe4 <__b2d>:
 8009fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fe8:	6906      	ldr	r6, [r0, #16]
 8009fea:	f100 0814 	add.w	r8, r0, #20
 8009fee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009ff2:	1f37      	subs	r7, r6, #4
 8009ff4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	f7ff fd4b 	bl	8009a94 <__hi0bits>
 8009ffe:	f1c0 0320 	rsb	r3, r0, #32
 800a002:	280a      	cmp	r0, #10
 800a004:	600b      	str	r3, [r1, #0]
 800a006:	491b      	ldr	r1, [pc, #108]	@ (800a074 <__b2d+0x90>)
 800a008:	dc15      	bgt.n	800a036 <__b2d+0x52>
 800a00a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a00e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a012:	45b8      	cmp	r8, r7
 800a014:	ea43 0501 	orr.w	r5, r3, r1
 800a018:	bf34      	ite	cc
 800a01a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a01e:	2300      	movcs	r3, #0
 800a020:	3015      	adds	r0, #21
 800a022:	fa02 f000 	lsl.w	r0, r2, r0
 800a026:	fa23 f30c 	lsr.w	r3, r3, ip
 800a02a:	4303      	orrs	r3, r0
 800a02c:	461c      	mov	r4, r3
 800a02e:	ec45 4b10 	vmov	d0, r4, r5
 800a032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a036:	45b8      	cmp	r8, r7
 800a038:	bf3a      	itte	cc
 800a03a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a03e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a042:	2300      	movcs	r3, #0
 800a044:	380b      	subs	r0, #11
 800a046:	d012      	beq.n	800a06e <__b2d+0x8a>
 800a048:	f1c0 0120 	rsb	r1, r0, #32
 800a04c:	fa23 f401 	lsr.w	r4, r3, r1
 800a050:	4082      	lsls	r2, r0
 800a052:	4322      	orrs	r2, r4
 800a054:	4547      	cmp	r7, r8
 800a056:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a05a:	bf8c      	ite	hi
 800a05c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a060:	2200      	movls	r2, #0
 800a062:	4083      	lsls	r3, r0
 800a064:	40ca      	lsrs	r2, r1
 800a066:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a06a:	4313      	orrs	r3, r2
 800a06c:	e7de      	b.n	800a02c <__b2d+0x48>
 800a06e:	ea42 0501 	orr.w	r5, r2, r1
 800a072:	e7db      	b.n	800a02c <__b2d+0x48>
 800a074:	3ff00000 	.word	0x3ff00000

0800a078 <__d2b>:
 800a078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a07c:	460f      	mov	r7, r1
 800a07e:	2101      	movs	r1, #1
 800a080:	ec59 8b10 	vmov	r8, r9, d0
 800a084:	4616      	mov	r6, r2
 800a086:	f7ff fc13 	bl	80098b0 <_Balloc>
 800a08a:	4604      	mov	r4, r0
 800a08c:	b930      	cbnz	r0, 800a09c <__d2b+0x24>
 800a08e:	4602      	mov	r2, r0
 800a090:	4b23      	ldr	r3, [pc, #140]	@ (800a120 <__d2b+0xa8>)
 800a092:	4824      	ldr	r0, [pc, #144]	@ (800a124 <__d2b+0xac>)
 800a094:	f240 310f 	movw	r1, #783	@ 0x30f
 800a098:	f001 f996 	bl	800b3c8 <__assert_func>
 800a09c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a0a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a0a4:	b10d      	cbz	r5, 800a0aa <__d2b+0x32>
 800a0a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a0aa:	9301      	str	r3, [sp, #4]
 800a0ac:	f1b8 0300 	subs.w	r3, r8, #0
 800a0b0:	d023      	beq.n	800a0fa <__d2b+0x82>
 800a0b2:	4668      	mov	r0, sp
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	f7ff fd0c 	bl	8009ad2 <__lo0bits>
 800a0ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a0be:	b1d0      	cbz	r0, 800a0f6 <__d2b+0x7e>
 800a0c0:	f1c0 0320 	rsb	r3, r0, #32
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	430b      	orrs	r3, r1
 800a0ca:	40c2      	lsrs	r2, r0
 800a0cc:	6163      	str	r3, [r4, #20]
 800a0ce:	9201      	str	r2, [sp, #4]
 800a0d0:	9b01      	ldr	r3, [sp, #4]
 800a0d2:	61a3      	str	r3, [r4, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	bf0c      	ite	eq
 800a0d8:	2201      	moveq	r2, #1
 800a0da:	2202      	movne	r2, #2
 800a0dc:	6122      	str	r2, [r4, #16]
 800a0de:	b1a5      	cbz	r5, 800a10a <__d2b+0x92>
 800a0e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a0e4:	4405      	add	r5, r0
 800a0e6:	603d      	str	r5, [r7, #0]
 800a0e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	b003      	add	sp, #12
 800a0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0f6:	6161      	str	r1, [r4, #20]
 800a0f8:	e7ea      	b.n	800a0d0 <__d2b+0x58>
 800a0fa:	a801      	add	r0, sp, #4
 800a0fc:	f7ff fce9 	bl	8009ad2 <__lo0bits>
 800a100:	9b01      	ldr	r3, [sp, #4]
 800a102:	6163      	str	r3, [r4, #20]
 800a104:	3020      	adds	r0, #32
 800a106:	2201      	movs	r2, #1
 800a108:	e7e8      	b.n	800a0dc <__d2b+0x64>
 800a10a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a10e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a112:	6038      	str	r0, [r7, #0]
 800a114:	6918      	ldr	r0, [r3, #16]
 800a116:	f7ff fcbd 	bl	8009a94 <__hi0bits>
 800a11a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a11e:	e7e5      	b.n	800a0ec <__d2b+0x74>
 800a120:	0800c1c5 	.word	0x0800c1c5
 800a124:	0800c1d6 	.word	0x0800c1d6

0800a128 <__ratio>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	b085      	sub	sp, #20
 800a12e:	e9cd 1000 	strd	r1, r0, [sp]
 800a132:	a902      	add	r1, sp, #8
 800a134:	f7ff ff56 	bl	8009fe4 <__b2d>
 800a138:	9800      	ldr	r0, [sp, #0]
 800a13a:	a903      	add	r1, sp, #12
 800a13c:	ec55 4b10 	vmov	r4, r5, d0
 800a140:	f7ff ff50 	bl	8009fe4 <__b2d>
 800a144:	9b01      	ldr	r3, [sp, #4]
 800a146:	6919      	ldr	r1, [r3, #16]
 800a148:	9b00      	ldr	r3, [sp, #0]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	1ac9      	subs	r1, r1, r3
 800a14e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a152:	1a9b      	subs	r3, r3, r2
 800a154:	ec5b ab10 	vmov	sl, fp, d0
 800a158:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	bfce      	itee	gt
 800a160:	462a      	movgt	r2, r5
 800a162:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a166:	465a      	movle	r2, fp
 800a168:	462f      	mov	r7, r5
 800a16a:	46d9      	mov	r9, fp
 800a16c:	bfcc      	ite	gt
 800a16e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a172:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a176:	464b      	mov	r3, r9
 800a178:	4652      	mov	r2, sl
 800a17a:	4620      	mov	r0, r4
 800a17c:	4639      	mov	r1, r7
 800a17e:	f7f6 fb65 	bl	800084c <__aeabi_ddiv>
 800a182:	ec41 0b10 	vmov	d0, r0, r1
 800a186:	b005      	add	sp, #20
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a18c <__copybits>:
 800a18c:	3901      	subs	r1, #1
 800a18e:	b570      	push	{r4, r5, r6, lr}
 800a190:	1149      	asrs	r1, r1, #5
 800a192:	6914      	ldr	r4, [r2, #16]
 800a194:	3101      	adds	r1, #1
 800a196:	f102 0314 	add.w	r3, r2, #20
 800a19a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a19e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a1a2:	1f05      	subs	r5, r0, #4
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	d30c      	bcc.n	800a1c2 <__copybits+0x36>
 800a1a8:	1aa3      	subs	r3, r4, r2
 800a1aa:	3b11      	subs	r3, #17
 800a1ac:	f023 0303 	bic.w	r3, r3, #3
 800a1b0:	3211      	adds	r2, #17
 800a1b2:	42a2      	cmp	r2, r4
 800a1b4:	bf88      	it	hi
 800a1b6:	2300      	movhi	r3, #0
 800a1b8:	4418      	add	r0, r3
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	4288      	cmp	r0, r1
 800a1be:	d305      	bcc.n	800a1cc <__copybits+0x40>
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ca:	e7eb      	b.n	800a1a4 <__copybits+0x18>
 800a1cc:	f840 3b04 	str.w	r3, [r0], #4
 800a1d0:	e7f4      	b.n	800a1bc <__copybits+0x30>

0800a1d2 <__any_on>:
 800a1d2:	f100 0214 	add.w	r2, r0, #20
 800a1d6:	6900      	ldr	r0, [r0, #16]
 800a1d8:	114b      	asrs	r3, r1, #5
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	db11      	blt.n	800a204 <__any_on+0x32>
 800a1e0:	dd0a      	ble.n	800a1f8 <__any_on+0x26>
 800a1e2:	f011 011f 	ands.w	r1, r1, #31
 800a1e6:	d007      	beq.n	800a1f8 <__any_on+0x26>
 800a1e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1ec:	fa24 f001 	lsr.w	r0, r4, r1
 800a1f0:	fa00 f101 	lsl.w	r1, r0, r1
 800a1f4:	428c      	cmp	r4, r1
 800a1f6:	d10b      	bne.n	800a210 <__any_on+0x3e>
 800a1f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d803      	bhi.n	800a208 <__any_on+0x36>
 800a200:	2000      	movs	r0, #0
 800a202:	bd10      	pop	{r4, pc}
 800a204:	4603      	mov	r3, r0
 800a206:	e7f7      	b.n	800a1f8 <__any_on+0x26>
 800a208:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a20c:	2900      	cmp	r1, #0
 800a20e:	d0f5      	beq.n	800a1fc <__any_on+0x2a>
 800a210:	2001      	movs	r0, #1
 800a212:	e7f6      	b.n	800a202 <__any_on+0x30>

0800a214 <sulp>:
 800a214:	b570      	push	{r4, r5, r6, lr}
 800a216:	4604      	mov	r4, r0
 800a218:	460d      	mov	r5, r1
 800a21a:	ec45 4b10 	vmov	d0, r4, r5
 800a21e:	4616      	mov	r6, r2
 800a220:	f7ff feba 	bl	8009f98 <__ulp>
 800a224:	ec51 0b10 	vmov	r0, r1, d0
 800a228:	b17e      	cbz	r6, 800a24a <sulp+0x36>
 800a22a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a22e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd09      	ble.n	800a24a <sulp+0x36>
 800a236:	051b      	lsls	r3, r3, #20
 800a238:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a23c:	2400      	movs	r4, #0
 800a23e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a242:	4622      	mov	r2, r4
 800a244:	462b      	mov	r3, r5
 800a246:	f7f6 f9d7 	bl	80005f8 <__aeabi_dmul>
 800a24a:	ec41 0b10 	vmov	d0, r0, r1
 800a24e:	bd70      	pop	{r4, r5, r6, pc}

0800a250 <_strtod_l>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	b09f      	sub	sp, #124	@ 0x7c
 800a256:	460c      	mov	r4, r1
 800a258:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a25a:	2200      	movs	r2, #0
 800a25c:	921a      	str	r2, [sp, #104]	@ 0x68
 800a25e:	9005      	str	r0, [sp, #20]
 800a260:	f04f 0a00 	mov.w	sl, #0
 800a264:	f04f 0b00 	mov.w	fp, #0
 800a268:	460a      	mov	r2, r1
 800a26a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a26c:	7811      	ldrb	r1, [r2, #0]
 800a26e:	292b      	cmp	r1, #43	@ 0x2b
 800a270:	d04a      	beq.n	800a308 <_strtod_l+0xb8>
 800a272:	d838      	bhi.n	800a2e6 <_strtod_l+0x96>
 800a274:	290d      	cmp	r1, #13
 800a276:	d832      	bhi.n	800a2de <_strtod_l+0x8e>
 800a278:	2908      	cmp	r1, #8
 800a27a:	d832      	bhi.n	800a2e2 <_strtod_l+0x92>
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d03b      	beq.n	800a2f8 <_strtod_l+0xa8>
 800a280:	2200      	movs	r2, #0
 800a282:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a284:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a286:	782a      	ldrb	r2, [r5, #0]
 800a288:	2a30      	cmp	r2, #48	@ 0x30
 800a28a:	f040 80b3 	bne.w	800a3f4 <_strtod_l+0x1a4>
 800a28e:	786a      	ldrb	r2, [r5, #1]
 800a290:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a294:	2a58      	cmp	r2, #88	@ 0x58
 800a296:	d16e      	bne.n	800a376 <_strtod_l+0x126>
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a29c:	9301      	str	r3, [sp, #4]
 800a29e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	4a8e      	ldr	r2, [pc, #568]	@ (800a4dc <_strtod_l+0x28c>)
 800a2a4:	9805      	ldr	r0, [sp, #20]
 800a2a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a2a8:	a919      	add	r1, sp, #100	@ 0x64
 800a2aa:	f001 f927 	bl	800b4fc <__gethex>
 800a2ae:	f010 060f 	ands.w	r6, r0, #15
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	d005      	beq.n	800a2c2 <_strtod_l+0x72>
 800a2b6:	2e06      	cmp	r6, #6
 800a2b8:	d128      	bne.n	800a30c <_strtod_l+0xbc>
 800a2ba:	3501      	adds	r5, #1
 800a2bc:	2300      	movs	r3, #0
 800a2be:	9519      	str	r5, [sp, #100]	@ 0x64
 800a2c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	f040 858e 	bne.w	800ade6 <_strtod_l+0xb96>
 800a2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2cc:	b1cb      	cbz	r3, 800a302 <_strtod_l+0xb2>
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a2d4:	ec43 2b10 	vmov	d0, r2, r3
 800a2d8:	b01f      	add	sp, #124	@ 0x7c
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	2920      	cmp	r1, #32
 800a2e0:	d1ce      	bne.n	800a280 <_strtod_l+0x30>
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	e7c1      	b.n	800a26a <_strtod_l+0x1a>
 800a2e6:	292d      	cmp	r1, #45	@ 0x2d
 800a2e8:	d1ca      	bne.n	800a280 <_strtod_l+0x30>
 800a2ea:	2101      	movs	r1, #1
 800a2ec:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a2ee:	1c51      	adds	r1, r2, #1
 800a2f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a2f2:	7852      	ldrb	r2, [r2, #1]
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	d1c5      	bne.n	800a284 <_strtod_l+0x34>
 800a2f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a2fa:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	f040 8570 	bne.w	800ade2 <_strtod_l+0xb92>
 800a302:	4652      	mov	r2, sl
 800a304:	465b      	mov	r3, fp
 800a306:	e7e5      	b.n	800a2d4 <_strtod_l+0x84>
 800a308:	2100      	movs	r1, #0
 800a30a:	e7ef      	b.n	800a2ec <_strtod_l+0x9c>
 800a30c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a30e:	b13a      	cbz	r2, 800a320 <_strtod_l+0xd0>
 800a310:	2135      	movs	r1, #53	@ 0x35
 800a312:	a81c      	add	r0, sp, #112	@ 0x70
 800a314:	f7ff ff3a 	bl	800a18c <__copybits>
 800a318:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a31a:	9805      	ldr	r0, [sp, #20]
 800a31c:	f7ff fb08 	bl	8009930 <_Bfree>
 800a320:	3e01      	subs	r6, #1
 800a322:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a324:	2e04      	cmp	r6, #4
 800a326:	d806      	bhi.n	800a336 <_strtod_l+0xe6>
 800a328:	e8df f006 	tbb	[pc, r6]
 800a32c:	201d0314 	.word	0x201d0314
 800a330:	14          	.byte	0x14
 800a331:	00          	.byte	0x00
 800a332:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a336:	05e1      	lsls	r1, r4, #23
 800a338:	bf48      	it	mi
 800a33a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a33e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a342:	0d1b      	lsrs	r3, r3, #20
 800a344:	051b      	lsls	r3, r3, #20
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1bb      	bne.n	800a2c2 <_strtod_l+0x72>
 800a34a:	f7fe fb31 	bl	80089b0 <__errno>
 800a34e:	2322      	movs	r3, #34	@ 0x22
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	e7b6      	b.n	800a2c2 <_strtod_l+0x72>
 800a354:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a358:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a35c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a360:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a364:	e7e7      	b.n	800a336 <_strtod_l+0xe6>
 800a366:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a4e4 <_strtod_l+0x294>
 800a36a:	e7e4      	b.n	800a336 <_strtod_l+0xe6>
 800a36c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a370:	f04f 3aff 	mov.w	sl, #4294967295
 800a374:	e7df      	b.n	800a336 <_strtod_l+0xe6>
 800a376:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a378:	1c5a      	adds	r2, r3, #1
 800a37a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a37c:	785b      	ldrb	r3, [r3, #1]
 800a37e:	2b30      	cmp	r3, #48	@ 0x30
 800a380:	d0f9      	beq.n	800a376 <_strtod_l+0x126>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d09d      	beq.n	800a2c2 <_strtod_l+0x72>
 800a386:	2301      	movs	r3, #1
 800a388:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a38c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a38e:	2300      	movs	r3, #0
 800a390:	9308      	str	r3, [sp, #32]
 800a392:	930a      	str	r3, [sp, #40]	@ 0x28
 800a394:	461f      	mov	r7, r3
 800a396:	220a      	movs	r2, #10
 800a398:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a39a:	7805      	ldrb	r5, [r0, #0]
 800a39c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a3a0:	b2d9      	uxtb	r1, r3
 800a3a2:	2909      	cmp	r1, #9
 800a3a4:	d928      	bls.n	800a3f8 <_strtod_l+0x1a8>
 800a3a6:	494e      	ldr	r1, [pc, #312]	@ (800a4e0 <_strtod_l+0x290>)
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	f000 ffd5 	bl	800b358 <strncmp>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	d032      	beq.n	800a418 <_strtod_l+0x1c8>
 800a3b2:	2000      	movs	r0, #0
 800a3b4:	462a      	mov	r2, r5
 800a3b6:	4681      	mov	r9, r0
 800a3b8:	463d      	mov	r5, r7
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2a65      	cmp	r2, #101	@ 0x65
 800a3be:	d001      	beq.n	800a3c4 <_strtod_l+0x174>
 800a3c0:	2a45      	cmp	r2, #69	@ 0x45
 800a3c2:	d114      	bne.n	800a3ee <_strtod_l+0x19e>
 800a3c4:	b91d      	cbnz	r5, 800a3ce <_strtod_l+0x17e>
 800a3c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3c8:	4302      	orrs	r2, r0
 800a3ca:	d095      	beq.n	800a2f8 <_strtod_l+0xa8>
 800a3cc:	2500      	movs	r5, #0
 800a3ce:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a3d0:	1c62      	adds	r2, r4, #1
 800a3d2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3d4:	7862      	ldrb	r2, [r4, #1]
 800a3d6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a3d8:	d077      	beq.n	800a4ca <_strtod_l+0x27a>
 800a3da:	2a2d      	cmp	r2, #45	@ 0x2d
 800a3dc:	d07b      	beq.n	800a4d6 <_strtod_l+0x286>
 800a3de:	f04f 0c00 	mov.w	ip, #0
 800a3e2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a3e6:	2909      	cmp	r1, #9
 800a3e8:	f240 8082 	bls.w	800a4f0 <_strtod_l+0x2a0>
 800a3ec:	9419      	str	r4, [sp, #100]	@ 0x64
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	e0a2      	b.n	800a53a <_strtod_l+0x2ea>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e7c7      	b.n	800a388 <_strtod_l+0x138>
 800a3f8:	2f08      	cmp	r7, #8
 800a3fa:	bfd5      	itete	le
 800a3fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a3fe:	9908      	ldrgt	r1, [sp, #32]
 800a400:	fb02 3301 	mlale	r3, r2, r1, r3
 800a404:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a408:	f100 0001 	add.w	r0, r0, #1
 800a40c:	bfd4      	ite	le
 800a40e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a410:	9308      	strgt	r3, [sp, #32]
 800a412:	3701      	adds	r7, #1
 800a414:	9019      	str	r0, [sp, #100]	@ 0x64
 800a416:	e7bf      	b.n	800a398 <_strtod_l+0x148>
 800a418:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a41a:	1c5a      	adds	r2, r3, #1
 800a41c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a41e:	785a      	ldrb	r2, [r3, #1]
 800a420:	b37f      	cbz	r7, 800a482 <_strtod_l+0x232>
 800a422:	4681      	mov	r9, r0
 800a424:	463d      	mov	r5, r7
 800a426:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a42a:	2b09      	cmp	r3, #9
 800a42c:	d912      	bls.n	800a454 <_strtod_l+0x204>
 800a42e:	2301      	movs	r3, #1
 800a430:	e7c4      	b.n	800a3bc <_strtod_l+0x16c>
 800a432:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a434:	1c5a      	adds	r2, r3, #1
 800a436:	9219      	str	r2, [sp, #100]	@ 0x64
 800a438:	785a      	ldrb	r2, [r3, #1]
 800a43a:	3001      	adds	r0, #1
 800a43c:	2a30      	cmp	r2, #48	@ 0x30
 800a43e:	d0f8      	beq.n	800a432 <_strtod_l+0x1e2>
 800a440:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a444:	2b08      	cmp	r3, #8
 800a446:	f200 84d3 	bhi.w	800adf0 <_strtod_l+0xba0>
 800a44a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a44c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a44e:	4681      	mov	r9, r0
 800a450:	2000      	movs	r0, #0
 800a452:	4605      	mov	r5, r0
 800a454:	3a30      	subs	r2, #48	@ 0x30
 800a456:	f100 0301 	add.w	r3, r0, #1
 800a45a:	d02a      	beq.n	800a4b2 <_strtod_l+0x262>
 800a45c:	4499      	add	r9, r3
 800a45e:	eb00 0c05 	add.w	ip, r0, r5
 800a462:	462b      	mov	r3, r5
 800a464:	210a      	movs	r1, #10
 800a466:	4563      	cmp	r3, ip
 800a468:	d10d      	bne.n	800a486 <_strtod_l+0x236>
 800a46a:	1c69      	adds	r1, r5, #1
 800a46c:	4401      	add	r1, r0
 800a46e:	4428      	add	r0, r5
 800a470:	2808      	cmp	r0, #8
 800a472:	dc16      	bgt.n	800a4a2 <_strtod_l+0x252>
 800a474:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a476:	230a      	movs	r3, #10
 800a478:	fb03 2300 	mla	r3, r3, r0, r2
 800a47c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a47e:	2300      	movs	r3, #0
 800a480:	e018      	b.n	800a4b4 <_strtod_l+0x264>
 800a482:	4638      	mov	r0, r7
 800a484:	e7da      	b.n	800a43c <_strtod_l+0x1ec>
 800a486:	2b08      	cmp	r3, #8
 800a488:	f103 0301 	add.w	r3, r3, #1
 800a48c:	dc03      	bgt.n	800a496 <_strtod_l+0x246>
 800a48e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a490:	434e      	muls	r6, r1
 800a492:	960a      	str	r6, [sp, #40]	@ 0x28
 800a494:	e7e7      	b.n	800a466 <_strtod_l+0x216>
 800a496:	2b10      	cmp	r3, #16
 800a498:	bfde      	ittt	le
 800a49a:	9e08      	ldrle	r6, [sp, #32]
 800a49c:	434e      	mulle	r6, r1
 800a49e:	9608      	strle	r6, [sp, #32]
 800a4a0:	e7e1      	b.n	800a466 <_strtod_l+0x216>
 800a4a2:	280f      	cmp	r0, #15
 800a4a4:	dceb      	bgt.n	800a47e <_strtod_l+0x22e>
 800a4a6:	9808      	ldr	r0, [sp, #32]
 800a4a8:	230a      	movs	r3, #10
 800a4aa:	fb03 2300 	mla	r3, r3, r0, r2
 800a4ae:	9308      	str	r3, [sp, #32]
 800a4b0:	e7e5      	b.n	800a47e <_strtod_l+0x22e>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4b6:	1c50      	adds	r0, r2, #1
 800a4b8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a4ba:	7852      	ldrb	r2, [r2, #1]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	460d      	mov	r5, r1
 800a4c0:	e7b1      	b.n	800a426 <_strtod_l+0x1d6>
 800a4c2:	f04f 0900 	mov.w	r9, #0
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e77d      	b.n	800a3c6 <_strtod_l+0x176>
 800a4ca:	f04f 0c00 	mov.w	ip, #0
 800a4ce:	1ca2      	adds	r2, r4, #2
 800a4d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4d2:	78a2      	ldrb	r2, [r4, #2]
 800a4d4:	e785      	b.n	800a3e2 <_strtod_l+0x192>
 800a4d6:	f04f 0c01 	mov.w	ip, #1
 800a4da:	e7f8      	b.n	800a4ce <_strtod_l+0x27e>
 800a4dc:	0800c348 	.word	0x0800c348
 800a4e0:	0800c330 	.word	0x0800c330
 800a4e4:	7ff00000 	.word	0x7ff00000
 800a4e8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a4ea:	1c51      	adds	r1, r2, #1
 800a4ec:	9119      	str	r1, [sp, #100]	@ 0x64
 800a4ee:	7852      	ldrb	r2, [r2, #1]
 800a4f0:	2a30      	cmp	r2, #48	@ 0x30
 800a4f2:	d0f9      	beq.n	800a4e8 <_strtod_l+0x298>
 800a4f4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a4f8:	2908      	cmp	r1, #8
 800a4fa:	f63f af78 	bhi.w	800a3ee <_strtod_l+0x19e>
 800a4fe:	3a30      	subs	r2, #48	@ 0x30
 800a500:	920e      	str	r2, [sp, #56]	@ 0x38
 800a502:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a504:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a506:	f04f 080a 	mov.w	r8, #10
 800a50a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a50c:	1c56      	adds	r6, r2, #1
 800a50e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a510:	7852      	ldrb	r2, [r2, #1]
 800a512:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a516:	f1be 0f09 	cmp.w	lr, #9
 800a51a:	d939      	bls.n	800a590 <_strtod_l+0x340>
 800a51c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a51e:	1a76      	subs	r6, r6, r1
 800a520:	2e08      	cmp	r6, #8
 800a522:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a526:	dc03      	bgt.n	800a530 <_strtod_l+0x2e0>
 800a528:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a52a:	4588      	cmp	r8, r1
 800a52c:	bfa8      	it	ge
 800a52e:	4688      	movge	r8, r1
 800a530:	f1bc 0f00 	cmp.w	ip, #0
 800a534:	d001      	beq.n	800a53a <_strtod_l+0x2ea>
 800a536:	f1c8 0800 	rsb	r8, r8, #0
 800a53a:	2d00      	cmp	r5, #0
 800a53c:	d14e      	bne.n	800a5dc <_strtod_l+0x38c>
 800a53e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a540:	4308      	orrs	r0, r1
 800a542:	f47f aebe 	bne.w	800a2c2 <_strtod_l+0x72>
 800a546:	2b00      	cmp	r3, #0
 800a548:	f47f aed6 	bne.w	800a2f8 <_strtod_l+0xa8>
 800a54c:	2a69      	cmp	r2, #105	@ 0x69
 800a54e:	d028      	beq.n	800a5a2 <_strtod_l+0x352>
 800a550:	dc25      	bgt.n	800a59e <_strtod_l+0x34e>
 800a552:	2a49      	cmp	r2, #73	@ 0x49
 800a554:	d025      	beq.n	800a5a2 <_strtod_l+0x352>
 800a556:	2a4e      	cmp	r2, #78	@ 0x4e
 800a558:	f47f aece 	bne.w	800a2f8 <_strtod_l+0xa8>
 800a55c:	499b      	ldr	r1, [pc, #620]	@ (800a7cc <_strtod_l+0x57c>)
 800a55e:	a819      	add	r0, sp, #100	@ 0x64
 800a560:	f001 f9ee 	bl	800b940 <__match>
 800a564:	2800      	cmp	r0, #0
 800a566:	f43f aec7 	beq.w	800a2f8 <_strtod_l+0xa8>
 800a56a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	2b28      	cmp	r3, #40	@ 0x28
 800a570:	d12e      	bne.n	800a5d0 <_strtod_l+0x380>
 800a572:	4997      	ldr	r1, [pc, #604]	@ (800a7d0 <_strtod_l+0x580>)
 800a574:	aa1c      	add	r2, sp, #112	@ 0x70
 800a576:	a819      	add	r0, sp, #100	@ 0x64
 800a578:	f001 f9f6 	bl	800b968 <__hexnan>
 800a57c:	2805      	cmp	r0, #5
 800a57e:	d127      	bne.n	800a5d0 <_strtod_l+0x380>
 800a580:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a582:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a586:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a58a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a58e:	e698      	b.n	800a2c2 <_strtod_l+0x72>
 800a590:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a592:	fb08 2101 	mla	r1, r8, r1, r2
 800a596:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a59a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a59c:	e7b5      	b.n	800a50a <_strtod_l+0x2ba>
 800a59e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a5a0:	e7da      	b.n	800a558 <_strtod_l+0x308>
 800a5a2:	498c      	ldr	r1, [pc, #560]	@ (800a7d4 <_strtod_l+0x584>)
 800a5a4:	a819      	add	r0, sp, #100	@ 0x64
 800a5a6:	f001 f9cb 	bl	800b940 <__match>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f43f aea4 	beq.w	800a2f8 <_strtod_l+0xa8>
 800a5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5b2:	4989      	ldr	r1, [pc, #548]	@ (800a7d8 <_strtod_l+0x588>)
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	a819      	add	r0, sp, #100	@ 0x64
 800a5b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5ba:	f001 f9c1 	bl	800b940 <__match>
 800a5be:	b910      	cbnz	r0, 800a5c6 <_strtod_l+0x376>
 800a5c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a5c6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a7e8 <_strtod_l+0x598>
 800a5ca:	f04f 0a00 	mov.w	sl, #0
 800a5ce:	e678      	b.n	800a2c2 <_strtod_l+0x72>
 800a5d0:	4882      	ldr	r0, [pc, #520]	@ (800a7dc <_strtod_l+0x58c>)
 800a5d2:	f000 fef1 	bl	800b3b8 <nan>
 800a5d6:	ec5b ab10 	vmov	sl, fp, d0
 800a5da:	e672      	b.n	800a2c2 <_strtod_l+0x72>
 800a5dc:	eba8 0309 	sub.w	r3, r8, r9
 800a5e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a5e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5e4:	2f00      	cmp	r7, #0
 800a5e6:	bf08      	it	eq
 800a5e8:	462f      	moveq	r7, r5
 800a5ea:	2d10      	cmp	r5, #16
 800a5ec:	462c      	mov	r4, r5
 800a5ee:	bfa8      	it	ge
 800a5f0:	2410      	movge	r4, #16
 800a5f2:	f7f5 ff87 	bl	8000504 <__aeabi_ui2d>
 800a5f6:	2d09      	cmp	r5, #9
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	468b      	mov	fp, r1
 800a5fc:	dc13      	bgt.n	800a626 <_strtod_l+0x3d6>
 800a5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a600:	2b00      	cmp	r3, #0
 800a602:	f43f ae5e 	beq.w	800a2c2 <_strtod_l+0x72>
 800a606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a608:	dd78      	ble.n	800a6fc <_strtod_l+0x4ac>
 800a60a:	2b16      	cmp	r3, #22
 800a60c:	dc5f      	bgt.n	800a6ce <_strtod_l+0x47e>
 800a60e:	4974      	ldr	r1, [pc, #464]	@ (800a7e0 <_strtod_l+0x590>)
 800a610:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a614:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a618:	4652      	mov	r2, sl
 800a61a:	465b      	mov	r3, fp
 800a61c:	f7f5 ffec 	bl	80005f8 <__aeabi_dmul>
 800a620:	4682      	mov	sl, r0
 800a622:	468b      	mov	fp, r1
 800a624:	e64d      	b.n	800a2c2 <_strtod_l+0x72>
 800a626:	4b6e      	ldr	r3, [pc, #440]	@ (800a7e0 <_strtod_l+0x590>)
 800a628:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a62c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a630:	f7f5 ffe2 	bl	80005f8 <__aeabi_dmul>
 800a634:	4682      	mov	sl, r0
 800a636:	9808      	ldr	r0, [sp, #32]
 800a638:	468b      	mov	fp, r1
 800a63a:	f7f5 ff63 	bl	8000504 <__aeabi_ui2d>
 800a63e:	4602      	mov	r2, r0
 800a640:	460b      	mov	r3, r1
 800a642:	4650      	mov	r0, sl
 800a644:	4659      	mov	r1, fp
 800a646:	f7f5 fe21 	bl	800028c <__adddf3>
 800a64a:	2d0f      	cmp	r5, #15
 800a64c:	4682      	mov	sl, r0
 800a64e:	468b      	mov	fp, r1
 800a650:	ddd5      	ble.n	800a5fe <_strtod_l+0x3ae>
 800a652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a654:	1b2c      	subs	r4, r5, r4
 800a656:	441c      	add	r4, r3
 800a658:	2c00      	cmp	r4, #0
 800a65a:	f340 8096 	ble.w	800a78a <_strtod_l+0x53a>
 800a65e:	f014 030f 	ands.w	r3, r4, #15
 800a662:	d00a      	beq.n	800a67a <_strtod_l+0x42a>
 800a664:	495e      	ldr	r1, [pc, #376]	@ (800a7e0 <_strtod_l+0x590>)
 800a666:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a66a:	4652      	mov	r2, sl
 800a66c:	465b      	mov	r3, fp
 800a66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a672:	f7f5 ffc1 	bl	80005f8 <__aeabi_dmul>
 800a676:	4682      	mov	sl, r0
 800a678:	468b      	mov	fp, r1
 800a67a:	f034 040f 	bics.w	r4, r4, #15
 800a67e:	d073      	beq.n	800a768 <_strtod_l+0x518>
 800a680:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a684:	dd48      	ble.n	800a718 <_strtod_l+0x4c8>
 800a686:	2400      	movs	r4, #0
 800a688:	46a0      	mov	r8, r4
 800a68a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a68c:	46a1      	mov	r9, r4
 800a68e:	9a05      	ldr	r2, [sp, #20]
 800a690:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a7e8 <_strtod_l+0x598>
 800a694:	2322      	movs	r3, #34	@ 0x22
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	f04f 0a00 	mov.w	sl, #0
 800a69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f43f ae0f 	beq.w	800a2c2 <_strtod_l+0x72>
 800a6a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6a6:	9805      	ldr	r0, [sp, #20]
 800a6a8:	f7ff f942 	bl	8009930 <_Bfree>
 800a6ac:	9805      	ldr	r0, [sp, #20]
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7ff f93e 	bl	8009930 <_Bfree>
 800a6b4:	9805      	ldr	r0, [sp, #20]
 800a6b6:	4641      	mov	r1, r8
 800a6b8:	f7ff f93a 	bl	8009930 <_Bfree>
 800a6bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a6be:	9805      	ldr	r0, [sp, #20]
 800a6c0:	f7ff f936 	bl	8009930 <_Bfree>
 800a6c4:	9805      	ldr	r0, [sp, #20]
 800a6c6:	4621      	mov	r1, r4
 800a6c8:	f7ff f932 	bl	8009930 <_Bfree>
 800a6cc:	e5f9      	b.n	800a2c2 <_strtod_l+0x72>
 800a6ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	dbbc      	blt.n	800a652 <_strtod_l+0x402>
 800a6d8:	4c41      	ldr	r4, [pc, #260]	@ (800a7e0 <_strtod_l+0x590>)
 800a6da:	f1c5 050f 	rsb	r5, r5, #15
 800a6de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a6e2:	4652      	mov	r2, sl
 800a6e4:	465b      	mov	r3, fp
 800a6e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6ea:	f7f5 ff85 	bl	80005f8 <__aeabi_dmul>
 800a6ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f0:	1b5d      	subs	r5, r3, r5
 800a6f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a6f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a6fa:	e78f      	b.n	800a61c <_strtod_l+0x3cc>
 800a6fc:	3316      	adds	r3, #22
 800a6fe:	dba8      	blt.n	800a652 <_strtod_l+0x402>
 800a700:	4b37      	ldr	r3, [pc, #220]	@ (800a7e0 <_strtod_l+0x590>)
 800a702:	eba9 0808 	sub.w	r8, r9, r8
 800a706:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a70a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a70e:	4650      	mov	r0, sl
 800a710:	4659      	mov	r1, fp
 800a712:	f7f6 f89b 	bl	800084c <__aeabi_ddiv>
 800a716:	e783      	b.n	800a620 <_strtod_l+0x3d0>
 800a718:	4b32      	ldr	r3, [pc, #200]	@ (800a7e4 <_strtod_l+0x594>)
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	2300      	movs	r3, #0
 800a71e:	1124      	asrs	r4, r4, #4
 800a720:	4650      	mov	r0, sl
 800a722:	4659      	mov	r1, fp
 800a724:	461e      	mov	r6, r3
 800a726:	2c01      	cmp	r4, #1
 800a728:	dc21      	bgt.n	800a76e <_strtod_l+0x51e>
 800a72a:	b10b      	cbz	r3, 800a730 <_strtod_l+0x4e0>
 800a72c:	4682      	mov	sl, r0
 800a72e:	468b      	mov	fp, r1
 800a730:	492c      	ldr	r1, [pc, #176]	@ (800a7e4 <_strtod_l+0x594>)
 800a732:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a736:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a73a:	4652      	mov	r2, sl
 800a73c:	465b      	mov	r3, fp
 800a73e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a742:	f7f5 ff59 	bl	80005f8 <__aeabi_dmul>
 800a746:	4b28      	ldr	r3, [pc, #160]	@ (800a7e8 <_strtod_l+0x598>)
 800a748:	460a      	mov	r2, r1
 800a74a:	400b      	ands	r3, r1
 800a74c:	4927      	ldr	r1, [pc, #156]	@ (800a7ec <_strtod_l+0x59c>)
 800a74e:	428b      	cmp	r3, r1
 800a750:	4682      	mov	sl, r0
 800a752:	d898      	bhi.n	800a686 <_strtod_l+0x436>
 800a754:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a758:	428b      	cmp	r3, r1
 800a75a:	bf86      	itte	hi
 800a75c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a7f0 <_strtod_l+0x5a0>
 800a760:	f04f 3aff 	movhi.w	sl, #4294967295
 800a764:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a768:	2300      	movs	r3, #0
 800a76a:	9308      	str	r3, [sp, #32]
 800a76c:	e07a      	b.n	800a864 <_strtod_l+0x614>
 800a76e:	07e2      	lsls	r2, r4, #31
 800a770:	d505      	bpl.n	800a77e <_strtod_l+0x52e>
 800a772:	9b08      	ldr	r3, [sp, #32]
 800a774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a778:	f7f5 ff3e 	bl	80005f8 <__aeabi_dmul>
 800a77c:	2301      	movs	r3, #1
 800a77e:	9a08      	ldr	r2, [sp, #32]
 800a780:	3208      	adds	r2, #8
 800a782:	3601      	adds	r6, #1
 800a784:	1064      	asrs	r4, r4, #1
 800a786:	9208      	str	r2, [sp, #32]
 800a788:	e7cd      	b.n	800a726 <_strtod_l+0x4d6>
 800a78a:	d0ed      	beq.n	800a768 <_strtod_l+0x518>
 800a78c:	4264      	negs	r4, r4
 800a78e:	f014 020f 	ands.w	r2, r4, #15
 800a792:	d00a      	beq.n	800a7aa <_strtod_l+0x55a>
 800a794:	4b12      	ldr	r3, [pc, #72]	@ (800a7e0 <_strtod_l+0x590>)
 800a796:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a79a:	4650      	mov	r0, sl
 800a79c:	4659      	mov	r1, fp
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f6 f853 	bl	800084c <__aeabi_ddiv>
 800a7a6:	4682      	mov	sl, r0
 800a7a8:	468b      	mov	fp, r1
 800a7aa:	1124      	asrs	r4, r4, #4
 800a7ac:	d0dc      	beq.n	800a768 <_strtod_l+0x518>
 800a7ae:	2c1f      	cmp	r4, #31
 800a7b0:	dd20      	ble.n	800a7f4 <_strtod_l+0x5a4>
 800a7b2:	2400      	movs	r4, #0
 800a7b4:	46a0      	mov	r8, r4
 800a7b6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a7b8:	46a1      	mov	r9, r4
 800a7ba:	9a05      	ldr	r2, [sp, #20]
 800a7bc:	2322      	movs	r3, #34	@ 0x22
 800a7be:	f04f 0a00 	mov.w	sl, #0
 800a7c2:	f04f 0b00 	mov.w	fp, #0
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	e768      	b.n	800a69c <_strtod_l+0x44c>
 800a7ca:	bf00      	nop
 800a7cc:	0800c11d 	.word	0x0800c11d
 800a7d0:	0800c334 	.word	0x0800c334
 800a7d4:	0800c115 	.word	0x0800c115
 800a7d8:	0800c14c 	.word	0x0800c14c
 800a7dc:	0800c4dd 	.word	0x0800c4dd
 800a7e0:	0800c268 	.word	0x0800c268
 800a7e4:	0800c240 	.word	0x0800c240
 800a7e8:	7ff00000 	.word	0x7ff00000
 800a7ec:	7ca00000 	.word	0x7ca00000
 800a7f0:	7fefffff 	.word	0x7fefffff
 800a7f4:	f014 0310 	ands.w	r3, r4, #16
 800a7f8:	bf18      	it	ne
 800a7fa:	236a      	movne	r3, #106	@ 0x6a
 800a7fc:	4ea9      	ldr	r6, [pc, #676]	@ (800aaa4 <_strtod_l+0x854>)
 800a7fe:	9308      	str	r3, [sp, #32]
 800a800:	4650      	mov	r0, sl
 800a802:	4659      	mov	r1, fp
 800a804:	2300      	movs	r3, #0
 800a806:	07e2      	lsls	r2, r4, #31
 800a808:	d504      	bpl.n	800a814 <_strtod_l+0x5c4>
 800a80a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a80e:	f7f5 fef3 	bl	80005f8 <__aeabi_dmul>
 800a812:	2301      	movs	r3, #1
 800a814:	1064      	asrs	r4, r4, #1
 800a816:	f106 0608 	add.w	r6, r6, #8
 800a81a:	d1f4      	bne.n	800a806 <_strtod_l+0x5b6>
 800a81c:	b10b      	cbz	r3, 800a822 <_strtod_l+0x5d2>
 800a81e:	4682      	mov	sl, r0
 800a820:	468b      	mov	fp, r1
 800a822:	9b08      	ldr	r3, [sp, #32]
 800a824:	b1b3      	cbz	r3, 800a854 <_strtod_l+0x604>
 800a826:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a82a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a82e:	2b00      	cmp	r3, #0
 800a830:	4659      	mov	r1, fp
 800a832:	dd0f      	ble.n	800a854 <_strtod_l+0x604>
 800a834:	2b1f      	cmp	r3, #31
 800a836:	dd55      	ble.n	800a8e4 <_strtod_l+0x694>
 800a838:	2b34      	cmp	r3, #52	@ 0x34
 800a83a:	bfde      	ittt	le
 800a83c:	f04f 33ff 	movle.w	r3, #4294967295
 800a840:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a844:	4093      	lslle	r3, r2
 800a846:	f04f 0a00 	mov.w	sl, #0
 800a84a:	bfcc      	ite	gt
 800a84c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a850:	ea03 0b01 	andle.w	fp, r3, r1
 800a854:	2200      	movs	r2, #0
 800a856:	2300      	movs	r3, #0
 800a858:	4650      	mov	r0, sl
 800a85a:	4659      	mov	r1, fp
 800a85c:	f7f6 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 800a860:	2800      	cmp	r0, #0
 800a862:	d1a6      	bne.n	800a7b2 <_strtod_l+0x562>
 800a864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a86a:	9805      	ldr	r0, [sp, #20]
 800a86c:	462b      	mov	r3, r5
 800a86e:	463a      	mov	r2, r7
 800a870:	f7ff f8c6 	bl	8009a00 <__s2b>
 800a874:	900a      	str	r0, [sp, #40]	@ 0x28
 800a876:	2800      	cmp	r0, #0
 800a878:	f43f af05 	beq.w	800a686 <_strtod_l+0x436>
 800a87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a87e:	2a00      	cmp	r2, #0
 800a880:	eba9 0308 	sub.w	r3, r9, r8
 800a884:	bfa8      	it	ge
 800a886:	2300      	movge	r3, #0
 800a888:	9312      	str	r3, [sp, #72]	@ 0x48
 800a88a:	2400      	movs	r4, #0
 800a88c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a890:	9316      	str	r3, [sp, #88]	@ 0x58
 800a892:	46a0      	mov	r8, r4
 800a894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a896:	9805      	ldr	r0, [sp, #20]
 800a898:	6859      	ldr	r1, [r3, #4]
 800a89a:	f7ff f809 	bl	80098b0 <_Balloc>
 800a89e:	4681      	mov	r9, r0
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f43f aef4 	beq.w	800a68e <_strtod_l+0x43e>
 800a8a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	3202      	adds	r2, #2
 800a8ac:	f103 010c 	add.w	r1, r3, #12
 800a8b0:	0092      	lsls	r2, r2, #2
 800a8b2:	300c      	adds	r0, #12
 800a8b4:	f000 fd72 	bl	800b39c <memcpy>
 800a8b8:	ec4b ab10 	vmov	d0, sl, fp
 800a8bc:	9805      	ldr	r0, [sp, #20]
 800a8be:	aa1c      	add	r2, sp, #112	@ 0x70
 800a8c0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a8c2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a8c6:	f7ff fbd7 	bl	800a078 <__d2b>
 800a8ca:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f43f aede 	beq.w	800a68e <_strtod_l+0x43e>
 800a8d2:	9805      	ldr	r0, [sp, #20]
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	f7ff f929 	bl	8009b2c <__i2b>
 800a8da:	4680      	mov	r8, r0
 800a8dc:	b948      	cbnz	r0, 800a8f2 <_strtod_l+0x6a2>
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	e6d4      	b.n	800a68e <_strtod_l+0x43e>
 800a8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a8f0:	e7b0      	b.n	800a854 <_strtod_l+0x604>
 800a8f2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a8f4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a8f6:	2d00      	cmp	r5, #0
 800a8f8:	bfab      	itete	ge
 800a8fa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a8fc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a8fe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a900:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a902:	bfac      	ite	ge
 800a904:	18ef      	addge	r7, r5, r3
 800a906:	1b5e      	sublt	r6, r3, r5
 800a908:	9b08      	ldr	r3, [sp, #32]
 800a90a:	1aed      	subs	r5, r5, r3
 800a90c:	4415      	add	r5, r2
 800a90e:	4b66      	ldr	r3, [pc, #408]	@ (800aaa8 <_strtod_l+0x858>)
 800a910:	3d01      	subs	r5, #1
 800a912:	429d      	cmp	r5, r3
 800a914:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a918:	da50      	bge.n	800a9bc <_strtod_l+0x76c>
 800a91a:	1b5b      	subs	r3, r3, r5
 800a91c:	2b1f      	cmp	r3, #31
 800a91e:	eba2 0203 	sub.w	r2, r2, r3
 800a922:	f04f 0101 	mov.w	r1, #1
 800a926:	dc3d      	bgt.n	800a9a4 <_strtod_l+0x754>
 800a928:	fa01 f303 	lsl.w	r3, r1, r3
 800a92c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a92e:	2300      	movs	r3, #0
 800a930:	9310      	str	r3, [sp, #64]	@ 0x40
 800a932:	18bd      	adds	r5, r7, r2
 800a934:	9b08      	ldr	r3, [sp, #32]
 800a936:	42af      	cmp	r7, r5
 800a938:	4416      	add	r6, r2
 800a93a:	441e      	add	r6, r3
 800a93c:	463b      	mov	r3, r7
 800a93e:	bfa8      	it	ge
 800a940:	462b      	movge	r3, r5
 800a942:	42b3      	cmp	r3, r6
 800a944:	bfa8      	it	ge
 800a946:	4633      	movge	r3, r6
 800a948:	2b00      	cmp	r3, #0
 800a94a:	bfc2      	ittt	gt
 800a94c:	1aed      	subgt	r5, r5, r3
 800a94e:	1af6      	subgt	r6, r6, r3
 800a950:	1aff      	subgt	r7, r7, r3
 800a952:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a954:	2b00      	cmp	r3, #0
 800a956:	dd16      	ble.n	800a986 <_strtod_l+0x736>
 800a958:	4641      	mov	r1, r8
 800a95a:	9805      	ldr	r0, [sp, #20]
 800a95c:	461a      	mov	r2, r3
 800a95e:	f7ff f9a5 	bl	8009cac <__pow5mult>
 800a962:	4680      	mov	r8, r0
 800a964:	2800      	cmp	r0, #0
 800a966:	d0ba      	beq.n	800a8de <_strtod_l+0x68e>
 800a968:	4601      	mov	r1, r0
 800a96a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a96c:	9805      	ldr	r0, [sp, #20]
 800a96e:	f7ff f8f3 	bl	8009b58 <__multiply>
 800a972:	900e      	str	r0, [sp, #56]	@ 0x38
 800a974:	2800      	cmp	r0, #0
 800a976:	f43f ae8a 	beq.w	800a68e <_strtod_l+0x43e>
 800a97a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a97c:	9805      	ldr	r0, [sp, #20]
 800a97e:	f7fe ffd7 	bl	8009930 <_Bfree>
 800a982:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a984:	931a      	str	r3, [sp, #104]	@ 0x68
 800a986:	2d00      	cmp	r5, #0
 800a988:	dc1d      	bgt.n	800a9c6 <_strtod_l+0x776>
 800a98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd23      	ble.n	800a9d8 <_strtod_l+0x788>
 800a990:	4649      	mov	r1, r9
 800a992:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a994:	9805      	ldr	r0, [sp, #20]
 800a996:	f7ff f989 	bl	8009cac <__pow5mult>
 800a99a:	4681      	mov	r9, r0
 800a99c:	b9e0      	cbnz	r0, 800a9d8 <_strtod_l+0x788>
 800a99e:	f04f 0900 	mov.w	r9, #0
 800a9a2:	e674      	b.n	800a68e <_strtod_l+0x43e>
 800a9a4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a9a8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a9ac:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a9b0:	35e2      	adds	r5, #226	@ 0xe2
 800a9b2:	fa01 f305 	lsl.w	r3, r1, r5
 800a9b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9b8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a9ba:	e7ba      	b.n	800a932 <_strtod_l+0x6e2>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a9c4:	e7b5      	b.n	800a932 <_strtod_l+0x6e2>
 800a9c6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9c8:	9805      	ldr	r0, [sp, #20]
 800a9ca:	462a      	mov	r2, r5
 800a9cc:	f7ff f9c8 	bl	8009d60 <__lshift>
 800a9d0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d1d9      	bne.n	800a98a <_strtod_l+0x73a>
 800a9d6:	e65a      	b.n	800a68e <_strtod_l+0x43e>
 800a9d8:	2e00      	cmp	r6, #0
 800a9da:	dd07      	ble.n	800a9ec <_strtod_l+0x79c>
 800a9dc:	4649      	mov	r1, r9
 800a9de:	9805      	ldr	r0, [sp, #20]
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	f7ff f9bd 	bl	8009d60 <__lshift>
 800a9e6:	4681      	mov	r9, r0
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d0d8      	beq.n	800a99e <_strtod_l+0x74e>
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	dd08      	ble.n	800aa02 <_strtod_l+0x7b2>
 800a9f0:	4641      	mov	r1, r8
 800a9f2:	9805      	ldr	r0, [sp, #20]
 800a9f4:	463a      	mov	r2, r7
 800a9f6:	f7ff f9b3 	bl	8009d60 <__lshift>
 800a9fa:	4680      	mov	r8, r0
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	f43f ae46 	beq.w	800a68e <_strtod_l+0x43e>
 800aa02:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa04:	9805      	ldr	r0, [sp, #20]
 800aa06:	464a      	mov	r2, r9
 800aa08:	f7ff fa32 	bl	8009e70 <__mdiff>
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	2800      	cmp	r0, #0
 800aa10:	f43f ae3d 	beq.w	800a68e <_strtod_l+0x43e>
 800aa14:	68c3      	ldr	r3, [r0, #12]
 800aa16:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60c3      	str	r3, [r0, #12]
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	f7ff fa0b 	bl	8009e38 <__mcmp>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	da46      	bge.n	800aab4 <_strtod_l+0x864>
 800aa26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa28:	ea53 030a 	orrs.w	r3, r3, sl
 800aa2c:	d16c      	bne.n	800ab08 <_strtod_l+0x8b8>
 800aa2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d168      	bne.n	800ab08 <_strtod_l+0x8b8>
 800aa36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa3a:	0d1b      	lsrs	r3, r3, #20
 800aa3c:	051b      	lsls	r3, r3, #20
 800aa3e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa42:	d961      	bls.n	800ab08 <_strtod_l+0x8b8>
 800aa44:	6963      	ldr	r3, [r4, #20]
 800aa46:	b913      	cbnz	r3, 800aa4e <_strtod_l+0x7fe>
 800aa48:	6923      	ldr	r3, [r4, #16]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	dd5c      	ble.n	800ab08 <_strtod_l+0x8b8>
 800aa4e:	4621      	mov	r1, r4
 800aa50:	2201      	movs	r2, #1
 800aa52:	9805      	ldr	r0, [sp, #20]
 800aa54:	f7ff f984 	bl	8009d60 <__lshift>
 800aa58:	4641      	mov	r1, r8
 800aa5a:	4604      	mov	r4, r0
 800aa5c:	f7ff f9ec 	bl	8009e38 <__mcmp>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	dd51      	ble.n	800ab08 <_strtod_l+0x8b8>
 800aa64:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa68:	9a08      	ldr	r2, [sp, #32]
 800aa6a:	0d1b      	lsrs	r3, r3, #20
 800aa6c:	051b      	lsls	r3, r3, #20
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	d06b      	beq.n	800ab4a <_strtod_l+0x8fa>
 800aa72:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aa76:	d868      	bhi.n	800ab4a <_strtod_l+0x8fa>
 800aa78:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800aa7c:	f67f ae9d 	bls.w	800a7ba <_strtod_l+0x56a>
 800aa80:	4b0a      	ldr	r3, [pc, #40]	@ (800aaac <_strtod_l+0x85c>)
 800aa82:	4650      	mov	r0, sl
 800aa84:	4659      	mov	r1, fp
 800aa86:	2200      	movs	r2, #0
 800aa88:	f7f5 fdb6 	bl	80005f8 <__aeabi_dmul>
 800aa8c:	4b08      	ldr	r3, [pc, #32]	@ (800aab0 <_strtod_l+0x860>)
 800aa8e:	400b      	ands	r3, r1
 800aa90:	4682      	mov	sl, r0
 800aa92:	468b      	mov	fp, r1
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f47f ae05 	bne.w	800a6a4 <_strtod_l+0x454>
 800aa9a:	9a05      	ldr	r2, [sp, #20]
 800aa9c:	2322      	movs	r3, #34	@ 0x22
 800aa9e:	6013      	str	r3, [r2, #0]
 800aaa0:	e600      	b.n	800a6a4 <_strtod_l+0x454>
 800aaa2:	bf00      	nop
 800aaa4:	0800c360 	.word	0x0800c360
 800aaa8:	fffffc02 	.word	0xfffffc02
 800aaac:	39500000 	.word	0x39500000
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aab8:	d165      	bne.n	800ab86 <_strtod_l+0x936>
 800aaba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aabc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aac0:	b35a      	cbz	r2, 800ab1a <_strtod_l+0x8ca>
 800aac2:	4a9f      	ldr	r2, [pc, #636]	@ (800ad40 <_strtod_l+0xaf0>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d12b      	bne.n	800ab20 <_strtod_l+0x8d0>
 800aac8:	9b08      	ldr	r3, [sp, #32]
 800aaca:	4651      	mov	r1, sl
 800aacc:	b303      	cbz	r3, 800ab10 <_strtod_l+0x8c0>
 800aace:	4b9d      	ldr	r3, [pc, #628]	@ (800ad44 <_strtod_l+0xaf4>)
 800aad0:	465a      	mov	r2, fp
 800aad2:	4013      	ands	r3, r2
 800aad4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800aad8:	f04f 32ff 	mov.w	r2, #4294967295
 800aadc:	d81b      	bhi.n	800ab16 <_strtod_l+0x8c6>
 800aade:	0d1b      	lsrs	r3, r3, #20
 800aae0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800aae4:	fa02 f303 	lsl.w	r3, r2, r3
 800aae8:	4299      	cmp	r1, r3
 800aaea:	d119      	bne.n	800ab20 <_strtod_l+0x8d0>
 800aaec:	4b96      	ldr	r3, [pc, #600]	@ (800ad48 <_strtod_l+0xaf8>)
 800aaee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d102      	bne.n	800aafa <_strtod_l+0x8aa>
 800aaf4:	3101      	adds	r1, #1
 800aaf6:	f43f adca 	beq.w	800a68e <_strtod_l+0x43e>
 800aafa:	4b92      	ldr	r3, [pc, #584]	@ (800ad44 <_strtod_l+0xaf4>)
 800aafc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aafe:	401a      	ands	r2, r3
 800ab00:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ab04:	f04f 0a00 	mov.w	sl, #0
 800ab08:	9b08      	ldr	r3, [sp, #32]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1b8      	bne.n	800aa80 <_strtod_l+0x830>
 800ab0e:	e5c9      	b.n	800a6a4 <_strtod_l+0x454>
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	e7e8      	b.n	800aae8 <_strtod_l+0x898>
 800ab16:	4613      	mov	r3, r2
 800ab18:	e7e6      	b.n	800aae8 <_strtod_l+0x898>
 800ab1a:	ea53 030a 	orrs.w	r3, r3, sl
 800ab1e:	d0a1      	beq.n	800aa64 <_strtod_l+0x814>
 800ab20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ab22:	b1db      	cbz	r3, 800ab5c <_strtod_l+0x90c>
 800ab24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab26:	4213      	tst	r3, r2
 800ab28:	d0ee      	beq.n	800ab08 <_strtod_l+0x8b8>
 800ab2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab2c:	9a08      	ldr	r2, [sp, #32]
 800ab2e:	4650      	mov	r0, sl
 800ab30:	4659      	mov	r1, fp
 800ab32:	b1bb      	cbz	r3, 800ab64 <_strtod_l+0x914>
 800ab34:	f7ff fb6e 	bl	800a214 <sulp>
 800ab38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab3c:	ec53 2b10 	vmov	r2, r3, d0
 800ab40:	f7f5 fba4 	bl	800028c <__adddf3>
 800ab44:	4682      	mov	sl, r0
 800ab46:	468b      	mov	fp, r1
 800ab48:	e7de      	b.n	800ab08 <_strtod_l+0x8b8>
 800ab4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ab4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ab52:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ab56:	f04f 3aff 	mov.w	sl, #4294967295
 800ab5a:	e7d5      	b.n	800ab08 <_strtod_l+0x8b8>
 800ab5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ab5e:	ea13 0f0a 	tst.w	r3, sl
 800ab62:	e7e1      	b.n	800ab28 <_strtod_l+0x8d8>
 800ab64:	f7ff fb56 	bl	800a214 <sulp>
 800ab68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab6c:	ec53 2b10 	vmov	r2, r3, d0
 800ab70:	f7f5 fb8a 	bl	8000288 <__aeabi_dsub>
 800ab74:	2200      	movs	r2, #0
 800ab76:	2300      	movs	r3, #0
 800ab78:	4682      	mov	sl, r0
 800ab7a:	468b      	mov	fp, r1
 800ab7c:	f7f5 ffa4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab80:	2800      	cmp	r0, #0
 800ab82:	d0c1      	beq.n	800ab08 <_strtod_l+0x8b8>
 800ab84:	e619      	b.n	800a7ba <_strtod_l+0x56a>
 800ab86:	4641      	mov	r1, r8
 800ab88:	4620      	mov	r0, r4
 800ab8a:	f7ff facd 	bl	800a128 <__ratio>
 800ab8e:	ec57 6b10 	vmov	r6, r7, d0
 800ab92:	2200      	movs	r2, #0
 800ab94:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4639      	mov	r1, r7
 800ab9c:	f7f5 ffa8 	bl	8000af0 <__aeabi_dcmple>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	d06f      	beq.n	800ac84 <_strtod_l+0xa34>
 800aba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d17a      	bne.n	800aca0 <_strtod_l+0xa50>
 800abaa:	f1ba 0f00 	cmp.w	sl, #0
 800abae:	d158      	bne.n	800ac62 <_strtod_l+0xa12>
 800abb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d15a      	bne.n	800ac70 <_strtod_l+0xa20>
 800abba:	4b64      	ldr	r3, [pc, #400]	@ (800ad4c <_strtod_l+0xafc>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	4630      	mov	r0, r6
 800abc0:	4639      	mov	r1, r7
 800abc2:	f7f5 ff8b 	bl	8000adc <__aeabi_dcmplt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	d159      	bne.n	800ac7e <_strtod_l+0xa2e>
 800abca:	4630      	mov	r0, r6
 800abcc:	4639      	mov	r1, r7
 800abce:	4b60      	ldr	r3, [pc, #384]	@ (800ad50 <_strtod_l+0xb00>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	f7f5 fd11 	bl	80005f8 <__aeabi_dmul>
 800abd6:	4606      	mov	r6, r0
 800abd8:	460f      	mov	r7, r1
 800abda:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800abde:	9606      	str	r6, [sp, #24]
 800abe0:	9307      	str	r3, [sp, #28]
 800abe2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800abe6:	4d57      	ldr	r5, [pc, #348]	@ (800ad44 <_strtod_l+0xaf4>)
 800abe8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abee:	401d      	ands	r5, r3
 800abf0:	4b58      	ldr	r3, [pc, #352]	@ (800ad54 <_strtod_l+0xb04>)
 800abf2:	429d      	cmp	r5, r3
 800abf4:	f040 80b2 	bne.w	800ad5c <_strtod_l+0xb0c>
 800abf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abfa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800abfe:	ec4b ab10 	vmov	d0, sl, fp
 800ac02:	f7ff f9c9 	bl	8009f98 <__ulp>
 800ac06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac0a:	ec51 0b10 	vmov	r0, r1, d0
 800ac0e:	f7f5 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ac12:	4652      	mov	r2, sl
 800ac14:	465b      	mov	r3, fp
 800ac16:	f7f5 fb39 	bl	800028c <__adddf3>
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4949      	ldr	r1, [pc, #292]	@ (800ad44 <_strtod_l+0xaf4>)
 800ac1e:	4a4e      	ldr	r2, [pc, #312]	@ (800ad58 <_strtod_l+0xb08>)
 800ac20:	4019      	ands	r1, r3
 800ac22:	4291      	cmp	r1, r2
 800ac24:	4682      	mov	sl, r0
 800ac26:	d942      	bls.n	800acae <_strtod_l+0xa5e>
 800ac28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac2a:	4b47      	ldr	r3, [pc, #284]	@ (800ad48 <_strtod_l+0xaf8>)
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d103      	bne.n	800ac38 <_strtod_l+0x9e8>
 800ac30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac32:	3301      	adds	r3, #1
 800ac34:	f43f ad2b 	beq.w	800a68e <_strtod_l+0x43e>
 800ac38:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ad48 <_strtod_l+0xaf8>
 800ac3c:	f04f 3aff 	mov.w	sl, #4294967295
 800ac40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac42:	9805      	ldr	r0, [sp, #20]
 800ac44:	f7fe fe74 	bl	8009930 <_Bfree>
 800ac48:	9805      	ldr	r0, [sp, #20]
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7fe fe70 	bl	8009930 <_Bfree>
 800ac50:	9805      	ldr	r0, [sp, #20]
 800ac52:	4641      	mov	r1, r8
 800ac54:	f7fe fe6c 	bl	8009930 <_Bfree>
 800ac58:	9805      	ldr	r0, [sp, #20]
 800ac5a:	4621      	mov	r1, r4
 800ac5c:	f7fe fe68 	bl	8009930 <_Bfree>
 800ac60:	e618      	b.n	800a894 <_strtod_l+0x644>
 800ac62:	f1ba 0f01 	cmp.w	sl, #1
 800ac66:	d103      	bne.n	800ac70 <_strtod_l+0xa20>
 800ac68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f43f ada5 	beq.w	800a7ba <_strtod_l+0x56a>
 800ac70:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ad20 <_strtod_l+0xad0>
 800ac74:	4f35      	ldr	r7, [pc, #212]	@ (800ad4c <_strtod_l+0xafc>)
 800ac76:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	e7b1      	b.n	800abe2 <_strtod_l+0x992>
 800ac7e:	4f34      	ldr	r7, [pc, #208]	@ (800ad50 <_strtod_l+0xb00>)
 800ac80:	2600      	movs	r6, #0
 800ac82:	e7aa      	b.n	800abda <_strtod_l+0x98a>
 800ac84:	4b32      	ldr	r3, [pc, #200]	@ (800ad50 <_strtod_l+0xb00>)
 800ac86:	4630      	mov	r0, r6
 800ac88:	4639      	mov	r1, r7
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f7f5 fcb4 	bl	80005f8 <__aeabi_dmul>
 800ac90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac92:	4606      	mov	r6, r0
 800ac94:	460f      	mov	r7, r1
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d09f      	beq.n	800abda <_strtod_l+0x98a>
 800ac9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ac9e:	e7a0      	b.n	800abe2 <_strtod_l+0x992>
 800aca0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ad28 <_strtod_l+0xad8>
 800aca4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aca8:	ec57 6b17 	vmov	r6, r7, d7
 800acac:	e799      	b.n	800abe2 <_strtod_l+0x992>
 800acae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800acb2:	9b08      	ldr	r3, [sp, #32]
 800acb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1c1      	bne.n	800ac40 <_strtod_l+0x9f0>
 800acbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acc0:	0d1b      	lsrs	r3, r3, #20
 800acc2:	051b      	lsls	r3, r3, #20
 800acc4:	429d      	cmp	r5, r3
 800acc6:	d1bb      	bne.n	800ac40 <_strtod_l+0x9f0>
 800acc8:	4630      	mov	r0, r6
 800acca:	4639      	mov	r1, r7
 800accc:	f7f5 fff4 	bl	8000cb8 <__aeabi_d2lz>
 800acd0:	f7f5 fc64 	bl	800059c <__aeabi_l2d>
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4630      	mov	r0, r6
 800acda:	4639      	mov	r1, r7
 800acdc:	f7f5 fad4 	bl	8000288 <__aeabi_dsub>
 800ace0:	460b      	mov	r3, r1
 800ace2:	4602      	mov	r2, r0
 800ace4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ace8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800acec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acee:	ea46 060a 	orr.w	r6, r6, sl
 800acf2:	431e      	orrs	r6, r3
 800acf4:	d06f      	beq.n	800add6 <_strtod_l+0xb86>
 800acf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ad30 <_strtod_l+0xae0>)
 800acf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfc:	f7f5 feee 	bl	8000adc <__aeabi_dcmplt>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	f47f accf 	bne.w	800a6a4 <_strtod_l+0x454>
 800ad06:	a30c      	add	r3, pc, #48	@ (adr r3, 800ad38 <_strtod_l+0xae8>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad10:	f7f5 ff02 	bl	8000b18 <__aeabi_dcmpgt>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d093      	beq.n	800ac40 <_strtod_l+0x9f0>
 800ad18:	e4c4      	b.n	800a6a4 <_strtod_l+0x454>
 800ad1a:	bf00      	nop
 800ad1c:	f3af 8000 	nop.w
 800ad20:	00000000 	.word	0x00000000
 800ad24:	bff00000 	.word	0xbff00000
 800ad28:	00000000 	.word	0x00000000
 800ad2c:	3ff00000 	.word	0x3ff00000
 800ad30:	94a03595 	.word	0x94a03595
 800ad34:	3fdfffff 	.word	0x3fdfffff
 800ad38:	35afe535 	.word	0x35afe535
 800ad3c:	3fe00000 	.word	0x3fe00000
 800ad40:	000fffff 	.word	0x000fffff
 800ad44:	7ff00000 	.word	0x7ff00000
 800ad48:	7fefffff 	.word	0x7fefffff
 800ad4c:	3ff00000 	.word	0x3ff00000
 800ad50:	3fe00000 	.word	0x3fe00000
 800ad54:	7fe00000 	.word	0x7fe00000
 800ad58:	7c9fffff 	.word	0x7c9fffff
 800ad5c:	9b08      	ldr	r3, [sp, #32]
 800ad5e:	b323      	cbz	r3, 800adaa <_strtod_l+0xb5a>
 800ad60:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ad64:	d821      	bhi.n	800adaa <_strtod_l+0xb5a>
 800ad66:	a328      	add	r3, pc, #160	@ (adr r3, 800ae08 <_strtod_l+0xbb8>)
 800ad68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4639      	mov	r1, r7
 800ad70:	f7f5 febe 	bl	8000af0 <__aeabi_dcmple>
 800ad74:	b1a0      	cbz	r0, 800ada0 <_strtod_l+0xb50>
 800ad76:	4639      	mov	r1, r7
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f7f5 ff15 	bl	8000ba8 <__aeabi_d2uiz>
 800ad7e:	2801      	cmp	r0, #1
 800ad80:	bf38      	it	cc
 800ad82:	2001      	movcc	r0, #1
 800ad84:	f7f5 fbbe 	bl	8000504 <__aeabi_ui2d>
 800ad88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad8a:	4606      	mov	r6, r0
 800ad8c:	460f      	mov	r7, r1
 800ad8e:	b9fb      	cbnz	r3, 800add0 <_strtod_l+0xb80>
 800ad90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ad94:	9014      	str	r0, [sp, #80]	@ 0x50
 800ad96:	9315      	str	r3, [sp, #84]	@ 0x54
 800ad98:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ad9c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ada0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ada2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ada6:	1b5b      	subs	r3, r3, r5
 800ada8:	9311      	str	r3, [sp, #68]	@ 0x44
 800adaa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800adae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800adb2:	f7ff f8f1 	bl	8009f98 <__ulp>
 800adb6:	4650      	mov	r0, sl
 800adb8:	ec53 2b10 	vmov	r2, r3, d0
 800adbc:	4659      	mov	r1, fp
 800adbe:	f7f5 fc1b 	bl	80005f8 <__aeabi_dmul>
 800adc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800adc6:	f7f5 fa61 	bl	800028c <__adddf3>
 800adca:	4682      	mov	sl, r0
 800adcc:	468b      	mov	fp, r1
 800adce:	e770      	b.n	800acb2 <_strtod_l+0xa62>
 800add0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800add4:	e7e0      	b.n	800ad98 <_strtod_l+0xb48>
 800add6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ae10 <_strtod_l+0xbc0>)
 800add8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800addc:	f7f5 fe7e 	bl	8000adc <__aeabi_dcmplt>
 800ade0:	e798      	b.n	800ad14 <_strtod_l+0xac4>
 800ade2:	2300      	movs	r3, #0
 800ade4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ade6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ade8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	f7ff ba6d 	b.w	800a2ca <_strtod_l+0x7a>
 800adf0:	2a65      	cmp	r2, #101	@ 0x65
 800adf2:	f43f ab66 	beq.w	800a4c2 <_strtod_l+0x272>
 800adf6:	2a45      	cmp	r2, #69	@ 0x45
 800adf8:	f43f ab63 	beq.w	800a4c2 <_strtod_l+0x272>
 800adfc:	2301      	movs	r3, #1
 800adfe:	f7ff bb9e 	b.w	800a53e <_strtod_l+0x2ee>
 800ae02:	bf00      	nop
 800ae04:	f3af 8000 	nop.w
 800ae08:	ffc00000 	.word	0xffc00000
 800ae0c:	41dfffff 	.word	0x41dfffff
 800ae10:	94a03595 	.word	0x94a03595
 800ae14:	3fcfffff 	.word	0x3fcfffff

0800ae18 <_strtod_r>:
 800ae18:	4b01      	ldr	r3, [pc, #4]	@ (800ae20 <_strtod_r+0x8>)
 800ae1a:	f7ff ba19 	b.w	800a250 <_strtod_l>
 800ae1e:	bf00      	nop
 800ae20:	20000068 	.word	0x20000068

0800ae24 <_strtol_l.constprop.0>:
 800ae24:	2b24      	cmp	r3, #36	@ 0x24
 800ae26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae2a:	4686      	mov	lr, r0
 800ae2c:	4690      	mov	r8, r2
 800ae2e:	d801      	bhi.n	800ae34 <_strtol_l.constprop.0+0x10>
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d106      	bne.n	800ae42 <_strtol_l.constprop.0+0x1e>
 800ae34:	f7fd fdbc 	bl	80089b0 <__errno>
 800ae38:	2316      	movs	r3, #22
 800ae3a:	6003      	str	r3, [r0, #0]
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae42:	4834      	ldr	r0, [pc, #208]	@ (800af14 <_strtol_l.constprop.0+0xf0>)
 800ae44:	460d      	mov	r5, r1
 800ae46:	462a      	mov	r2, r5
 800ae48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae4c:	5d06      	ldrb	r6, [r0, r4]
 800ae4e:	f016 0608 	ands.w	r6, r6, #8
 800ae52:	d1f8      	bne.n	800ae46 <_strtol_l.constprop.0+0x22>
 800ae54:	2c2d      	cmp	r4, #45	@ 0x2d
 800ae56:	d12d      	bne.n	800aeb4 <_strtol_l.constprop.0+0x90>
 800ae58:	782c      	ldrb	r4, [r5, #0]
 800ae5a:	2601      	movs	r6, #1
 800ae5c:	1c95      	adds	r5, r2, #2
 800ae5e:	f033 0210 	bics.w	r2, r3, #16
 800ae62:	d109      	bne.n	800ae78 <_strtol_l.constprop.0+0x54>
 800ae64:	2c30      	cmp	r4, #48	@ 0x30
 800ae66:	d12a      	bne.n	800aebe <_strtol_l.constprop.0+0x9a>
 800ae68:	782a      	ldrb	r2, [r5, #0]
 800ae6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ae6e:	2a58      	cmp	r2, #88	@ 0x58
 800ae70:	d125      	bne.n	800aebe <_strtol_l.constprop.0+0x9a>
 800ae72:	786c      	ldrb	r4, [r5, #1]
 800ae74:	2310      	movs	r3, #16
 800ae76:	3502      	adds	r5, #2
 800ae78:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ae7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ae80:	2200      	movs	r2, #0
 800ae82:	fbbc f9f3 	udiv	r9, ip, r3
 800ae86:	4610      	mov	r0, r2
 800ae88:	fb03 ca19 	mls	sl, r3, r9, ip
 800ae8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ae90:	2f09      	cmp	r7, #9
 800ae92:	d81b      	bhi.n	800aecc <_strtol_l.constprop.0+0xa8>
 800ae94:	463c      	mov	r4, r7
 800ae96:	42a3      	cmp	r3, r4
 800ae98:	dd27      	ble.n	800aeea <_strtol_l.constprop.0+0xc6>
 800ae9a:	1c57      	adds	r7, r2, #1
 800ae9c:	d007      	beq.n	800aeae <_strtol_l.constprop.0+0x8a>
 800ae9e:	4581      	cmp	r9, r0
 800aea0:	d320      	bcc.n	800aee4 <_strtol_l.constprop.0+0xc0>
 800aea2:	d101      	bne.n	800aea8 <_strtol_l.constprop.0+0x84>
 800aea4:	45a2      	cmp	sl, r4
 800aea6:	db1d      	blt.n	800aee4 <_strtol_l.constprop.0+0xc0>
 800aea8:	fb00 4003 	mla	r0, r0, r3, r4
 800aeac:	2201      	movs	r2, #1
 800aeae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aeb2:	e7eb      	b.n	800ae8c <_strtol_l.constprop.0+0x68>
 800aeb4:	2c2b      	cmp	r4, #43	@ 0x2b
 800aeb6:	bf04      	itt	eq
 800aeb8:	782c      	ldrbeq	r4, [r5, #0]
 800aeba:	1c95      	addeq	r5, r2, #2
 800aebc:	e7cf      	b.n	800ae5e <_strtol_l.constprop.0+0x3a>
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1da      	bne.n	800ae78 <_strtol_l.constprop.0+0x54>
 800aec2:	2c30      	cmp	r4, #48	@ 0x30
 800aec4:	bf0c      	ite	eq
 800aec6:	2308      	moveq	r3, #8
 800aec8:	230a      	movne	r3, #10
 800aeca:	e7d5      	b.n	800ae78 <_strtol_l.constprop.0+0x54>
 800aecc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aed0:	2f19      	cmp	r7, #25
 800aed2:	d801      	bhi.n	800aed8 <_strtol_l.constprop.0+0xb4>
 800aed4:	3c37      	subs	r4, #55	@ 0x37
 800aed6:	e7de      	b.n	800ae96 <_strtol_l.constprop.0+0x72>
 800aed8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aedc:	2f19      	cmp	r7, #25
 800aede:	d804      	bhi.n	800aeea <_strtol_l.constprop.0+0xc6>
 800aee0:	3c57      	subs	r4, #87	@ 0x57
 800aee2:	e7d8      	b.n	800ae96 <_strtol_l.constprop.0+0x72>
 800aee4:	f04f 32ff 	mov.w	r2, #4294967295
 800aee8:	e7e1      	b.n	800aeae <_strtol_l.constprop.0+0x8a>
 800aeea:	1c53      	adds	r3, r2, #1
 800aeec:	d108      	bne.n	800af00 <_strtol_l.constprop.0+0xdc>
 800aeee:	2322      	movs	r3, #34	@ 0x22
 800aef0:	f8ce 3000 	str.w	r3, [lr]
 800aef4:	4660      	mov	r0, ip
 800aef6:	f1b8 0f00 	cmp.w	r8, #0
 800aefa:	d0a0      	beq.n	800ae3e <_strtol_l.constprop.0+0x1a>
 800aefc:	1e69      	subs	r1, r5, #1
 800aefe:	e006      	b.n	800af0e <_strtol_l.constprop.0+0xea>
 800af00:	b106      	cbz	r6, 800af04 <_strtol_l.constprop.0+0xe0>
 800af02:	4240      	negs	r0, r0
 800af04:	f1b8 0f00 	cmp.w	r8, #0
 800af08:	d099      	beq.n	800ae3e <_strtol_l.constprop.0+0x1a>
 800af0a:	2a00      	cmp	r2, #0
 800af0c:	d1f6      	bne.n	800aefc <_strtol_l.constprop.0+0xd8>
 800af0e:	f8c8 1000 	str.w	r1, [r8]
 800af12:	e794      	b.n	800ae3e <_strtol_l.constprop.0+0x1a>
 800af14:	0800c389 	.word	0x0800c389

0800af18 <_strtol_r>:
 800af18:	f7ff bf84 	b.w	800ae24 <_strtol_l.constprop.0>

0800af1c <__ssputs_r>:
 800af1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af20:	688e      	ldr	r6, [r1, #8]
 800af22:	461f      	mov	r7, r3
 800af24:	42be      	cmp	r6, r7
 800af26:	680b      	ldr	r3, [r1, #0]
 800af28:	4682      	mov	sl, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	4690      	mov	r8, r2
 800af2e:	d82d      	bhi.n	800af8c <__ssputs_r+0x70>
 800af30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800af34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800af38:	d026      	beq.n	800af88 <__ssputs_r+0x6c>
 800af3a:	6965      	ldr	r5, [r4, #20]
 800af3c:	6909      	ldr	r1, [r1, #16]
 800af3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af42:	eba3 0901 	sub.w	r9, r3, r1
 800af46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af4a:	1c7b      	adds	r3, r7, #1
 800af4c:	444b      	add	r3, r9
 800af4e:	106d      	asrs	r5, r5, #1
 800af50:	429d      	cmp	r5, r3
 800af52:	bf38      	it	cc
 800af54:	461d      	movcc	r5, r3
 800af56:	0553      	lsls	r3, r2, #21
 800af58:	d527      	bpl.n	800afaa <__ssputs_r+0x8e>
 800af5a:	4629      	mov	r1, r5
 800af5c:	f7fe fc1c 	bl	8009798 <_malloc_r>
 800af60:	4606      	mov	r6, r0
 800af62:	b360      	cbz	r0, 800afbe <__ssputs_r+0xa2>
 800af64:	6921      	ldr	r1, [r4, #16]
 800af66:	464a      	mov	r2, r9
 800af68:	f000 fa18 	bl	800b39c <memcpy>
 800af6c:	89a3      	ldrh	r3, [r4, #12]
 800af6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800af72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af76:	81a3      	strh	r3, [r4, #12]
 800af78:	6126      	str	r6, [r4, #16]
 800af7a:	6165      	str	r5, [r4, #20]
 800af7c:	444e      	add	r6, r9
 800af7e:	eba5 0509 	sub.w	r5, r5, r9
 800af82:	6026      	str	r6, [r4, #0]
 800af84:	60a5      	str	r5, [r4, #8]
 800af86:	463e      	mov	r6, r7
 800af88:	42be      	cmp	r6, r7
 800af8a:	d900      	bls.n	800af8e <__ssputs_r+0x72>
 800af8c:	463e      	mov	r6, r7
 800af8e:	6820      	ldr	r0, [r4, #0]
 800af90:	4632      	mov	r2, r6
 800af92:	4641      	mov	r1, r8
 800af94:	f000 f9c6 	bl	800b324 <memmove>
 800af98:	68a3      	ldr	r3, [r4, #8]
 800af9a:	1b9b      	subs	r3, r3, r6
 800af9c:	60a3      	str	r3, [r4, #8]
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	4433      	add	r3, r6
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	2000      	movs	r0, #0
 800afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afaa:	462a      	mov	r2, r5
 800afac:	f000 fd89 	bl	800bac2 <_realloc_r>
 800afb0:	4606      	mov	r6, r0
 800afb2:	2800      	cmp	r0, #0
 800afb4:	d1e0      	bne.n	800af78 <__ssputs_r+0x5c>
 800afb6:	6921      	ldr	r1, [r4, #16]
 800afb8:	4650      	mov	r0, sl
 800afba:	f7fe fb79 	bl	80096b0 <_free_r>
 800afbe:	230c      	movs	r3, #12
 800afc0:	f8ca 3000 	str.w	r3, [sl]
 800afc4:	89a3      	ldrh	r3, [r4, #12]
 800afc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afca:	81a3      	strh	r3, [r4, #12]
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295
 800afd0:	e7e9      	b.n	800afa6 <__ssputs_r+0x8a>
	...

0800afd4 <_svfiprintf_r>:
 800afd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afd8:	4698      	mov	r8, r3
 800afda:	898b      	ldrh	r3, [r1, #12]
 800afdc:	061b      	lsls	r3, r3, #24
 800afde:	b09d      	sub	sp, #116	@ 0x74
 800afe0:	4607      	mov	r7, r0
 800afe2:	460d      	mov	r5, r1
 800afe4:	4614      	mov	r4, r2
 800afe6:	d510      	bpl.n	800b00a <_svfiprintf_r+0x36>
 800afe8:	690b      	ldr	r3, [r1, #16]
 800afea:	b973      	cbnz	r3, 800b00a <_svfiprintf_r+0x36>
 800afec:	2140      	movs	r1, #64	@ 0x40
 800afee:	f7fe fbd3 	bl	8009798 <_malloc_r>
 800aff2:	6028      	str	r0, [r5, #0]
 800aff4:	6128      	str	r0, [r5, #16]
 800aff6:	b930      	cbnz	r0, 800b006 <_svfiprintf_r+0x32>
 800aff8:	230c      	movs	r3, #12
 800affa:	603b      	str	r3, [r7, #0]
 800affc:	f04f 30ff 	mov.w	r0, #4294967295
 800b000:	b01d      	add	sp, #116	@ 0x74
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b006:	2340      	movs	r3, #64	@ 0x40
 800b008:	616b      	str	r3, [r5, #20]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b00e:	2320      	movs	r3, #32
 800b010:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b014:	f8cd 800c 	str.w	r8, [sp, #12]
 800b018:	2330      	movs	r3, #48	@ 0x30
 800b01a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b1b8 <_svfiprintf_r+0x1e4>
 800b01e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b022:	f04f 0901 	mov.w	r9, #1
 800b026:	4623      	mov	r3, r4
 800b028:	469a      	mov	sl, r3
 800b02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b02e:	b10a      	cbz	r2, 800b034 <_svfiprintf_r+0x60>
 800b030:	2a25      	cmp	r2, #37	@ 0x25
 800b032:	d1f9      	bne.n	800b028 <_svfiprintf_r+0x54>
 800b034:	ebba 0b04 	subs.w	fp, sl, r4
 800b038:	d00b      	beq.n	800b052 <_svfiprintf_r+0x7e>
 800b03a:	465b      	mov	r3, fp
 800b03c:	4622      	mov	r2, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	4638      	mov	r0, r7
 800b042:	f7ff ff6b 	bl	800af1c <__ssputs_r>
 800b046:	3001      	adds	r0, #1
 800b048:	f000 80a7 	beq.w	800b19a <_svfiprintf_r+0x1c6>
 800b04c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b04e:	445a      	add	r2, fp
 800b050:	9209      	str	r2, [sp, #36]	@ 0x24
 800b052:	f89a 3000 	ldrb.w	r3, [sl]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 809f 	beq.w	800b19a <_svfiprintf_r+0x1c6>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f04f 32ff 	mov.w	r2, #4294967295
 800b062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b066:	f10a 0a01 	add.w	sl, sl, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	9307      	str	r3, [sp, #28]
 800b06e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b072:	931a      	str	r3, [sp, #104]	@ 0x68
 800b074:	4654      	mov	r4, sl
 800b076:	2205      	movs	r2, #5
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	484e      	ldr	r0, [pc, #312]	@ (800b1b8 <_svfiprintf_r+0x1e4>)
 800b07e:	f7f5 f8a7 	bl	80001d0 <memchr>
 800b082:	9a04      	ldr	r2, [sp, #16]
 800b084:	b9d8      	cbnz	r0, 800b0be <_svfiprintf_r+0xea>
 800b086:	06d0      	lsls	r0, r2, #27
 800b088:	bf44      	itt	mi
 800b08a:	2320      	movmi	r3, #32
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b090:	0711      	lsls	r1, r2, #28
 800b092:	bf44      	itt	mi
 800b094:	232b      	movmi	r3, #43	@ 0x2b
 800b096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b09a:	f89a 3000 	ldrb.w	r3, [sl]
 800b09e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0a0:	d015      	beq.n	800b0ce <_svfiprintf_r+0xfa>
 800b0a2:	9a07      	ldr	r2, [sp, #28]
 800b0a4:	4654      	mov	r4, sl
 800b0a6:	2000      	movs	r0, #0
 800b0a8:	f04f 0c0a 	mov.w	ip, #10
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b2:	3b30      	subs	r3, #48	@ 0x30
 800b0b4:	2b09      	cmp	r3, #9
 800b0b6:	d94b      	bls.n	800b150 <_svfiprintf_r+0x17c>
 800b0b8:	b1b0      	cbz	r0, 800b0e8 <_svfiprintf_r+0x114>
 800b0ba:	9207      	str	r2, [sp, #28]
 800b0bc:	e014      	b.n	800b0e8 <_svfiprintf_r+0x114>
 800b0be:	eba0 0308 	sub.w	r3, r0, r8
 800b0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	9304      	str	r3, [sp, #16]
 800b0ca:	46a2      	mov	sl, r4
 800b0cc:	e7d2      	b.n	800b074 <_svfiprintf_r+0xa0>
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	9103      	str	r1, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfbb      	ittet	lt
 800b0da:	425b      	neglt	r3, r3
 800b0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e0:	9307      	strge	r3, [sp, #28]
 800b0e2:	9307      	strlt	r3, [sp, #28]
 800b0e4:	bfb8      	it	lt
 800b0e6:	9204      	strlt	r2, [sp, #16]
 800b0e8:	7823      	ldrb	r3, [r4, #0]
 800b0ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0ec:	d10a      	bne.n	800b104 <_svfiprintf_r+0x130>
 800b0ee:	7863      	ldrb	r3, [r4, #1]
 800b0f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0f2:	d132      	bne.n	800b15a <_svfiprintf_r+0x186>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	1d1a      	adds	r2, r3, #4
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	9203      	str	r2, [sp, #12]
 800b0fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b100:	3402      	adds	r4, #2
 800b102:	9305      	str	r3, [sp, #20]
 800b104:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b1c8 <_svfiprintf_r+0x1f4>
 800b108:	7821      	ldrb	r1, [r4, #0]
 800b10a:	2203      	movs	r2, #3
 800b10c:	4650      	mov	r0, sl
 800b10e:	f7f5 f85f 	bl	80001d0 <memchr>
 800b112:	b138      	cbz	r0, 800b124 <_svfiprintf_r+0x150>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	eba0 000a 	sub.w	r0, r0, sl
 800b11a:	2240      	movs	r2, #64	@ 0x40
 800b11c:	4082      	lsls	r2, r0
 800b11e:	4313      	orrs	r3, r2
 800b120:	3401      	adds	r4, #1
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b128:	4824      	ldr	r0, [pc, #144]	@ (800b1bc <_svfiprintf_r+0x1e8>)
 800b12a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b12e:	2206      	movs	r2, #6
 800b130:	f7f5 f84e 	bl	80001d0 <memchr>
 800b134:	2800      	cmp	r0, #0
 800b136:	d036      	beq.n	800b1a6 <_svfiprintf_r+0x1d2>
 800b138:	4b21      	ldr	r3, [pc, #132]	@ (800b1c0 <_svfiprintf_r+0x1ec>)
 800b13a:	bb1b      	cbnz	r3, 800b184 <_svfiprintf_r+0x1b0>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	3307      	adds	r3, #7
 800b140:	f023 0307 	bic.w	r3, r3, #7
 800b144:	3308      	adds	r3, #8
 800b146:	9303      	str	r3, [sp, #12]
 800b148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b14a:	4433      	add	r3, r6
 800b14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14e:	e76a      	b.n	800b026 <_svfiprintf_r+0x52>
 800b150:	fb0c 3202 	mla	r2, ip, r2, r3
 800b154:	460c      	mov	r4, r1
 800b156:	2001      	movs	r0, #1
 800b158:	e7a8      	b.n	800b0ac <_svfiprintf_r+0xd8>
 800b15a:	2300      	movs	r3, #0
 800b15c:	3401      	adds	r4, #1
 800b15e:	9305      	str	r3, [sp, #20]
 800b160:	4619      	mov	r1, r3
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4620      	mov	r0, r4
 800b168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16c:	3a30      	subs	r2, #48	@ 0x30
 800b16e:	2a09      	cmp	r2, #9
 800b170:	d903      	bls.n	800b17a <_svfiprintf_r+0x1a6>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0c6      	beq.n	800b104 <_svfiprintf_r+0x130>
 800b176:	9105      	str	r1, [sp, #20]
 800b178:	e7c4      	b.n	800b104 <_svfiprintf_r+0x130>
 800b17a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b17e:	4604      	mov	r4, r0
 800b180:	2301      	movs	r3, #1
 800b182:	e7f0      	b.n	800b166 <_svfiprintf_r+0x192>
 800b184:	ab03      	add	r3, sp, #12
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	462a      	mov	r2, r5
 800b18a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1c4 <_svfiprintf_r+0x1f0>)
 800b18c:	a904      	add	r1, sp, #16
 800b18e:	4638      	mov	r0, r7
 800b190:	f7fc fcca 	bl	8007b28 <_printf_float>
 800b194:	1c42      	adds	r2, r0, #1
 800b196:	4606      	mov	r6, r0
 800b198:	d1d6      	bne.n	800b148 <_svfiprintf_r+0x174>
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	065b      	lsls	r3, r3, #25
 800b19e:	f53f af2d 	bmi.w	800affc <_svfiprintf_r+0x28>
 800b1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a4:	e72c      	b.n	800b000 <_svfiprintf_r+0x2c>
 800b1a6:	ab03      	add	r3, sp, #12
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	4b05      	ldr	r3, [pc, #20]	@ (800b1c4 <_svfiprintf_r+0x1f0>)
 800b1ae:	a904      	add	r1, sp, #16
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f7fc ff51 	bl	8008058 <_printf_i>
 800b1b6:	e7ed      	b.n	800b194 <_svfiprintf_r+0x1c0>
 800b1b8:	0800c489 	.word	0x0800c489
 800b1bc:	0800c493 	.word	0x0800c493
 800b1c0:	08007b29 	.word	0x08007b29
 800b1c4:	0800af1d 	.word	0x0800af1d
 800b1c8:	0800c48f 	.word	0x0800c48f

0800b1cc <__sflush_r>:
 800b1cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	0716      	lsls	r6, r2, #28
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	460c      	mov	r4, r1
 800b1da:	d454      	bmi.n	800b286 <__sflush_r+0xba>
 800b1dc:	684b      	ldr	r3, [r1, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	dc02      	bgt.n	800b1e8 <__sflush_r+0x1c>
 800b1e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	dd48      	ble.n	800b27a <__sflush_r+0xae>
 800b1e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1ea:	2e00      	cmp	r6, #0
 800b1ec:	d045      	beq.n	800b27a <__sflush_r+0xae>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1f4:	682f      	ldr	r7, [r5, #0]
 800b1f6:	6a21      	ldr	r1, [r4, #32]
 800b1f8:	602b      	str	r3, [r5, #0]
 800b1fa:	d030      	beq.n	800b25e <__sflush_r+0x92>
 800b1fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	0759      	lsls	r1, r3, #29
 800b202:	d505      	bpl.n	800b210 <__sflush_r+0x44>
 800b204:	6863      	ldr	r3, [r4, #4]
 800b206:	1ad2      	subs	r2, r2, r3
 800b208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b20a:	b10b      	cbz	r3, 800b210 <__sflush_r+0x44>
 800b20c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b20e:	1ad2      	subs	r2, r2, r3
 800b210:	2300      	movs	r3, #0
 800b212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b214:	6a21      	ldr	r1, [r4, #32]
 800b216:	4628      	mov	r0, r5
 800b218:	47b0      	blx	r6
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	89a3      	ldrh	r3, [r4, #12]
 800b21e:	d106      	bne.n	800b22e <__sflush_r+0x62>
 800b220:	6829      	ldr	r1, [r5, #0]
 800b222:	291d      	cmp	r1, #29
 800b224:	d82b      	bhi.n	800b27e <__sflush_r+0xb2>
 800b226:	4a2a      	ldr	r2, [pc, #168]	@ (800b2d0 <__sflush_r+0x104>)
 800b228:	410a      	asrs	r2, r1
 800b22a:	07d6      	lsls	r6, r2, #31
 800b22c:	d427      	bmi.n	800b27e <__sflush_r+0xb2>
 800b22e:	2200      	movs	r2, #0
 800b230:	6062      	str	r2, [r4, #4]
 800b232:	04d9      	lsls	r1, r3, #19
 800b234:	6922      	ldr	r2, [r4, #16]
 800b236:	6022      	str	r2, [r4, #0]
 800b238:	d504      	bpl.n	800b244 <__sflush_r+0x78>
 800b23a:	1c42      	adds	r2, r0, #1
 800b23c:	d101      	bne.n	800b242 <__sflush_r+0x76>
 800b23e:	682b      	ldr	r3, [r5, #0]
 800b240:	b903      	cbnz	r3, 800b244 <__sflush_r+0x78>
 800b242:	6560      	str	r0, [r4, #84]	@ 0x54
 800b244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b246:	602f      	str	r7, [r5, #0]
 800b248:	b1b9      	cbz	r1, 800b27a <__sflush_r+0xae>
 800b24a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b24e:	4299      	cmp	r1, r3
 800b250:	d002      	beq.n	800b258 <__sflush_r+0x8c>
 800b252:	4628      	mov	r0, r5
 800b254:	f7fe fa2c 	bl	80096b0 <_free_r>
 800b258:	2300      	movs	r3, #0
 800b25a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b25c:	e00d      	b.n	800b27a <__sflush_r+0xae>
 800b25e:	2301      	movs	r3, #1
 800b260:	4628      	mov	r0, r5
 800b262:	47b0      	blx	r6
 800b264:	4602      	mov	r2, r0
 800b266:	1c50      	adds	r0, r2, #1
 800b268:	d1c9      	bne.n	800b1fe <__sflush_r+0x32>
 800b26a:	682b      	ldr	r3, [r5, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d0c6      	beq.n	800b1fe <__sflush_r+0x32>
 800b270:	2b1d      	cmp	r3, #29
 800b272:	d001      	beq.n	800b278 <__sflush_r+0xac>
 800b274:	2b16      	cmp	r3, #22
 800b276:	d11e      	bne.n	800b2b6 <__sflush_r+0xea>
 800b278:	602f      	str	r7, [r5, #0]
 800b27a:	2000      	movs	r0, #0
 800b27c:	e022      	b.n	800b2c4 <__sflush_r+0xf8>
 800b27e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b282:	b21b      	sxth	r3, r3
 800b284:	e01b      	b.n	800b2be <__sflush_r+0xf2>
 800b286:	690f      	ldr	r7, [r1, #16]
 800b288:	2f00      	cmp	r7, #0
 800b28a:	d0f6      	beq.n	800b27a <__sflush_r+0xae>
 800b28c:	0793      	lsls	r3, r2, #30
 800b28e:	680e      	ldr	r6, [r1, #0]
 800b290:	bf08      	it	eq
 800b292:	694b      	ldreq	r3, [r1, #20]
 800b294:	600f      	str	r7, [r1, #0]
 800b296:	bf18      	it	ne
 800b298:	2300      	movne	r3, #0
 800b29a:	eba6 0807 	sub.w	r8, r6, r7
 800b29e:	608b      	str	r3, [r1, #8]
 800b2a0:	f1b8 0f00 	cmp.w	r8, #0
 800b2a4:	dde9      	ble.n	800b27a <__sflush_r+0xae>
 800b2a6:	6a21      	ldr	r1, [r4, #32]
 800b2a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b2aa:	4643      	mov	r3, r8
 800b2ac:	463a      	mov	r2, r7
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	47b0      	blx	r6
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	dc08      	bgt.n	800b2c8 <__sflush_r+0xfc>
 800b2b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2c8:	4407      	add	r7, r0
 800b2ca:	eba8 0800 	sub.w	r8, r8, r0
 800b2ce:	e7e7      	b.n	800b2a0 <__sflush_r+0xd4>
 800b2d0:	dfbffffe 	.word	0xdfbffffe

0800b2d4 <_fflush_r>:
 800b2d4:	b538      	push	{r3, r4, r5, lr}
 800b2d6:	690b      	ldr	r3, [r1, #16]
 800b2d8:	4605      	mov	r5, r0
 800b2da:	460c      	mov	r4, r1
 800b2dc:	b913      	cbnz	r3, 800b2e4 <_fflush_r+0x10>
 800b2de:	2500      	movs	r5, #0
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	b118      	cbz	r0, 800b2ee <_fflush_r+0x1a>
 800b2e6:	6a03      	ldr	r3, [r0, #32]
 800b2e8:	b90b      	cbnz	r3, 800b2ee <_fflush_r+0x1a>
 800b2ea:	f7fd fa75 	bl	80087d8 <__sinit>
 800b2ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0f3      	beq.n	800b2de <_fflush_r+0xa>
 800b2f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2f8:	07d0      	lsls	r0, r2, #31
 800b2fa:	d404      	bmi.n	800b306 <_fflush_r+0x32>
 800b2fc:	0599      	lsls	r1, r3, #22
 800b2fe:	d402      	bmi.n	800b306 <_fflush_r+0x32>
 800b300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b302:	f7fd fb80 	bl	8008a06 <__retarget_lock_acquire_recursive>
 800b306:	4628      	mov	r0, r5
 800b308:	4621      	mov	r1, r4
 800b30a:	f7ff ff5f 	bl	800b1cc <__sflush_r>
 800b30e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b310:	07da      	lsls	r2, r3, #31
 800b312:	4605      	mov	r5, r0
 800b314:	d4e4      	bmi.n	800b2e0 <_fflush_r+0xc>
 800b316:	89a3      	ldrh	r3, [r4, #12]
 800b318:	059b      	lsls	r3, r3, #22
 800b31a:	d4e1      	bmi.n	800b2e0 <_fflush_r+0xc>
 800b31c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b31e:	f7fd fb73 	bl	8008a08 <__retarget_lock_release_recursive>
 800b322:	e7dd      	b.n	800b2e0 <_fflush_r+0xc>

0800b324 <memmove>:
 800b324:	4288      	cmp	r0, r1
 800b326:	b510      	push	{r4, lr}
 800b328:	eb01 0402 	add.w	r4, r1, r2
 800b32c:	d902      	bls.n	800b334 <memmove+0x10>
 800b32e:	4284      	cmp	r4, r0
 800b330:	4623      	mov	r3, r4
 800b332:	d807      	bhi.n	800b344 <memmove+0x20>
 800b334:	1e43      	subs	r3, r0, #1
 800b336:	42a1      	cmp	r1, r4
 800b338:	d008      	beq.n	800b34c <memmove+0x28>
 800b33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b33e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b342:	e7f8      	b.n	800b336 <memmove+0x12>
 800b344:	4402      	add	r2, r0
 800b346:	4601      	mov	r1, r0
 800b348:	428a      	cmp	r2, r1
 800b34a:	d100      	bne.n	800b34e <memmove+0x2a>
 800b34c:	bd10      	pop	{r4, pc}
 800b34e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b352:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b356:	e7f7      	b.n	800b348 <memmove+0x24>

0800b358 <strncmp>:
 800b358:	b510      	push	{r4, lr}
 800b35a:	b16a      	cbz	r2, 800b378 <strncmp+0x20>
 800b35c:	3901      	subs	r1, #1
 800b35e:	1884      	adds	r4, r0, r2
 800b360:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b364:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b368:	429a      	cmp	r2, r3
 800b36a:	d103      	bne.n	800b374 <strncmp+0x1c>
 800b36c:	42a0      	cmp	r0, r4
 800b36e:	d001      	beq.n	800b374 <strncmp+0x1c>
 800b370:	2a00      	cmp	r2, #0
 800b372:	d1f5      	bne.n	800b360 <strncmp+0x8>
 800b374:	1ad0      	subs	r0, r2, r3
 800b376:	bd10      	pop	{r4, pc}
 800b378:	4610      	mov	r0, r2
 800b37a:	e7fc      	b.n	800b376 <strncmp+0x1e>

0800b37c <_sbrk_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d06      	ldr	r5, [pc, #24]	@ (800b398 <_sbrk_r+0x1c>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	602b      	str	r3, [r5, #0]
 800b388:	f7f7 fe04 	bl	8002f94 <_sbrk>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_sbrk_r+0x1a>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_sbrk_r+0x1a>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20000a48 	.word	0x20000a48

0800b39c <memcpy>:
 800b39c:	440a      	add	r2, r1
 800b39e:	4291      	cmp	r1, r2
 800b3a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3a4:	d100      	bne.n	800b3a8 <memcpy+0xc>
 800b3a6:	4770      	bx	lr
 800b3a8:	b510      	push	{r4, lr}
 800b3aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	d1f9      	bne.n	800b3aa <memcpy+0xe>
 800b3b6:	bd10      	pop	{r4, pc}

0800b3b8 <nan>:
 800b3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b3c0 <nan+0x8>
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	00000000 	.word	0x00000000
 800b3c4:	7ff80000 	.word	0x7ff80000

0800b3c8 <__assert_func>:
 800b3c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3ca:	4614      	mov	r4, r2
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	4b09      	ldr	r3, [pc, #36]	@ (800b3f4 <__assert_func+0x2c>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4605      	mov	r5, r0
 800b3d4:	68d8      	ldr	r0, [r3, #12]
 800b3d6:	b954      	cbnz	r4, 800b3ee <__assert_func+0x26>
 800b3d8:	4b07      	ldr	r3, [pc, #28]	@ (800b3f8 <__assert_func+0x30>)
 800b3da:	461c      	mov	r4, r3
 800b3dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b3e0:	9100      	str	r1, [sp, #0]
 800b3e2:	462b      	mov	r3, r5
 800b3e4:	4905      	ldr	r1, [pc, #20]	@ (800b3fc <__assert_func+0x34>)
 800b3e6:	f000 fba7 	bl	800bb38 <fiprintf>
 800b3ea:	f000 fbb7 	bl	800bb5c <abort>
 800b3ee:	4b04      	ldr	r3, [pc, #16]	@ (800b400 <__assert_func+0x38>)
 800b3f0:	e7f4      	b.n	800b3dc <__assert_func+0x14>
 800b3f2:	bf00      	nop
 800b3f4:	20000018 	.word	0x20000018
 800b3f8:	0800c4dd 	.word	0x0800c4dd
 800b3fc:	0800c4af 	.word	0x0800c4af
 800b400:	0800c4a2 	.word	0x0800c4a2

0800b404 <_calloc_r>:
 800b404:	b570      	push	{r4, r5, r6, lr}
 800b406:	fba1 5402 	umull	r5, r4, r1, r2
 800b40a:	b93c      	cbnz	r4, 800b41c <_calloc_r+0x18>
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7fe f9c3 	bl	8009798 <_malloc_r>
 800b412:	4606      	mov	r6, r0
 800b414:	b928      	cbnz	r0, 800b422 <_calloc_r+0x1e>
 800b416:	2600      	movs	r6, #0
 800b418:	4630      	mov	r0, r6
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	220c      	movs	r2, #12
 800b41e:	6002      	str	r2, [r0, #0]
 800b420:	e7f9      	b.n	800b416 <_calloc_r+0x12>
 800b422:	462a      	mov	r2, r5
 800b424:	4621      	mov	r1, r4
 800b426:	f7fd fa70 	bl	800890a <memset>
 800b42a:	e7f5      	b.n	800b418 <_calloc_r+0x14>

0800b42c <rshift>:
 800b42c:	6903      	ldr	r3, [r0, #16]
 800b42e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b436:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b43a:	f100 0414 	add.w	r4, r0, #20
 800b43e:	dd45      	ble.n	800b4cc <rshift+0xa0>
 800b440:	f011 011f 	ands.w	r1, r1, #31
 800b444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b44c:	d10c      	bne.n	800b468 <rshift+0x3c>
 800b44e:	f100 0710 	add.w	r7, r0, #16
 800b452:	4629      	mov	r1, r5
 800b454:	42b1      	cmp	r1, r6
 800b456:	d334      	bcc.n	800b4c2 <rshift+0x96>
 800b458:	1a9b      	subs	r3, r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	1eea      	subs	r2, r5, #3
 800b45e:	4296      	cmp	r6, r2
 800b460:	bf38      	it	cc
 800b462:	2300      	movcc	r3, #0
 800b464:	4423      	add	r3, r4
 800b466:	e015      	b.n	800b494 <rshift+0x68>
 800b468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b46c:	f1c1 0820 	rsb	r8, r1, #32
 800b470:	40cf      	lsrs	r7, r1
 800b472:	f105 0e04 	add.w	lr, r5, #4
 800b476:	46a1      	mov	r9, r4
 800b478:	4576      	cmp	r6, lr
 800b47a:	46f4      	mov	ip, lr
 800b47c:	d815      	bhi.n	800b4aa <rshift+0x7e>
 800b47e:	1a9a      	subs	r2, r3, r2
 800b480:	0092      	lsls	r2, r2, #2
 800b482:	3a04      	subs	r2, #4
 800b484:	3501      	adds	r5, #1
 800b486:	42ae      	cmp	r6, r5
 800b488:	bf38      	it	cc
 800b48a:	2200      	movcc	r2, #0
 800b48c:	18a3      	adds	r3, r4, r2
 800b48e:	50a7      	str	r7, [r4, r2]
 800b490:	b107      	cbz	r7, 800b494 <rshift+0x68>
 800b492:	3304      	adds	r3, #4
 800b494:	1b1a      	subs	r2, r3, r4
 800b496:	42a3      	cmp	r3, r4
 800b498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b49c:	bf08      	it	eq
 800b49e:	2300      	moveq	r3, #0
 800b4a0:	6102      	str	r2, [r0, #16]
 800b4a2:	bf08      	it	eq
 800b4a4:	6143      	streq	r3, [r0, #20]
 800b4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4aa:	f8dc c000 	ldr.w	ip, [ip]
 800b4ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800b4b2:	ea4c 0707 	orr.w	r7, ip, r7
 800b4b6:	f849 7b04 	str.w	r7, [r9], #4
 800b4ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b4be:	40cf      	lsrs	r7, r1
 800b4c0:	e7da      	b.n	800b478 <rshift+0x4c>
 800b4c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b4c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b4ca:	e7c3      	b.n	800b454 <rshift+0x28>
 800b4cc:	4623      	mov	r3, r4
 800b4ce:	e7e1      	b.n	800b494 <rshift+0x68>

0800b4d0 <__hexdig_fun>:
 800b4d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	d802      	bhi.n	800b4de <__hexdig_fun+0xe>
 800b4d8:	3820      	subs	r0, #32
 800b4da:	b2c0      	uxtb	r0, r0
 800b4dc:	4770      	bx	lr
 800b4de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b4e2:	2b05      	cmp	r3, #5
 800b4e4:	d801      	bhi.n	800b4ea <__hexdig_fun+0x1a>
 800b4e6:	3847      	subs	r0, #71	@ 0x47
 800b4e8:	e7f7      	b.n	800b4da <__hexdig_fun+0xa>
 800b4ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b4ee:	2b05      	cmp	r3, #5
 800b4f0:	d801      	bhi.n	800b4f6 <__hexdig_fun+0x26>
 800b4f2:	3827      	subs	r0, #39	@ 0x27
 800b4f4:	e7f1      	b.n	800b4da <__hexdig_fun+0xa>
 800b4f6:	2000      	movs	r0, #0
 800b4f8:	4770      	bx	lr
	...

0800b4fc <__gethex>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	b085      	sub	sp, #20
 800b502:	468a      	mov	sl, r1
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	680b      	ldr	r3, [r1, #0]
 800b508:	9001      	str	r0, [sp, #4]
 800b50a:	4690      	mov	r8, r2
 800b50c:	1c9c      	adds	r4, r3, #2
 800b50e:	46a1      	mov	r9, r4
 800b510:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b514:	2830      	cmp	r0, #48	@ 0x30
 800b516:	d0fa      	beq.n	800b50e <__gethex+0x12>
 800b518:	eba9 0303 	sub.w	r3, r9, r3
 800b51c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b520:	f7ff ffd6 	bl	800b4d0 <__hexdig_fun>
 800b524:	4605      	mov	r5, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	d168      	bne.n	800b5fc <__gethex+0x100>
 800b52a:	49a0      	ldr	r1, [pc, #640]	@ (800b7ac <__gethex+0x2b0>)
 800b52c:	2201      	movs	r2, #1
 800b52e:	4648      	mov	r0, r9
 800b530:	f7ff ff12 	bl	800b358 <strncmp>
 800b534:	4607      	mov	r7, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d167      	bne.n	800b60a <__gethex+0x10e>
 800b53a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b53e:	4626      	mov	r6, r4
 800b540:	f7ff ffc6 	bl	800b4d0 <__hexdig_fun>
 800b544:	2800      	cmp	r0, #0
 800b546:	d062      	beq.n	800b60e <__gethex+0x112>
 800b548:	4623      	mov	r3, r4
 800b54a:	7818      	ldrb	r0, [r3, #0]
 800b54c:	2830      	cmp	r0, #48	@ 0x30
 800b54e:	4699      	mov	r9, r3
 800b550:	f103 0301 	add.w	r3, r3, #1
 800b554:	d0f9      	beq.n	800b54a <__gethex+0x4e>
 800b556:	f7ff ffbb 	bl	800b4d0 <__hexdig_fun>
 800b55a:	fab0 f580 	clz	r5, r0
 800b55e:	096d      	lsrs	r5, r5, #5
 800b560:	f04f 0b01 	mov.w	fp, #1
 800b564:	464a      	mov	r2, r9
 800b566:	4616      	mov	r6, r2
 800b568:	3201      	adds	r2, #1
 800b56a:	7830      	ldrb	r0, [r6, #0]
 800b56c:	f7ff ffb0 	bl	800b4d0 <__hexdig_fun>
 800b570:	2800      	cmp	r0, #0
 800b572:	d1f8      	bne.n	800b566 <__gethex+0x6a>
 800b574:	498d      	ldr	r1, [pc, #564]	@ (800b7ac <__gethex+0x2b0>)
 800b576:	2201      	movs	r2, #1
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff feed 	bl	800b358 <strncmp>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d13f      	bne.n	800b602 <__gethex+0x106>
 800b582:	b944      	cbnz	r4, 800b596 <__gethex+0x9a>
 800b584:	1c74      	adds	r4, r6, #1
 800b586:	4622      	mov	r2, r4
 800b588:	4616      	mov	r6, r2
 800b58a:	3201      	adds	r2, #1
 800b58c:	7830      	ldrb	r0, [r6, #0]
 800b58e:	f7ff ff9f 	bl	800b4d0 <__hexdig_fun>
 800b592:	2800      	cmp	r0, #0
 800b594:	d1f8      	bne.n	800b588 <__gethex+0x8c>
 800b596:	1ba4      	subs	r4, r4, r6
 800b598:	00a7      	lsls	r7, r4, #2
 800b59a:	7833      	ldrb	r3, [r6, #0]
 800b59c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b5a0:	2b50      	cmp	r3, #80	@ 0x50
 800b5a2:	d13e      	bne.n	800b622 <__gethex+0x126>
 800b5a4:	7873      	ldrb	r3, [r6, #1]
 800b5a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b5a8:	d033      	beq.n	800b612 <__gethex+0x116>
 800b5aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800b5ac:	d034      	beq.n	800b618 <__gethex+0x11c>
 800b5ae:	1c71      	adds	r1, r6, #1
 800b5b0:	2400      	movs	r4, #0
 800b5b2:	7808      	ldrb	r0, [r1, #0]
 800b5b4:	f7ff ff8c 	bl	800b4d0 <__hexdig_fun>
 800b5b8:	1e43      	subs	r3, r0, #1
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b18      	cmp	r3, #24
 800b5be:	d830      	bhi.n	800b622 <__gethex+0x126>
 800b5c0:	f1a0 0210 	sub.w	r2, r0, #16
 800b5c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b5c8:	f7ff ff82 	bl	800b4d0 <__hexdig_fun>
 800b5cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800b5d0:	fa5f fc8c 	uxtb.w	ip, ip
 800b5d4:	f1bc 0f18 	cmp.w	ip, #24
 800b5d8:	f04f 030a 	mov.w	r3, #10
 800b5dc:	d91e      	bls.n	800b61c <__gethex+0x120>
 800b5de:	b104      	cbz	r4, 800b5e2 <__gethex+0xe6>
 800b5e0:	4252      	negs	r2, r2
 800b5e2:	4417      	add	r7, r2
 800b5e4:	f8ca 1000 	str.w	r1, [sl]
 800b5e8:	b1ed      	cbz	r5, 800b626 <__gethex+0x12a>
 800b5ea:	f1bb 0f00 	cmp.w	fp, #0
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2506      	moveq	r5, #6
 800b5f2:	2500      	movne	r5, #0
 800b5f4:	4628      	mov	r0, r5
 800b5f6:	b005      	add	sp, #20
 800b5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5fc:	2500      	movs	r5, #0
 800b5fe:	462c      	mov	r4, r5
 800b600:	e7b0      	b.n	800b564 <__gethex+0x68>
 800b602:	2c00      	cmp	r4, #0
 800b604:	d1c7      	bne.n	800b596 <__gethex+0x9a>
 800b606:	4627      	mov	r7, r4
 800b608:	e7c7      	b.n	800b59a <__gethex+0x9e>
 800b60a:	464e      	mov	r6, r9
 800b60c:	462f      	mov	r7, r5
 800b60e:	2501      	movs	r5, #1
 800b610:	e7c3      	b.n	800b59a <__gethex+0x9e>
 800b612:	2400      	movs	r4, #0
 800b614:	1cb1      	adds	r1, r6, #2
 800b616:	e7cc      	b.n	800b5b2 <__gethex+0xb6>
 800b618:	2401      	movs	r4, #1
 800b61a:	e7fb      	b.n	800b614 <__gethex+0x118>
 800b61c:	fb03 0002 	mla	r0, r3, r2, r0
 800b620:	e7ce      	b.n	800b5c0 <__gethex+0xc4>
 800b622:	4631      	mov	r1, r6
 800b624:	e7de      	b.n	800b5e4 <__gethex+0xe8>
 800b626:	eba6 0309 	sub.w	r3, r6, r9
 800b62a:	3b01      	subs	r3, #1
 800b62c:	4629      	mov	r1, r5
 800b62e:	2b07      	cmp	r3, #7
 800b630:	dc0a      	bgt.n	800b648 <__gethex+0x14c>
 800b632:	9801      	ldr	r0, [sp, #4]
 800b634:	f7fe f93c 	bl	80098b0 <_Balloc>
 800b638:	4604      	mov	r4, r0
 800b63a:	b940      	cbnz	r0, 800b64e <__gethex+0x152>
 800b63c:	4b5c      	ldr	r3, [pc, #368]	@ (800b7b0 <__gethex+0x2b4>)
 800b63e:	4602      	mov	r2, r0
 800b640:	21e4      	movs	r1, #228	@ 0xe4
 800b642:	485c      	ldr	r0, [pc, #368]	@ (800b7b4 <__gethex+0x2b8>)
 800b644:	f7ff fec0 	bl	800b3c8 <__assert_func>
 800b648:	3101      	adds	r1, #1
 800b64a:	105b      	asrs	r3, r3, #1
 800b64c:	e7ef      	b.n	800b62e <__gethex+0x132>
 800b64e:	f100 0a14 	add.w	sl, r0, #20
 800b652:	2300      	movs	r3, #0
 800b654:	4655      	mov	r5, sl
 800b656:	469b      	mov	fp, r3
 800b658:	45b1      	cmp	r9, r6
 800b65a:	d337      	bcc.n	800b6cc <__gethex+0x1d0>
 800b65c:	f845 bb04 	str.w	fp, [r5], #4
 800b660:	eba5 050a 	sub.w	r5, r5, sl
 800b664:	10ad      	asrs	r5, r5, #2
 800b666:	6125      	str	r5, [r4, #16]
 800b668:	4658      	mov	r0, fp
 800b66a:	f7fe fa13 	bl	8009a94 <__hi0bits>
 800b66e:	016d      	lsls	r5, r5, #5
 800b670:	f8d8 6000 	ldr.w	r6, [r8]
 800b674:	1a2d      	subs	r5, r5, r0
 800b676:	42b5      	cmp	r5, r6
 800b678:	dd54      	ble.n	800b724 <__gethex+0x228>
 800b67a:	1bad      	subs	r5, r5, r6
 800b67c:	4629      	mov	r1, r5
 800b67e:	4620      	mov	r0, r4
 800b680:	f7fe fda7 	bl	800a1d2 <__any_on>
 800b684:	4681      	mov	r9, r0
 800b686:	b178      	cbz	r0, 800b6a8 <__gethex+0x1ac>
 800b688:	1e6b      	subs	r3, r5, #1
 800b68a:	1159      	asrs	r1, r3, #5
 800b68c:	f003 021f 	and.w	r2, r3, #31
 800b690:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b694:	f04f 0901 	mov.w	r9, #1
 800b698:	fa09 f202 	lsl.w	r2, r9, r2
 800b69c:	420a      	tst	r2, r1
 800b69e:	d003      	beq.n	800b6a8 <__gethex+0x1ac>
 800b6a0:	454b      	cmp	r3, r9
 800b6a2:	dc36      	bgt.n	800b712 <__gethex+0x216>
 800b6a4:	f04f 0902 	mov.w	r9, #2
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f7ff febe 	bl	800b42c <rshift>
 800b6b0:	442f      	add	r7, r5
 800b6b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6b6:	42bb      	cmp	r3, r7
 800b6b8:	da42      	bge.n	800b740 <__gethex+0x244>
 800b6ba:	9801      	ldr	r0, [sp, #4]
 800b6bc:	4621      	mov	r1, r4
 800b6be:	f7fe f937 	bl	8009930 <_Bfree>
 800b6c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	25a3      	movs	r5, #163	@ 0xa3
 800b6ca:	e793      	b.n	800b5f4 <__gethex+0xf8>
 800b6cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b6d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b6d2:	d012      	beq.n	800b6fa <__gethex+0x1fe>
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d104      	bne.n	800b6e2 <__gethex+0x1e6>
 800b6d8:	f845 bb04 	str.w	fp, [r5], #4
 800b6dc:	f04f 0b00 	mov.w	fp, #0
 800b6e0:	465b      	mov	r3, fp
 800b6e2:	7830      	ldrb	r0, [r6, #0]
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	f7ff fef3 	bl	800b4d0 <__hexdig_fun>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	f000 000f 	and.w	r0, r0, #15
 800b6f0:	4098      	lsls	r0, r3
 800b6f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b6f6:	3304      	adds	r3, #4
 800b6f8:	e7ae      	b.n	800b658 <__gethex+0x15c>
 800b6fa:	45b1      	cmp	r9, r6
 800b6fc:	d8ea      	bhi.n	800b6d4 <__gethex+0x1d8>
 800b6fe:	492b      	ldr	r1, [pc, #172]	@ (800b7ac <__gethex+0x2b0>)
 800b700:	9303      	str	r3, [sp, #12]
 800b702:	2201      	movs	r2, #1
 800b704:	4630      	mov	r0, r6
 800b706:	f7ff fe27 	bl	800b358 <strncmp>
 800b70a:	9b03      	ldr	r3, [sp, #12]
 800b70c:	2800      	cmp	r0, #0
 800b70e:	d1e1      	bne.n	800b6d4 <__gethex+0x1d8>
 800b710:	e7a2      	b.n	800b658 <__gethex+0x15c>
 800b712:	1ea9      	subs	r1, r5, #2
 800b714:	4620      	mov	r0, r4
 800b716:	f7fe fd5c 	bl	800a1d2 <__any_on>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	d0c2      	beq.n	800b6a4 <__gethex+0x1a8>
 800b71e:	f04f 0903 	mov.w	r9, #3
 800b722:	e7c1      	b.n	800b6a8 <__gethex+0x1ac>
 800b724:	da09      	bge.n	800b73a <__gethex+0x23e>
 800b726:	1b75      	subs	r5, r6, r5
 800b728:	4621      	mov	r1, r4
 800b72a:	9801      	ldr	r0, [sp, #4]
 800b72c:	462a      	mov	r2, r5
 800b72e:	f7fe fb17 	bl	8009d60 <__lshift>
 800b732:	1b7f      	subs	r7, r7, r5
 800b734:	4604      	mov	r4, r0
 800b736:	f100 0a14 	add.w	sl, r0, #20
 800b73a:	f04f 0900 	mov.w	r9, #0
 800b73e:	e7b8      	b.n	800b6b2 <__gethex+0x1b6>
 800b740:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b744:	42bd      	cmp	r5, r7
 800b746:	dd6f      	ble.n	800b828 <__gethex+0x32c>
 800b748:	1bed      	subs	r5, r5, r7
 800b74a:	42ae      	cmp	r6, r5
 800b74c:	dc34      	bgt.n	800b7b8 <__gethex+0x2bc>
 800b74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b752:	2b02      	cmp	r3, #2
 800b754:	d022      	beq.n	800b79c <__gethex+0x2a0>
 800b756:	2b03      	cmp	r3, #3
 800b758:	d024      	beq.n	800b7a4 <__gethex+0x2a8>
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d115      	bne.n	800b78a <__gethex+0x28e>
 800b75e:	42ae      	cmp	r6, r5
 800b760:	d113      	bne.n	800b78a <__gethex+0x28e>
 800b762:	2e01      	cmp	r6, #1
 800b764:	d10b      	bne.n	800b77e <__gethex+0x282>
 800b766:	9a02      	ldr	r2, [sp, #8]
 800b768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	2301      	movs	r3, #1
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	f8ca 3000 	str.w	r3, [sl]
 800b776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b778:	2562      	movs	r5, #98	@ 0x62
 800b77a:	601c      	str	r4, [r3, #0]
 800b77c:	e73a      	b.n	800b5f4 <__gethex+0xf8>
 800b77e:	1e71      	subs	r1, r6, #1
 800b780:	4620      	mov	r0, r4
 800b782:	f7fe fd26 	bl	800a1d2 <__any_on>
 800b786:	2800      	cmp	r0, #0
 800b788:	d1ed      	bne.n	800b766 <__gethex+0x26a>
 800b78a:	9801      	ldr	r0, [sp, #4]
 800b78c:	4621      	mov	r1, r4
 800b78e:	f7fe f8cf 	bl	8009930 <_Bfree>
 800b792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b794:	2300      	movs	r3, #0
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	2550      	movs	r5, #80	@ 0x50
 800b79a:	e72b      	b.n	800b5f4 <__gethex+0xf8>
 800b79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f3      	bne.n	800b78a <__gethex+0x28e>
 800b7a2:	e7e0      	b.n	800b766 <__gethex+0x26a>
 800b7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d1dd      	bne.n	800b766 <__gethex+0x26a>
 800b7aa:	e7ee      	b.n	800b78a <__gethex+0x28e>
 800b7ac:	0800c330 	.word	0x0800c330
 800b7b0:	0800c1c5 	.word	0x0800c1c5
 800b7b4:	0800c4de 	.word	0x0800c4de
 800b7b8:	1e6f      	subs	r7, r5, #1
 800b7ba:	f1b9 0f00 	cmp.w	r9, #0
 800b7be:	d130      	bne.n	800b822 <__gethex+0x326>
 800b7c0:	b127      	cbz	r7, 800b7cc <__gethex+0x2d0>
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7fe fd04 	bl	800a1d2 <__any_on>
 800b7ca:	4681      	mov	r9, r0
 800b7cc:	117a      	asrs	r2, r7, #5
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b7d4:	f007 071f 	and.w	r7, r7, #31
 800b7d8:	40bb      	lsls	r3, r7
 800b7da:	4213      	tst	r3, r2
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4620      	mov	r0, r4
 800b7e0:	bf18      	it	ne
 800b7e2:	f049 0902 	orrne.w	r9, r9, #2
 800b7e6:	f7ff fe21 	bl	800b42c <rshift>
 800b7ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b7ee:	1b76      	subs	r6, r6, r5
 800b7f0:	2502      	movs	r5, #2
 800b7f2:	f1b9 0f00 	cmp.w	r9, #0
 800b7f6:	d047      	beq.n	800b888 <__gethex+0x38c>
 800b7f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d015      	beq.n	800b82c <__gethex+0x330>
 800b800:	2b03      	cmp	r3, #3
 800b802:	d017      	beq.n	800b834 <__gethex+0x338>
 800b804:	2b01      	cmp	r3, #1
 800b806:	d109      	bne.n	800b81c <__gethex+0x320>
 800b808:	f019 0f02 	tst.w	r9, #2
 800b80c:	d006      	beq.n	800b81c <__gethex+0x320>
 800b80e:	f8da 3000 	ldr.w	r3, [sl]
 800b812:	ea49 0903 	orr.w	r9, r9, r3
 800b816:	f019 0f01 	tst.w	r9, #1
 800b81a:	d10e      	bne.n	800b83a <__gethex+0x33e>
 800b81c:	f045 0510 	orr.w	r5, r5, #16
 800b820:	e032      	b.n	800b888 <__gethex+0x38c>
 800b822:	f04f 0901 	mov.w	r9, #1
 800b826:	e7d1      	b.n	800b7cc <__gethex+0x2d0>
 800b828:	2501      	movs	r5, #1
 800b82a:	e7e2      	b.n	800b7f2 <__gethex+0x2f6>
 800b82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b82e:	f1c3 0301 	rsb	r3, r3, #1
 800b832:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0f0      	beq.n	800b81c <__gethex+0x320>
 800b83a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b83e:	f104 0314 	add.w	r3, r4, #20
 800b842:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b846:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b84a:	f04f 0c00 	mov.w	ip, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f853 2b04 	ldr.w	r2, [r3], #4
 800b854:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b858:	d01b      	beq.n	800b892 <__gethex+0x396>
 800b85a:	3201      	adds	r2, #1
 800b85c:	6002      	str	r2, [r0, #0]
 800b85e:	2d02      	cmp	r5, #2
 800b860:	f104 0314 	add.w	r3, r4, #20
 800b864:	d13c      	bne.n	800b8e0 <__gethex+0x3e4>
 800b866:	f8d8 2000 	ldr.w	r2, [r8]
 800b86a:	3a01      	subs	r2, #1
 800b86c:	42b2      	cmp	r2, r6
 800b86e:	d109      	bne.n	800b884 <__gethex+0x388>
 800b870:	1171      	asrs	r1, r6, #5
 800b872:	2201      	movs	r2, #1
 800b874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b878:	f006 061f 	and.w	r6, r6, #31
 800b87c:	fa02 f606 	lsl.w	r6, r2, r6
 800b880:	421e      	tst	r6, r3
 800b882:	d13a      	bne.n	800b8fa <__gethex+0x3fe>
 800b884:	f045 0520 	orr.w	r5, r5, #32
 800b888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b88a:	601c      	str	r4, [r3, #0]
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	601f      	str	r7, [r3, #0]
 800b890:	e6b0      	b.n	800b5f4 <__gethex+0xf8>
 800b892:	4299      	cmp	r1, r3
 800b894:	f843 cc04 	str.w	ip, [r3, #-4]
 800b898:	d8d9      	bhi.n	800b84e <__gethex+0x352>
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	459b      	cmp	fp, r3
 800b89e:	db17      	blt.n	800b8d0 <__gethex+0x3d4>
 800b8a0:	6861      	ldr	r1, [r4, #4]
 800b8a2:	9801      	ldr	r0, [sp, #4]
 800b8a4:	3101      	adds	r1, #1
 800b8a6:	f7fe f803 	bl	80098b0 <_Balloc>
 800b8aa:	4681      	mov	r9, r0
 800b8ac:	b918      	cbnz	r0, 800b8b6 <__gethex+0x3ba>
 800b8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800b918 <__gethex+0x41c>)
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	2184      	movs	r1, #132	@ 0x84
 800b8b4:	e6c5      	b.n	800b642 <__gethex+0x146>
 800b8b6:	6922      	ldr	r2, [r4, #16]
 800b8b8:	3202      	adds	r2, #2
 800b8ba:	f104 010c 	add.w	r1, r4, #12
 800b8be:	0092      	lsls	r2, r2, #2
 800b8c0:	300c      	adds	r0, #12
 800b8c2:	f7ff fd6b 	bl	800b39c <memcpy>
 800b8c6:	4621      	mov	r1, r4
 800b8c8:	9801      	ldr	r0, [sp, #4]
 800b8ca:	f7fe f831 	bl	8009930 <_Bfree>
 800b8ce:	464c      	mov	r4, r9
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8d8:	6122      	str	r2, [r4, #16]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	615a      	str	r2, [r3, #20]
 800b8de:	e7be      	b.n	800b85e <__gethex+0x362>
 800b8e0:	6922      	ldr	r2, [r4, #16]
 800b8e2:	455a      	cmp	r2, fp
 800b8e4:	dd0b      	ble.n	800b8fe <__gethex+0x402>
 800b8e6:	2101      	movs	r1, #1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f7ff fd9f 	bl	800b42c <rshift>
 800b8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8f2:	3701      	adds	r7, #1
 800b8f4:	42bb      	cmp	r3, r7
 800b8f6:	f6ff aee0 	blt.w	800b6ba <__gethex+0x1be>
 800b8fa:	2501      	movs	r5, #1
 800b8fc:	e7c2      	b.n	800b884 <__gethex+0x388>
 800b8fe:	f016 061f 	ands.w	r6, r6, #31
 800b902:	d0fa      	beq.n	800b8fa <__gethex+0x3fe>
 800b904:	4453      	add	r3, sl
 800b906:	f1c6 0620 	rsb	r6, r6, #32
 800b90a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b90e:	f7fe f8c1 	bl	8009a94 <__hi0bits>
 800b912:	42b0      	cmp	r0, r6
 800b914:	dbe7      	blt.n	800b8e6 <__gethex+0x3ea>
 800b916:	e7f0      	b.n	800b8fa <__gethex+0x3fe>
 800b918:	0800c1c5 	.word	0x0800c1c5

0800b91c <L_shift>:
 800b91c:	f1c2 0208 	rsb	r2, r2, #8
 800b920:	0092      	lsls	r2, r2, #2
 800b922:	b570      	push	{r4, r5, r6, lr}
 800b924:	f1c2 0620 	rsb	r6, r2, #32
 800b928:	6843      	ldr	r3, [r0, #4]
 800b92a:	6804      	ldr	r4, [r0, #0]
 800b92c:	fa03 f506 	lsl.w	r5, r3, r6
 800b930:	432c      	orrs	r4, r5
 800b932:	40d3      	lsrs	r3, r2
 800b934:	6004      	str	r4, [r0, #0]
 800b936:	f840 3f04 	str.w	r3, [r0, #4]!
 800b93a:	4288      	cmp	r0, r1
 800b93c:	d3f4      	bcc.n	800b928 <L_shift+0xc>
 800b93e:	bd70      	pop	{r4, r5, r6, pc}

0800b940 <__match>:
 800b940:	b530      	push	{r4, r5, lr}
 800b942:	6803      	ldr	r3, [r0, #0]
 800b944:	3301      	adds	r3, #1
 800b946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b94a:	b914      	cbnz	r4, 800b952 <__match+0x12>
 800b94c:	6003      	str	r3, [r0, #0]
 800b94e:	2001      	movs	r0, #1
 800b950:	bd30      	pop	{r4, r5, pc}
 800b952:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b956:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b95a:	2d19      	cmp	r5, #25
 800b95c:	bf98      	it	ls
 800b95e:	3220      	addls	r2, #32
 800b960:	42a2      	cmp	r2, r4
 800b962:	d0f0      	beq.n	800b946 <__match+0x6>
 800b964:	2000      	movs	r0, #0
 800b966:	e7f3      	b.n	800b950 <__match+0x10>

0800b968 <__hexnan>:
 800b968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	680b      	ldr	r3, [r1, #0]
 800b96e:	6801      	ldr	r1, [r0, #0]
 800b970:	115e      	asrs	r6, r3, #5
 800b972:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b976:	f013 031f 	ands.w	r3, r3, #31
 800b97a:	b087      	sub	sp, #28
 800b97c:	bf18      	it	ne
 800b97e:	3604      	addne	r6, #4
 800b980:	2500      	movs	r5, #0
 800b982:	1f37      	subs	r7, r6, #4
 800b984:	4682      	mov	sl, r0
 800b986:	4690      	mov	r8, r2
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b98e:	46b9      	mov	r9, r7
 800b990:	463c      	mov	r4, r7
 800b992:	9502      	str	r5, [sp, #8]
 800b994:	46ab      	mov	fp, r5
 800b996:	784a      	ldrb	r2, [r1, #1]
 800b998:	1c4b      	adds	r3, r1, #1
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	b342      	cbz	r2, 800b9f0 <__hexnan+0x88>
 800b99e:	4610      	mov	r0, r2
 800b9a0:	9105      	str	r1, [sp, #20]
 800b9a2:	9204      	str	r2, [sp, #16]
 800b9a4:	f7ff fd94 	bl	800b4d0 <__hexdig_fun>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	d151      	bne.n	800ba50 <__hexnan+0xe8>
 800b9ac:	9a04      	ldr	r2, [sp, #16]
 800b9ae:	9905      	ldr	r1, [sp, #20]
 800b9b0:	2a20      	cmp	r2, #32
 800b9b2:	d818      	bhi.n	800b9e6 <__hexnan+0x7e>
 800b9b4:	9b02      	ldr	r3, [sp, #8]
 800b9b6:	459b      	cmp	fp, r3
 800b9b8:	dd13      	ble.n	800b9e2 <__hexnan+0x7a>
 800b9ba:	454c      	cmp	r4, r9
 800b9bc:	d206      	bcs.n	800b9cc <__hexnan+0x64>
 800b9be:	2d07      	cmp	r5, #7
 800b9c0:	dc04      	bgt.n	800b9cc <__hexnan+0x64>
 800b9c2:	462a      	mov	r2, r5
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	4620      	mov	r0, r4
 800b9c8:	f7ff ffa8 	bl	800b91c <L_shift>
 800b9cc:	4544      	cmp	r4, r8
 800b9ce:	d952      	bls.n	800ba76 <__hexnan+0x10e>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f1a4 0904 	sub.w	r9, r4, #4
 800b9d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9da:	f8cd b008 	str.w	fp, [sp, #8]
 800b9de:	464c      	mov	r4, r9
 800b9e0:	461d      	mov	r5, r3
 800b9e2:	9903      	ldr	r1, [sp, #12]
 800b9e4:	e7d7      	b.n	800b996 <__hexnan+0x2e>
 800b9e6:	2a29      	cmp	r2, #41	@ 0x29
 800b9e8:	d157      	bne.n	800ba9a <__hexnan+0x132>
 800b9ea:	3102      	adds	r1, #2
 800b9ec:	f8ca 1000 	str.w	r1, [sl]
 800b9f0:	f1bb 0f00 	cmp.w	fp, #0
 800b9f4:	d051      	beq.n	800ba9a <__hexnan+0x132>
 800b9f6:	454c      	cmp	r4, r9
 800b9f8:	d206      	bcs.n	800ba08 <__hexnan+0xa0>
 800b9fa:	2d07      	cmp	r5, #7
 800b9fc:	dc04      	bgt.n	800ba08 <__hexnan+0xa0>
 800b9fe:	462a      	mov	r2, r5
 800ba00:	4649      	mov	r1, r9
 800ba02:	4620      	mov	r0, r4
 800ba04:	f7ff ff8a 	bl	800b91c <L_shift>
 800ba08:	4544      	cmp	r4, r8
 800ba0a:	d936      	bls.n	800ba7a <__hexnan+0x112>
 800ba0c:	f1a8 0204 	sub.w	r2, r8, #4
 800ba10:	4623      	mov	r3, r4
 800ba12:	f853 1b04 	ldr.w	r1, [r3], #4
 800ba16:	f842 1f04 	str.w	r1, [r2, #4]!
 800ba1a:	429f      	cmp	r7, r3
 800ba1c:	d2f9      	bcs.n	800ba12 <__hexnan+0xaa>
 800ba1e:	1b3b      	subs	r3, r7, r4
 800ba20:	f023 0303 	bic.w	r3, r3, #3
 800ba24:	3304      	adds	r3, #4
 800ba26:	3401      	adds	r4, #1
 800ba28:	3e03      	subs	r6, #3
 800ba2a:	42b4      	cmp	r4, r6
 800ba2c:	bf88      	it	hi
 800ba2e:	2304      	movhi	r3, #4
 800ba30:	4443      	add	r3, r8
 800ba32:	2200      	movs	r2, #0
 800ba34:	f843 2b04 	str.w	r2, [r3], #4
 800ba38:	429f      	cmp	r7, r3
 800ba3a:	d2fb      	bcs.n	800ba34 <__hexnan+0xcc>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	b91b      	cbnz	r3, 800ba48 <__hexnan+0xe0>
 800ba40:	4547      	cmp	r7, r8
 800ba42:	d128      	bne.n	800ba96 <__hexnan+0x12e>
 800ba44:	2301      	movs	r3, #1
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	2005      	movs	r0, #5
 800ba4a:	b007      	add	sp, #28
 800ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba50:	3501      	adds	r5, #1
 800ba52:	2d08      	cmp	r5, #8
 800ba54:	f10b 0b01 	add.w	fp, fp, #1
 800ba58:	dd06      	ble.n	800ba68 <__hexnan+0x100>
 800ba5a:	4544      	cmp	r4, r8
 800ba5c:	d9c1      	bls.n	800b9e2 <__hexnan+0x7a>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba64:	2501      	movs	r5, #1
 800ba66:	3c04      	subs	r4, #4
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	f000 000f 	and.w	r0, r0, #15
 800ba6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba72:	6020      	str	r0, [r4, #0]
 800ba74:	e7b5      	b.n	800b9e2 <__hexnan+0x7a>
 800ba76:	2508      	movs	r5, #8
 800ba78:	e7b3      	b.n	800b9e2 <__hexnan+0x7a>
 800ba7a:	9b01      	ldr	r3, [sp, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d0dd      	beq.n	800ba3c <__hexnan+0xd4>
 800ba80:	f1c3 0320 	rsb	r3, r3, #32
 800ba84:	f04f 32ff 	mov.w	r2, #4294967295
 800ba88:	40da      	lsrs	r2, r3
 800ba8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba8e:	4013      	ands	r3, r2
 800ba90:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba94:	e7d2      	b.n	800ba3c <__hexnan+0xd4>
 800ba96:	3f04      	subs	r7, #4
 800ba98:	e7d0      	b.n	800ba3c <__hexnan+0xd4>
 800ba9a:	2004      	movs	r0, #4
 800ba9c:	e7d5      	b.n	800ba4a <__hexnan+0xe2>

0800ba9e <__ascii_mbtowc>:
 800ba9e:	b082      	sub	sp, #8
 800baa0:	b901      	cbnz	r1, 800baa4 <__ascii_mbtowc+0x6>
 800baa2:	a901      	add	r1, sp, #4
 800baa4:	b142      	cbz	r2, 800bab8 <__ascii_mbtowc+0x1a>
 800baa6:	b14b      	cbz	r3, 800babc <__ascii_mbtowc+0x1e>
 800baa8:	7813      	ldrb	r3, [r2, #0]
 800baaa:	600b      	str	r3, [r1, #0]
 800baac:	7812      	ldrb	r2, [r2, #0]
 800baae:	1e10      	subs	r0, r2, #0
 800bab0:	bf18      	it	ne
 800bab2:	2001      	movne	r0, #1
 800bab4:	b002      	add	sp, #8
 800bab6:	4770      	bx	lr
 800bab8:	4610      	mov	r0, r2
 800baba:	e7fb      	b.n	800bab4 <__ascii_mbtowc+0x16>
 800babc:	f06f 0001 	mvn.w	r0, #1
 800bac0:	e7f8      	b.n	800bab4 <__ascii_mbtowc+0x16>

0800bac2 <_realloc_r>:
 800bac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bac6:	4680      	mov	r8, r0
 800bac8:	4615      	mov	r5, r2
 800baca:	460c      	mov	r4, r1
 800bacc:	b921      	cbnz	r1, 800bad8 <_realloc_r+0x16>
 800bace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bad2:	4611      	mov	r1, r2
 800bad4:	f7fd be60 	b.w	8009798 <_malloc_r>
 800bad8:	b92a      	cbnz	r2, 800bae6 <_realloc_r+0x24>
 800bada:	f7fd fde9 	bl	80096b0 <_free_r>
 800bade:	2400      	movs	r4, #0
 800bae0:	4620      	mov	r0, r4
 800bae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bae6:	f000 f840 	bl	800bb6a <_malloc_usable_size_r>
 800baea:	4285      	cmp	r5, r0
 800baec:	4606      	mov	r6, r0
 800baee:	d802      	bhi.n	800baf6 <_realloc_r+0x34>
 800baf0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800baf4:	d8f4      	bhi.n	800bae0 <_realloc_r+0x1e>
 800baf6:	4629      	mov	r1, r5
 800baf8:	4640      	mov	r0, r8
 800bafa:	f7fd fe4d 	bl	8009798 <_malloc_r>
 800bafe:	4607      	mov	r7, r0
 800bb00:	2800      	cmp	r0, #0
 800bb02:	d0ec      	beq.n	800bade <_realloc_r+0x1c>
 800bb04:	42b5      	cmp	r5, r6
 800bb06:	462a      	mov	r2, r5
 800bb08:	4621      	mov	r1, r4
 800bb0a:	bf28      	it	cs
 800bb0c:	4632      	movcs	r2, r6
 800bb0e:	f7ff fc45 	bl	800b39c <memcpy>
 800bb12:	4621      	mov	r1, r4
 800bb14:	4640      	mov	r0, r8
 800bb16:	f7fd fdcb 	bl	80096b0 <_free_r>
 800bb1a:	463c      	mov	r4, r7
 800bb1c:	e7e0      	b.n	800bae0 <_realloc_r+0x1e>

0800bb1e <__ascii_wctomb>:
 800bb1e:	4603      	mov	r3, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	b141      	cbz	r1, 800bb36 <__ascii_wctomb+0x18>
 800bb24:	2aff      	cmp	r2, #255	@ 0xff
 800bb26:	d904      	bls.n	800bb32 <__ascii_wctomb+0x14>
 800bb28:	228a      	movs	r2, #138	@ 0x8a
 800bb2a:	601a      	str	r2, [r3, #0]
 800bb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bb30:	4770      	bx	lr
 800bb32:	700a      	strb	r2, [r1, #0]
 800bb34:	2001      	movs	r0, #1
 800bb36:	4770      	bx	lr

0800bb38 <fiprintf>:
 800bb38:	b40e      	push	{r1, r2, r3}
 800bb3a:	b503      	push	{r0, r1, lr}
 800bb3c:	4601      	mov	r1, r0
 800bb3e:	ab03      	add	r3, sp, #12
 800bb40:	4805      	ldr	r0, [pc, #20]	@ (800bb58 <fiprintf+0x20>)
 800bb42:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb46:	6800      	ldr	r0, [r0, #0]
 800bb48:	9301      	str	r3, [sp, #4]
 800bb4a:	f000 f83f 	bl	800bbcc <_vfiprintf_r>
 800bb4e:	b002      	add	sp, #8
 800bb50:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb54:	b003      	add	sp, #12
 800bb56:	4770      	bx	lr
 800bb58:	20000018 	.word	0x20000018

0800bb5c <abort>:
 800bb5c:	b508      	push	{r3, lr}
 800bb5e:	2006      	movs	r0, #6
 800bb60:	f000 fa08 	bl	800bf74 <raise>
 800bb64:	2001      	movs	r0, #1
 800bb66:	f7f7 f99d 	bl	8002ea4 <_exit>

0800bb6a <_malloc_usable_size_r>:
 800bb6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb6e:	1f18      	subs	r0, r3, #4
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bfbc      	itt	lt
 800bb74:	580b      	ldrlt	r3, [r1, r0]
 800bb76:	18c0      	addlt	r0, r0, r3
 800bb78:	4770      	bx	lr

0800bb7a <__sfputc_r>:
 800bb7a:	6893      	ldr	r3, [r2, #8]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	b410      	push	{r4}
 800bb82:	6093      	str	r3, [r2, #8]
 800bb84:	da08      	bge.n	800bb98 <__sfputc_r+0x1e>
 800bb86:	6994      	ldr	r4, [r2, #24]
 800bb88:	42a3      	cmp	r3, r4
 800bb8a:	db01      	blt.n	800bb90 <__sfputc_r+0x16>
 800bb8c:	290a      	cmp	r1, #10
 800bb8e:	d103      	bne.n	800bb98 <__sfputc_r+0x1e>
 800bb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb94:	f000 b932 	b.w	800bdfc <__swbuf_r>
 800bb98:	6813      	ldr	r3, [r2, #0]
 800bb9a:	1c58      	adds	r0, r3, #1
 800bb9c:	6010      	str	r0, [r2, #0]
 800bb9e:	7019      	strb	r1, [r3, #0]
 800bba0:	4608      	mov	r0, r1
 800bba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <__sfputs_r>:
 800bba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbaa:	4606      	mov	r6, r0
 800bbac:	460f      	mov	r7, r1
 800bbae:	4614      	mov	r4, r2
 800bbb0:	18d5      	adds	r5, r2, r3
 800bbb2:	42ac      	cmp	r4, r5
 800bbb4:	d101      	bne.n	800bbba <__sfputs_r+0x12>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e007      	b.n	800bbca <__sfputs_r+0x22>
 800bbba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbbe:	463a      	mov	r2, r7
 800bbc0:	4630      	mov	r0, r6
 800bbc2:	f7ff ffda 	bl	800bb7a <__sfputc_r>
 800bbc6:	1c43      	adds	r3, r0, #1
 800bbc8:	d1f3      	bne.n	800bbb2 <__sfputs_r+0xa>
 800bbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbcc <_vfiprintf_r>:
 800bbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd0:	460d      	mov	r5, r1
 800bbd2:	b09d      	sub	sp, #116	@ 0x74
 800bbd4:	4614      	mov	r4, r2
 800bbd6:	4698      	mov	r8, r3
 800bbd8:	4606      	mov	r6, r0
 800bbda:	b118      	cbz	r0, 800bbe4 <_vfiprintf_r+0x18>
 800bbdc:	6a03      	ldr	r3, [r0, #32]
 800bbde:	b90b      	cbnz	r3, 800bbe4 <_vfiprintf_r+0x18>
 800bbe0:	f7fc fdfa 	bl	80087d8 <__sinit>
 800bbe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe6:	07d9      	lsls	r1, r3, #31
 800bbe8:	d405      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbea:	89ab      	ldrh	r3, [r5, #12]
 800bbec:	059a      	lsls	r2, r3, #22
 800bbee:	d402      	bmi.n	800bbf6 <_vfiprintf_r+0x2a>
 800bbf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbf2:	f7fc ff08 	bl	8008a06 <__retarget_lock_acquire_recursive>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	071b      	lsls	r3, r3, #28
 800bbfa:	d501      	bpl.n	800bc00 <_vfiprintf_r+0x34>
 800bbfc:	692b      	ldr	r3, [r5, #16]
 800bbfe:	b99b      	cbnz	r3, 800bc28 <_vfiprintf_r+0x5c>
 800bc00:	4629      	mov	r1, r5
 800bc02:	4630      	mov	r0, r6
 800bc04:	f000 f938 	bl	800be78 <__swsetup_r>
 800bc08:	b170      	cbz	r0, 800bc28 <_vfiprintf_r+0x5c>
 800bc0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc0c:	07dc      	lsls	r4, r3, #31
 800bc0e:	d504      	bpl.n	800bc1a <_vfiprintf_r+0x4e>
 800bc10:	f04f 30ff 	mov.w	r0, #4294967295
 800bc14:	b01d      	add	sp, #116	@ 0x74
 800bc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1a:	89ab      	ldrh	r3, [r5, #12]
 800bc1c:	0598      	lsls	r0, r3, #22
 800bc1e:	d4f7      	bmi.n	800bc10 <_vfiprintf_r+0x44>
 800bc20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc22:	f7fc fef1 	bl	8008a08 <__retarget_lock_release_recursive>
 800bc26:	e7f3      	b.n	800bc10 <_vfiprintf_r+0x44>
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2c:	2320      	movs	r3, #32
 800bc2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc36:	2330      	movs	r3, #48	@ 0x30
 800bc38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bde8 <_vfiprintf_r+0x21c>
 800bc3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc40:	f04f 0901 	mov.w	r9, #1
 800bc44:	4623      	mov	r3, r4
 800bc46:	469a      	mov	sl, r3
 800bc48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc4c:	b10a      	cbz	r2, 800bc52 <_vfiprintf_r+0x86>
 800bc4e:	2a25      	cmp	r2, #37	@ 0x25
 800bc50:	d1f9      	bne.n	800bc46 <_vfiprintf_r+0x7a>
 800bc52:	ebba 0b04 	subs.w	fp, sl, r4
 800bc56:	d00b      	beq.n	800bc70 <_vfiprintf_r+0xa4>
 800bc58:	465b      	mov	r3, fp
 800bc5a:	4622      	mov	r2, r4
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7ff ffa2 	bl	800bba8 <__sfputs_r>
 800bc64:	3001      	adds	r0, #1
 800bc66:	f000 80a7 	beq.w	800bdb8 <_vfiprintf_r+0x1ec>
 800bc6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc6c:	445a      	add	r2, fp
 800bc6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc70:	f89a 3000 	ldrb.w	r3, [sl]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 809f 	beq.w	800bdb8 <_vfiprintf_r+0x1ec>
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc84:	f10a 0a01 	add.w	sl, sl, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc90:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc92:	4654      	mov	r4, sl
 800bc94:	2205      	movs	r2, #5
 800bc96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9a:	4853      	ldr	r0, [pc, #332]	@ (800bde8 <_vfiprintf_r+0x21c>)
 800bc9c:	f7f4 fa98 	bl	80001d0 <memchr>
 800bca0:	9a04      	ldr	r2, [sp, #16]
 800bca2:	b9d8      	cbnz	r0, 800bcdc <_vfiprintf_r+0x110>
 800bca4:	06d1      	lsls	r1, r2, #27
 800bca6:	bf44      	itt	mi
 800bca8:	2320      	movmi	r3, #32
 800bcaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcae:	0713      	lsls	r3, r2, #28
 800bcb0:	bf44      	itt	mi
 800bcb2:	232b      	movmi	r3, #43	@ 0x2b
 800bcb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcbe:	d015      	beq.n	800bcec <_vfiprintf_r+0x120>
 800bcc0:	9a07      	ldr	r2, [sp, #28]
 800bcc2:	4654      	mov	r4, sl
 800bcc4:	2000      	movs	r0, #0
 800bcc6:	f04f 0c0a 	mov.w	ip, #10
 800bcca:	4621      	mov	r1, r4
 800bccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcd0:	3b30      	subs	r3, #48	@ 0x30
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	d94b      	bls.n	800bd6e <_vfiprintf_r+0x1a2>
 800bcd6:	b1b0      	cbz	r0, 800bd06 <_vfiprintf_r+0x13a>
 800bcd8:	9207      	str	r2, [sp, #28]
 800bcda:	e014      	b.n	800bd06 <_vfiprintf_r+0x13a>
 800bcdc:	eba0 0308 	sub.w	r3, r0, r8
 800bce0:	fa09 f303 	lsl.w	r3, r9, r3
 800bce4:	4313      	orrs	r3, r2
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	46a2      	mov	sl, r4
 800bcea:	e7d2      	b.n	800bc92 <_vfiprintf_r+0xc6>
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	1d19      	adds	r1, r3, #4
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	9103      	str	r1, [sp, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	bfbb      	ittet	lt
 800bcf8:	425b      	neglt	r3, r3
 800bcfa:	f042 0202 	orrlt.w	r2, r2, #2
 800bcfe:	9307      	strge	r3, [sp, #28]
 800bd00:	9307      	strlt	r3, [sp, #28]
 800bd02:	bfb8      	it	lt
 800bd04:	9204      	strlt	r2, [sp, #16]
 800bd06:	7823      	ldrb	r3, [r4, #0]
 800bd08:	2b2e      	cmp	r3, #46	@ 0x2e
 800bd0a:	d10a      	bne.n	800bd22 <_vfiprintf_r+0x156>
 800bd0c:	7863      	ldrb	r3, [r4, #1]
 800bd0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd10:	d132      	bne.n	800bd78 <_vfiprintf_r+0x1ac>
 800bd12:	9b03      	ldr	r3, [sp, #12]
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	9203      	str	r2, [sp, #12]
 800bd1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd1e:	3402      	adds	r4, #2
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bdf8 <_vfiprintf_r+0x22c>
 800bd26:	7821      	ldrb	r1, [r4, #0]
 800bd28:	2203      	movs	r2, #3
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	f7f4 fa50 	bl	80001d0 <memchr>
 800bd30:	b138      	cbz	r0, 800bd42 <_vfiprintf_r+0x176>
 800bd32:	9b04      	ldr	r3, [sp, #16]
 800bd34:	eba0 000a 	sub.w	r0, r0, sl
 800bd38:	2240      	movs	r2, #64	@ 0x40
 800bd3a:	4082      	lsls	r2, r0
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	3401      	adds	r4, #1
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd46:	4829      	ldr	r0, [pc, #164]	@ (800bdec <_vfiprintf_r+0x220>)
 800bd48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd4c:	2206      	movs	r2, #6
 800bd4e:	f7f4 fa3f 	bl	80001d0 <memchr>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d03f      	beq.n	800bdd6 <_vfiprintf_r+0x20a>
 800bd56:	4b26      	ldr	r3, [pc, #152]	@ (800bdf0 <_vfiprintf_r+0x224>)
 800bd58:	bb1b      	cbnz	r3, 800bda2 <_vfiprintf_r+0x1d6>
 800bd5a:	9b03      	ldr	r3, [sp, #12]
 800bd5c:	3307      	adds	r3, #7
 800bd5e:	f023 0307 	bic.w	r3, r3, #7
 800bd62:	3308      	adds	r3, #8
 800bd64:	9303      	str	r3, [sp, #12]
 800bd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd68:	443b      	add	r3, r7
 800bd6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd6c:	e76a      	b.n	800bc44 <_vfiprintf_r+0x78>
 800bd6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd72:	460c      	mov	r4, r1
 800bd74:	2001      	movs	r0, #1
 800bd76:	e7a8      	b.n	800bcca <_vfiprintf_r+0xfe>
 800bd78:	2300      	movs	r3, #0
 800bd7a:	3401      	adds	r4, #1
 800bd7c:	9305      	str	r3, [sp, #20]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	f04f 0c0a 	mov.w	ip, #10
 800bd84:	4620      	mov	r0, r4
 800bd86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd8a:	3a30      	subs	r2, #48	@ 0x30
 800bd8c:	2a09      	cmp	r2, #9
 800bd8e:	d903      	bls.n	800bd98 <_vfiprintf_r+0x1cc>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d0c6      	beq.n	800bd22 <_vfiprintf_r+0x156>
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	e7c4      	b.n	800bd22 <_vfiprintf_r+0x156>
 800bd98:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e7f0      	b.n	800bd84 <_vfiprintf_r+0x1b8>
 800bda2:	ab03      	add	r3, sp, #12
 800bda4:	9300      	str	r3, [sp, #0]
 800bda6:	462a      	mov	r2, r5
 800bda8:	4b12      	ldr	r3, [pc, #72]	@ (800bdf4 <_vfiprintf_r+0x228>)
 800bdaa:	a904      	add	r1, sp, #16
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7fb febb 	bl	8007b28 <_printf_float>
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	1c78      	adds	r0, r7, #1
 800bdb6:	d1d6      	bne.n	800bd66 <_vfiprintf_r+0x19a>
 800bdb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdba:	07d9      	lsls	r1, r3, #31
 800bdbc:	d405      	bmi.n	800bdca <_vfiprintf_r+0x1fe>
 800bdbe:	89ab      	ldrh	r3, [r5, #12]
 800bdc0:	059a      	lsls	r2, r3, #22
 800bdc2:	d402      	bmi.n	800bdca <_vfiprintf_r+0x1fe>
 800bdc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bdc6:	f7fc fe1f 	bl	8008a08 <__retarget_lock_release_recursive>
 800bdca:	89ab      	ldrh	r3, [r5, #12]
 800bdcc:	065b      	lsls	r3, r3, #25
 800bdce:	f53f af1f 	bmi.w	800bc10 <_vfiprintf_r+0x44>
 800bdd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdd4:	e71e      	b.n	800bc14 <_vfiprintf_r+0x48>
 800bdd6:	ab03      	add	r3, sp, #12
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	462a      	mov	r2, r5
 800bddc:	4b05      	ldr	r3, [pc, #20]	@ (800bdf4 <_vfiprintf_r+0x228>)
 800bdde:	a904      	add	r1, sp, #16
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7fc f939 	bl	8008058 <_printf_i>
 800bde6:	e7e4      	b.n	800bdb2 <_vfiprintf_r+0x1e6>
 800bde8:	0800c489 	.word	0x0800c489
 800bdec:	0800c493 	.word	0x0800c493
 800bdf0:	08007b29 	.word	0x08007b29
 800bdf4:	0800bba9 	.word	0x0800bba9
 800bdf8:	0800c48f 	.word	0x0800c48f

0800bdfc <__swbuf_r>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	460e      	mov	r6, r1
 800be00:	4614      	mov	r4, r2
 800be02:	4605      	mov	r5, r0
 800be04:	b118      	cbz	r0, 800be0e <__swbuf_r+0x12>
 800be06:	6a03      	ldr	r3, [r0, #32]
 800be08:	b90b      	cbnz	r3, 800be0e <__swbuf_r+0x12>
 800be0a:	f7fc fce5 	bl	80087d8 <__sinit>
 800be0e:	69a3      	ldr	r3, [r4, #24]
 800be10:	60a3      	str	r3, [r4, #8]
 800be12:	89a3      	ldrh	r3, [r4, #12]
 800be14:	071a      	lsls	r2, r3, #28
 800be16:	d501      	bpl.n	800be1c <__swbuf_r+0x20>
 800be18:	6923      	ldr	r3, [r4, #16]
 800be1a:	b943      	cbnz	r3, 800be2e <__swbuf_r+0x32>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4628      	mov	r0, r5
 800be20:	f000 f82a 	bl	800be78 <__swsetup_r>
 800be24:	b118      	cbz	r0, 800be2e <__swbuf_r+0x32>
 800be26:	f04f 37ff 	mov.w	r7, #4294967295
 800be2a:	4638      	mov	r0, r7
 800be2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	6922      	ldr	r2, [r4, #16]
 800be32:	1a98      	subs	r0, r3, r2
 800be34:	6963      	ldr	r3, [r4, #20]
 800be36:	b2f6      	uxtb	r6, r6
 800be38:	4283      	cmp	r3, r0
 800be3a:	4637      	mov	r7, r6
 800be3c:	dc05      	bgt.n	800be4a <__swbuf_r+0x4e>
 800be3e:	4621      	mov	r1, r4
 800be40:	4628      	mov	r0, r5
 800be42:	f7ff fa47 	bl	800b2d4 <_fflush_r>
 800be46:	2800      	cmp	r0, #0
 800be48:	d1ed      	bne.n	800be26 <__swbuf_r+0x2a>
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	3b01      	subs	r3, #1
 800be4e:	60a3      	str	r3, [r4, #8]
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	1c5a      	adds	r2, r3, #1
 800be54:	6022      	str	r2, [r4, #0]
 800be56:	701e      	strb	r6, [r3, #0]
 800be58:	6962      	ldr	r2, [r4, #20]
 800be5a:	1c43      	adds	r3, r0, #1
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d004      	beq.n	800be6a <__swbuf_r+0x6e>
 800be60:	89a3      	ldrh	r3, [r4, #12]
 800be62:	07db      	lsls	r3, r3, #31
 800be64:	d5e1      	bpl.n	800be2a <__swbuf_r+0x2e>
 800be66:	2e0a      	cmp	r6, #10
 800be68:	d1df      	bne.n	800be2a <__swbuf_r+0x2e>
 800be6a:	4621      	mov	r1, r4
 800be6c:	4628      	mov	r0, r5
 800be6e:	f7ff fa31 	bl	800b2d4 <_fflush_r>
 800be72:	2800      	cmp	r0, #0
 800be74:	d0d9      	beq.n	800be2a <__swbuf_r+0x2e>
 800be76:	e7d6      	b.n	800be26 <__swbuf_r+0x2a>

0800be78 <__swsetup_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4b29      	ldr	r3, [pc, #164]	@ (800bf20 <__swsetup_r+0xa8>)
 800be7c:	4605      	mov	r5, r0
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	460c      	mov	r4, r1
 800be82:	b118      	cbz	r0, 800be8c <__swsetup_r+0x14>
 800be84:	6a03      	ldr	r3, [r0, #32]
 800be86:	b90b      	cbnz	r3, 800be8c <__swsetup_r+0x14>
 800be88:	f7fc fca6 	bl	80087d8 <__sinit>
 800be8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be90:	0719      	lsls	r1, r3, #28
 800be92:	d422      	bmi.n	800beda <__swsetup_r+0x62>
 800be94:	06da      	lsls	r2, r3, #27
 800be96:	d407      	bmi.n	800bea8 <__swsetup_r+0x30>
 800be98:	2209      	movs	r2, #9
 800be9a:	602a      	str	r2, [r5, #0]
 800be9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bea0:	81a3      	strh	r3, [r4, #12]
 800bea2:	f04f 30ff 	mov.w	r0, #4294967295
 800bea6:	e033      	b.n	800bf10 <__swsetup_r+0x98>
 800bea8:	0758      	lsls	r0, r3, #29
 800beaa:	d512      	bpl.n	800bed2 <__swsetup_r+0x5a>
 800beac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800beae:	b141      	cbz	r1, 800bec2 <__swsetup_r+0x4a>
 800beb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beb4:	4299      	cmp	r1, r3
 800beb6:	d002      	beq.n	800bebe <__swsetup_r+0x46>
 800beb8:	4628      	mov	r0, r5
 800beba:	f7fd fbf9 	bl	80096b0 <_free_r>
 800bebe:	2300      	movs	r3, #0
 800bec0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bec2:	89a3      	ldrh	r3, [r4, #12]
 800bec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bec8:	81a3      	strh	r3, [r4, #12]
 800beca:	2300      	movs	r3, #0
 800becc:	6063      	str	r3, [r4, #4]
 800bece:	6923      	ldr	r3, [r4, #16]
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	89a3      	ldrh	r3, [r4, #12]
 800bed4:	f043 0308 	orr.w	r3, r3, #8
 800bed8:	81a3      	strh	r3, [r4, #12]
 800beda:	6923      	ldr	r3, [r4, #16]
 800bedc:	b94b      	cbnz	r3, 800bef2 <__swsetup_r+0x7a>
 800bede:	89a3      	ldrh	r3, [r4, #12]
 800bee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bee8:	d003      	beq.n	800bef2 <__swsetup_r+0x7a>
 800beea:	4621      	mov	r1, r4
 800beec:	4628      	mov	r0, r5
 800beee:	f000 f883 	bl	800bff8 <__smakebuf_r>
 800bef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bef6:	f013 0201 	ands.w	r2, r3, #1
 800befa:	d00a      	beq.n	800bf12 <__swsetup_r+0x9a>
 800befc:	2200      	movs	r2, #0
 800befe:	60a2      	str	r2, [r4, #8]
 800bf00:	6962      	ldr	r2, [r4, #20]
 800bf02:	4252      	negs	r2, r2
 800bf04:	61a2      	str	r2, [r4, #24]
 800bf06:	6922      	ldr	r2, [r4, #16]
 800bf08:	b942      	cbnz	r2, 800bf1c <__swsetup_r+0xa4>
 800bf0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bf0e:	d1c5      	bne.n	800be9c <__swsetup_r+0x24>
 800bf10:	bd38      	pop	{r3, r4, r5, pc}
 800bf12:	0799      	lsls	r1, r3, #30
 800bf14:	bf58      	it	pl
 800bf16:	6962      	ldrpl	r2, [r4, #20]
 800bf18:	60a2      	str	r2, [r4, #8]
 800bf1a:	e7f4      	b.n	800bf06 <__swsetup_r+0x8e>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e7f7      	b.n	800bf10 <__swsetup_r+0x98>
 800bf20:	20000018 	.word	0x20000018

0800bf24 <_raise_r>:
 800bf24:	291f      	cmp	r1, #31
 800bf26:	b538      	push	{r3, r4, r5, lr}
 800bf28:	4605      	mov	r5, r0
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	d904      	bls.n	800bf38 <_raise_r+0x14>
 800bf2e:	2316      	movs	r3, #22
 800bf30:	6003      	str	r3, [r0, #0]
 800bf32:	f04f 30ff 	mov.w	r0, #4294967295
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bf3a:	b112      	cbz	r2, 800bf42 <_raise_r+0x1e>
 800bf3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf40:	b94b      	cbnz	r3, 800bf56 <_raise_r+0x32>
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 f830 	bl	800bfa8 <_getpid_r>
 800bf48:	4622      	mov	r2, r4
 800bf4a:	4601      	mov	r1, r0
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf52:	f000 b817 	b.w	800bf84 <_kill_r>
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d00a      	beq.n	800bf70 <_raise_r+0x4c>
 800bf5a:	1c59      	adds	r1, r3, #1
 800bf5c:	d103      	bne.n	800bf66 <_raise_r+0x42>
 800bf5e:	2316      	movs	r3, #22
 800bf60:	6003      	str	r3, [r0, #0]
 800bf62:	2001      	movs	r0, #1
 800bf64:	e7e7      	b.n	800bf36 <_raise_r+0x12>
 800bf66:	2100      	movs	r1, #0
 800bf68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4798      	blx	r3
 800bf70:	2000      	movs	r0, #0
 800bf72:	e7e0      	b.n	800bf36 <_raise_r+0x12>

0800bf74 <raise>:
 800bf74:	4b02      	ldr	r3, [pc, #8]	@ (800bf80 <raise+0xc>)
 800bf76:	4601      	mov	r1, r0
 800bf78:	6818      	ldr	r0, [r3, #0]
 800bf7a:	f7ff bfd3 	b.w	800bf24 <_raise_r>
 800bf7e:	bf00      	nop
 800bf80:	20000018 	.word	0x20000018

0800bf84 <_kill_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d07      	ldr	r5, [pc, #28]	@ (800bfa4 <_kill_r+0x20>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	4611      	mov	r1, r2
 800bf90:	602b      	str	r3, [r5, #0]
 800bf92:	f7f6 ff77 	bl	8002e84 <_kill>
 800bf96:	1c43      	adds	r3, r0, #1
 800bf98:	d102      	bne.n	800bfa0 <_kill_r+0x1c>
 800bf9a:	682b      	ldr	r3, [r5, #0]
 800bf9c:	b103      	cbz	r3, 800bfa0 <_kill_r+0x1c>
 800bf9e:	6023      	str	r3, [r4, #0]
 800bfa0:	bd38      	pop	{r3, r4, r5, pc}
 800bfa2:	bf00      	nop
 800bfa4:	20000a48 	.word	0x20000a48

0800bfa8 <_getpid_r>:
 800bfa8:	f7f6 bf64 	b.w	8002e74 <_getpid>

0800bfac <__swhatbuf_r>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	460c      	mov	r4, r1
 800bfb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb4:	2900      	cmp	r1, #0
 800bfb6:	b096      	sub	sp, #88	@ 0x58
 800bfb8:	4615      	mov	r5, r2
 800bfba:	461e      	mov	r6, r3
 800bfbc:	da0d      	bge.n	800bfda <__swhatbuf_r+0x2e>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfc4:	f04f 0100 	mov.w	r1, #0
 800bfc8:	bf14      	ite	ne
 800bfca:	2340      	movne	r3, #64	@ 0x40
 800bfcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	6031      	str	r1, [r6, #0]
 800bfd4:	602b      	str	r3, [r5, #0]
 800bfd6:	b016      	add	sp, #88	@ 0x58
 800bfd8:	bd70      	pop	{r4, r5, r6, pc}
 800bfda:	466a      	mov	r2, sp
 800bfdc:	f000 f848 	bl	800c070 <_fstat_r>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	dbec      	blt.n	800bfbe <__swhatbuf_r+0x12>
 800bfe4:	9901      	ldr	r1, [sp, #4]
 800bfe6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bfee:	4259      	negs	r1, r3
 800bff0:	4159      	adcs	r1, r3
 800bff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bff6:	e7eb      	b.n	800bfd0 <__swhatbuf_r+0x24>

0800bff8 <__smakebuf_r>:
 800bff8:	898b      	ldrh	r3, [r1, #12]
 800bffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bffc:	079d      	lsls	r5, r3, #30
 800bffe:	4606      	mov	r6, r0
 800c000:	460c      	mov	r4, r1
 800c002:	d507      	bpl.n	800c014 <__smakebuf_r+0x1c>
 800c004:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	6123      	str	r3, [r4, #16]
 800c00c:	2301      	movs	r3, #1
 800c00e:	6163      	str	r3, [r4, #20]
 800c010:	b003      	add	sp, #12
 800c012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c014:	ab01      	add	r3, sp, #4
 800c016:	466a      	mov	r2, sp
 800c018:	f7ff ffc8 	bl	800bfac <__swhatbuf_r>
 800c01c:	9f00      	ldr	r7, [sp, #0]
 800c01e:	4605      	mov	r5, r0
 800c020:	4639      	mov	r1, r7
 800c022:	4630      	mov	r0, r6
 800c024:	f7fd fbb8 	bl	8009798 <_malloc_r>
 800c028:	b948      	cbnz	r0, 800c03e <__smakebuf_r+0x46>
 800c02a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02e:	059a      	lsls	r2, r3, #22
 800c030:	d4ee      	bmi.n	800c010 <__smakebuf_r+0x18>
 800c032:	f023 0303 	bic.w	r3, r3, #3
 800c036:	f043 0302 	orr.w	r3, r3, #2
 800c03a:	81a3      	strh	r3, [r4, #12]
 800c03c:	e7e2      	b.n	800c004 <__smakebuf_r+0xc>
 800c03e:	89a3      	ldrh	r3, [r4, #12]
 800c040:	6020      	str	r0, [r4, #0]
 800c042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c046:	81a3      	strh	r3, [r4, #12]
 800c048:	9b01      	ldr	r3, [sp, #4]
 800c04a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c04e:	b15b      	cbz	r3, 800c068 <__smakebuf_r+0x70>
 800c050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c054:	4630      	mov	r0, r6
 800c056:	f000 f81d 	bl	800c094 <_isatty_r>
 800c05a:	b128      	cbz	r0, 800c068 <__smakebuf_r+0x70>
 800c05c:	89a3      	ldrh	r3, [r4, #12]
 800c05e:	f023 0303 	bic.w	r3, r3, #3
 800c062:	f043 0301 	orr.w	r3, r3, #1
 800c066:	81a3      	strh	r3, [r4, #12]
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	431d      	orrs	r5, r3
 800c06c:	81a5      	strh	r5, [r4, #12]
 800c06e:	e7cf      	b.n	800c010 <__smakebuf_r+0x18>

0800c070 <_fstat_r>:
 800c070:	b538      	push	{r3, r4, r5, lr}
 800c072:	4d07      	ldr	r5, [pc, #28]	@ (800c090 <_fstat_r+0x20>)
 800c074:	2300      	movs	r3, #0
 800c076:	4604      	mov	r4, r0
 800c078:	4608      	mov	r0, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	602b      	str	r3, [r5, #0]
 800c07e:	f7f6 ff61 	bl	8002f44 <_fstat>
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	d102      	bne.n	800c08c <_fstat_r+0x1c>
 800c086:	682b      	ldr	r3, [r5, #0]
 800c088:	b103      	cbz	r3, 800c08c <_fstat_r+0x1c>
 800c08a:	6023      	str	r3, [r4, #0]
 800c08c:	bd38      	pop	{r3, r4, r5, pc}
 800c08e:	bf00      	nop
 800c090:	20000a48 	.word	0x20000a48

0800c094 <_isatty_r>:
 800c094:	b538      	push	{r3, r4, r5, lr}
 800c096:	4d06      	ldr	r5, [pc, #24]	@ (800c0b0 <_isatty_r+0x1c>)
 800c098:	2300      	movs	r3, #0
 800c09a:	4604      	mov	r4, r0
 800c09c:	4608      	mov	r0, r1
 800c09e:	602b      	str	r3, [r5, #0]
 800c0a0:	f7f6 ff60 	bl	8002f64 <_isatty>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d102      	bne.n	800c0ae <_isatty_r+0x1a>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	b103      	cbz	r3, 800c0ae <_isatty_r+0x1a>
 800c0ac:	6023      	str	r3, [r4, #0]
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	20000a48 	.word	0x20000a48

0800c0b4 <_init>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr

0800c0c0 <_fini>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	bf00      	nop
 800c0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c6:	bc08      	pop	{r3}
 800c0c8:	469e      	mov	lr, r3
 800c0ca:	4770      	bx	lr

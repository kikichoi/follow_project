
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b788  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  0800b918  0800b918  0001b918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf4  0800bcf4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bcf4  0800bcf4  0001bcf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bcfc  0800bcfc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bcfc  0800bcfc  0001bcfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd00  0800bd00  0001bd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bd04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          00000940  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000b18  20000b18  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012906  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002701  00000000  00000000  00032b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  00035250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d15  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023a09  00000000  00000000  00037025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000131e0  00000000  00000000  0005aa2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dd27d  00000000  00000000  0006dc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005870  00000000  00000000  0014ae8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001506fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b900 	.word	0x0800b900

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800b900 	.word	0x0800b900

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a6 	b.w	8000fb0 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff21 	bl	8000acc <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fc97 	bl	80005e8 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc18 	bl	80004f4 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fc8e 	bl	80005e8 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff fad0 	bl	8000278 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <HAL_CAN_RxFifo0MsgPendingCallback>:
unsigned char rx_dma_data4 = 0;


//CAN RECEIVE INT CALLBACK
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	if(hcan -> Instance == CAN1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11d      	bne.n	8001002 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
	{
		//HAL_CAN_Stop(&hcan1);
        RxHeader.StdId = 0;
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
        can_flag = 1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]

        HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	; (8001010 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 8000fda:	f003 fe54 	bl	8004c86 <HAL_CAN_GetRxMessage>

        if(can_test == 0){
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10a      	bne.n	8000ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
        	Voltage =((int)(RxData[3]<<8)|((int)RxData[2])&0xff);
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000fe8:	78db      	ldrb	r3, [r3, #3]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8000fee:	7892      	ldrb	r2, [r2, #2]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8000ff4:	6013      	str	r3, [r2, #0]
            can_test = 1;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
        }
        can_flag = 0;
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
   }
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40006400 	.word	0x40006400
 8001010:	200008b8 	.word	0x200008b8
 8001014:	200009a6 	.word	0x200009a6
 8001018:	200008ec 	.word	0x200008ec
 800101c:	200002e4 	.word	0x200002e4
 8001020:	200009ad 	.word	0x200009ad
 8001024:	200008f4 	.word	0x200008f4

08001028 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM7)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a76      	ldr	r2, [pc, #472]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	f040 864f 	bne.w	8001cda <HAL_TIM_PeriodElapsedCallback+0xcb2>
   {
	   	  start_flag = 1;
 800103c:	4b75      	ldr	r3, [pc, #468]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]
		  motor1_enc_counter = TIM3->CNT;
 8001042:	4b75      	ldr	r3, [pc, #468]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	461a      	mov	r2, r3
 8001048:	4b74      	ldr	r3, [pc, #464]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800104a:	601a      	str	r2, [r3, #0]
		  TIM3->CNT = 0;
 800104c:	4b72      	ldr	r3, [pc, #456]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

		  can_test = 0;
 8001052:	4b73      	ldr	r3, [pc, #460]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
//            real_gyro_yaw = Gyro_yaw;
//            real_yaw_angle = yaw_angle;
//            r_flag = 0;
//        }

		  present_voltage = (double)(((double)(Voltage)) * Voltage_Scale);
 8001058:	4b72      	ldr	r3, [pc, #456]	; (8001224 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa59 	bl	8000514 <__aeabi_i2d>
 8001062:	a367      	add	r3, pc, #412	; (adr r3, 8001200 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001068:	f7ff fabe 	bl	80005e8 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	496d      	ldr	r1, [pc, #436]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001072:	e9c1 2300 	strd	r2, r3, [r1]

		  if(yaw_angle == 0.0)
 8001076:	4b6d      	ldr	r3, [pc, #436]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	f7ff fd18 	bl	8000ab8 <__aeabi_dcmpeq>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_TIM_PeriodElapsedCallback+0x72>
		  {
			  yaw_angle = yaw_angle_pri;
 800108e:	4b68      	ldr	r3, [pc, #416]	; (8001230 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	4965      	ldr	r1, [pc, #404]	; (800122c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001096:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  if((present_voltage >= 30)||(present_voltage <= 10))
 800109a:	4b63      	ldr	r3, [pc, #396]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800109c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b63      	ldr	r3, [pc, #396]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80010a6:	f7ff fd25 	bl	8000af4 <__aeabi_dcmpge>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10a      	bne.n	80010c6 <HAL_TIM_PeriodElapsedCallback+0x9e>
 80010b0:	4b5d      	ldr	r3, [pc, #372]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b5f      	ldr	r3, [pc, #380]	; (8001238 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80010bc:	f7ff fd10 	bl	8000ae0 <__aeabi_dcmple>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0xaa>
		  {
			  present_voltage = present_voltage_pri;
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	4956      	ldr	r1, [pc, #344]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010ce:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  voltage_rate = (double)(present_voltage / VOLTAGE);
 80010d2:	4b55      	ldr	r3, [pc, #340]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	4b58      	ldr	r3, [pc, #352]	; (8001240 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80010de:	f7ff fbad 	bl	800083c <__aeabi_ddiv>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4957      	ldr	r1, [pc, #348]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010e8:	e9c1 2300 	strd	r2, r3, [r1]
		  voltage_rate_up = voltage_rate;
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	4955      	ldr	r1, [pc, #340]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80010f4:	e9c1 2300 	strd	r2, r3, [r1]

		  voltage_rate_yaw =   (double)(present_voltage / VOLTAGE_yaw);
 80010f8:	4b4b      	ldr	r3, [pc, #300]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80010fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fe:	a342      	add	r3, pc, #264	; (adr r3, 8001208 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fb9a 	bl	800083c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	494f      	ldr	r1, [pc, #316]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800110e:	e9c1 2300 	strd	r2, r3, [r1]
		  voltage_rate_up_yaw = voltage_rate_yaw;
 8001112:	4b4e      	ldr	r3, [pc, #312]	; (800124c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	494d      	ldr	r1, [pc, #308]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800111a:	e9c1 2300 	strd	r2, r3, [r1]

		  start_flag_1 ++;
 800111e:	4b4d      	ldr	r3, [pc, #308]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3301      	adds	r3, #1
 8001124:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001126:	6013      	str	r3, [r2, #0]

		  if(start_flag_1 >= 5)
 8001128:	4b4a      	ldr	r3, [pc, #296]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b04      	cmp	r3, #4
 800112e:	dd05      	ble.n	800113c <HAL_TIM_PeriodElapsedCallback+0x114>
		  {
			  start_flag_2 = 1;
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001132:	2201      	movs	r2, #1
 8001134:	601a      	str	r2, [r3, #0]
			  start_flag_1 = 5;
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001138:	2205      	movs	r2, #5
 800113a:	601a      	str	r2, [r3, #0]
		  }

		  if(motor1_enc_counter >= 0 && motor1_enc_counter <= 30000)
 800113c:	4b37      	ldr	r3, [pc, #220]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db09      	blt.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x130>
 8001144:	4b35      	ldr	r3, [pc, #212]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f247 5230 	movw	r2, #30000	; 0x7530
 800114c:	4293      	cmp	r3, r2
 800114e:	dc03      	bgt.n	8001158 <HAL_TIM_PeriodElapsedCallback+0x130>
		  {
			  direction_m1_check  = 1;
 8001150:	4b42      	ldr	r3, [pc, #264]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
 8001156:	e014      	b.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x15a>
		  }
		  else if(motor1_enc_counter <= 65535 && motor1_enc_counter >= 35535)
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001160:	da0f      	bge.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x15a>
 8001162:	4b2e      	ldr	r3, [pc, #184]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f648 22ce 	movw	r2, #35534	; 0x8ace
 800116a:	4293      	cmp	r3, r2
 800116c:	dd09      	ble.n	8001182 <HAL_TIM_PeriodElapsedCallback+0x15a>
		  {
			  motor1_enc_counter = motor1_enc_counter - 65535;
 800116e:	4b2b      	ldr	r3, [pc, #172]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001176:	3bff      	subs	r3, #255	; 0xff
 8001178:	4a28      	ldr	r2, [pc, #160]	; (800121c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800117a:	6013      	str	r3, [r2, #0]
			  direction_m1_check = 0;
 800117c:	4b37      	ldr	r3, [pc, #220]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x234>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
		  }

		  motor2_enc_counter = TIM1->CNT;
 8001182:	4b37      	ldr	r3, [pc, #220]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	461a      	mov	r2, r3
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800118a:	601a      	str	r2, [r3, #0]
		  TIM1->CNT = 0;
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24

		  if(motor2_enc_counter >= 0 && motor2_enc_counter <= 30000)
 8001192:	4b34      	ldr	r3, [pc, #208]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db09      	blt.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x186>
 800119a:	4b32      	ldr	r3, [pc, #200]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f247 5230 	movw	r2, #30000	; 0x7530
 80011a2:	4293      	cmp	r3, r2
 80011a4:	dc03      	bgt.n	80011ae <HAL_TIM_PeriodElapsedCallback+0x186>
		  {
			  direction_m2_check  = 1;
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
 80011ac:	e014      	b.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		  }
		  else if(motor2_enc_counter <= 65535 && motor2_enc_counter >= 35535)
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b6:	da0f      	bge.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f648 22ce 	movw	r2, #35534	; 0x8ace
 80011c0:	4293      	cmp	r3, r2
 80011c2:	dd09      	ble.n	80011d8 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		  {
			  motor2_enc_counter = motor2_enc_counter - 65535;
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80011cc:	3bff      	subs	r3, #255	; 0xff
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80011d0:	6013      	str	r3, [r2, #0]
			  direction_m2_check = 0;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
		  }

		  if(test_linear_data > 3.0)
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011e4:	f7ff fc90 	bl	8000b08 <__aeabi_dcmpgt>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d042      	beq.n	8001274 <HAL_TIM_PeriodElapsedCallback+0x24c>
		  {
			  test_linear_data = 3.0;
 80011ee:	491f      	ldr	r1, [pc, #124]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80011f6:	e9c1 2300 	strd	r2, r3, [r1]
 80011fa:	e04c      	b.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x26e>
 80011fc:	f3af 8000 	nop.w
 8001200:	47ae147b 	.word	0x47ae147b
 8001204:	3f847ae1 	.word	0x3f847ae1
 8001208:	a3d70a3d 	.word	0xa3d70a3d
 800120c:	403a7d70 	.word	0x403a7d70
 8001210:	40001400 	.word	0x40001400
 8001214:	2000074c 	.word	0x2000074c
 8001218:	40000400 	.word	0x40000400
 800121c:	200006e4 	.word	0x200006e4
 8001220:	200009ad 	.word	0x200009ad
 8001224:	200008f4 	.word	0x200008f4
 8001228:	200008f8 	.word	0x200008f8
 800122c:	20000858 	.word	0x20000858
 8001230:	20000870 	.word	0x20000870
 8001234:	403e0000 	.word	0x403e0000
 8001238:	40240000 	.word	0x40240000
 800123c:	20000900 	.word	0x20000900
 8001240:	40380000 	.word	0x40380000
 8001244:	20000908 	.word	0x20000908
 8001248:	20000918 	.word	0x20000918
 800124c:	20000910 	.word	0x20000910
 8001250:	20000920 	.word	0x20000920
 8001254:	20000750 	.word	0x20000750
 8001258:	20000754 	.word	0x20000754
 800125c:	2000069a 	.word	0x2000069a
 8001260:	40010000 	.word	0x40010000
 8001264:	200006f8 	.word	0x200006f8
 8001268:	2000069b 	.word	0x2000069b
 800126c:	20000820 	.word	0x20000820
 8001270:	40080000 	.word	0x40080000
		  }
		  else if(test_linear_data < -3.0)
 8001274:	4bae      	ldr	r3, [pc, #696]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4bad      	ldr	r3, [pc, #692]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001280:	f7ff fc24 	bl	8000acc <__aeabi_dcmplt>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <HAL_TIM_PeriodElapsedCallback+0x26e>
		  {
			  test_linear_data = -3.0;
 800128a:	49a9      	ldr	r1, [pc, #676]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x508>)
 800128c:	f04f 0200 	mov.w	r2, #0
 8001290:	4ba8      	ldr	r3, [pc, #672]	; (8001534 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001292:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  linear_data = test_linear_data;
 8001296:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	49a6      	ldr	r1, [pc, #664]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800129e:	e9c1 2300 	strd	r2, r3, [r1]

		  if(linear_data == 0)
 80012a2:	4ba5      	ldr	r3, [pc, #660]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80012a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 0300 	mov.w	r3, #0
 80012b0:	f7ff fc02 	bl	8000ab8 <__aeabi_dcmpeq>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d021      	beq.n	80012fe <HAL_TIM_PeriodElapsedCallback+0x2d6>
		  {
			  motor1_goal_count = 0;
 80012ba:	49a0      	ldr	r1, [pc, #640]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c1 2300 	strd	r2, r3, [r1]
			  motor2_goal_count = 0;
 80012c8:	499d      	ldr	r1, [pc, #628]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	e9c1 2300 	strd	r2, r3, [r1]

			  pwm_m1 = 0;
 80012d6:	4b9b      	ldr	r3, [pc, #620]	; (8001544 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
			  pwm_m2 = 0;
 80012dc:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
			  goal_rpm_motor1 = 0;
 80012e2:	499a      	ldr	r1, [pc, #616]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x524>)
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	e9c1 2300 	strd	r2, r3, [r1]
			  goal_rpm_motor2 = 0;
 80012f0:	4997      	ldr	r1, [pc, #604]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  if(flag_1 == 1)
 80012fe:	4b95      	ldr	r3, [pc, #596]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x2f0>
		  {
			  flag_1 = 0;
 8001306:	4b93      	ldr	r3, [pc, #588]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]

			  pwm_m1_final = 0;
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <HAL_TIM_PeriodElapsedCallback+0x530>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
			  pwm_m2_final = 0;
 8001312:	4b92      	ldr	r3, [pc, #584]	; (800155c <HAL_TIM_PeriodElapsedCallback+0x534>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
		  }

		  P_gain_1 = P_GAIN_1 * (voltage_rate_up);
 8001318:	4b91      	ldr	r3, [pc, #580]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800131a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	4b90      	ldr	r3, [pc, #576]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001324:	f7ff f960 	bl	80005e8 <__aeabi_dmul>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	498e      	ldr	r1, [pc, #568]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800132e:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_1 = I_GAIN_1 * (voltage_rate_up);
 8001332:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001338:	a375      	add	r3, pc, #468	; (adr r3, 8001510 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	f7ff f953 	bl	80005e8 <__aeabi_dmul>
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4989      	ldr	r1, [pc, #548]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x544>)
 8001348:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_1 = D_GAIN_1 * (voltage_rate_up);
 800134c:	4b84      	ldr	r3, [pc, #528]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800134e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001352:	a371      	add	r3, pc, #452	; (adr r3, 8001518 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f946 	bl	80005e8 <__aeabi_dmul>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4983      	ldr	r1, [pc, #524]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8001362:	e9c1 2300 	strd	r2, r3, [r1]
		  P_gain_2 = P_GAIN_2 * (voltage_rate_up);
 8001366:	4b7e      	ldr	r3, [pc, #504]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	4b7c      	ldr	r3, [pc, #496]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8001372:	f7ff f939 	bl	80005e8 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	497e      	ldr	r1, [pc, #504]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800137c:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_2 = I_GAIN_2 * (voltage_rate_up);
 8001380:	4b77      	ldr	r3, [pc, #476]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8001382:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001386:	a362      	add	r3, pc, #392	; (adr r3, 8001510 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f92c 	bl	80005e8 <__aeabi_dmul>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4978      	ldr	r1, [pc, #480]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8001396:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_2 = D_GAIN_2 * (voltage_rate_up);
 800139a:	4b71      	ldr	r3, [pc, #452]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800139c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a0:	a35d      	add	r3, pc, #372	; (adr r3, 8001518 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f91f 	bl	80005e8 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4973      	ldr	r1, [pc, #460]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x554>)
 80013b0:	e9c1 2300 	strd	r2, r3, [r1]

		  P_gain_YAW = P_GAIN_YAW * (voltage_rate_up_yaw);
 80013b4:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80013b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	4b71      	ldr	r3, [pc, #452]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x55c>)
 80013c0:	f7ff f912 	bl	80005e8 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	496f      	ldr	r1, [pc, #444]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x560>)
 80013ca:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_YAW = I_GAIN_YAW * (voltage_rate_up_yaw);
 80013ce:	4b6c      	ldr	r3, [pc, #432]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80013d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d4:	a352      	add	r3, pc, #328	; (adr r3, 8001520 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	f7ff f905 	bl	80005e8 <__aeabi_dmul>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	496a      	ldr	r1, [pc, #424]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x564>)
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_YAW = D_GAIN_YAW * (voltage_rate_up_yaw);
 80013e8:	4b65      	ldr	r3, [pc, #404]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x558>)
 80013ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	f7fe ff43 	bl	800027c <__adddf3>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4965      	ldr	r1, [pc, #404]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]

		  //linear_data = test_linear_data;

		  //MOTOR1 GOAL RPM
		  goal_rpm_motor1 =((linear_data * 60.0) / (PI * WHEEL_DIAMETER));
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001402:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	4b62      	ldr	r3, [pc, #392]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800140c:	f7ff f8ec 	bl	80005e8 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4610      	mov	r0, r2
 8001416:	4619      	mov	r1, r3
 8001418:	a343      	add	r3, pc, #268	; (adr r3, 8001528 <HAL_TIM_PeriodElapsedCallback+0x500>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff fa0d 	bl	800083c <__aeabi_ddiv>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4949      	ldr	r1, [pc, #292]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x524>)
 8001428:	e9c1 2300 	strd	r2, r3, [r1]
		  motor1_goal_count = ((0.02 * PPR_MOTOR1 * goal_rpm_motor1 * MOTOR_REDUCER) / 60.0); //motor1
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x524>)
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	4b58      	ldr	r3, [pc, #352]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x570>)
 8001438:	f7ff f8d6 	bl	80005e8 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b54      	ldr	r3, [pc, #336]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x574>)
 800144a:	f7ff f8cd 	bl	80005e8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 800145c:	f7ff f9ee 	bl	800083c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4935      	ldr	r1, [pc, #212]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
		  //MOTOR2 GOAL RPM
		  goal_rpm_motor2 =((linear_data * 60.0) / (PI * WHEEL_DIAMETER));
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x510>)
 800146c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 8001476:	f7ff f8b7 	bl	80005e8 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	a329      	add	r3, pc, #164	; (adr r3, 8001528 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f9d8 	bl	800083c <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	492f      	ldr	r1, [pc, #188]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
		  motor2_goal_count = ((0.02 * PPR_MOTOR2 * goal_rpm_motor2 * MOTOR_REDUCER) / 60.0); //motor2
 8001496:	4b2e      	ldr	r3, [pc, #184]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x528>)
 8001498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x570>)
 80014a2:	f7ff f8a1 	bl	80005e8 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x574>)
 80014b4:	f7ff f898 	bl	80005e8 <__aeabi_dmul>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80014c6:	f7ff f9b9 	bl	800083c <__aeabi_ddiv>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	491c      	ldr	r1, [pc, #112]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x518>)
 80014d0:	e9c1 2300 	strd	r2, r3, [r1]
		  prev_linear_data = linear_data;
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_TIM_PeriodElapsedCallback+0x510>)
 80014d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014da:	4931      	ldr	r1, [pc, #196]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x578>)
 80014dc:	e9c1 2300 	strd	r2, r3, [r1]

		  realError_m1 = (motor1_goal_count - motor1_enc_counter);
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <HAL_TIM_PeriodElapsedCallback+0x514>)
 80014e2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x57c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff f812 	bl	8000514 <__aeabi_i2d>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7fe febe 	bl	8000278 <__aeabi_dsub>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4929      	ldr	r1, [pc, #164]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8001502:	e9c1 2300 	strd	r2, r3, [r1]
		  realError_m2 = (motor2_goal_count - motor2_enc_counter);
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001508:	e050      	b.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x584>
 800150a:	bf00      	nop
 800150c:	f3af 8000 	nop.w
 8001510:	47ae147b 	.word	0x47ae147b
 8001514:	3f847ae1 	.word	0x3f847ae1
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f747ae1 	.word	0x3f747ae1
 8001520:	9999999a 	.word	0x9999999a
 8001524:	3fb99999 	.word	0x3fb99999
 8001528:	4f91b8a5 	.word	0x4f91b8a5
 800152c:	3ff1171b 	.word	0x3ff1171b
 8001530:	20000820 	.word	0x20000820
 8001534:	c0080000 	.word	0xc0080000
 8001538:	20000668 	.word	0x20000668
 800153c:	20000678 	.word	0x20000678
 8001540:	20000680 	.word	0x20000680
 8001544:	20000714 	.word	0x20000714
 8001548:	20000718 	.word	0x20000718
 800154c:	20000728 	.word	0x20000728
 8001550:	20000730 	.word	0x20000730
 8001554:	20000710 	.word	0x20000710
 8001558:	2000071c 	.word	0x2000071c
 800155c:	20000720 	.word	0x20000720
 8001560:	20000918 	.word	0x20000918
 8001564:	3fe00000 	.word	0x3fe00000
 8001568:	20000928 	.word	0x20000928
 800156c:	20000930 	.word	0x20000930
 8001570:	20000938 	.word	0x20000938
 8001574:	20000940 	.word	0x20000940
 8001578:	20000948 	.word	0x20000948
 800157c:	20000950 	.word	0x20000950
 8001580:	20000920 	.word	0x20000920
 8001584:	402b0000 	.word	0x402b0000
 8001588:	20000958 	.word	0x20000958
 800158c:	20000960 	.word	0x20000960
 8001590:	20000968 	.word	0x20000968
 8001594:	404e0000 	.word	0x404e0000
 8001598:	40720000 	.word	0x40720000
 800159c:	40350000 	.word	0x40350000
 80015a0:	20000670 	.word	0x20000670
 80015a4:	200006e4 	.word	0x200006e4
 80015a8:	20000768 	.word	0x20000768
 80015ac:	e9d3 4500 	ldrd	r4, r5, [r3]
 80015b0:	4bab      	ldr	r3, [pc, #684]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x838>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffad 	bl	8000514 <__aeabi_i2d>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4620      	mov	r0, r4
 80015c0:	4629      	mov	r1, r5
 80015c2:	f7fe fe59 	bl	8000278 <__aeabi_dsub>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	49a6      	ldr	r1, [pc, #664]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]


		  if(icontrol_cnt >= 50)
 80015d0:	4ba5      	ldr	r3, [pc, #660]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b31      	cmp	r3, #49	; 0x31
 80015d6:	dd0e      	ble.n	80015f6 <HAL_TIM_PeriodElapsedCallback+0x5ce>
		  {
			 icontrol_m1 = 0;
 80015d8:	4ba4      	ldr	r3, [pc, #656]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x844>)
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
			 icontrol_m2 = 0;
 80015e0:	4ba3      	ldr	r3, [pc, #652]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x848>)
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
			 icontrol_yaw = 0;
 80015e8:	4ba2      	ldr	r3, [pc, #648]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
			 icontrol_cnt = 0;
 80015f0:	4b9d      	ldr	r3, [pc, #628]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x840>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
		  }

		  //MOTOR1 PID
		  pcontrol_m1 = P_gain_1  * realError_m1;
 80015f6:	4ba0      	ldr	r3, [pc, #640]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x850>)
 80015f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015fc:	4b9f      	ldr	r3, [pc, #636]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x854>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe fff1 	bl	80005e8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff facd 	bl	8000bac <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a9a      	ldr	r2, [pc, #616]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001616:	6013      	str	r3, [r2, #0]
		  //icontrol_m1 = icontrol_m1 + I_gain_1  * realError_m1 * TIME;
		  dcontrol_m1 = D_gain_1 * (realError_m1 - prev_realError_m1) / TIME;
 8001618:	4b98      	ldr	r3, [pc, #608]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x854>)
 800161a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800161e:	4b99      	ldr	r3, [pc, #612]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ff88 	bl	8000538 <__aeabi_f2d>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4620      	mov	r0, r4
 800162e:	4629      	mov	r1, r5
 8001630:	f7fe fe22 	bl	8000278 <__aeabi_dsub>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	4b92      	ldr	r3, [pc, #584]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x860>)
 800163e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001642:	f7fe ffd1 	bl	80005e8 <__aeabi_dmul>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	a380      	add	r3, pc, #512	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff f8f2 	bl	800083c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f7ff faa4 	bl	8000bac <__aeabi_d2f>
 8001664:	4603      	mov	r3, r0
 8001666:	4a89      	ldr	r2, [pc, #548]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001668:	6013      	str	r3, [r2, #0]
		  prev_realError_m1 = realError_m1;
 800166a:	4b84      	ldr	r3, [pc, #528]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x854>)
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff fa9a 	bl	8000bac <__aeabi_d2f>
 8001678:	4603      	mov	r3, r0
 800167a:	4a82      	ldr	r2, [pc, #520]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 800167c:	6013      	str	r3, [r2, #0]

		  //MOTOR2 PID
		  pcontrol_m2 = P_gain_2  * realError_m2;
 800167e:	4b84      	ldr	r3, [pc, #528]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8001680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001684:	4b77      	ldr	r3, [pc, #476]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7fe ffad 	bl	80005e8 <__aeabi_dmul>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa89 	bl	8000bac <__aeabi_d2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4a7d      	ldr	r2, [pc, #500]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 800169e:	6013      	str	r3, [r2, #0]
		  //icontrol_m2 = icontrol_m2 + I_gain_2  * realError_m2 * TIME;
		  dcontrol_m2 = D_gain_2 * (realError_m2 - prev_realError_m2) / TIME;
 80016a0:	4b70      	ldr	r3, [pc, #448]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80016a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016a6:	4b7c      	ldr	r3, [pc, #496]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff44 	bl	8000538 <__aeabi_f2d>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe fdde 	bl	8000278 <__aeabi_dsub>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	4b75      	ldr	r3, [pc, #468]	; (800189c <HAL_TIM_PeriodElapsedCallback+0x874>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ff8d 	bl	80005e8 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	a35e      	add	r3, pc, #376	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff f8ae 	bl	800083c <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa60 	bl	8000bac <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a6c      	ldr	r2, [pc, #432]	; (80018a0 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80016f0:	6013      	str	r3, [r2, #0]
		  prev_realError_m2 = realError_m2;
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x83c>)
 80016f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff fa56 	bl	8000bac <__aeabi_d2f>
 8001700:	4603      	mov	r3, r0
 8001702:	4a65      	ldr	r2, [pc, #404]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001704:	6013      	str	r3, [r2, #0]


		  //IMU PID
		  Gyro_yaw = Gyro_yaw*0.021;
 8001706:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001708:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170c:	a352      	add	r3, pc, #328	; (adr r3, 8001858 <HAL_TIM_PeriodElapsedCallback+0x830>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7fe ff69 	bl	80005e8 <__aeabi_dmul>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4962      	ldr	r1, [pc, #392]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800171c:	e9c1 2300 	strd	r2, r3, [r1]
		  //gyro_test += Gyro_yaw;
		  realError_yaw = GYRO_YAW_GOAL_test - Gyro_yaw;
 8001720:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001726:	4b5f      	ldr	r3, [pc, #380]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fda4 	bl	8000278 <__aeabi_dsub>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4610      	mov	r0, r2
 8001736:	4619      	mov	r1, r3
 8001738:	f7ff fa38 	bl	8000bac <__aeabi_d2f>
 800173c:	4603      	mov	r3, r0
 800173e:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001740:	6013      	str	r3, [r2, #0]

		  pcontrol_yaw = P_gain_YAW  * realError_yaw;
 8001742:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fef6 	bl	8000538 <__aeabi_f2d>
 800174c:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe ff49 	bl	80005e8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fa25 	bl	8000bac <__aeabi_d2f>
 8001762:	4603      	mov	r3, r0
 8001764:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001766:	6013      	str	r3, [r2, #0]

		  icontrol_yaw = icontrol_yaw + I_gain_YAW  * realError_yaw * TIME;
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe fee3 	bl	8000538 <__aeabi_f2d>
 8001772:	4604      	mov	r4, r0
 8001774:	460d      	mov	r5, r1
 8001776:	4b4d      	ldr	r3, [pc, #308]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fedc 	bl	8000538 <__aeabi_f2d>
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff2f 	bl	80005e8 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	a32f      	add	r3, pc, #188	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe ff26 	bl	80005e8 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe fd6a 	bl	800027c <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f9fc 	bl	8000bac <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a2f      	ldr	r2, [pc, #188]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x84c>)
 80017b8:	6013      	str	r3, [r2, #0]

		  dcontrol_yaw = D_gain_YAW  * (realError_yaw - prev_realError_yaw) / TIME;
 80017ba:	4b3c      	ldr	r3, [pc, #240]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x884>)
 80017bc:	ed93 7a00 	vldr	s14, [r3]
 80017c0:	4b3e      	ldr	r3, [pc, #248]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 80017c2:	edd3 7a00 	vldr	s15, [r3]
 80017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ca:	ee17 0a90 	vmov	r0, s15
 80017ce:	f7fe feb3 	bl	8000538 <__aeabi_f2d>
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe ff06 	bl	80005e8 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	a31a      	add	r3, pc, #104	; (adr r3, 8001850 <HAL_TIM_PeriodElapsedCallback+0x828>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7ff f827 	bl	800083c <__aeabi_ddiv>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4610      	mov	r0, r2
 80017f4:	4619      	mov	r1, r3
 80017f6:	f7ff f9d9 	bl	8000bac <__aeabi_d2f>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4a31      	ldr	r2, [pc, #196]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80017fe:	6013      	str	r3, [r2, #0]

		  prev_realError_yaw = realError_yaw;
 8001800:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001806:	6013      	str	r3, [r2, #0]

		  yaw_angle_pid = pcontrol_yaw + dcontrol_yaw;//+ icontrol_yaw;
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800180a:	ed93 7a00 	vldr	s14, [r3]
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8001810:	edd3 7a00 	vldr	s15, [r3]
 8001814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001818:	ee17 0a90 	vmov	r0, s15
 800181c:	f7fe fe8c 	bl	8000538 <__aeabi_f2d>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4928      	ldr	r1, [pc, #160]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8001826:	e9c1 2300 	strd	r2, r3, [r1]

		  if(yaw_angle_pid >= 500)
 800182a:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800182c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8001836:	f7ff f95d 	bl	8000af4 <__aeabi_dcmpge>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d047      	beq.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x8a8>
		  {
			  yaw_angle_pid = 0;
 8001840:	4921      	ldr	r1, [pc, #132]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9c1 2300 	strd	r2, r3, [r1]
 800184e:	e051      	b.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x8cc>
 8001850:	47ae147b 	.word	0x47ae147b
 8001854:	3f947ae1 	.word	0x3f947ae1
 8001858:	24dd2f1b 	.word	0x24dd2f1b
 800185c:	3f958106 	.word	0x3f958106
 8001860:	200006f8 	.word	0x200006f8
 8001864:	20000780 	.word	0x20000780
 8001868:	200009b0 	.word	0x200009b0
 800186c:	2000075c 	.word	0x2000075c
 8001870:	20000774 	.word	0x20000774
 8001874:	2000078c 	.word	0x2000078c
 8001878:	20000928 	.word	0x20000928
 800187c:	20000768 	.word	0x20000768
 8001880:	20000758 	.word	0x20000758
 8001884:	20000828 	.word	0x20000828
 8001888:	20000938 	.word	0x20000938
 800188c:	20000760 	.word	0x20000760
 8001890:	20000940 	.word	0x20000940
 8001894:	20000770 	.word	0x20000770
 8001898:	2000082c 	.word	0x2000082c
 800189c:	20000950 	.word	0x20000950
 80018a0:	20000778 	.word	0x20000778
 80018a4:	20000840 	.word	0x20000840
 80018a8:	20000690 	.word	0x20000690
 80018ac:	20000794 	.word	0x20000794
 80018b0:	20000958 	.word	0x20000958
 80018b4:	20000788 	.word	0x20000788
 80018b8:	20000960 	.word	0x20000960
 80018bc:	20000798 	.word	0x20000798
 80018c0:	20000968 	.word	0x20000968
 80018c4:	20000790 	.word	0x20000790
 80018c8:	20000860 	.word	0x20000860
 80018cc:	407f4000 	.word	0x407f4000
		  }
		  else if(yaw_angle_pid <= -500)
 80018d0:	4b63      	ldr	r3, [pc, #396]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80018d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d6:	a360      	add	r3, pc, #384	; (adr r3, 8001a58 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7ff f900 	bl	8000ae0 <__aeabi_dcmple>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d006      	beq.n	80018f4 <HAL_TIM_PeriodElapsedCallback+0x8cc>
		  {
			  yaw_angle_pid = 0;
 80018e6:	495e      	ldr	r1, [pc, #376]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  motor1_pid = (pcontrol_m1) + (icontrol_m1) + (dcontrol_m1) - (yaw_angle_pid); //PID SUM
 80018f4:	4b5b      	ldr	r3, [pc, #364]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80018f6:	ed93 7a00 	vldr	s14, [r3]
 80018fa:	4b5b      	ldr	r3, [pc, #364]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001906:	edd3 7a00 	vldr	s15, [r3]
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190e:	ee17 0a90 	vmov	r0, s15
 8001912:	f7fe fe11 	bl	8000538 <__aeabi_f2d>
 8001916:	4b52      	ldr	r3, [pc, #328]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fcac 	bl	8000278 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4952      	ldr	r1, [pc, #328]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
		  motor1_pwm += motor1_pid;
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 800192c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fca1 	bl	800027c <__adddf3>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	494d      	ldr	r1, [pc, #308]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8001940:	e9c1 2300 	strd	r2, r3, [r1]

		  motor2_pid = (pcontrol_m2) + (icontrol_m2) + (dcontrol_m2) + (yaw_angle_pid); //PID SUM
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0xa50>)
 8001946:	ed93 7a00 	vldr	s14, [r3]
 800194a:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001954:	4b4a      	ldr	r3, [pc, #296]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195e:	ee17 0a90 	vmov	r0, s15
 8001962:	f7fe fde9 	bl	8000538 <__aeabi_f2d>
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fc86 	bl	800027c <__adddf3>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4943      	ldr	r1, [pc, #268]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8001976:	e9c1 2300 	strd	r2, r3, [r1]
		  motor2_pwm += motor2_pid;
 800197a:	4b43      	ldr	r3, [pc, #268]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 800197c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001980:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 8001982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001986:	f7fe fc79 	bl	800027c <__adddf3>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	493e      	ldr	r1, [pc, #248]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 8001990:	e9c1 2300 	strd	r2, r3, [r1]

		  pwm_m1 = (motor1_pwm * (3500.0 / 14000.0));
 8001994:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8001996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80019a0:	f7fe fe22 	bl	80005e8 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8b6 	bl	8000b1c <__aeabi_d2iz>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a37      	ldr	r2, [pc, #220]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80019b4:	6013      	str	r3, [r2, #0]
		  pwm_m2 = (motor2_pwm * (3500.0 / 14000.0));
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80019b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b32      	ldr	r3, [pc, #200]	; (8001a8c <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80019c2:	f7fe fe11 	bl	80005e8 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f8a5 	bl	8000b1c <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 80019d6:	6013      	str	r3, [r2, #0]

		  if(pwm_m1 >= 0)
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db10      	blt.n	8001a02 <HAL_TIM_PeriodElapsedCallback+0x9da>
		  {
			  direction_motor1 = 1;
 80019e0:	4b2d      	ldr	r3, [pc, #180]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,direction_motor1); //dir_motor1 setting
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f0:	482a      	ldr	r0, [pc, #168]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80019f2:	f004 fba1 	bl	8006138 <HAL_GPIO_WritePin>
			  pwm_m1_final = (unsigned int)(pwm_m1);
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	461a      	mov	r2, r3
 80019fc:	4b28      	ldr	r3, [pc, #160]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e014      	b.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xa04>
		  }
		  else if(pwm_m1 < 0)
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da10      	bge.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xa04>
		  {
			  direction_motor1 = 0;
 8001a0a:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,direction_motor1); //dir_motor1 setting
 8001a10:	4b21      	ldr	r3, [pc, #132]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a1a:	4820      	ldr	r0, [pc, #128]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8001a1c:	f004 fb8c 	bl	8006138 <HAL_GPIO_WritePin>
			  pwm_m1_final = (unsigned int)(-pwm_m1);
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	425b      	negs	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 8001a2a:	601a      	str	r2, [r3, #0]
		  }
		  if(pwm_m2 >= 0)
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db3b      	blt.n	8001aac <HAL_TIM_PeriodElapsedCallback+0xa84>
		  {
			  direction_motor2 = 1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,direction_motor2); //dir_motor1 setting
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a44:	4815      	ldr	r0, [pc, #84]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0xa74>)
 8001a46:	f004 fb77 	bl	8006138 <HAL_GPIO_WritePin>
			  pwm_m2_final = (unsigned int)(pwm_m2);
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	e03f      	b.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0xaae>
 8001a56:	bf00      	nop
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	c07f4000 	.word	0xc07f4000
 8001a60:	20000860 	.word	0x20000860
 8001a64:	20000758 	.word	0x20000758
 8001a68:	2000075c 	.word	0x2000075c
 8001a6c:	20000760 	.word	0x20000760
 8001a70:	200006e8 	.word	0x200006e8
 8001a74:	200006f0 	.word	0x200006f0
 8001a78:	20000770 	.word	0x20000770
 8001a7c:	20000774 	.word	0x20000774
 8001a80:	20000778 	.word	0x20000778
 8001a84:	20000700 	.word	0x20000700
 8001a88:	20000708 	.word	0x20000708
 8001a8c:	3fd00000 	.word	0x3fd00000
 8001a90:	20000714 	.word	0x20000714
 8001a94:	20000718 	.word	0x20000718
 8001a98:	20000698 	.word	0x20000698
 8001a9c:	40020c00 	.word	0x40020c00
 8001aa0:	2000071c 	.word	0x2000071c
 8001aa4:	20000699 	.word	0x20000699
 8001aa8:	20000720 	.word	0x20000720
		  }
		  else if(pwm_m2 < 0)
 8001aac:	4b98      	ldr	r3, [pc, #608]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	da10      	bge.n	8001ad6 <HAL_TIM_PeriodElapsedCallback+0xaae>
		  {
			  direction_motor2 = 0;
 8001ab4:	4b97      	ldr	r3, [pc, #604]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,direction_motor2); //dir_motor1 setting
 8001aba:	4b96      	ldr	r3, [pc, #600]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0xcec>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ac4:	4894      	ldr	r0, [pc, #592]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 8001ac6:	f004 fb37 	bl	8006138 <HAL_GPIO_WritePin>
			  pwm_m2_final = (unsigned int)(-pwm_m2);
 8001aca:	4b91      	ldr	r3, [pc, #580]	; (8001d10 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	425b      	negs	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b92      	ldr	r3, [pc, #584]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8001ad4:	601a      	str	r2, [r3, #0]
		  }

		  present_rpm_motor1 = (60.0 * motor1_enc_counter) / (0.02 * PPR_MOTOR1 * MOTOR_REDUCER);
 8001ad6:	4b92      	ldr	r3, [pc, #584]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd1a 	bl	8000514 <__aeabi_i2d>
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b8f      	ldr	r3, [pc, #572]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8001ae6:	f7fe fd7f 	bl	80005e8 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	a37d      	add	r3, pc, #500	; (adr r3, 8001ce8 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8001af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af8:	f7fe fea0 	bl	800083c <__aeabi_ddiv>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4989      	ldr	r1, [pc, #548]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8001b02:	e9c1 2300 	strd	r2, r3, [r1]
		  present_rpm_motor2 = (60.0 * motor2_enc_counter) / (0.02 * PPR_MOTOR2 * MOTOR_REDUCER);
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd02 	bl	8000514 <__aeabi_i2d>
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	4b83      	ldr	r3, [pc, #524]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8001b16:	f7fe fd67 	bl	80005e8 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	a371      	add	r3, pc, #452	; (adr r3, 8001ce8 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fe88 	bl	800083c <__aeabi_ddiv>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	497f      	ldr	r1, [pc, #508]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8001b32:	e9c1 2300 	strd	r2, r3, [r1]

		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm_m1_final);
 8001b36:	4b7f      	ldr	r3, [pc, #508]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7f      	ldr	r2, [pc, #508]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2, pwm_m2_final);
 8001b40:	4b7e      	ldr	r3, [pc, #504]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a75      	ldr	r2, [pc, #468]	; (8001d1c <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	639a      	str	r2, [r3, #56]	; 0x38


		  wheel_1 =  motor1_enc_counter*360.0/302400.0;
 8001b4a:	4b75      	ldr	r3, [pc, #468]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fce0 	bl	8000514 <__aeabi_i2d>
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b79      	ldr	r3, [pc, #484]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8001b5a:	f7fe fd45 	bl	80005e8 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4610      	mov	r0, r2
 8001b64:	4619      	mov	r1, r3
 8001b66:	a362      	add	r3, pc, #392	; (adr r3, 8001cf0 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fe66 	bl	800083c <__aeabi_ddiv>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4973      	ldr	r1, [pc, #460]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8001b76:	e9c1 2300 	strd	r2, r3, [r1]
		  wheel_2 =  motor2_enc_counter*360.0/302400.0;
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fcc8 	bl	8000514 <__aeabi_i2d>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b6d      	ldr	r3, [pc, #436]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8001b8a:	f7fe fd2d 	bl	80005e8 <__aeabi_dmul>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	a356      	add	r3, pc, #344	; (adr r3, 8001cf0 <HAL_TIM_PeriodElapsedCallback+0xcc8>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fe4e 	bl	800083c <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4968      	ldr	r1, [pc, #416]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8001ba6:	e9c1 2300 	strd	r2, r3, [r1]

		  wheel_1_distance = WHEEL_RADIUS*wheel_1*2*PI/360.0;
 8001baa:	4b66      	ldr	r3, [pc, #408]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8001bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb0:	a351      	add	r3, pc, #324	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8001bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb6:	f7fe fd17 	bl	80005e8 <__aeabi_dmul>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	f7fe fb59 	bl	800027c <__adddf3>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	a34b      	add	r3, pc, #300	; (adr r3, 8001d00 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 8001bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd8:	f7fe fd06 	bl	80005e8 <__aeabi_dmul>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8001bea:	f7fe fe27 	bl	800083c <__aeabi_ddiv>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4956      	ldr	r1, [pc, #344]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8001bf4:	e9c1 2300 	strd	r2, r3, [r1]
		  wheel_2_distance = WHEEL_RADIUS*wheel_2*2*PI/360.0;
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 8001bfa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfe:	a33e      	add	r3, pc, #248	; (adr r3, 8001cf8 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fcf0 	bl	80005e8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	f7fe fb32 	bl	800027c <__adddf3>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	a337      	add	r3, pc, #220	; (adr r3, 8001d00 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	f7fe fcdf 	bl	80005e8 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8001c38:	f7fe fe00 	bl	800083c <__aeabi_ddiv>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4943      	ldr	r1, [pc, #268]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8001c42:	e9c1 2300 	strd	r2, r3, [r1]

		  delta_s = (wheel_1_distance+wheel_2_distance)/2*100000;
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8001c48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 8001c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c52:	f7fe fb13 	bl	800027c <__adddf3>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c66:	f7fe fde9 	bl	800083c <__aeabi_ddiv>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	a325      	add	r3, pc, #148	; (adr r3, 8001d08 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fcb6 	bl	80005e8 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4934      	ldr	r1, [pc, #208]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]

		  send_motor_data(0x02,0x06);
 8001c86:	2106      	movs	r1, #6
 8001c88:	2002      	movs	r0, #2
 8001c8a:	f000 f8b5 	bl	8001df8 <send_motor_data>


		  motor1_enc_counter = 0;
 8001c8e:	4b24      	ldr	r3, [pc, #144]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
		  motor2_enc_counter = 0;
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0xd04>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
		  receive_yaw_flag_1 = 0;
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
		  receive_yaw_flag = 0;
 8001ca0:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0xd34>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]

		  icontrol_cnt++;
 8001ca6:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	4a2c      	ldr	r2, [pc, #176]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8001cae:	6013      	str	r3, [r2, #0]
		  present_voltage_pri = present_voltage;
 8001cb0:	4b2c      	ldr	r3, [pc, #176]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8001cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb6:	492c      	ldr	r1, [pc, #176]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]

		  yaw_angle_pri = yaw_angle;
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	492b      	ldr	r1, [pc, #172]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8001cc4:	e9c1 2300 	strd	r2, r3, [r1]
		  Gyro_yaw_pri = Gyro_yaw;
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	492a      	ldr	r1, [pc, #168]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8001cd0:	e9c1 2300 	strd	r2, r3, [r1]

		  //HAL_CAN_Start(&hcan1);
		  start_flag = 0;
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
		  //receive_yaw_flag = 1;
   }
}
 8001cda:	bf00      	nop
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	40b7a000 	.word	0x40b7a000
 8001cf0:	00000000 	.word	0x00000000
 8001cf4:	41127500 	.word	0x41127500
 8001cf8:	5c28f5c3 	.word	0x5c28f5c3
 8001cfc:	3fc5c28f 	.word	0x3fc5c28f
 8001d00:	fc8b007a 	.word	0xfc8b007a
 8001d04:	400921fa 	.word	0x400921fa
 8001d08:	00000000 	.word	0x00000000
 8001d0c:	40f86a00 	.word	0x40f86a00
 8001d10:	20000718 	.word	0x20000718
 8001d14:	20000699 	.word	0x20000699
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	20000720 	.word	0x20000720
 8001d20:	200006e4 	.word	0x200006e4
 8001d24:	404e0000 	.word	0x404e0000
 8001d28:	20000738 	.word	0x20000738
 8001d2c:	200006f8 	.word	0x200006f8
 8001d30:	20000740 	.word	0x20000740
 8001d34:	2000039c 	.word	0x2000039c
 8001d38:	2000071c 	.word	0x2000071c
 8001d3c:	20000474 	.word	0x20000474
 8001d40:	40768000 	.word	0x40768000
 8001d44:	200006a0 	.word	0x200006a0
 8001d48:	200006a8 	.word	0x200006a8
 8001d4c:	200006b0 	.word	0x200006b0
 8001d50:	200006b8 	.word	0x200006b8
 8001d54:	200006c0 	.word	0x200006c0
 8001d58:	2000081e 	.word	0x2000081e
 8001d5c:	2000081d 	.word	0x2000081d
 8001d60:	200009b0 	.word	0x200009b0
 8001d64:	200008f8 	.word	0x200008f8
 8001d68:	20000900 	.word	0x20000900
 8001d6c:	20000858 	.word	0x20000858
 8001d70:	20000870 	.word	0x20000870
 8001d74:	20000840 	.word	0x20000840
 8001d78:	20000868 	.word	0x20000868
 8001d7c:	2000074c 	.word	0x2000074c

08001d80 <calc_crc16>:

//CRC-16 function
unsigned short calc_crc16(unsigned char *data, int len) {
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
    unsigned short crc = 0xFFFF;
 8001d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8e:	82fb      	strh	r3, [r7, #22]
    int i, j;
    for (i = 0; i < len; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e022      	b.n	8001ddc <calc_crc16+0x5c>
        crc ^= data[i];
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	8afb      	ldrh	r3, [r7, #22]
 8001da2:	4053      	eors	r3, r2
 8001da4:	82fb      	strh	r3, [r7, #22]

        for (j = 0; j < 8; j++) {
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	e011      	b.n	8001dd0 <calc_crc16+0x50>
            if (crc & 0x0001) {
 8001dac:	8afb      	ldrh	r3, [r7, #22]
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <calc_crc16+0x44>
                crc = (crc >> 1) ^ 0xA001;
 8001db6:	8afb      	ldrh	r3, [r7, #22]
 8001db8:	085b      	lsrs	r3, r3, #1
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <calc_crc16+0x74>)
 8001dbe:	4053      	eors	r3, r2
 8001dc0:	82fb      	strh	r3, [r7, #22]
 8001dc2:	e002      	b.n	8001dca <calc_crc16+0x4a>
            } else {
                crc = crc >> 1;
 8001dc4:	8afb      	ldrh	r3, [r7, #22]
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	82fb      	strh	r3, [r7, #22]
        for (j = 0; j < 8; j++) {
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b07      	cmp	r3, #7
 8001dd4:	ddea      	ble.n	8001dac <calc_crc16+0x2c>
    for (i = 0; i < len; i++) {
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	dbd8      	blt.n	8001d96 <calc_crc16+0x16>
            }
        }
    }
    return crc;
 8001de4:	8afb      	ldrh	r3, [r7, #22]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	ffffa001 	.word	0xffffa001

08001df8 <send_motor_data>:



void send_motor_data(char function, char length)
{
 8001df8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	460a      	mov	r2, r1
 8001e04:	71fb      	strb	r3, [r7, #7]
 8001e06:	4613      	mov	r3, r2
 8001e08:	71bb      	strb	r3, [r7, #6]
      Tx_encoder_Data[0] = 0x01;
 8001e0a:	4b93      	ldr	r3, [pc, #588]	; (8002058 <send_motor_data+0x260>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
      Tx_encoder_Data[1] = function;
 8001e10:	4a91      	ldr	r2, [pc, #580]	; (8002058 <send_motor_data+0x260>)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	7053      	strb	r3, [r2, #1]
      Tx_encoder_Data[2] = length;
 8001e16:	4a90      	ldr	r2, [pc, #576]	; (8002058 <send_motor_data+0x260>)
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	7093      	strb	r3, [r2, #2]

      if(delta_s > 0)
 8001e1c:	4b8f      	ldr	r3, [pc, #572]	; (800205c <send_motor_data+0x264>)
 8001e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e22:	f04f 0200 	mov.w	r2, #0
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f7fe fe6d 	bl	8000b08 <__aeabi_dcmpgt>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <send_motor_data+0x44>
      {
    	  Tx_encoder_Data[5] = 0x01;
 8001e34:	4b88      	ldr	r3, [pc, #544]	; (8002058 <send_motor_data+0x260>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	715a      	strb	r2, [r3, #5]
 8001e3a:	e017      	b.n	8001e6c <send_motor_data+0x74>
      }
      else if(delta_s < 0)
 8001e3c:	4b87      	ldr	r3, [pc, #540]	; (800205c <send_motor_data+0x264>)
 8001e3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f7fe fe3f 	bl	8000acc <__aeabi_dcmplt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00b      	beq.n	8001e6c <send_motor_data+0x74>
      {
    	  Tx_encoder_Data[5] = 0x02;
 8001e54:	4b80      	ldr	r3, [pc, #512]	; (8002058 <send_motor_data+0x260>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	715a      	strb	r2, [r3, #5]
    	  delta_s = -delta_s;
 8001e5a:	4b80      	ldr	r3, [pc, #512]	; (800205c <send_motor_data+0x264>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	4690      	mov	r8, r2
 8001e62:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001e66:	4b7d      	ldr	r3, [pc, #500]	; (800205c <send_motor_data+0x264>)
 8001e68:	e9c3 8900 	strd	r8, r9, [r3]
      }
      delta_s_test += delta_s;
 8001e6c:	4b7c      	ldr	r3, [pc, #496]	; (8002060 <send_motor_data+0x268>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b7a      	ldr	r3, [pc, #488]	; (800205c <send_motor_data+0x264>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fa00 	bl	800027c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4977      	ldr	r1, [pc, #476]	; (8002060 <send_motor_data+0x268>)
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
      Tx_encoder_Data[3] = (int)delta_s / 256;
 8001e86:	4b75      	ldr	r3, [pc, #468]	; (800205c <send_motor_data+0x264>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7fe fe44 	bl	8000b1c <__aeabi_d2iz>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da00      	bge.n	8001e9c <send_motor_data+0xa4>
 8001e9a:	33ff      	adds	r3, #255	; 0xff
 8001e9c:	121b      	asrs	r3, r3, #8
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <send_motor_data+0x260>)
 8001ea2:	70da      	strb	r2, [r3, #3]
      Tx_encoder_Data[4] = (int)delta_s % 256;
 8001ea4:	4b6d      	ldr	r3, [pc, #436]	; (800205c <send_motor_data+0x264>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fe35 	bl	8000b1c <__aeabi_d2iz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	425a      	negs	r2, r3
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	bf58      	it	pl
 8001ebc:	4253      	negpl	r3, r2
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	4b65      	ldr	r3, [pc, #404]	; (8002058 <send_motor_data+0x260>)
 8001ec2:	711a      	strb	r2, [r3, #4]
      delta_s = 0;
 8001ec4:	4965      	ldr	r1, [pc, #404]	; (800205c <send_motor_data+0x264>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9c1 2300 	strd	r2, r3, [r1]

      test_yaw_angle = yaw_angle;
 8001ed2:	4b64      	ldr	r3, [pc, #400]	; (8002064 <send_motor_data+0x26c>)
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	4963      	ldr	r1, [pc, #396]	; (8002068 <send_motor_data+0x270>)
 8001eda:	e9c1 2300 	strd	r2, r3, [r1]

      if(test_yaw_angle > 0)
 8001ede:	4b62      	ldr	r3, [pc, #392]	; (8002068 <send_motor_data+0x270>)
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	f04f 0200 	mov.w	r2, #0
 8001ee8:	f04f 0300 	mov.w	r3, #0
 8001eec:	f7fe fe0c 	bl	8000b08 <__aeabi_dcmpgt>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <send_motor_data+0x106>
      {
    	  Tx_encoder_Data[6] = 0x01;
 8001ef6:	4b58      	ldr	r3, [pc, #352]	; (8002058 <send_motor_data+0x260>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	719a      	strb	r2, [r3, #6]
 8001efc:	e017      	b.n	8001f2e <send_motor_data+0x136>
      }
      else if(test_yaw_angle < 0)
 8001efe:	4b5a      	ldr	r3, [pc, #360]	; (8002068 <send_motor_data+0x270>)
 8001f00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	f7fe fdde 	bl	8000acc <__aeabi_dcmplt>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <send_motor_data+0x136>
      {
    	  Tx_encoder_Data[6] = 0x02;
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <send_motor_data+0x260>)
 8001f18:	2202      	movs	r2, #2
 8001f1a:	719a      	strb	r2, [r3, #6]
    	  test_yaw_angle = -test_yaw_angle;
 8001f1c:	4b52      	ldr	r3, [pc, #328]	; (8002068 <send_motor_data+0x270>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	4614      	mov	r4, r2
 8001f24:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f28:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <send_motor_data+0x270>)
 8001f2a:	e9c3 4500 	strd	r4, r5, [r3]



//    Tx_encoder_Data[7] = start_flag;//(int)(test_yaw_angle);
//    Tx_encoder_Data[8] = 0;//(test_yaw_angle - (int)(test_yaw_angle)) * 100;
      Tx_encoder_Data[7] = (int)(test_yaw_angle);
 8001f2e:	4b4e      	ldr	r3, [pc, #312]	; (8002068 <send_motor_data+0x270>)
 8001f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f34:	4610      	mov	r0, r2
 8001f36:	4619      	mov	r1, r3
 8001f38:	f7fe fdf0 	bl	8000b1c <__aeabi_d2iz>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	4b45      	ldr	r3, [pc, #276]	; (8002058 <send_motor_data+0x260>)
 8001f42:	71da      	strb	r2, [r3, #7]
      Tx_encoder_Data[8] = (test_yaw_angle - (int)(test_yaw_angle)) * 100;
 8001f44:	4b48      	ldr	r3, [pc, #288]	; (8002068 <send_motor_data+0x270>)
 8001f46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <send_motor_data+0x270>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fde2 	bl	8000b1c <__aeabi_d2iz>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fada 	bl	8000514 <__aeabi_i2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe f986 	bl	8000278 <__aeabi_dsub>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <send_motor_data+0x274>)
 8001f7a:	f7fe fb35 	bl	80005e8 <__aeabi_dmul>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fdf1 	bl	8000b6c <__aeabi_d2uiz>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <send_motor_data+0x260>)
 8001f90:	721a      	strb	r2, [r3, #8]

      test_s = Tx_encoder_Data[7];
 8001f92:	4b31      	ldr	r3, [pc, #196]	; (8002058 <send_motor_data+0x260>)
 8001f94:	79da      	ldrb	r2, [r3, #7]
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <send_motor_data+0x278>)
 8001f98:	701a      	strb	r2, [r3, #0]
      if(Tx_encoder_Data[6] == 0x02)
 8001f9a:	4b2f      	ldr	r3, [pc, #188]	; (8002058 <send_motor_data+0x260>)
 8001f9c:	799b      	ldrb	r3, [r3, #6]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d105      	bne.n	8001fae <send_motor_data+0x1b6>
      {
    	  test_s = -test_s;
 8001fa2:	4b33      	ldr	r3, [pc, #204]	; (8002070 <send_motor_data+0x278>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	425b      	negs	r3, r3
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <send_motor_data+0x278>)
 8001fac:	701a      	strb	r2, [r3, #0]
      }

      Tx_encoder_Data[9] = calc_crc16(Tx_encoder_Data,9)%256; //crc_L
 8001fae:	2109      	movs	r1, #9
 8001fb0:	4829      	ldr	r0, [pc, #164]	; (8002058 <send_motor_data+0x260>)
 8001fb2:	f7ff fee5 	bl	8001d80 <calc_crc16>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b27      	ldr	r3, [pc, #156]	; (8002058 <send_motor_data+0x260>)
 8001fbc:	725a      	strb	r2, [r3, #9]
      Tx_encoder_Data[10] = calc_crc16(Tx_encoder_Data,9)/256; //crc_H
 8001fbe:	2109      	movs	r1, #9
 8001fc0:	4825      	ldr	r0, [pc, #148]	; (8002058 <send_motor_data+0x260>)
 8001fc2:	f7ff fedd 	bl	8001d80 <calc_crc16>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <send_motor_data+0x260>)
 8001fd0:	729a      	strb	r2, [r3, #10]
      min = min(min,yaw_angle);
 8001fd2:	4b28      	ldr	r3, [pc, #160]	; (8002074 <send_motor_data+0x27c>)
 8001fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <send_motor_data+0x26c>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fd75 	bl	8000acc <__aeabi_dcmplt>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <send_motor_data+0x1f8>
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <send_motor_data+0x27c>)
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	e002      	b.n	8001ff6 <send_motor_data+0x1fe>
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <send_motor_data+0x26c>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	491f      	ldr	r1, [pc, #124]	; (8002074 <send_motor_data+0x27c>)
 8001ff8:	e9c1 2300 	strd	r2, r3, [r1]
      max = max(max,yaw_angle);
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	; (8002078 <send_motor_data+0x280>)
 8001ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002002:	4b18      	ldr	r3, [pc, #96]	; (8002064 <send_motor_data+0x26c>)
 8002004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002008:	f7fe fd7e 	bl	8000b08 <__aeabi_dcmpgt>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <send_motor_data+0x222>
 8002012:	4b19      	ldr	r3, [pc, #100]	; (8002078 <send_motor_data+0x280>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	e002      	b.n	8002020 <send_motor_data+0x228>
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <send_motor_data+0x26c>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	4915      	ldr	r1, [pc, #84]	; (8002078 <send_motor_data+0x280>)
 8002022:	e9c1 2300 	strd	r2, r3, [r1]


      //error_flag_1 = 0;
      HAL_NVIC_DisableIRQ(USART3_IRQn);
 8002026:	2027      	movs	r0, #39	; 0x27
 8002028:	f003 facd 	bl	80055c6 <HAL_NVIC_DisableIRQ>
//    sprintf(msg," %.2f %.2f %.2f  %d %.2f %.2f %f %f\r\n", test_yaw_angle,yaw_angle, min,cu_flag,present_voltage,yaw_angle,realError_m1,realError_m2);
//    sprintf(msg,"	%f \r\n",yaw_angle);

	  HAL_UART_Transmit_IT(&huart3, Tx_encoder_Data, sizeof(Tx_encoder_Data));
 800202c:	220b      	movs	r2, #11
 800202e:	490a      	ldr	r1, [pc, #40]	; (8002058 <send_motor_data+0x260>)
 8002030:	4812      	ldr	r0, [pc, #72]	; (800207c <send_motor_data+0x284>)
 8002032:	f005 fd55 	bl	8007ae0 <HAL_UART_Transmit_IT>
//    HAL_UART_Transmit_IT(&huart3, msg, sizeof(msg));
      HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002036:	2027      	movs	r0, #39	; 0x27
 8002038:	f003 fab7 	bl	80055aa <HAL_NVIC_EnableIRQ>
//	  error_flag_1 = 1;
//    if(start_flag >= 200)
//    {start_flag = 0;}

      uart_flag = 0;
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <send_motor_data+0x288>)
 800203e:	2200      	movs	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
      cu_flag = 0;
 8002042:	4b10      	ldr	r3, [pc, #64]	; (8002084 <send_motor_data+0x28c>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
//    start_flag_1 = 0;
      cute_flag = 0;
 8002048:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <send_motor_data+0x290>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002058:	200008e0 	.word	0x200008e0
 800205c:	200006c0 	.word	0x200006c0
 8002060:	200006c8 	.word	0x200006c8
 8002064:	20000858 	.word	0x20000858
 8002068:	200006d0 	.word	0x200006d0
 800206c:	40590000 	.word	0x40590000
 8002070:	200009ac 	.word	0x200009ac
 8002074:	20000660 	.word	0x20000660
 8002078:	20000658 	.word	0x20000658
 800207c:	2000054c 	.word	0x2000054c
 8002080:	20000748 	.word	0x20000748
 8002084:	200009a8 	.word	0x200009a8
 8002088:	200006dc 	.word	0x200006dc
 800208c:	00000000 	.word	0x00000000

08002090 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
    if(huart->Instance == UART4)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a94      	ldr	r2, [pc, #592]	; (80022f0 <HAL_UART_RxCpltCallback+0x260>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	f040 8114 	bne.w	80022ce <HAL_UART_RxCpltCallback+0x23e>
    {
	  if(error_flag == 0)
 80020a6:	4b93      	ldr	r3, [pc, #588]	; (80022f4 <HAL_UART_RxCpltCallback+0x264>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d114      	bne.n	80020d8 <HAL_UART_RxCpltCallback+0x48>
	  {
		  cu_flag ++;
 80020ae:	4b92      	ldr	r3, [pc, #584]	; (80022f8 <HAL_UART_RxCpltCallback+0x268>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	4a90      	ldr	r2, [pc, #576]	; (80022f8 <HAL_UART_RxCpltCallback+0x268>)
 80020b6:	6013      	str	r3, [r2, #0]
		  cut_flag = 1;
 80020b8:	4b90      	ldr	r3, [pc, #576]	; (80022fc <HAL_UART_RxCpltCallback+0x26c>)
 80020ba:	2201      	movs	r2, #1
 80020bc:	701a      	strb	r2, [r3, #0]
		  Rx_index++;
 80020be:	4b90      	ldr	r3, [pc, #576]	; (8002300 <HAL_UART_RxCpltCallback+0x270>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	3301      	adds	r3, #1
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <HAL_UART_RxCpltCallback+0x270>)
 80020c8:	701a      	strb	r2, [r3, #0]
		  Rx_buf[Rx_index] = rx_dma_data4;
 80020ca:	4b8d      	ldr	r3, [pc, #564]	; (8002300 <HAL_UART_RxCpltCallback+0x270>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <HAL_UART_RxCpltCallback+0x274>)
 80020d2:	7819      	ldrb	r1, [r3, #0]
 80020d4:	4b8c      	ldr	r3, [pc, #560]	; (8002308 <HAL_UART_RxCpltCallback+0x278>)
 80020d6:	5499      	strb	r1, [r3, r2]
	  }

	  if(Rx_buf[Rx_index] == '\n')
 80020d8:	4b89      	ldr	r3, [pc, #548]	; (8002300 <HAL_UART_RxCpltCallback+0x270>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	461a      	mov	r2, r3
 80020de:	4b8a      	ldr	r3, [pc, #552]	; (8002308 <HAL_UART_RxCpltCallback+0x278>)
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	2b0a      	cmp	r3, #10
 80020e4:	d109      	bne.n	80020fa <HAL_UART_RxCpltCallback+0x6a>
	  {
		  if(start_flag == 0)
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <HAL_UART_RxCpltCallback+0x27c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <HAL_UART_RxCpltCallback+0x64>
		  {rx_flag = 1;}
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_UART_RxCpltCallback+0x280>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
		  Rx_index = 0;
 80020f4:	4b82      	ldr	r3, [pc, #520]	; (8002300 <HAL_UART_RxCpltCallback+0x270>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]

	  //  cut_flag = 1;
	  }

	  if(rx_flag == 1)
 80020fa:	4b85      	ldr	r3, [pc, #532]	; (8002310 <HAL_UART_RxCpltCallback+0x280>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	f040 80df 	bne.w	80022c2 <HAL_UART_RxCpltCallback+0x232>
	  {
		  char *dend;
		  uart_flag = 1;
 8002104:	4b83      	ldr	r3, [pc, #524]	; (8002314 <HAL_UART_RxCpltCallback+0x284>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]


		  Gyro_roll = strtod(Rx_buf+1, &dend);
 800210a:	4a83      	ldr	r2, [pc, #524]	; (8002318 <HAL_UART_RxCpltCallback+0x288>)
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	4619      	mov	r1, r3
 8002112:	4610      	mov	r0, r2
 8002114:	f007 fbdc 	bl	80098d0 <strtod>
 8002118:	4603      	mov	r3, r0
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe f9fa 	bl	8000514 <__aeabi_i2d>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	497d      	ldr	r1, [pc, #500]	; (800231c <HAL_UART_RxCpltCallback+0x28c>)
 8002126:	e9c1 2300 	strd	r2, r3, [r1]
		  Gyro_pitch = strtod(dend+1, &dend);
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	f107 0208 	add.w	r2, r7, #8
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f007 fbcb 	bl	80098d0 <strtod>
 800213a:	4603      	mov	r3, r0
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe f9e9 	bl	8000514 <__aeabi_i2d>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4976      	ldr	r1, [pc, #472]	; (8002320 <HAL_UART_RxCpltCallback+0x290>)
 8002148:	e9c1 2300 	strd	r2, r3, [r1]
		  Gyro_yaw = strtod(dend+1, &dend);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	f107 0208 	add.w	r2, r7, #8
 8002154:	4611      	mov	r1, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f007 fbba 	bl	80098d0 <strtod>
 800215c:	4603      	mov	r3, r0
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe f9d8 	bl	8000514 <__aeabi_i2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	496e      	ldr	r1, [pc, #440]	; (8002324 <HAL_UART_RxCpltCallback+0x294>)
 800216a:	e9c1 2300 	strd	r2, r3, [r1]
		  roll_angle = strtod(dend+1, &dend);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	f107 0208 	add.w	r2, r7, #8
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f007 fba9 	bl	80098d0 <strtod>
 800217e:	4603      	mov	r3, r0
 8002180:	4618      	mov	r0, r3
 8002182:	f7fe f9c7 	bl	8000514 <__aeabi_i2d>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4967      	ldr	r1, [pc, #412]	; (8002328 <HAL_UART_RxCpltCallback+0x298>)
 800218c:	e9c1 2300 	strd	r2, r3, [r1]
		  pitch_angle = strtod(dend+1, &dend);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3301      	adds	r3, #1
 8002194:	f107 0208 	add.w	r2, r7, #8
 8002198:	4611      	mov	r1, r2
 800219a:	4618      	mov	r0, r3
 800219c:	f007 fb98 	bl	80098d0 <strtod>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe f9b6 	bl	8000514 <__aeabi_i2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	495f      	ldr	r1, [pc, #380]	; (800232c <HAL_UART_RxCpltCallback+0x29c>)
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
		  yaw_angle = strtod(dend+1, NULL);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3301      	adds	r3, #1
 80021b6:	2100      	movs	r1, #0
 80021b8:	4618      	mov	r0, r3
 80021ba:	f007 fb89 	bl	80098d0 <strtod>
 80021be:	4603      	mov	r3, r0
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe f9a7 	bl	8000514 <__aeabi_i2d>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4959      	ldr	r1, [pc, #356]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 80021cc:	e9c1 2300 	strd	r2, r3, [r1]


		  if(((yaw_angle >= 177.0)&&(yaw_angle <= 180.0))||((yaw_angle <= -177.00))&&(yaw_angle >=-180.0))
 80021d0:	4b57      	ldr	r3, [pc, #348]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 80021d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d6:	a342      	add	r3, pc, #264	; (adr r3, 80022e0 <HAL_UART_RxCpltCallback+0x250>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe fc8a 	bl	8000af4 <__aeabi_dcmpge>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_UART_RxCpltCallback+0x16c>
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 80021e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_UART_RxCpltCallback+0x2a4>)
 80021f2:	f7fe fc75 	bl	8000ae0 <__aeabi_dcmple>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d115      	bne.n	8002228 <HAL_UART_RxCpltCallback+0x198>
 80021fc:	4b4c      	ldr	r3, [pc, #304]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 80021fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002202:	a339      	add	r3, pc, #228	; (adr r3, 80022e8 <HAL_UART_RxCpltCallback+0x258>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe fc6a 	bl	8000ae0 <__aeabi_dcmple>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00e      	beq.n	8002230 <HAL_UART_RxCpltCallback+0x1a0>
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 8002214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_UART_RxCpltCallback+0x2a8>)
 800221e:	f7fe fc69 	bl	8000af4 <__aeabi_dcmpge>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_UART_RxCpltCallback+0x1a0>
		  {
			  change_flag = 1;
 8002228:	4b44      	ldr	r3, [pc, #272]	; (800233c <HAL_UART_RxCpltCallback+0x2ac>)
 800222a:	2201      	movs	r2, #1
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	e002      	b.n	8002236 <HAL_UART_RxCpltCallback+0x1a6>
		  }
		  else
		  {
			  change_flag = 0;
 8002230:	4b42      	ldr	r3, [pc, #264]	; (800233c <HAL_UART_RxCpltCallback+0x2ac>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
		  }
		  if((fabs(yaw_angle-yaw_angle_pri)>5)&&(start_flag_2==1))
 8002236:	4b3e      	ldr	r3, [pc, #248]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 8002238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <HAL_UART_RxCpltCallback+0x2b0>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f819 	bl	8000278 <__aeabi_dsub>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4692      	mov	sl, r2
 800224c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8002250:	f04f 0200 	mov.w	r2, #0
 8002254:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_UART_RxCpltCallback+0x2b4>)
 8002256:	4650      	mov	r0, sl
 8002258:	4659      	mov	r1, fp
 800225a:	f7fe fc55 	bl	8000b08 <__aeabi_dcmpgt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_UART_RxCpltCallback+0x1fc>
 8002264:	4b38      	ldr	r3, [pc, #224]	; (8002348 <HAL_UART_RxCpltCallback+0x2b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d10f      	bne.n	800228c <HAL_UART_RxCpltCallback+0x1fc>
		  {
			  if(change_flag == 0)
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <HAL_UART_RxCpltCallback+0x2ac>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10b      	bne.n	800228c <HAL_UART_RxCpltCallback+0x1fc>
			  {	  yaw_angle = yaw_angle_pri;
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_UART_RxCpltCallback+0x2b0>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	492d      	ldr	r1, [pc, #180]	; (8002330 <HAL_UART_RxCpltCallback+0x2a0>)
 800227c:	e9c1 2300 	strd	r2, r3, [r1]
				  Gyro_yaw = Gyro_yaw_pri;
 8002280:	4b32      	ldr	r3, [pc, #200]	; (800234c <HAL_UART_RxCpltCallback+0x2bc>)
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	4927      	ldr	r1, [pc, #156]	; (8002324 <HAL_UART_RxCpltCallback+0x294>)
 8002288:	e9c1 2300 	strd	r2, r3, [r1]



//        test_yaw_angle = yaw_angle;

		  r_flag = 1;
 800228c:	4b30      	ldr	r3, [pc, #192]	; (8002350 <HAL_UART_RxCpltCallback+0x2c0>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]

		  memset(Rx_buf,0,sizeof(Rx_buf));
 8002292:	2264      	movs	r2, #100	; 0x64
 8002294:	2100      	movs	r1, #0
 8002296:	481c      	ldr	r0, [pc, #112]	; (8002308 <HAL_UART_RxCpltCallback+0x278>)
 8002298:	f007 fc2b 	bl	8009af2 <memset>
		  receive_yaw_flag = 1;
 800229c:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_UART_RxCpltCallback+0x2c4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
		  receive_yaw_flag_1 = 1;
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_UART_RxCpltCallback+0x2c8>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
		  rx_flag = 0;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_UART_RxCpltCallback+0x280>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
		  can_flag = 0;
 80022ae:	4b2b      	ldr	r3, [pc, #172]	; (800235c <HAL_UART_RxCpltCallback+0x2cc>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
		  //cu_flag = 0;
		  if(cut_flag == 1)
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_UART_RxCpltCallback+0x26c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d102      	bne.n	80022c2 <HAL_UART_RxCpltCallback+0x232>
		  {
			  //HAL_NVIC_EnableIRQ(USART3_IRQn);
			  cut_flag = 0;
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_UART_RxCpltCallback+0x26c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  HAL_UART_Receive_DMA(&huart4,&rx_dma_data4, 1);
 80022c2:	2201      	movs	r2, #1
 80022c4:	490f      	ldr	r1, [pc, #60]	; (8002304 <HAL_UART_RxCpltCallback+0x274>)
 80022c6:	4826      	ldr	r0, [pc, #152]	; (8002360 <HAL_UART_RxCpltCallback+0x2d0>)
 80022c8:	f005 fc40 	bl	8007b4c <HAL_UART_Receive_DMA>
        }

        HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
    }

}
 80022cc:	e1b6      	b.n	800263c <HAL_UART_RxCpltCallback+0x5ac>
    else if(huart->Instance == USART3)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_UART_RxCpltCallback+0x2d4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	f040 81b1 	bne.w	800263c <HAL_UART_RxCpltCallback+0x5ac>
        for(int i = 0; i < 12; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e04f      	b.n	8002380 <HAL_UART_RxCpltCallback+0x2f0>
 80022e0:	00000000 	.word	0x00000000
 80022e4:	40662000 	.word	0x40662000
 80022e8:	00000000 	.word	0x00000000
 80022ec:	c0662000 	.word	0xc0662000
 80022f0:	40004c00 	.word	0x40004c00
 80022f4:	200006e0 	.word	0x200006e0
 80022f8:	200009a8 	.word	0x200009a8
 80022fc:	200006d8 	.word	0x200006d8
 8002300:	200007b4 	.word	0x200007b4
 8002304:	200009c0 	.word	0x200009c0
 8002308:	200007b8 	.word	0x200007b8
 800230c:	2000074c 	.word	0x2000074c
 8002310:	2000081c 	.word	0x2000081c
 8002314:	20000748 	.word	0x20000748
 8002318:	200007b9 	.word	0x200007b9
 800231c:	20000830 	.word	0x20000830
 8002320:	20000838 	.word	0x20000838
 8002324:	20000840 	.word	0x20000840
 8002328:	20000848 	.word	0x20000848
 800232c:	20000850 	.word	0x20000850
 8002330:	20000858 	.word	0x20000858
 8002334:	40668000 	.word	0x40668000
 8002338:	c0668000 	.word	0xc0668000
 800233c:	200006e2 	.word	0x200006e2
 8002340:	20000870 	.word	0x20000870
 8002344:	40140000 	.word	0x40140000
 8002348:	20000754 	.word	0x20000754
 800234c:	20000868 	.word	0x20000868
 8002350:	2000081f 	.word	0x2000081f
 8002354:	2000081d 	.word	0x2000081d
 8002358:	2000081e 	.word	0x2000081e
 800235c:	200009a6 	.word	0x200009a6
 8002360:	200004bc 	.word	0x200004bc
 8002364:	40004800 	.word	0x40004800
        	ros_Rx_buf[i] = rx_dma_data3[i];
 8002368:	4a95      	ldr	r2, [pc, #596]	; (80025c0 <HAL_UART_RxCpltCallback+0x530>)
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4413      	add	r3, r2
 800236e:	7819      	ldrb	r1, [r3, #0]
 8002370:	4a94      	ldr	r2, [pc, #592]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	4413      	add	r3, r2
 8002376:	460a      	mov	r2, r1
 8002378:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 12; i++)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	3301      	adds	r3, #1
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b0b      	cmp	r3, #11
 8002384:	ddf0      	ble.n	8002368 <HAL_UART_RxCpltCallback+0x2d8>
        if(ros_Rx_buf[11] == 0xf0) //address check
 8002386:	4b8f      	ldr	r3, [pc, #572]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 8002388:	7adb      	ldrb	r3, [r3, #11]
 800238a:	2bf0      	cmp	r3, #240	; 0xf0
 800238c:	d102      	bne.n	8002394 <HAL_UART_RxCpltCallback+0x304>
        	receive_flag = 1;
 800238e:	4b8e      	ldr	r3, [pc, #568]	; (80025c8 <HAL_UART_RxCpltCallback+0x538>)
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
        if(receive_flag == 1)
 8002394:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <HAL_UART_RxCpltCallback+0x538>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 814a 	bne.w	8002632 <HAL_UART_RxCpltCallback+0x5a2>
        	if(ros_Rx_buf[0] == 0x01)
 800239e:	4b89      	ldr	r3, [pc, #548]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	f040 80f4 	bne.w	8002590 <HAL_UART_RxCpltCallback+0x500>
        		if(ros_Rx_buf[1] == 0x02)
 80023a8:	4b86      	ldr	r3, [pc, #536]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023aa:	785b      	ldrb	r3, [r3, #1]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	f040 80dd 	bne.w	800256c <HAL_UART_RxCpltCallback+0x4dc>
        			if(ros_Rx_buf[2] == 0x06)
 80023b2:	4b84      	ldr	r3, [pc, #528]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023b4:	789b      	ldrb	r3, [r3, #2]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	f040 80c6 	bne.w	8002548 <HAL_UART_RxCpltCallback+0x4b8>
        				error_flag_1 = 1;
 80023bc:	4b83      	ldr	r3, [pc, #524]	; (80025cc <HAL_UART_RxCpltCallback+0x53c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
                        resultcrc = calc_crc16(ros_Rx_buf,9);
 80023c2:	2109      	movs	r1, #9
 80023c4:	487f      	ldr	r0, [pc, #508]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023c6:	f7ff fcdb 	bl	8001d80 <calc_crc16>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <HAL_UART_RxCpltCallback+0x540>)
 80023d0:	801a      	strh	r2, [r3, #0]
                        resultcrc_L = resultcrc % 256;
 80023d2:	4b7f      	ldr	r3, [pc, #508]	; (80025d0 <HAL_UART_RxCpltCallback+0x540>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b7e      	ldr	r3, [pc, #504]	; (80025d4 <HAL_UART_RxCpltCallback+0x544>)
 80023da:	701a      	strb	r2, [r3, #0]
                        resultcrc_H = resultcrc / 256;
 80023dc:	4b7c      	ldr	r3, [pc, #496]	; (80025d0 <HAL_UART_RxCpltCallback+0x540>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b7c      	ldr	r3, [pc, #496]	; (80025d8 <HAL_UART_RxCpltCallback+0x548>)
 80023e8:	701a      	strb	r2, [r3, #0]
                        if((resultcrc_L == ros_Rx_buf[9])&&(resultcrc_H == ros_Rx_buf[10]))
 80023ea:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023ec:	7a5a      	ldrb	r2, [r3, #9]
 80023ee:	4b79      	ldr	r3, [pc, #484]	; (80025d4 <HAL_UART_RxCpltCallback+0x544>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	f040 8096 	bne.w	8002524 <HAL_UART_RxCpltCallback+0x494>
 80023f8:	4b72      	ldr	r3, [pc, #456]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 80023fa:	7a9a      	ldrb	r2, [r3, #10]
 80023fc:	4b76      	ldr	r3, [pc, #472]	; (80025d8 <HAL_UART_RxCpltCallback+0x548>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	f040 808f 	bne.w	8002524 <HAL_UART_RxCpltCallback+0x494>
                        	for(int i = 0; i < 12; i++)
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	e00b      	b.n	8002424 <HAL_UART_RxCpltCallback+0x394>
                        		ros_Rx_buf_true[i] = ros_Rx_buf[i];
 800240c:	4a6d      	ldr	r2, [pc, #436]	; (80025c4 <HAL_UART_RxCpltCallback+0x534>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	7819      	ldrb	r1, [r3, #0]
 8002414:	4a71      	ldr	r2, [pc, #452]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	460a      	mov	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
                        	for(int i = 0; i < 12; i++)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3301      	adds	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b0b      	cmp	r3, #11
 8002428:	ddf0      	ble.n	800240c <HAL_UART_RxCpltCallback+0x37c>
                        	minority_linear = (double)(ros_Rx_buf_true[5] / 100.0);
 800242a:	4b6c      	ldr	r3, [pc, #432]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 800242c:	795b      	ldrb	r3, [r3, #5]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f870 	bl	8000514 <__aeabi_i2d>
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b69      	ldr	r3, [pc, #420]	; (80025e0 <HAL_UART_RxCpltCallback+0x550>)
 800243a:	f7fe f9ff 	bl	800083c <__aeabi_ddiv>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4968      	ldr	r1, [pc, #416]	; (80025e4 <HAL_UART_RxCpltCallback+0x554>)
 8002444:	e9c1 2300 	strd	r2, r3, [r1]
                            integer_linear = ros_Rx_buf_true[4];
 8002448:	4b64      	ldr	r3, [pc, #400]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	461a      	mov	r2, r3
 800244e:	4b66      	ldr	r3, [pc, #408]	; (80025e8 <HAL_UART_RxCpltCallback+0x558>)
 8002450:	601a      	str	r2, [r3, #0]
                            test_linear_data_receive = (double)(integer_linear + minority_linear);
 8002452:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_UART_RxCpltCallback+0x558>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f85c 	bl	8000514 <__aeabi_i2d>
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_UART_RxCpltCallback+0x554>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fd ff0b 	bl	800027c <__adddf3>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4960      	ldr	r1, [pc, #384]	; (80025ec <HAL_UART_RxCpltCallback+0x55c>)
 800246c:	e9c1 2300 	strd	r2, r3, [r1]
                            if(ros_Rx_buf_true[3] == 0x02)
 8002470:	4b5a      	ldr	r3, [pc, #360]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 8002472:	78db      	ldrb	r3, [r3, #3]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d108      	bne.n	800248a <HAL_UART_RxCpltCallback+0x3fa>
                            {test_linear_data_receive = -test_linear_data_receive;}
 8002478:	4b5c      	ldr	r3, [pc, #368]	; (80025ec <HAL_UART_RxCpltCallback+0x55c>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	4690      	mov	r8, r2
 8002480:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002484:	4b59      	ldr	r3, [pc, #356]	; (80025ec <HAL_UART_RxCpltCallback+0x55c>)
 8002486:	e9c3 8900 	strd	r8, r9, [r3]
                            minority_gaksokdo = (double)(ros_Rx_buf_true[8] / 100.0);
 800248a:	4b54      	ldr	r3, [pc, #336]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 800248c:	7a1b      	ldrb	r3, [r3, #8]
 800248e:	4618      	mov	r0, r3
 8002490:	f7fe f840 	bl	8000514 <__aeabi_i2d>
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_UART_RxCpltCallback+0x550>)
 800249a:	f7fe f9cf 	bl	800083c <__aeabi_ddiv>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4953      	ldr	r1, [pc, #332]	; (80025f0 <HAL_UART_RxCpltCallback+0x560>)
 80024a4:	e9c1 2300 	strd	r2, r3, [r1]
                            integer_gaksokdo = ros_Rx_buf_true[7];
 80024a8:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 80024aa:	79db      	ldrb	r3, [r3, #7]
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b51      	ldr	r3, [pc, #324]	; (80025f4 <HAL_UART_RxCpltCallback+0x564>)
 80024b0:	601a      	str	r2, [r3, #0]
                            test_gaksokdo_data_receive = (double)(integer_gaksokdo + minority_gaksokdo);
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_UART_RxCpltCallback+0x564>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f82c 	bl	8000514 <__aeabi_i2d>
 80024bc:	4b4c      	ldr	r3, [pc, #304]	; (80025f0 <HAL_UART_RxCpltCallback+0x560>)
 80024be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c2:	f7fd fedb 	bl	800027c <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	494b      	ldr	r1, [pc, #300]	; (80025f8 <HAL_UART_RxCpltCallback+0x568>)
 80024cc:	e9c1 2300 	strd	r2, r3, [r1]
                            if(ros_Rx_buf_true[6] == 0x02)
 80024d0:	4b42      	ldr	r3, [pc, #264]	; (80025dc <HAL_UART_RxCpltCallback+0x54c>)
 80024d2:	799b      	ldrb	r3, [r3, #6]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d108      	bne.n	80024ea <HAL_UART_RxCpltCallback+0x45a>
                            {test_gaksokdo_data_receive = -test_gaksokdo_data_receive;}
 80024d8:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_UART_RxCpltCallback+0x568>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	4614      	mov	r4, r2
 80024e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_UART_RxCpltCallback+0x568>)
 80024e6:	e9c3 4500 	strd	r4, r5, [r3]
                            test_linear_data = test_linear_data_receive;
 80024ea:	4b40      	ldr	r3, [pc, #256]	; (80025ec <HAL_UART_RxCpltCallback+0x55c>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	4942      	ldr	r1, [pc, #264]	; (80025fc <HAL_UART_RxCpltCallback+0x56c>)
 80024f2:	e9c1 2300 	strd	r2, r3, [r1]
                            GYRO_YAW_GOAL = test_gaksokdo_data_receive;
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_UART_RxCpltCallback+0x568>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	4940      	ldr	r1, [pc, #256]	; (8002600 <HAL_UART_RxCpltCallback+0x570>)
 80024fe:	e9c1 2300 	strd	r2, r3, [r1]
                            GYRO_YAW_GOAL_test = 57.29 * GYRO_YAW_GOAL;
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_UART_RxCpltCallback+0x570>)
 8002504:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002508:	a32b      	add	r3, pc, #172	; (adr r3, 80025b8 <HAL_UART_RxCpltCallback+0x528>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f86b 	bl	80005e8 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	493b      	ldr	r1, [pc, #236]	; (8002604 <HAL_UART_RxCpltCallback+0x574>)
 8002518:	e9c1 2300 	strd	r2, r3, [r1]
                            flag_1 = 1;
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_UART_RxCpltCallback+0x578>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	e046      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x522>
                            GYRO_YAW_GOAL_test = 0;
 8002524:	4937      	ldr	r1, [pc, #220]	; (8002604 <HAL_UART_RxCpltCallback+0x574>)
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	e9c1 2300 	strd	r2, r3, [r1]
                            test_linear_data = 0;
 8002532:	4932      	ldr	r1, [pc, #200]	; (80025fc <HAL_UART_RxCpltCallback+0x56c>)
 8002534:	f04f 0200 	mov.w	r2, #0
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	e9c1 2300 	strd	r2, r3, [r1]
                            error_flag_1 = 1;
 8002540:	4b22      	ldr	r3, [pc, #136]	; (80025cc <HAL_UART_RxCpltCallback+0x53c>)
 8002542:	2201      	movs	r2, #1
 8002544:	701a      	strb	r2, [r3, #0]
 8002546:	e034      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x522>
						GYRO_YAW_GOAL_test = 0;
 8002548:	492e      	ldr	r1, [pc, #184]	; (8002604 <HAL_UART_RxCpltCallback+0x574>)
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9c1 2300 	strd	r2, r3, [r1]
						test_linear_data = 0;
 8002556:	4929      	ldr	r1, [pc, #164]	; (80025fc <HAL_UART_RxCpltCallback+0x56c>)
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c1 2300 	strd	r2, r3, [r1]
						error_flag_1 = 1;
 8002564:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_UART_RxCpltCallback+0x53c>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e022      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x522>
                	GYRO_YAW_GOAL_test = 0;
 800256c:	4925      	ldr	r1, [pc, #148]	; (8002604 <HAL_UART_RxCpltCallback+0x574>)
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9c1 2300 	strd	r2, r3, [r1]
                	test_linear_data = 0;
 800257a:	4920      	ldr	r1, [pc, #128]	; (80025fc <HAL_UART_RxCpltCallback+0x56c>)
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9c1 2300 	strd	r2, r3, [r1]
                	error_flag_1 = 1;
 8002588:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_UART_RxCpltCallback+0x53c>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e010      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x522>
            	GYRO_YAW_GOAL_test = 0;
 8002590:	491c      	ldr	r1, [pc, #112]	; (8002604 <HAL_UART_RxCpltCallback+0x574>)
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9c1 2300 	strd	r2, r3, [r1]
            	test_linear_data = 0;
 800259e:	4917      	ldr	r1, [pc, #92]	; (80025fc <HAL_UART_RxCpltCallback+0x56c>)
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	e9c1 2300 	strd	r2, r3, [r1]
            	error_flag_1 = 1;
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <HAL_UART_RxCpltCallback+0x53c>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < 12; i++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	e036      	b.n	8002626 <HAL_UART_RxCpltCallback+0x596>
 80025b8:	b851eb85 	.word	0xb851eb85
 80025bc:	404ca51e 	.word	0x404ca51e
 80025c0:	200009b4 	.word	0x200009b4
 80025c4:	2000079c 	.word	0x2000079c
 80025c8:	200009a0 	.word	0x200009a0
 80025cc:	200006e1 	.word	0x200006e1
 80025d0:	200009a2 	.word	0x200009a2
 80025d4:	200009a4 	.word	0x200009a4
 80025d8:	200009a5 	.word	0x200009a5
 80025dc:	200007a8 	.word	0x200007a8
 80025e0:	40590000 	.word	0x40590000
 80025e4:	20000970 	.word	0x20000970
 80025e8:	20000978 	.word	0x20000978
 80025ec:	20000980 	.word	0x20000980
 80025f0:	20000988 	.word	0x20000988
 80025f4:	20000990 	.word	0x20000990
 80025f8:	20000998 	.word	0x20000998
 80025fc:	20000820 	.word	0x20000820
 8002600:	20000688 	.word	0x20000688
 8002604:	20000690 	.word	0x20000690
 8002608:	20000710 	.word	0x20000710
            	ros_Rx_buf[i] = 0;
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_UART_RxCpltCallback+0x5b8>)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	701a      	strb	r2, [r3, #0]
                ros_Rx_buf_true[i] = 0;
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <HAL_UART_RxCpltCallback+0x5bc>)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < 12; i++)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3301      	adds	r3, #1
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b0b      	cmp	r3, #11
 800262a:	ddef      	ble.n	800260c <HAL_UART_RxCpltCallback+0x57c>
            receive_flag = 0;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_UART_RxCpltCallback+0x5c0>)
 800262e:	2200      	movs	r2, #0
 8002630:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
 8002632:	220c      	movs	r2, #12
 8002634:	4907      	ldr	r1, [pc, #28]	; (8002654 <HAL_UART_RxCpltCallback+0x5c4>)
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <HAL_UART_RxCpltCallback+0x5c8>)
 8002638:	f005 fa88 	bl	8007b4c <HAL_UART_Receive_DMA>
}
 800263c:	bf00      	nop
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002646:	bf00      	nop
 8002648:	2000079c 	.word	0x2000079c
 800264c:	200007a8 	.word	0x200007a8
 8002650:	200009a0 	.word	0x200009a0
 8002654:	200009b4 	.word	0x200009b4
 8002658:	2000054c 	.word	0x2000054c

0800265c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002660:	f001 fbbc 	bl	8003ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002664:	f000 f906 	bl	8002874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002668:	f000 fcb4 	bl	8002fd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800266c:	f000 fc7c 	bl	8002f68 <MX_DMA_Init>
  MX_TIM3_Init();
 8002670:	f000 fa9c 	bl	8002bac <MX_TIM3_Init>
  MX_TIM4_Init();
 8002674:	f000 faee 	bl	8002c54 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002678:	f000 fa40 	bl	8002afc <MX_TIM1_Init>
  MX_ADC1_Init();
 800267c:	f000 f964 	bl	8002948 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002680:	f000 f9b4 	bl	80029ec <MX_ADC2_Init>
  MX_UART5_Init();
 8002684:	f000 fc1c 	bl	8002ec0 <MX_UART5_Init>
  MX_TIM7_Init();
 8002688:	f000 fb74 	bl	8002d74 <MX_TIM7_Init>
  MX_TIM12_Init();
 800268c:	f000 fba8 	bl	8002de0 <MX_TIM12_Init>
  MX_UART4_Init();
 8002690:	f000 fbec 	bl	8002e6c <MX_UART4_Init>
  MX_CAN1_Init();
 8002694:	f000 f9fc 	bl	8002a90 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002698:	f000 fc3c 	bl	8002f14 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800269c:	f000 fb34 	bl	8002d08 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET); //mc_en set
 80026a0:	2201      	movs	r2, #1
 80026a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026a6:	4861      	ldr	r0, [pc, #388]	; (800282c <main+0x1d0>)
 80026a8:	f003 fd46 	bl	8006138 <HAL_GPIO_WritePin>

  //MOTOR1 Setting
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET); //nsleep set
 80026ac:	2201      	movs	r2, #1
 80026ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026b2:	485f      	ldr	r0, [pc, #380]	; (8002830 <main+0x1d4>)
 80026b4:	f003 fd40 	bl	8006138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_SET); // brk control set
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026be:	485d      	ldr	r0, [pc, #372]	; (8002834 <main+0x1d8>)
 80026c0:	f003 fd3a 	bl	8006138 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80026c4:	2108      	movs	r1, #8
 80026c6:	485c      	ldr	r0, [pc, #368]	; (8002838 <main+0x1dc>)
 80026c8:	f004 fad2 	bl	8006c70 <HAL_TIM_PWM_Start>

  //MOTOR2 Setting
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET); //nsleep set
 80026cc:	2201      	movs	r2, #1
 80026ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026d2:	485a      	ldr	r0, [pc, #360]	; (800283c <main+0x1e0>)
 80026d4:	f003 fd30 	bl	8006138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_RESET); //dir set
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026de:	4854      	ldr	r0, [pc, #336]	; (8002830 <main+0x1d4>)
 80026e0:	f003 fd2a 	bl	8006138 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_SET); // brk control set
 80026e4:	2201      	movs	r2, #1
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	4852      	ldr	r0, [pc, #328]	; (8002834 <main+0x1d8>)
 80026ea:	f003 fd25 	bl	8006138 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80026ee:	2104      	movs	r1, #4
 80026f0:	4853      	ldr	r0, [pc, #332]	; (8002840 <main+0x1e4>)
 80026f2:	f004 fabd 	bl	8006c70 <HAL_TIM_PWM_Start>

  //UART Setting
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 80026f6:	4b53      	ldr	r3, [pc, #332]	; (8002844 <main+0x1e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	4b51      	ldr	r3, [pc, #324]	; (8002844 <main+0x1e8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 8002706:	4b50      	ldr	r3, [pc, #320]	; (8002848 <main+0x1ec>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <main+0x1ec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
 8002716:	4b4c      	ldr	r3, [pc, #304]	; (8002848 <main+0x1ec>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <main+0x1ec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002724:	60da      	str	r2, [r3, #12]

  //-----------------
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); //start encoder mode
 8002726:	2104      	movs	r1, #4
 8002728:	4848      	ldr	r0, [pc, #288]	; (800284c <main+0x1f0>)
 800272a:	f004 fc0f 	bl	8006f4c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); //start encoder mode
 800272e:	2104      	movs	r1, #4
 8002730:	4847      	ldr	r0, [pc, #284]	; (8002850 <main+0x1f4>)
 8002732:	f004 fc0b 	bl	8006f4c <HAL_TIM_Encoder_Start>

  canFilter1.FilterMaskIdHigh = 0x0000 ;
 8002736:	4b47      	ldr	r3, [pc, #284]	; (8002854 <main+0x1f8>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
  canFilter1.FilterIdHigh = 0x460 << 5;
 800273c:	4b45      	ldr	r3, [pc, #276]	; (8002854 <main+0x1f8>)
 800273e:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8002742:	601a      	str	r2, [r3, #0]
  canFilter1.FilterMaskIdLow = 0x0000 ;
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <main+0x1f8>)
 8002746:	2200      	movs	r2, #0
 8002748:	60da      	str	r2, [r3, #12]
  canFilter1.FilterIdLow = 0x460 << 5;
 800274a:	4b42      	ldr	r3, [pc, #264]	; (8002854 <main+0x1f8>)
 800274c:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 8002750:	605a      	str	r2, [r3, #4]
  canFilter1.FilterMode = CAN_FILTERMODE_IDMASK;
 8002752:	4b40      	ldr	r3, [pc, #256]	; (8002854 <main+0x1f8>)
 8002754:	2200      	movs	r2, #0
 8002756:	619a      	str	r2, [r3, #24]
  canFilter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <main+0x1f8>)
 800275a:	2200      	movs	r2, #0
 800275c:	61da      	str	r2, [r3, #28]
  canFilter1.FilterFIFOAssignment = CAN_RX_FIFO0;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <main+0x1f8>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  canFilter1.FilterBank = 0;
 8002764:	4b3b      	ldr	r3, [pc, #236]	; (8002854 <main+0x1f8>)
 8002766:	2200      	movs	r2, #0
 8002768:	615a      	str	r2, [r3, #20]
  canFilter1.FilterActivation = ENABLE;
 800276a:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <main+0x1f8>)
 800276c:	2201      	movs	r2, #1
 800276e:	621a      	str	r2, [r3, #32]

  HAL_CAN_ConfigFilter(&hcan1, &canFilter1);
 8002770:	4938      	ldr	r1, [pc, #224]	; (8002854 <main+0x1f8>)
 8002772:	4839      	ldr	r0, [pc, #228]	; (8002858 <main+0x1fc>)
 8002774:	f002 f85e 	bl	8004834 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(&hcan1);
 8002778:	4837      	ldr	r0, [pc, #220]	; (8002858 <main+0x1fc>)
 800277a:	f002 f93b 	bl	80049f4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800277e:	2102      	movs	r1, #2
 8002780:	4835      	ldr	r0, [pc, #212]	; (8002858 <main+0x1fc>)
 8002782:	f002 fba2 	bl	8004eca <HAL_CAN_ActivateNotification>

  TxHeader.StdId = 0x460;
 8002786:	4b35      	ldr	r3, [pc, #212]	; (800285c <main+0x200>)
 8002788:	f44f 628c 	mov.w	r2, #1120	; 0x460
 800278c:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 800278e:	4b33      	ldr	r3, [pc, #204]	; (800285c <main+0x200>)
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <main+0x200>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <main+0x200>)
 800279c:	2208      	movs	r2, #8
 800279e:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <main+0x200>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	751a      	strb	r2, [r3, #20]



  HAL_Delay(2000);
 80027a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80027aa:	f001 fb89 	bl	8003ec0 <HAL_Delay>
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,0); // test motor1
 80027ae:	4b22      	ldr	r3, [pc, #136]	; (8002838 <main+0x1dc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2200      	movs	r2, #0
 80027b4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,0); // test motor2
 80027b6:	4b22      	ldr	r3, [pc, #136]	; (8002840 <main+0x1e4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2200      	movs	r2, #0
 80027bc:	639a      	str	r2, [r3, #56]	; 0x38
  //MOTOR1, MOTOR2 50ms timer start
  HAL_TIM_Base_Start_IT(&htim7); //timer start
 80027be:	4828      	ldr	r0, [pc, #160]	; (8002860 <main+0x204>)
 80027c0:	f004 f996 	bl	8006af0 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_14);
 80027c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80027c8:	481a      	ldr	r0, [pc, #104]	; (8002834 <main+0x1d8>)
 80027ca:	f003 fcce 	bl	800616a <HAL_GPIO_TogglePin>

  //HAL_UART_Transmit_IT(&huart3, TxData, sizeof(TxData));

  TxData[0] = 0x60;
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <main+0x208>)
 80027d0:	2260      	movs	r2, #96	; 0x60
 80027d2:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <main+0x208>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <main+0x208>)
 80027dc:	2200      	movs	r2, #0
 80027de:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x00;
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <main+0x208>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x00;
 80027e6:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <main+0x208>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x00;
 80027ec:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <main+0x208>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x00;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <main+0x208>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x00;
 80027f8:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <main+0x208>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	71da      	strb	r2, [r3, #7]
  TxmailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);
 80027fe:	4816      	ldr	r0, [pc, #88]	; (8002858 <main+0x1fc>)
 8002800:	f002 fa0c 	bl	8004c1c <HAL_CAN_GetTxMailboxesFreeLevel>
 8002804:	4603      	mov	r3, r0
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <main+0x20c>)
 8002808:	6013      	str	r3, [r2, #0]
  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxmailBox);
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <main+0x20c>)
 800280c:	4a15      	ldr	r2, [pc, #84]	; (8002864 <main+0x208>)
 800280e:	4913      	ldr	r1, [pc, #76]	; (800285c <main+0x200>)
 8002810:	4811      	ldr	r0, [pc, #68]	; (8002858 <main+0x1fc>)
 8002812:	f002 f933 	bl	8004a7c <HAL_CAN_AddTxMessage>


  HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
 8002816:	220c      	movs	r2, #12
 8002818:	4914      	ldr	r1, [pc, #80]	; (800286c <main+0x210>)
 800281a:	480b      	ldr	r0, [pc, #44]	; (8002848 <main+0x1ec>)
 800281c:	f005 f996 	bl	8007b4c <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart4, &rx_dma_data4, 1);
 8002820:	2201      	movs	r2, #1
 8002822:	4913      	ldr	r1, [pc, #76]	; (8002870 <main+0x214>)
 8002824:	4807      	ldr	r0, [pc, #28]	; (8002844 <main+0x1e8>)
 8002826:	f005 f991 	bl	8007b4c <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800282a:	e7fe      	b.n	800282a <main+0x1ce>
 800282c:	40020000 	.word	0x40020000
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40020800 	.word	0x40020800
 8002838:	2000039c 	.word	0x2000039c
 800283c:	40020400 	.word	0x40020400
 8002840:	20000474 	.word	0x20000474
 8002844:	200004bc 	.word	0x200004bc
 8002848:	2000054c 	.word	0x2000054c
 800284c:	20000354 	.word	0x20000354
 8002850:	2000030c 	.word	0x2000030c
 8002854:	20000878 	.word	0x20000878
 8002858:	200002e4 	.word	0x200002e4
 800285c:	200008a0 	.word	0x200008a0
 8002860:	2000042c 	.word	0x2000042c
 8002864:	200008d8 	.word	0x200008d8
 8002868:	200008d4 	.word	0x200008d4
 800286c:	200009b4 	.word	0x200009b4
 8002870:	200009c0 	.word	0x200009c0

08002874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b094      	sub	sp, #80	; 0x50
 8002878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800287a:	f107 0320 	add.w	r3, r7, #32
 800287e:	2230      	movs	r2, #48	; 0x30
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f007 f935 	bl	8009af2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	4b28      	ldr	r3, [pc, #160]	; (8002940 <SystemClock_Config+0xcc>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a27      	ldr	r2, [pc, #156]	; (8002940 <SystemClock_Config+0xcc>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b25      	ldr	r3, [pc, #148]	; (8002940 <SystemClock_Config+0xcc>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	2300      	movs	r3, #0
 80028b6:	607b      	str	r3, [r7, #4]
 80028b8:	4b22      	ldr	r3, [pc, #136]	; (8002944 <SystemClock_Config+0xd0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <SystemClock_Config+0xd0>)
 80028be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <SystemClock_Config+0xd0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028d0:	2302      	movs	r3, #2
 80028d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d4:	2301      	movs	r3, #1
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d8:	2310      	movs	r3, #16
 80028da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028dc:	2302      	movs	r3, #2
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028e4:	2308      	movs	r3, #8
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028e8:	23a8      	movs	r3, #168	; 0xa8
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028f0:	2304      	movs	r3, #4
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f4:	f107 0320 	add.w	r3, r7, #32
 80028f8:	4618      	mov	r0, r3
 80028fa:	f003 fc51 	bl	80061a0 <HAL_RCC_OscConfig>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d001      	beq.n	8002908 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002904:	f000 fc70 	bl	80031e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002908:	230f      	movs	r3, #15
 800290a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290c:	2302      	movs	r3, #2
 800290e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002914:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002918:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800291a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800291e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	2105      	movs	r1, #5
 8002926:	4618      	mov	r0, r3
 8002928:	f003 feb2 	bl	8006690 <HAL_RCC_ClockConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002932:	f000 fc59 	bl	80031e8 <Error_Handler>
  }
}
 8002936:	bf00      	nop
 8002938:	3750      	adds	r7, #80	; 0x50
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023800 	.word	0x40023800
 8002944:	40007000 	.word	0x40007000

08002948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_ADC1_Init+0x98>)
 800295c:	4a21      	ldr	r2, [pc, #132]	; (80029e4 <MX_ADC1_Init+0x9c>)
 800295e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002962:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <MX_ADC1_Init+0x98>)
 800296a:	2200      	movs	r2, #0
 800296c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002976:	2200      	movs	r2, #0
 8002978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_ADC1_Init+0x98>)
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002982:	4b17      	ldr	r3, [pc, #92]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002984:	2200      	movs	r2, #0
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002988:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <MX_ADC1_Init+0x98>)
 800298a:	4a17      	ldr	r2, [pc, #92]	; (80029e8 <MX_ADC1_Init+0xa0>)
 800298c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298e:	4b14      	ldr	r3, [pc, #80]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002990:	2200      	movs	r2, #0
 8002992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002994:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <MX_ADC1_Init+0x98>)
 8002996:	2201      	movs	r2, #1
 8002998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800299a:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <MX_ADC1_Init+0x98>)
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a8:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029aa:	f001 faad 	bl	8003f08 <HAL_ADC_Init>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029b4:	f000 fc18 	bl	80031e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029b8:	2304      	movs	r3, #4
 80029ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c4:	463b      	mov	r3, r7
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_ADC1_Init+0x98>)
 80029ca:	f001 fc0f 	bl	80041ec <HAL_ADC_ConfigChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029d4:	f000 fc08 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	200001f4 	.word	0x200001f4
 80029e4:	40012000 	.word	0x40012000
 80029e8:	0f000001 	.word	0x0f000001

080029ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80029f2:	463b      	mov	r3, r7
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a00:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <MX_ADC2_Init+0x9c>)
 8002a02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002a04:	4b1f      	ldr	r3, [pc, #124]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a26:	4b17      	ldr	r3, [pc, #92]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a2e:	4a17      	ldr	r2, [pc, #92]	; (8002a8c <MX_ADC2_Init+0xa0>)
 8002a30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a32:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002a3e:	4b11      	ldr	r3, [pc, #68]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002a4c:	480d      	ldr	r0, [pc, #52]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a4e:	f001 fa5b 	bl	8003f08 <HAL_ADC_Init>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002a58:	f000 fbc6 	bl	80031e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a5c:	2305      	movs	r3, #5
 8002a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002a60:	2301      	movs	r3, #1
 8002a62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a68:	463b      	mov	r3, r7
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4805      	ldr	r0, [pc, #20]	; (8002a84 <MX_ADC2_Init+0x98>)
 8002a6e:	f001 fbbd 	bl	80041ec <HAL_ADC_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002a78:	f000 fbb6 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a7c:	bf00      	nop
 8002a7e:	3710      	adds	r7, #16
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	2000023c 	.word	0x2000023c
 8002a88:	40012100 	.word	0x40012100
 8002a8c:	0f000001 	.word	0x0f000001

08002a90 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002a94:	4b17      	ldr	r3, [pc, #92]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <MX_CAN1_Init+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8002a9a:	4b16      	ldr	r3, [pc, #88]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002aa0:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002aa6:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aae:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 8002ab2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ab6:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8002aba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002ae0:	4804      	ldr	r0, [pc, #16]	; (8002af4 <MX_CAN1_Init+0x64>)
 8002ae2:	f001 fdab 	bl	800463c <HAL_CAN_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002aec:	f000 fb7c 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200002e4 	.word	0x200002e4
 8002af8:	40006400 	.word	0x40006400

08002afc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f006 fff1 	bl	8009af2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <MX_TIM1_Init+0xac>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1f      	ldr	r3, [pc, #124]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b44:	2303      	movs	r3, #3
 8002b46:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	480d      	ldr	r0, [pc, #52]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b70:	f004 f946 	bl	8006e00 <HAL_TIM_Encoder_Init>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8002b7a:	f000 fb35 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b86:	1d3b      	adds	r3, r7, #4
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <MX_TIM1_Init+0xa8>)
 8002b8c:	f004 fec8 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8002b96:	f000 fb27 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	3730      	adds	r7, #48	; 0x30
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000030c 	.word	0x2000030c
 8002ba8:	40010000 	.word	0x40010000

08002bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002bb2:	f107 030c 	add.w	r3, r7, #12
 8002bb6:	2224      	movs	r2, #36	; 0x24
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f006 ff99 	bl	8009af2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bc8:	4b20      	ldr	r3, [pc, #128]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002bca:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <MX_TIM3_Init+0xa4>)
 8002bcc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002be0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c06:	2301      	movs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002c12:	f107 030c 	add.w	r3, r7, #12
 8002c16:	4619      	mov	r1, r3
 8002c18:	480c      	ldr	r0, [pc, #48]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002c1a:	f004 f8f1 	bl	8006e00 <HAL_TIM_Encoder_Init>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c24:	f000 fae0 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c30:	1d3b      	adds	r3, r7, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	4805      	ldr	r0, [pc, #20]	; (8002c4c <MX_TIM3_Init+0xa0>)
 8002c36:	f004 fe73 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c40:	f000 fad2 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c44:	bf00      	nop
 8002c46:	3730      	adds	r7, #48	; 0x30
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000354 	.word	0x20000354
 8002c50:	40000400 	.word	0x40000400

08002c54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	; 0x28
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5a:	f107 0320 	add.w	r3, r7, #32
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c64:	1d3b      	adds	r3, r7, #4
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
 8002c6e:	60da      	str	r2, [r3, #12]
 8002c70:	611a      	str	r2, [r3, #16]
 8002c72:	615a      	str	r2, [r3, #20]
 8002c74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <MX_TIM4_Init+0xb0>)
 8002c7a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c7c:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3499;
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c8a:	f640 52ab 	movw	r2, #3499	; 0xdab
 8002c8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c9c:	4818      	ldr	r0, [pc, #96]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002c9e:	f003 ff97 	bl	8006bd0 <HAL_TIM_PWM_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002ca8:	f000 fa9e 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cb4:	f107 0320 	add.w	r3, r7, #32
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4811      	ldr	r0, [pc, #68]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002cbc:	f004 fe30 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002cc6:	f000 fa8f 	bl	80031e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cca:	2360      	movs	r3, #96	; 0x60
 8002ccc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cda:	1d3b      	adds	r3, r7, #4
 8002cdc:	2208      	movs	r2, #8
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4807      	ldr	r0, [pc, #28]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002ce2:	f004 fab1 	bl	8007248 <HAL_TIM_PWM_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002cec:	f000 fa7c 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <MX_TIM4_Init+0xac>)
 8002cf2:	f000 fce3 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000039c 	.word	0x2000039c
 8002d04:	40000800 	.word	0x40000800

08002d08 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d0e:	463b      	mov	r3, r7
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d18:	4a15      	ldr	r2, [pc, #84]	; (8002d70 <MX_TIM6_Init+0x68>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8002d1c:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d1e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8002d22:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002d30:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d38:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d3a:	f003 fe89 	bl	8006a50 <HAL_TIM_Base_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d44:	f000 fa50 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d50:	463b      	mov	r3, r7
 8002d52:	4619      	mov	r1, r3
 8002d54:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_TIM6_Init+0x64>)
 8002d56:	f004 fde3 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d60:	f000 fa42 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	200003e4 	.word	0x200003e4
 8002d70:	40001000 	.word	0x40001000

08002d74 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d7a:	463b      	mov	r3, r7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]
 8002d80:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002d82:	4b15      	ldr	r3, [pc, #84]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002d84:	4a15      	ldr	r2, [pc, #84]	; (8002ddc <MX_TIM7_Init+0x68>)
 8002d86:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 840-1;
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002d8a:	f240 3247 	movw	r2, #839	; 0x347
 8002d8e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d90:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8002d96:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002d98:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002d9c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002da4:	480c      	ldr	r0, [pc, #48]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002da6:	f003 fe53 	bl	8006a50 <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002db0:	f000 fa1a 	bl	80031e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4805      	ldr	r0, [pc, #20]	; (8002dd8 <MX_TIM7_Init+0x64>)
 8002dc2:	f004 fdad 	bl	8007920 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002dcc:	f000 fa0c 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002dd0:	bf00      	nop
 8002dd2:	3708      	adds	r7, #8
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000042c 	.word	0x2000042c
 8002ddc:	40001400 	.word	0x40001400

08002de0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
 8002df4:	615a      	str	r2, [r3, #20]
 8002df6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002df8:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002dfa:	4a1b      	ldr	r2, [pc, #108]	; (8002e68 <MX_TIM12_Init+0x88>)
 8002dfc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8002dfe:	4b19      	ldr	r3, [pc, #100]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3499;
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e0c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8002e10:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e12:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e18:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002e1e:	4811      	ldr	r0, [pc, #68]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e20:	f003 fed6 	bl	8006bd0 <HAL_TIM_PWM_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002e2a:	f000 f9dd 	bl	80031e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e2e:	2360      	movs	r3, #96	; 0x60
 8002e30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e3e:	1d3b      	adds	r3, r7, #4
 8002e40:	2204      	movs	r2, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4807      	ldr	r0, [pc, #28]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e46:	f004 f9ff 	bl	8007248 <HAL_TIM_PWM_ConfigChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002e50:	f000 f9ca 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002e54:	4803      	ldr	r0, [pc, #12]	; (8002e64 <MX_TIM12_Init+0x84>)
 8002e56:	f000 fc31 	bl	80036bc <HAL_TIM_MspPostInit>

}
 8002e5a:	bf00      	nop
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000474 	.word	0x20000474
 8002e68:	40001800 	.word	0x40001800

08002e6c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e70:	4b11      	ldr	r3, [pc, #68]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e72:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <MX_UART4_Init+0x50>)
 8002e74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e78:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002e7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e92:	220c      	movs	r2, #12
 8002e94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e9c:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_UART4_Init+0x4c>)
 8002ea4:	f004 fdcc 	bl	8007a40 <HAL_UART_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002eae:	f000 f99b 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200004bc 	.word	0x200004bc
 8002ebc:	40004c00 	.word	0x40004c00

08002ec0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002ec4:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ec6:	4a12      	ldr	r2, [pc, #72]	; (8002f10 <MX_UART5_Init+0x50>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ecc:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002ed0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002ef6:	4805      	ldr	r0, [pc, #20]	; (8002f0c <MX_UART5_Init+0x4c>)
 8002ef8:	f004 fda2 	bl	8007a40 <HAL_UART_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002f02:	f000 f971 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002f06:	bf00      	nop
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	20000504 	.word	0x20000504
 8002f10:	40005000 	.word	0x40005000

08002f14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <MX_USART3_UART_Init+0x50>)
 8002f1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f20:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002f24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f26:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f32:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f4a:	4805      	ldr	r0, [pc, #20]	; (8002f60 <MX_USART3_UART_Init+0x4c>)
 8002f4c:	f004 fd78 	bl	8007a40 <HAL_UART_Init>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f56:	f000 f947 	bl	80031e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2000054c 	.word	0x2000054c
 8002f64:	40004800 	.word	0x40004800

08002f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	4a16      	ldr	r2, [pc, #88]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4a0f      	ldr	r2, [pc, #60]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f98:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <MX_DMA_Init+0x68>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	603b      	str	r3, [r7, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	200c      	movs	r0, #12
 8002fac:	f002 fae1 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fb0:	200c      	movs	r0, #12
 8002fb2:	f002 fafa 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2100      	movs	r1, #0
 8002fba:	200d      	movs	r0, #13
 8002fbc:	f002 fad9 	bl	8005572 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002fc0:	200d      	movs	r0, #13
 8002fc2:	f002 faf2 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40023800 	.word	0x40023800

08002fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fda:	f107 031c 	add.w	r3, r7, #28
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	4b78      	ldr	r3, [pc, #480]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a77      	ldr	r2, [pc, #476]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b75      	ldr	r3, [pc, #468]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	4b71      	ldr	r3, [pc, #452]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	4a70      	ldr	r2, [pc, #448]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003010:	f043 0304 	orr.w	r3, r3, #4
 8003014:	6313      	str	r3, [r2, #48]	; 0x30
 8003016:	4b6e      	ldr	r3, [pc, #440]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	4a69      	ldr	r2, [pc, #420]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 800302c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003030:	6313      	str	r3, [r2, #48]	; 0x30
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	613b      	str	r3, [r7, #16]
 800303c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800303e:	2300      	movs	r3, #0
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	4b63      	ldr	r3, [pc, #396]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	4a62      	ldr	r2, [pc, #392]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6313      	str	r3, [r2, #48]	; 0x30
 800304e:	4b60      	ldr	r3, [pc, #384]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4b5c      	ldr	r3, [pc, #368]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003064:	f043 0302 	orr.w	r3, r3, #2
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b59      	ldr	r3, [pc, #356]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307e:	4a54      	ldr	r2, [pc, #336]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003080:	f043 0308 	orr.w	r3, r3, #8
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b52      	ldr	r3, [pc, #328]	; (80031d0 <MX_GPIO_Init+0x1fc>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin, GPIO_PIN_SET);
 8003092:	2201      	movs	r2, #1
 8003094:	f24c 1180 	movw	r1, #49536	; 0xc180
 8003098:	484e      	ldr	r0, [pc, #312]	; (80031d4 <MX_GPIO_Init+0x200>)
 800309a:	f003 f84d 	bl	8006138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M2_GPIO_Port, nSLEEP_M2_Pin, GPIO_PIN_RESET);
 800309e:	2200      	movs	r2, #0
 80030a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030a4:	484c      	ldr	r0, [pc, #304]	; (80031d8 <MX_GPIO_Init+0x204>)
 80030a6:	f003 f847 	bl	8006138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIR_DC_M2_Pin|DIR_DC_M1_Pin, GPIO_PIN_SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 80030b0:	484a      	ldr	r0, [pc, #296]	; (80031dc <MX_GPIO_Init+0x208>)
 80030b2:	f003 f841 	bl	8006138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M1_GPIO_Port, nSLEEP_M1_Pin, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030bc:	4847      	ldr	r0, [pc, #284]	; (80031dc <MX_GPIO_Init+0x208>)
 80030be:	f003 f83b 	bl	8006138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_EN_GPIO_Port, MC_EN_Pin, GPIO_PIN_SET);
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030c8:	4845      	ldr	r0, [pc, #276]	; (80031e0 <MX_GPIO_Init+0x20c>)
 80030ca:	f003 f835 	bl	8006138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CHK_MC_EN_Pin CHK_MC_DIS_Pin */
  GPIO_InitStruct.Pin = CHK_MC_EN_Pin|CHK_MC_DIS_Pin;
 80030ce:	230c      	movs	r3, #12
 80030d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030d2:	2300      	movs	r3, #0
 80030d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030d6:	2301      	movs	r3, #1
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030da:	f107 031c 	add.w	r3, r7, #28
 80030de:	4619      	mov	r1, r3
 80030e0:	4840      	ldr	r0, [pc, #256]	; (80031e4 <MX_GPIO_Init+0x210>)
 80030e2:	f002 fe8d 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin BRK_CONTROL_2_Pin BRK_CONTORL_1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin;
 80030e6:	f24c 1380 	movw	r3, #49536	; 0xc180
 80030ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ec:	2301      	movs	r3, #1
 80030ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f0:	2301      	movs	r3, #1
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030f8:	f107 031c 	add.w	r3, r7, #28
 80030fc:	4619      	mov	r1, r3
 80030fe:	4835      	ldr	r0, [pc, #212]	; (80031d4 <MX_GPIO_Init+0x200>)
 8003100:	f002 fe7e 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 8003104:	2306      	movs	r3, #6
 8003106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003108:	2300      	movs	r3, #0
 800310a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310c:	2301      	movs	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	4832      	ldr	r0, [pc, #200]	; (80031e0 <MX_GPIO_Init+0x20c>)
 8003118:	f002 fe72 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M2_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M2_Pin;
 800311c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003126:	2300      	movs	r3, #0
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nSLEEP_M2_GPIO_Port, &GPIO_InitStruct);
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	4619      	mov	r1, r3
 8003134:	4828      	ldr	r0, [pc, #160]	; (80031d8 <MX_GPIO_Init+0x204>)
 8003136:	f002 fe63 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_DC_M2_Pin DIR_DC_M1_Pin */
  GPIO_InitStruct.Pin = DIR_DC_M2_Pin|DIR_DC_M1_Pin;
 800313a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800313e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	2301      	movs	r3, #1
 8003142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003144:	2301      	movs	r3, #1
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	4619      	mov	r1, r3
 8003152:	4822      	ldr	r0, [pc, #136]	; (80031dc <MX_GPIO_Init+0x208>)
 8003154:	f002 fe54 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULTn_M2_Pin SNSOUT_M2_Pin FAULTn_M1_Pin */
  GPIO_InitStruct.Pin = FAULTn_M2_Pin|SNSOUT_M2_Pin|FAULTn_M1_Pin;
 8003158:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800315c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800315e:	2300      	movs	r3, #0
 8003160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003166:	f107 031c 	add.w	r3, r7, #28
 800316a:	4619      	mov	r1, r3
 800316c:	481b      	ldr	r0, [pc, #108]	; (80031dc <MX_GPIO_Init+0x208>)
 800316e:	f002 fe47 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M1_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M1_Pin;
 8003172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003178:	2301      	movs	r3, #1
 800317a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nSLEEP_M1_GPIO_Port, &GPIO_InitStruct);
 8003184:	f107 031c 	add.w	r3, r7, #28
 8003188:	4619      	mov	r1, r3
 800318a:	4814      	ldr	r0, [pc, #80]	; (80031dc <MX_GPIO_Init+0x208>)
 800318c:	f002 fe38 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSOUT__M1_Pin */
  GPIO_InitStruct.Pin = SNSOUT__M1_Pin;
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	2300      	movs	r3, #0
 8003196:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SNSOUT__M1_GPIO_Port, &GPIO_InitStruct);
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	480c      	ldr	r0, [pc, #48]	; (80031d4 <MX_GPIO_Init+0x200>)
 80031a4:	f002 fe2c 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MC_EN_Pin */
  GPIO_InitStruct.Pin = MC_EN_Pin;
 80031a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ae:	2301      	movs	r3, #1
 80031b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b2:	2301      	movs	r3, #1
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b6:	2300      	movs	r3, #0
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MC_EN_GPIO_Port, &GPIO_InitStruct);
 80031ba:	f107 031c 	add.w	r3, r7, #28
 80031be:	4619      	mov	r1, r3
 80031c0:	4807      	ldr	r0, [pc, #28]	; (80031e0 <MX_GPIO_Init+0x20c>)
 80031c2:	f002 fe1d 	bl	8005e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031c6:	bf00      	nop
 80031c8:	3730      	adds	r7, #48	; 0x30
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020400 	.word	0x40020400
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40021000 	.word	0x40021000

080031e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_MspInit+0x4c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_MspInit+0x4c>)
 8003208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_MspInit+0x4c>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003216:	607b      	str	r3, [r7, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_MspInit+0x4c>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_MspInit+0x4c>)
 8003224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003228:	6413      	str	r3, [r2, #64]	; 0x40
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_MspInit+0x4c>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003236:	2007      	movs	r0, #7
 8003238:	f002 f990 	bl	800555c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800

08003248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08c      	sub	sp, #48	; 0x30
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 031c 	add.w	r3, r7, #28
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_ADC_MspInit+0x158>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d130      	bne.n	80032cc <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	4b4d      	ldr	r3, [pc, #308]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a4c      	ldr	r2, [pc, #304]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	4b46      	ldr	r3, [pc, #280]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	4a45      	ldr	r2, [pc, #276]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6313      	str	r3, [r2, #48]	; 0x30
 8003296:	4b43      	ldr	r3, [pc, #268]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80032a2:	2310      	movs	r3, #16
 80032a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a6:	2303      	movs	r3, #3
 80032a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ae:	f107 031c 	add.w	r3, r7, #28
 80032b2:	4619      	mov	r1, r3
 80032b4:	483c      	ldr	r0, [pc, #240]	; (80033a8 <HAL_ADC_MspInit+0x160>)
 80032b6:	f002 fda3 	bl	8005e00 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	2012      	movs	r0, #18
 80032c0:	f002 f957 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80032c4:	2012      	movs	r0, #18
 80032c6:	f002 f970 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80032ca:	e064      	b.n	8003396 <HAL_ADC_MspInit+0x14e>
  else if(hadc->Instance==ADC2)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a36      	ldr	r2, [pc, #216]	; (80033ac <HAL_ADC_MspInit+0x164>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d15f      	bne.n	8003396 <HAL_ADC_MspInit+0x14e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 80032e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032e4:	6453      	str	r3, [r2, #68]	; 0x44
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	4b2b      	ldr	r3, [pc, #172]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a2a      	ldr	r2, [pc, #168]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <HAL_ADC_MspInit+0x15c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|A2_5_M_SO_M2_Pin;
 800330e:	2330      	movs	r3, #48	; 0x30
 8003310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003312:	2303      	movs	r3, #3
 8003314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800331a:	f107 031c 	add.w	r3, r7, #28
 800331e:	4619      	mov	r1, r3
 8003320:	4821      	ldr	r0, [pc, #132]	; (80033a8 <HAL_ADC_MspInit+0x160>)
 8003322:	f002 fd6d 	bl	8005e00 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003326:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003328:	4a22      	ldr	r2, [pc, #136]	; (80033b4 <HAL_ADC_MspInit+0x16c>)
 800332a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800332c:	4b20      	ldr	r3, [pc, #128]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800332e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003332:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800333a:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800333c:	2200      	movs	r2, #0
 800333e:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003346:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003348:	4b19      	ldr	r3, [pc, #100]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800334a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800334e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003350:	4b17      	ldr	r3, [pc, #92]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003356:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003358:	4b15      	ldr	r3, [pc, #84]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800336a:	4811      	ldr	r0, [pc, #68]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800336c:	f002 f946 	bl	80055fc <HAL_DMA_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_ADC_MspInit+0x132>
      Error_Handler();
 8003376:	f7ff ff37 	bl	80031e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a0c      	ldr	r2, [pc, #48]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
 8003380:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <HAL_ADC_MspInit+0x168>)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003386:	2200      	movs	r2, #0
 8003388:	2100      	movs	r1, #0
 800338a:	2012      	movs	r0, #18
 800338c:	f002 f8f1 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003390:	2012      	movs	r0, #18
 8003392:	f002 f90a 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 8003396:	bf00      	nop
 8003398:	3730      	adds	r7, #48	; 0x30
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40012000 	.word	0x40012000
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020000 	.word	0x40020000
 80033ac:	40012100 	.word	0x40012100
 80033b0:	20000284 	.word	0x20000284
 80033b4:	40026440 	.word	0x40026440

080033b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_CAN_MspInit+0xc4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d14c      	bne.n	8003474 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b28      	ldr	r3, [pc, #160]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	4a27      	ldr	r2, [pc, #156]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 80033e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033e8:	6413      	str	r3, [r2, #64]	; 0x40
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a20      	ldr	r2, [pc, #128]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_CAN_MspInit+0xc8>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003418:	2302      	movs	r3, #2
 800341a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003420:	2303      	movs	r3, #3
 8003422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003424:	2309      	movs	r3, #9
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003428:	f107 0314 	add.w	r3, r7, #20
 800342c:	4619      	mov	r1, r3
 800342e:	4815      	ldr	r0, [pc, #84]	; (8003484 <HAL_CAN_MspInit+0xcc>)
 8003430:	f002 fce6 	bl	8005e00 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	2013      	movs	r0, #19
 800343a:	f002 f89a 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800343e:	2013      	movs	r0, #19
 8003440:	f002 f8b3 	bl	80055aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2100      	movs	r1, #0
 8003448:	2014      	movs	r0, #20
 800344a:	f002 f892 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800344e:	2014      	movs	r0, #20
 8003450:	f002 f8ab 	bl	80055aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003454:	2200      	movs	r2, #0
 8003456:	2100      	movs	r1, #0
 8003458:	2015      	movs	r0, #21
 800345a:	f002 f88a 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800345e:	2015      	movs	r0, #21
 8003460:	f002 f8a3 	bl	80055aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003464:	2200      	movs	r2, #0
 8003466:	2100      	movs	r1, #0
 8003468:	2016      	movs	r0, #22
 800346a:	f002 f882 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800346e:	2016      	movs	r0, #22
 8003470:	f002 f89b 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003474:	bf00      	nop
 8003476:	3728      	adds	r7, #40	; 0x28
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40006400 	.word	0x40006400
 8003480:	40023800 	.word	0x40023800
 8003484:	40020400 	.word	0x40020400

08003488 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08c      	sub	sp, #48	; 0x30
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	609a      	str	r2, [r3, #8]
 800349c:	60da      	str	r2, [r3, #12]
 800349e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <HAL_TIM_Encoder_MspInit+0x108>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d135      	bne.n	8003516 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
 80034ae:	4b39      	ldr	r3, [pc, #228]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	4a38      	ldr	r2, [pc, #224]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6453      	str	r3, [r2, #68]	; 0x44
 80034ba:	4b36      	ldr	r3, [pc, #216]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	61bb      	str	r3, [r7, #24]
 80034c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	4b32      	ldr	r3, [pc, #200]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	4a31      	ldr	r2, [pc, #196]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034d0:	f043 0310 	orr.w	r3, r3, #16
 80034d4:	6313      	str	r3, [r2, #48]	; 0x30
 80034d6:	4b2f      	ldr	r3, [pc, #188]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = T1_1_ENC2_A_Pin|T1_2_ENC2_B_Pin;
 80034e2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80034e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e8:	2302      	movs	r3, #2
 80034ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034f4:	2301      	movs	r3, #1
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f8:	f107 031c 	add.w	r3, r7, #28
 80034fc:	4619      	mov	r1, r3
 80034fe:	4826      	ldr	r0, [pc, #152]	; (8003598 <HAL_TIM_Encoder_MspInit+0x110>)
 8003500:	f002 fc7e 	bl	8005e00 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003504:	2200      	movs	r2, #0
 8003506:	2100      	movs	r1, #0
 8003508:	2019      	movs	r0, #25
 800350a:	f002 f832 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800350e:	2019      	movs	r0, #25
 8003510:	f002 f84b 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003514:	e038      	b.n	8003588 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a20      	ldr	r2, [pc, #128]	; (800359c <HAL_TIM_Encoder_MspInit+0x114>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d133      	bne.n	8003588 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 800352a:	f043 0302 	orr.w	r3, r3, #2
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_TIM_Encoder_MspInit+0x10c>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T3_1_ENC1_A_Pin|T3_2_ENC1_B_Pin;
 8003558:	23c0      	movs	r3, #192	; 0xc0
 800355a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003560:	2300      	movs	r3, #0
 8003562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003568:	2302      	movs	r3, #2
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 031c 	add.w	r3, r7, #28
 8003570:	4619      	mov	r1, r3
 8003572:	480b      	ldr	r0, [pc, #44]	; (80035a0 <HAL_TIM_Encoder_MspInit+0x118>)
 8003574:	f002 fc44 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	201d      	movs	r0, #29
 800357e:	f001 fff8 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003582:	201d      	movs	r0, #29
 8003584:	f002 f811 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 8003588:	bf00      	nop
 800358a:	3730      	adds	r7, #48	; 0x30
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40010000 	.word	0x40010000
 8003594:	40023800 	.word	0x40023800
 8003598:	40021000 	.word	0x40021000
 800359c:	40000400 	.word	0x40000400
 80035a0:	40020000 	.word	0x40020000

080035a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_TIM_PWM_MspInit+0x80>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d116      	bne.n	80035e4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b1b      	ldr	r3, [pc, #108]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	4a1a      	ldr	r2, [pc, #104]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6413      	str	r3, [r2, #64]	; 0x40
 80035c6:	4b18      	ldr	r3, [pc, #96]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80035d2:	2200      	movs	r2, #0
 80035d4:	2100      	movs	r1, #0
 80035d6:	201e      	movs	r0, #30
 80035d8:	f001 ffcb 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80035dc:	201e      	movs	r0, #30
 80035de:	f001 ffe4 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80035e2:	e01a      	b.n	800361a <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM12)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a10      	ldr	r2, [pc, #64]	; (800362c <HAL_TIM_PWM_MspInit+0x88>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d115      	bne.n	800361a <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	4b0d      	ldr	r3, [pc, #52]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a0c      	ldr	r2, [pc, #48]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
 80035fe:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <HAL_TIM_PWM_MspInit+0x84>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	2100      	movs	r1, #0
 800360e:	202b      	movs	r0, #43	; 0x2b
 8003610:	f001 ffaf 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003614:	202b      	movs	r0, #43	; 0x2b
 8003616:	f001 ffc8 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40000800 	.word	0x40000800
 8003628:	40023800 	.word	0x40023800
 800362c:	40001800 	.word	0x40001800

08003630 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_TIM_Base_MspInit+0x80>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d116      	bne.n	8003670 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a1a      	ldr	r2, [pc, #104]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2100      	movs	r1, #0
 8003662:	2036      	movs	r0, #54	; 0x36
 8003664:	f001 ff85 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003668:	2036      	movs	r0, #54	; 0x36
 800366a:	f001 ff9e 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800366e:	e01a      	b.n	80036a6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a10      	ldr	r2, [pc, #64]	; (80036b8 <HAL_TIM_Base_MspInit+0x88>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d115      	bne.n	80036a6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a0c      	ldr	r2, [pc, #48]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 8003684:	f043 0320 	orr.w	r3, r3, #32
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_TIM_Base_MspInit+0x84>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003696:	2200      	movs	r2, #0
 8003698:	2100      	movs	r1, #0
 800369a:	2037      	movs	r0, #55	; 0x37
 800369c:	f001 ff69 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80036a0:	2037      	movs	r0, #55	; 0x37
 80036a2:	f001 ff82 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40001000 	.word	0x40001000
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40001400 	.word	0x40001400

080036bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 0314 	add.w	r3, r7, #20
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a25      	ldr	r2, [pc, #148]	; (8003770 <HAL_TIM_MspPostInit+0xb4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d11f      	bne.n	800371e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b21      	ldr	r3, [pc, #132]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = T4_3_PWM_DC_M1_Pin;
 80036fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800370c:	2302      	movs	r3, #2
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T4_3_PWM_DC_M1_GPIO_Port, &GPIO_InitStruct);
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	4619      	mov	r1, r3
 8003716:	4818      	ldr	r0, [pc, #96]	; (8003778 <HAL_TIM_MspPostInit+0xbc>)
 8003718:	f002 fb72 	bl	8005e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800371c:	e023      	b.n	8003766 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_TIM_MspPostInit+0xc0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d11e      	bne.n	8003766 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003728:	2300      	movs	r3, #0
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 800372e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003730:	4a10      	ldr	r2, [pc, #64]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 8003732:	f043 0302 	orr.w	r3, r3, #2
 8003736:	6313      	str	r3, [r2, #48]	; 0x30
 8003738:	4b0e      	ldr	r3, [pc, #56]	; (8003774 <HAL_TIM_MspPostInit+0xb8>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T12_2_PWM_DC_M2_Pin;
 8003744:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003756:	2309      	movs	r3, #9
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T12_2_PWM_DC_M2_GPIO_Port, &GPIO_InitStruct);
 800375a:	f107 0314 	add.w	r3, r7, #20
 800375e:	4619      	mov	r1, r3
 8003760:	4807      	ldr	r0, [pc, #28]	; (8003780 <HAL_TIM_MspPostInit+0xc4>)
 8003762:	f002 fb4d 	bl	8005e00 <HAL_GPIO_Init>
}
 8003766:	bf00      	nop
 8003768:	3728      	adds	r7, #40	; 0x28
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40000800 	.word	0x40000800
 8003774:	40023800 	.word	0x40023800
 8003778:	40020c00 	.word	0x40020c00
 800377c:	40001800 	.word	0x40001800
 8003780:	40020400 	.word	0x40020400

08003784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a96      	ldr	r2, [pc, #600]	; (80039fc <HAL_UART_MspInit+0x278>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d164      	bne.n	8003870 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	4b95      	ldr	r3, [pc, #596]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	4a94      	ldr	r2, [pc, #592]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037b4:	6413      	str	r3, [r2, #64]	; 0x40
 80037b6:	4b92      	ldr	r3, [pc, #584]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	4b8e      	ldr	r3, [pc, #568]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a8d      	ldr	r2, [pc, #564]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037cc:	f043 0304 	orr.w	r3, r3, #4
 80037d0:	6313      	str	r3, [r2, #48]	; 0x30
 80037d2:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	f003 0304 	and.w	r3, r3, #4
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e4:	2302      	movs	r3, #2
 80037e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ec:	2303      	movs	r3, #3
 80037ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037f0:	2308      	movs	r3, #8
 80037f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037f8:	4619      	mov	r1, r3
 80037fa:	4882      	ldr	r0, [pc, #520]	; (8003a04 <HAL_UART_MspInit+0x280>)
 80037fc:	f002 fb00 	bl	8005e00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003800:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003802:	4a82      	ldr	r2, [pc, #520]	; (8003a0c <HAL_UART_MspInit+0x288>)
 8003804:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003806:	4b80      	ldr	r3, [pc, #512]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003808:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800380c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800380e:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003814:	4b7c      	ldr	r3, [pc, #496]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_UART_MspInit+0x284>)
 800381c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003820:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003822:	4b79      	ldr	r3, [pc, #484]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003824:	2200      	movs	r2, #0
 8003826:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003828:	4b77      	ldr	r3, [pc, #476]	; (8003a08 <HAL_UART_MspInit+0x284>)
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003830:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003834:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003836:	4b74      	ldr	r3, [pc, #464]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003838:	2200      	movs	r2, #0
 800383a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_UART_MspInit+0x284>)
 800383e:	2200      	movs	r2, #0
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8003842:	4871      	ldr	r0, [pc, #452]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003844:	f001 feda 	bl	80055fc <HAL_DMA_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800384e:	f7ff fccb 	bl	80031e8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a6c      	ldr	r2, [pc, #432]	; (8003a08 <HAL_UART_MspInit+0x284>)
 8003856:	63da      	str	r2, [r3, #60]	; 0x3c
 8003858:	4a6b      	ldr	r2, [pc, #428]	; (8003a08 <HAL_UART_MspInit+0x284>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800385e:	2200      	movs	r2, #0
 8003860:	2100      	movs	r1, #0
 8003862:	2034      	movs	r0, #52	; 0x34
 8003864:	f001 fe85 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003868:	2034      	movs	r0, #52	; 0x34
 800386a:	f001 fe9e 	bl	80055aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800386e:	e0c1      	b.n	80039f4 <HAL_UART_MspInit+0x270>
  else if(huart->Instance==UART5)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a66      	ldr	r2, [pc, #408]	; (8003a10 <HAL_UART_MspInit+0x28c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d153      	bne.n	8003922 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	4b60      	ldr	r3, [pc, #384]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a5f      	ldr	r2, [pc, #380]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 8003884:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003892:	61bb      	str	r3, [r7, #24]
 8003894:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	4b59      	ldr	r3, [pc, #356]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6313      	str	r3, [r2, #48]	; 0x30
 80038a6:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	4b52      	ldr	r3, [pc, #328]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a51      	ldr	r2, [pc, #324]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80038bc:	f043 0308 	orr.w	r3, r3, #8
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b4f      	ldr	r3, [pc, #316]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	613b      	str	r3, [r7, #16]
 80038cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80038ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038e0:	2308      	movs	r3, #8
 80038e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038e8:	4619      	mov	r1, r3
 80038ea:	4846      	ldr	r0, [pc, #280]	; (8003a04 <HAL_UART_MspInit+0x280>)
 80038ec:	f002 fa88 	bl	8005e00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038f0:	2304      	movs	r3, #4
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003900:	2308      	movs	r3, #8
 8003902:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	4619      	mov	r1, r3
 800390a:	4842      	ldr	r0, [pc, #264]	; (8003a14 <HAL_UART_MspInit+0x290>)
 800390c:	f002 fa78 	bl	8005e00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	2035      	movs	r0, #53	; 0x35
 8003916:	f001 fe2c 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800391a:	2035      	movs	r0, #53	; 0x35
 800391c:	f001 fe45 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 8003920:	e068      	b.n	80039f4 <HAL_UART_MspInit+0x270>
  else if(huart->Instance==USART3)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <HAL_UART_MspInit+0x294>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d163      	bne.n	80039f4 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART3_CLK_ENABLE();
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a32      	ldr	r2, [pc, #200]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 8003936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
 800393c:	4b30      	ldr	r3, [pc, #192]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	4b2c      	ldr	r3, [pc, #176]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	4a2b      	ldr	r2, [pc, #172]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	6313      	str	r3, [r2, #48]	; 0x30
 8003958:	4b29      	ldr	r3, [pc, #164]	; (8003a00 <HAL_UART_MspInit+0x27c>)
 800395a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003964:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	2302      	movs	r3, #2
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003976:	2307      	movs	r3, #7
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800397a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397e:	4619      	mov	r1, r3
 8003980:	4826      	ldr	r0, [pc, #152]	; (8003a1c <HAL_UART_MspInit+0x298>)
 8003982:	f002 fa3d 	bl	8005e00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003986:	4b26      	ldr	r3, [pc, #152]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 8003988:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <HAL_UART_MspInit+0x2a0>)
 800398a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 800398e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003992:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003994:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800399a:	4b21      	ldr	r3, [pc, #132]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 800399c:	2200      	movs	r2, #0
 800399e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039a0:	4b1f      	ldr	r3, [pc, #124]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a8:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80039b4:	4b1a      	ldr	r3, [pc, #104]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039bc:	4b18      	ldr	r3, [pc, #96]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c2:	4b17      	ldr	r3, [pc, #92]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039c8:	4815      	ldr	r0, [pc, #84]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039ca:	f001 fe17 	bl	80055fc <HAL_DMA_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_MspInit+0x254>
      Error_Handler();
 80039d4:	f7ff fc08 	bl	80031e8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <HAL_UART_MspInit+0x29c>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	2027      	movs	r0, #39	; 0x27
 80039ea:	f001 fdc2 	bl	8005572 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039ee:	2027      	movs	r0, #39	; 0x27
 80039f0:	f001 fddb 	bl	80055aa <HAL_NVIC_EnableIRQ>
}
 80039f4:	bf00      	nop
 80039f6:	3738      	adds	r7, #56	; 0x38
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40004c00 	.word	0x40004c00
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020800 	.word	0x40020800
 8003a08:	20000594 	.word	0x20000594
 8003a0c:	40026040 	.word	0x40026040
 8003a10:	40005000 	.word	0x40005000
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40004800 	.word	0x40004800
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	200005f4 	.word	0x200005f4
 8003a24:	40026028 	.word	0x40026028

08003a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a2c:	e7fe      	b.n	8003a2c <NMI_Handler+0x4>

08003a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a32:	e7fe      	b.n	8003a32 <HardFault_Handler+0x4>

08003a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a38:	e7fe      	b.n	8003a38 <MemManage_Handler+0x4>

08003a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a3e:	e7fe      	b.n	8003a3e <BusFault_Handler+0x4>

08003a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a44:	e7fe      	b.n	8003a44 <UsageFault_Handler+0x4>

08003a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a46:	b480      	push	{r7}
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a74:	f000 fa04 	bl	8003e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <DMA1_Stream1_IRQHandler+0x10>)
 8003a82:	f001 ff53 	bl	800592c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200005f4 	.word	0x200005f4

08003a90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <DMA1_Stream2_IRQHandler+0x10>)
 8003a96:	f001 ff49 	bl	800592c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000594 	.word	0x20000594

08003aa4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003aa8:	4803      	ldr	r0, [pc, #12]	; (8003ab8 <ADC_IRQHandler+0x14>)
 8003aaa:	f000 fa70 	bl	8003f8e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003aae:	4803      	ldr	r0, [pc, #12]	; (8003abc <ADC_IRQHandler+0x18>)
 8003ab0:	f000 fa6d 	bl	8003f8e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200001f4 	.word	0x200001f4
 8003abc:	2000023c 	.word	0x2000023c

08003ac0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <CAN1_TX_IRQHandler+0x10>)
 8003ac6:	f001 fa26 	bl	8004f16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200002e4 	.word	0x200002e4

08003ad4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <CAN1_RX0_IRQHandler+0x10>)
 8003ada:	f001 fa1c 	bl	8004f16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200002e4 	.word	0x200002e4

08003ae8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003aec:	4802      	ldr	r0, [pc, #8]	; (8003af8 <CAN1_RX1_IRQHandler+0x10>)
 8003aee:	f001 fa12 	bl	8004f16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	200002e4 	.word	0x200002e4

08003afc <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b00:	4802      	ldr	r0, [pc, #8]	; (8003b0c <CAN1_SCE_IRQHandler+0x10>)
 8003b02:	f001 fa08 	bl	8004f16 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200002e4 	.word	0x200002e4

08003b10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003b16:	f003 faa7 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000030c 	.word	0x2000030c

08003b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <TIM3_IRQHandler+0x10>)
 8003b2a:	f003 fa9d 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000354 	.word	0x20000354

08003b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <TIM4_IRQHandler+0x10>)
 8003b3e:	f003 fa93 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000039c 	.word	0x2000039c

08003b4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <USART3_IRQHandler+0x10>)
 8003b52:	f004 f821 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000054c 	.word	0x2000054c

08003b60 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003b66:	f003 fa7f 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000474 	.word	0x20000474

08003b74 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b78:	4802      	ldr	r0, [pc, #8]	; (8003b84 <UART4_IRQHandler+0x10>)
 8003b7a:	f004 f80d 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200004bc 	.word	0x200004bc

08003b88 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b8c:	4802      	ldr	r0, [pc, #8]	; (8003b98 <UART5_IRQHandler+0x10>)
 8003b8e:	f004 f803 	bl	8007b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000504 	.word	0x20000504

08003b9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ba0:	4802      	ldr	r0, [pc, #8]	; (8003bac <TIM6_DAC_IRQHandler+0x10>)
 8003ba2:	f003 fa61 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003ba6:	bf00      	nop
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	200003e4 	.word	0x200003e4

08003bb0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003bb4:	4802      	ldr	r0, [pc, #8]	; (8003bc0 <TIM7_IRQHandler+0x10>)
 8003bb6:	f003 fa57 	bl	8007068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	2000042c 	.word	0x2000042c

08003bc4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003bc8:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <DMA2_Stream2_IRQHandler+0x10>)
 8003bca:	f001 feaf 	bl	800592c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	20000284 	.word	0x20000284

08003bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return 1;
 8003bdc:	2301      	movs	r3, #1
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <_kill>:

int _kill(int pid, int sig)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003bf2:	f005 ffdf 	bl	8009bb4 <__errno>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2216      	movs	r2, #22
 8003bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_exit>:

void _exit (int status)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c10:	f04f 31ff 	mov.w	r1, #4294967295
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ffe7 	bl	8003be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c1a:	e7fe      	b.n	8003c1a <_exit+0x12>

08003c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e00a      	b.n	8003c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c2e:	f3af 8000 	nop.w
 8003c32:	4601      	mov	r1, r0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1c5a      	adds	r2, r3, #1
 8003c38:	60ba      	str	r2, [r7, #8]
 8003c3a:	b2ca      	uxtb	r2, r1
 8003c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	3301      	adds	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	dbf0      	blt.n	8003c2e <_read+0x12>
  }

  return len;
 8003c4c:	687b      	ldr	r3, [r7, #4]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e009      	b.n	8003c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	60ba      	str	r2, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	dbf1      	blt.n	8003c68 <_write+0x12>
  }
  return len;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_close>:

int _close(int file)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_isatty>:

int _isatty(int file)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d00:	4a14      	ldr	r2, [pc, #80]	; (8003d54 <_sbrk+0x5c>)
 8003d02:	4b15      	ldr	r3, [pc, #84]	; (8003d58 <_sbrk+0x60>)
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d0c:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <_sbrk+0x64>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d102      	bne.n	8003d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <_sbrk+0x64>)
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <_sbrk+0x68>)
 8003d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d1a:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <_sbrk+0x64>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d207      	bcs.n	8003d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d28:	f005 ff44 	bl	8009bb4 <__errno>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	220c      	movs	r2, #12
 8003d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	e009      	b.n	8003d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d38:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <_sbrk+0x64>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d3e:	4b07      	ldr	r3, [pc, #28]	; (8003d5c <_sbrk+0x64>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <_sbrk+0x64>)
 8003d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	20020000 	.word	0x20020000
 8003d58:	00000400 	.word	0x00000400
 8003d5c:	200009c4 	.word	0x200009c4
 8003d60:	20000b18 	.word	0x20000b18

08003d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <SystemInit+0x20>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <SystemInit+0x20>)
 8003d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d78:	bf00      	nop
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	e000ed00 	.word	0xe000ed00

08003d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dc0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003d8c:	f7ff ffea 	bl	8003d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003d90:	480c      	ldr	r0, [pc, #48]	; (8003dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d92:	490d      	ldr	r1, [pc, #52]	; (8003dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d94:	4a0d      	ldr	r2, [pc, #52]	; (8003dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d98:	e002      	b.n	8003da0 <LoopCopyDataInit>

08003d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d9e:	3304      	adds	r3, #4

08003da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da4:	d3f9      	bcc.n	8003d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003da6:	4a0a      	ldr	r2, [pc, #40]	; (8003dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003da8:	4c0a      	ldr	r4, [pc, #40]	; (8003dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003dac:	e001      	b.n	8003db2 <LoopFillZerobss>

08003dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db0:	3204      	adds	r2, #4

08003db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db4:	d3fb      	bcc.n	8003dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003db6:	f005 ff03 	bl	8009bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dba:	f7fe fc4f 	bl	800265c <main>
  bx  lr    
 8003dbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dc8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003dcc:	0800bd04 	.word	0x0800bd04
  ldr r2, =_sbss
 8003dd0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003dd4:	20000b18 	.word	0x20000b18

08003dd8 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd8:	e7fe      	b.n	8003dd8 <CAN2_RX0_IRQHandler>
	...

08003ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003de0:	4b0e      	ldr	r3, [pc, #56]	; (8003e1c <HAL_Init+0x40>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <HAL_Init+0x40>)
 8003de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dec:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <HAL_Init+0x40>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0a      	ldr	r2, [pc, #40]	; (8003e1c <HAL_Init+0x40>)
 8003df2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003df8:	4b08      	ldr	r3, [pc, #32]	; (8003e1c <HAL_Init+0x40>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a07      	ldr	r2, [pc, #28]	; (8003e1c <HAL_Init+0x40>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e04:	2003      	movs	r0, #3
 8003e06:	f001 fba9 	bl	800555c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f000 f808 	bl	8003e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e10:	f7ff f9f2 	bl	80031f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023c00 	.word	0x40023c00

08003e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_InitTick+0x54>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <HAL_InitTick+0x58>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4619      	mov	r1, r3
 8003e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f001 fbcf 	bl	80055e2 <HAL_SYSTICK_Config>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e00e      	b.n	8003e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b0f      	cmp	r3, #15
 8003e52:	d80a      	bhi.n	8003e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e54:	2200      	movs	r2, #0
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295
 8003e5c:	f001 fb89 	bl	8005572 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e60:	4a06      	ldr	r2, [pc, #24]	; (8003e7c <HAL_InitTick+0x5c>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	e000      	b.n	8003e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	20000000 	.word	0x20000000
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	20000004 	.word	0x20000004

08003e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e84:	4b06      	ldr	r3, [pc, #24]	; (8003ea0 <HAL_IncTick+0x20>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_IncTick+0x24>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4413      	add	r3, r2
 8003e90:	4a04      	ldr	r2, [pc, #16]	; (8003ea4 <HAL_IncTick+0x24>)
 8003e92:	6013      	str	r3, [r2, #0]
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000008 	.word	0x20000008
 8003ea4:	200009c8 	.word	0x200009c8

08003ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_GetTick+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	200009c8 	.word	0x200009c8

08003ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec8:	f7ff ffee 	bl	8003ea8 <HAL_GetTick>
 8003ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d005      	beq.n	8003ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eda:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <HAL_Delay+0x44>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ee6:	bf00      	nop
 8003ee8:	f7ff ffde 	bl	8003ea8 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d8f7      	bhi.n	8003ee8 <HAL_Delay+0x28>
  {
  }
}
 8003ef8:	bf00      	nop
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000008 	.word	0x20000008

08003f08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e033      	b.n	8003f86 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff f98e 	bl	8003248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f4e:	f023 0302 	bic.w	r3, r3, #2
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f000 fa68 	bl	8004430 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	641a      	str	r2, [r3, #64]	; 0x40
 8003f76:	e001      	b.n	8003f7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d049      	beq.n	8004058 <HAL_ADC_IRQHandler+0xca>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d046      	beq.n	8004058 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d12b      	bne.n	8004048 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d127      	bne.n	8004048 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004002:	2b00      	cmp	r3, #0
 8004004:	d006      	beq.n	8004014 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004010:	2b00      	cmp	r3, #0
 8004012:	d119      	bne.n	8004048 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0220 	bic.w	r2, r2, #32
 8004022:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8b0 	bl	80041ae <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f06f 0212 	mvn.w	r2, #18
 8004056:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0304 	and.w	r3, r3, #4
 800405e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004066:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d057      	beq.n	800411e <HAL_ADC_IRQHandler+0x190>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d054      	beq.n	800411e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d139      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d006      	beq.n	80040b6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d12b      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d124      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d11d      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d119      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040e8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d105      	bne.n	800410e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 fa8a 	bl	8004628 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 020c 	mvn.w	r2, #12
 800411c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0301 	and.w	r3, r3, #1
 8004124:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d017      	beq.n	8004164 <HAL_ADC_IRQHandler+0x1d6>
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d014      	beq.n	8004164 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10d      	bne.n	8004164 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f834 	bl	80041c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f06f 0201 	mvn.w	r2, #1
 8004162:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004172:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d015      	beq.n	80041a6 <HAL_ADC_IRQHandler+0x218>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d012      	beq.n	80041a6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004184:	f043 0202 	orr.w	r2, r3, #2
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0220 	mvn.w	r2, #32
 8004194:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f81d 	bl	80041d6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f06f 0220 	mvn.w	r2, #32
 80041a4:	601a      	str	r2, [r3, #0]
  }
}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr

080041c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x1c>
 8004204:	2302      	movs	r3, #2
 8004206:	e105      	b.n	8004414 <HAL_ADC_ConfigChannel+0x228>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b09      	cmp	r3, #9
 8004216:	d925      	bls.n	8004264 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68d9      	ldr	r1, [r3, #12]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	461a      	mov	r2, r3
 8004226:	4613      	mov	r3, r2
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4413      	add	r3, r2
 800422c:	3b1e      	subs	r3, #30
 800422e:	2207      	movs	r2, #7
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43da      	mvns	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	400a      	ands	r2, r1
 800423c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68d9      	ldr	r1, [r3, #12]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	b29b      	uxth	r3, r3
 800424e:	4618      	mov	r0, r3
 8004250:	4603      	mov	r3, r0
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4403      	add	r3, r0
 8004256:	3b1e      	subs	r3, #30
 8004258:	409a      	lsls	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	e022      	b.n	80042aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6919      	ldr	r1, [r3, #16]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	b29b      	uxth	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	4613      	mov	r3, r2
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	4413      	add	r3, r2
 8004278:	2207      	movs	r2, #7
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43da      	mvns	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	400a      	ands	r2, r1
 8004286:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6919      	ldr	r1, [r3, #16]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	4618      	mov	r0, r3
 800429a:	4603      	mov	r3, r0
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	4403      	add	r3, r0
 80042a0:	409a      	lsls	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d824      	bhi.n	80042fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	3b05      	subs	r3, #5
 80042c4:	221f      	movs	r2, #31
 80042c6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ca:	43da      	mvns	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	400a      	ands	r2, r1
 80042d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4618      	mov	r0, r3
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	3b05      	subs	r3, #5
 80042ee:	fa00 f203 	lsl.w	r2, r0, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	635a      	str	r2, [r3, #52]	; 0x34
 80042fa:	e04c      	b.n	8004396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b0c      	cmp	r3, #12
 8004302:	d824      	bhi.n	800434e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	3b23      	subs	r3, #35	; 0x23
 8004316:	221f      	movs	r2, #31
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43da      	mvns	r2, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	400a      	ands	r2, r1
 8004324:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	b29b      	uxth	r3, r3
 8004332:	4618      	mov	r0, r3
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	3b23      	subs	r3, #35	; 0x23
 8004340:	fa00 f203 	lsl.w	r2, r0, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
 800434c:	e023      	b.n	8004396 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	3b41      	subs	r3, #65	; 0x41
 8004360:	221f      	movs	r2, #31
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43da      	mvns	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	400a      	ands	r2, r1
 800436e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	4618      	mov	r0, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	3b41      	subs	r3, #65	; 0x41
 800438a:	fa00 f203 	lsl.w	r2, r0, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004396:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_ADC_ConfigChannel+0x234>)
 8004398:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a21      	ldr	r2, [pc, #132]	; (8004424 <HAL_ADC_ConfigChannel+0x238>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d109      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1cc>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b12      	cmp	r3, #18
 80043aa:	d105      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a19      	ldr	r2, [pc, #100]	; (8004424 <HAL_ADC_ConfigChannel+0x238>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d123      	bne.n	800440a <HAL_ADC_ConfigChannel+0x21e>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b10      	cmp	r3, #16
 80043c8:	d003      	beq.n	80043d2 <HAL_ADC_ConfigChannel+0x1e6>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b11      	cmp	r3, #17
 80043d0:	d11b      	bne.n	800440a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d111      	bne.n	800440a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043e6:	4b10      	ldr	r3, [pc, #64]	; (8004428 <HAL_ADC_ConfigChannel+0x23c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_ADC_ConfigChannel+0x240>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	0c9a      	lsrs	r2, r3, #18
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80043fc:	e002      	b.n	8004404 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	3b01      	subs	r3, #1
 8004402:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f9      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40012300 	.word	0x40012300
 8004424:	40012000 	.word	0x40012000
 8004428:	20000000 	.word	0x20000000
 800442c:	431bde83 	.word	0x431bde83

08004430 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004438:	4b79      	ldr	r3, [pc, #484]	; (8004620 <ADC_Init+0x1f0>)
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004464:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	021a      	lsls	r2, r3, #8
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004488:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6899      	ldr	r1, [r3, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c2:	4a58      	ldr	r2, [pc, #352]	; (8004624 <ADC_Init+0x1f4>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d022      	beq.n	800450e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6899      	ldr	r1, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6899      	ldr	r1, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
 800450c:	e00f      	b.n	800452e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800451c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0202 	bic.w	r2, r2, #2
 800453c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6899      	ldr	r1, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7e1b      	ldrb	r3, [r3, #24]
 8004548:	005a      	lsls	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01b      	beq.n	8004594 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800456a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800457a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	3b01      	subs	r3, #1
 8004588:	035a      	lsls	r2, r3, #13
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	e007      	b.n	80045a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	3b01      	subs	r3, #1
 80045c0:	051a      	lsls	r2, r3, #20
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6899      	ldr	r1, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045e6:	025a      	lsls	r2, r3, #9
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	430a      	orrs	r2, r1
 80045ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689a      	ldr	r2, [r3, #8]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6899      	ldr	r1, [r3, #8]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	029a      	lsls	r2, r3, #10
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40012300 	.word	0x40012300
 8004624:	0f000001 	.word	0x0f000001

08004628 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e0ed      	b.n	800482a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d102      	bne.n	8004660 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fe feac 	bl	80033b8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004670:	f7ff fc1a 	bl	8003ea8 <HAL_GetTick>
 8004674:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004676:	e012      	b.n	800469e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004678:	f7ff fc16 	bl	8003ea8 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b0a      	cmp	r3, #10
 8004684:	d90b      	bls.n	800469e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2205      	movs	r2, #5
 8004696:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0c5      	b.n	800482a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0e5      	beq.n	8004678 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 0202 	bic.w	r2, r2, #2
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7ff fbf4 	bl	8003ea8 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046c2:	e012      	b.n	80046ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046c4:	f7ff fbf0 	bl	8003ea8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b0a      	cmp	r3, #10
 80046d0:	d90b      	bls.n	80046ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2205      	movs	r2, #5
 80046e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e09f      	b.n	800482a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1e5      	bne.n	80046c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7e1b      	ldrb	r3, [r3, #24]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d108      	bne.n	8004712 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e007      	b.n	8004722 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	7e5b      	ldrb	r3, [r3, #25]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d108      	bne.n	800473c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e007      	b.n	800474c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	7e9b      	ldrb	r3, [r3, #26]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d108      	bne.n	8004766 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0220 	orr.w	r2, r2, #32
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e007      	b.n	8004776 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0220 	bic.w	r2, r2, #32
 8004774:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	7edb      	ldrb	r3, [r3, #27]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d108      	bne.n	8004790 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0210 	bic.w	r2, r2, #16
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e007      	b.n	80047a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0210 	orr.w	r2, r2, #16
 800479e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7f1b      	ldrb	r3, [r3, #28]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d108      	bne.n	80047ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0208 	orr.w	r2, r2, #8
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e007      	b.n	80047ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0208 	bic.w	r2, r2, #8
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	7f5b      	ldrb	r3, [r3, #29]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d108      	bne.n	80047e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0204 	orr.w	r2, r2, #4
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	e007      	b.n	80047f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0204 	bic.w	r2, r2, #4
 80047f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	431a      	orrs	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	ea42 0103 	orr.w	r1, r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3020 	ldrb.w	r3, [r3, #32]
 800484a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d003      	beq.n	800485a <HAL_CAN_ConfigFilter+0x26>
 8004852:	7cfb      	ldrb	r3, [r7, #19]
 8004854:	2b02      	cmp	r3, #2
 8004856:	f040 80be 	bne.w	80049d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800485a:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800485c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004864:	f043 0201 	orr.w	r2, r3, #1
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004874:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	021b      	lsls	r3, r3, #8
 800488a:	431a      	orrs	r2, r3
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 031f 	and.w	r3, r3, #31
 800489a:	2201      	movs	r2, #1
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	401a      	ands	r2, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d123      	bne.n	8004904 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	401a      	ands	r2, r3
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80048de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3248      	adds	r2, #72	; 0x48
 80048e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80048f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80048fa:	6979      	ldr	r1, [r7, #20]
 80048fc:	3348      	adds	r3, #72	; 0x48
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	440b      	add	r3, r1
 8004902:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d122      	bne.n	8004952 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	431a      	orrs	r2, r3
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800492c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	3248      	adds	r2, #72	; 0x48
 8004932:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004946:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	3348      	adds	r3, #72	; 0x48
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	440b      	add	r3, r1
 8004950:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43db      	mvns	r3, r3
 8004964:	401a      	ands	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800496c:	e007      	b.n	800497e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	431a      	orrs	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	691b      	ldr	r3, [r3, #16]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d109      	bne.n	800499a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	43db      	mvns	r3, r3
 8004990:	401a      	ands	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004998:	e007      	b.n	80049aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	431a      	orrs	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d107      	bne.n	80049c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049c8:	f023 0201 	bic.w	r2, r3, #1
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e006      	b.n	80049e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40006400 	.word	0x40006400

080049f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d12e      	bne.n	8004a66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a20:	f7ff fa42 	bl	8003ea8 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a26:	e012      	b.n	8004a4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a28:	f7ff fa3e 	bl	8003ea8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b0a      	cmp	r3, #10
 8004a34:	d90b      	bls.n	8004a4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2205      	movs	r2, #5
 8004a46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e012      	b.n	8004a74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e5      	bne.n	8004a28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e006      	b.n	8004a74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
  }
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	; 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a9a:	7ffb      	ldrb	r3, [r7, #31]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d003      	beq.n	8004aa8 <HAL_CAN_AddTxMessage+0x2c>
 8004aa0:	7ffb      	ldrb	r3, [r7, #31]
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	f040 80ad 	bne.w	8004c02 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d105      	bne.n	8004ac8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8095 	beq.w	8004bf2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	0e1b      	lsrs	r3, r3, #24
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	409a      	lsls	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004aee:	68f9      	ldr	r1, [r7, #12]
 8004af0:	6809      	ldr	r1, [r1, #0]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3318      	adds	r3, #24
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	440b      	add	r3, r1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00f      	b.n	8004b20 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b0a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b10:	68f9      	ldr	r1, [r7, #12]
 8004b12:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b14:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	440b      	add	r3, r1
 8004b1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3318      	adds	r3, #24
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	440b      	add	r3, r1
 8004b30:	3304      	adds	r3, #4
 8004b32:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	7d1b      	ldrb	r3, [r3, #20]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d111      	bne.n	8004b60 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	3318      	adds	r3, #24
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	4413      	add	r3, r2
 8004b48:	3304      	adds	r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	6811      	ldr	r1, [r2, #0]
 8004b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3318      	adds	r3, #24
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	3307      	adds	r3, #7
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	061a      	lsls	r2, r3, #24
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3306      	adds	r3, #6
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	041b      	lsls	r3, r3, #16
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3305      	adds	r3, #5
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	3204      	adds	r2, #4
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	4610      	mov	r0, r2
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6811      	ldr	r1, [r2, #0]
 8004b88:	ea43 0200 	orr.w	r2, r3, r0
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	440b      	add	r3, r1
 8004b92:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004b96:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3303      	adds	r3, #3
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	061a      	lsls	r2, r3, #24
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3302      	adds	r3, #2
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	3301      	adds	r3, #1
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	021b      	lsls	r3, r3, #8
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	7812      	ldrb	r2, [r2, #0]
 8004bb8:	4610      	mov	r0, r2
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	ea43 0200 	orr.w	r2, r3, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	011b      	lsls	r3, r3, #4
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004bcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	3318      	adds	r3, #24
 8004bd6:	011b      	lsls	r3, r3, #4
 8004bd8:	4413      	add	r3, r2
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	6811      	ldr	r1, [r2, #0]
 8004be0:	f043 0201 	orr.w	r2, r3, #1
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	3318      	adds	r3, #24
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	440b      	add	r3, r1
 8004bec:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	e00e      	b.n	8004c10 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e006      	b.n	8004c10 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
  }
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3724      	adds	r7, #36	; 0x24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2e:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d002      	beq.n	8004c3c <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8004c36:	7afb      	ldrb	r3, [r7, #11]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d11d      	bne.n	8004c78 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3301      	adds	r3, #1
 8004c62:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3301      	adds	r3, #1
 8004c76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8004c78:	68fb      	ldr	r3, [r7, #12]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004c86:	b480      	push	{r7}
 8004c88:	b087      	sub	sp, #28
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
 8004c92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d003      	beq.n	8004caa <HAL_CAN_GetRxMessage+0x24>
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	f040 8103 	bne.w	8004eb0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10e      	bne.n	8004cce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d116      	bne.n	8004cec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0f7      	b.n	8004ebe <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d107      	bne.n	8004cec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e0e8      	b.n	8004ebe <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	331b      	adds	r3, #27
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0204 	and.w	r2, r3, #4
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10c      	bne.n	8004d24 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	331b      	adds	r3, #27
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	4413      	add	r3, r2
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	0d5b      	lsrs	r3, r3, #21
 8004d1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	e00b      	b.n	8004d3c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	331b      	adds	r3, #27
 8004d2c:	011b      	lsls	r3, r3, #4
 8004d2e:	4413      	add	r3, r2
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	08db      	lsrs	r3, r3, #3
 8004d34:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	331b      	adds	r3, #27
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	4413      	add	r3, r2
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0202 	and.w	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	331b      	adds	r3, #27
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3304      	adds	r3, #4
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	611a      	str	r2, [r3, #16]
 8004d70:	e00b      	b.n	8004d8a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	331b      	adds	r3, #27
 8004d7a:	011b      	lsls	r3, r3, #4
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3304      	adds	r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 020f 	and.w	r2, r3, #15
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	331b      	adds	r3, #27
 8004d92:	011b      	lsls	r3, r3, #4
 8004d94:	4413      	add	r3, r2
 8004d96:	3304      	adds	r3, #4
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	0a1b      	lsrs	r3, r3, #8
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	331b      	adds	r3, #27
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	4413      	add	r3, r2
 8004dae:	3304      	adds	r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0c1b      	lsrs	r3, r3, #16
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	0a1a      	lsrs	r2, r3, #8
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3301      	adds	r3, #1
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0c1a      	lsrs	r2, r3, #16
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	3302      	adds	r3, #2
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0e1a      	lsrs	r2, r3, #24
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3303      	adds	r3, #3
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	3304      	adds	r3, #4
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	011b      	lsls	r3, r3, #4
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	0a1a      	lsrs	r2, r3, #8
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	3305      	adds	r3, #5
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	4413      	add	r3, r2
 8004e5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	0c1a      	lsrs	r2, r3, #16
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	3306      	adds	r3, #6
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0e1a      	lsrs	r2, r3, #24
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d108      	bne.n	8004e9c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0220 	orr.w	r2, r2, #32
 8004e98:	60da      	str	r2, [r3, #12]
 8004e9a:	e007      	b.n	8004eac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	691a      	ldr	r2, [r3, #16]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0220 	orr.w	r2, r2, #32
 8004eaa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e006      	b.n	8004ebe <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b085      	sub	sp, #20
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eda:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d002      	beq.n	8004ee8 <HAL_CAN_ActivateNotification+0x1e>
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d109      	bne.n	8004efc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6959      	ldr	r1, [r3, #20]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e006      	b.n	8004f0a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b08a      	sub	sp, #40	; 0x28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	691b      	ldr	r3, [r3, #16]
 8004f48:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f52:	6a3b      	ldr	r3, [r7, #32]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d07c      	beq.n	8005056 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d023      	beq.n	8004fae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f003 0302 	and.w	r3, r3, #2
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f983 	bl	8005284 <HAL_CAN_TxMailbox0CompleteCallback>
 8004f7e:	e016      	b.n	8004fae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d004      	beq.n	8004f94 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e00c      	b.n	8004fae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	e002      	b.n	8004fae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f989 	bl	80052c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d024      	beq.n	8005002 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f963 	bl	8005298 <HAL_CAN_TxMailbox1CompleteCallback>
 8004fd2:	e016      	b.n	8005002 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d004      	beq.n	8004fe8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe6:	e00c      	b.n	8005002 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	e002      	b.n	8005002 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f969 	bl	80052d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d024      	beq.n	8005056 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005014:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f943 	bl	80052ac <HAL_CAN_TxMailbox2CompleteCallback>
 8005026:	e016      	b.n	8005056 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d004      	beq.n	800503c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
 800503a:	e00c      	b.n	8005056 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
 800504e:	e002      	b.n	8005056 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f949 	bl	80052e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d007      	beq.n	800507a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005070:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2210      	movs	r2, #16
 8005078:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00b      	beq.n	800509c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d006      	beq.n	800509c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2208      	movs	r2, #8
 8005094:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f930 	bl	80052fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0303 	and.w	r3, r3, #3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7fb ff7d 	bl	8000fb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2210      	movs	r2, #16
 80050dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00b      	beq.n	8005100 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2208      	movs	r2, #8
 80050f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f912 	bl	8005324 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b00      	cmp	r3, #0
 8005108:	d009      	beq.n	800511e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 f8f9 	bl	8005310 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2210      	movs	r2, #16
 8005138:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f8fc 	bl	8005338 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00b      	beq.n	8005162 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d006      	beq.n	8005162 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2208      	movs	r2, #8
 800515a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f8f5 	bl	800534c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d07b      	beq.n	8005264 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0304 	and.w	r3, r3, #4
 8005172:	2b00      	cmp	r3, #0
 8005174:	d072      	beq.n	800525c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005186:	2b00      	cmp	r3, #0
 8005188:	d003      	beq.n	8005192 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	f043 0304 	orr.w	r3, r3, #4
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d043      	beq.n	800525c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d03e      	beq.n	800525c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051e4:	2b60      	cmp	r3, #96	; 0x60
 80051e6:	d02b      	beq.n	8005240 <HAL_CAN_IRQHandler+0x32a>
 80051e8:	2b60      	cmp	r3, #96	; 0x60
 80051ea:	d82e      	bhi.n	800524a <HAL_CAN_IRQHandler+0x334>
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d022      	beq.n	8005236 <HAL_CAN_IRQHandler+0x320>
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d82a      	bhi.n	800524a <HAL_CAN_IRQHandler+0x334>
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d019      	beq.n	800522c <HAL_CAN_IRQHandler+0x316>
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d826      	bhi.n	800524a <HAL_CAN_IRQHandler+0x334>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d010      	beq.n	8005222 <HAL_CAN_IRQHandler+0x30c>
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d822      	bhi.n	800524a <HAL_CAN_IRQHandler+0x334>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d002      	beq.n	800520e <HAL_CAN_IRQHandler+0x2f8>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d005      	beq.n	8005218 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800520c:	e01d      	b.n	800524a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	f043 0308 	orr.w	r3, r3, #8
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005216:	e019      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	f043 0310 	orr.w	r3, r3, #16
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005220:	e014      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005224:	f043 0320 	orr.w	r3, r3, #32
 8005228:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800522a:	e00f      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005234:	e00a      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800523e:	e005      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005248:	e000      	b.n	800524c <HAL_CAN_IRQHandler+0x336>
            break;
 800524a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800525a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2204      	movs	r2, #4
 8005262:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f872 	bl	8005360 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800527c:	bf00      	nop
 800527e:	3728      	adds	r7, #40	; 0x28
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005374:	b480      	push	{r7}
 8005376:	b085      	sub	sp, #20
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005384:	4b0c      	ldr	r3, [pc, #48]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800539c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053a6:	4a04      	ldr	r2, [pc, #16]	; (80053b8 <__NVIC_SetPriorityGrouping+0x44>)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	60d3      	str	r3, [r2, #12]
}
 80053ac:	bf00      	nop
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <__NVIC_GetPriorityGrouping+0x18>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	0a1b      	lsrs	r3, r3, #8
 80053c6:	f003 0307 	and.w	r3, r3, #7
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	e000ed00 	.word	0xe000ed00

080053d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	db0b      	blt.n	8005402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	f003 021f 	and.w	r2, r3, #31
 80053f0:	4907      	ldr	r1, [pc, #28]	; (8005410 <__NVIC_EnableIRQ+0x38>)
 80053f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2001      	movs	r0, #1
 80053fa:	fa00 f202 	lsl.w	r2, r0, r2
 80053fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	e000e100 	.word	0xe000e100

08005414 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db12      	blt.n	800544c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	490a      	ldr	r1, [pc, #40]	; (8005458 <__NVIC_DisableIRQ+0x44>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	3320      	adds	r3, #32
 800543c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005440:	f3bf 8f4f 	dsb	sy
}
 8005444:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005446:	f3bf 8f6f 	isb	sy
}
 800544a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	e000e100 	.word	0xe000e100

0800545c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	4603      	mov	r3, r0
 8005464:	6039      	str	r1, [r7, #0]
 8005466:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005468:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546c:	2b00      	cmp	r3, #0
 800546e:	db0a      	blt.n	8005486 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2da      	uxtb	r2, r3
 8005474:	490c      	ldr	r1, [pc, #48]	; (80054a8 <__NVIC_SetPriority+0x4c>)
 8005476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547a:	0112      	lsls	r2, r2, #4
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	440b      	add	r3, r1
 8005480:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005484:	e00a      	b.n	800549c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	4908      	ldr	r1, [pc, #32]	; (80054ac <__NVIC_SetPriority+0x50>)
 800548c:	79fb      	ldrb	r3, [r7, #7]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	3b04      	subs	r3, #4
 8005494:	0112      	lsls	r2, r2, #4
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	440b      	add	r3, r1
 800549a:	761a      	strb	r2, [r3, #24]
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	e000e100 	.word	0xe000e100
 80054ac:	e000ed00 	.word	0xe000ed00

080054b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b089      	sub	sp, #36	; 0x24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f003 0307 	and.w	r3, r3, #7
 80054c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f1c3 0307 	rsb	r3, r3, #7
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	bf28      	it	cs
 80054ce:	2304      	movcs	r3, #4
 80054d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	3304      	adds	r3, #4
 80054d6:	2b06      	cmp	r3, #6
 80054d8:	d902      	bls.n	80054e0 <NVIC_EncodePriority+0x30>
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3b03      	subs	r3, #3
 80054de:	e000      	b.n	80054e2 <NVIC_EncodePriority+0x32>
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	401a      	ands	r2, r3
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054f8:	f04f 31ff 	mov.w	r1, #4294967295
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	43d9      	mvns	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005508:	4313      	orrs	r3, r2
         );
}
 800550a:	4618      	mov	r0, r3
 800550c:	3724      	adds	r7, #36	; 0x24
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
	...

08005518 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005528:	d301      	bcc.n	800552e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552a:	2301      	movs	r3, #1
 800552c:	e00f      	b.n	800554e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <SysTick_Config+0x40>)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3b01      	subs	r3, #1
 8005534:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005536:	210f      	movs	r1, #15
 8005538:	f04f 30ff 	mov.w	r0, #4294967295
 800553c:	f7ff ff8e 	bl	800545c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005540:	4b05      	ldr	r3, [pc, #20]	; (8005558 <SysTick_Config+0x40>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005546:	4b04      	ldr	r3, [pc, #16]	; (8005558 <SysTick_Config+0x40>)
 8005548:	2207      	movs	r2, #7
 800554a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	e000e010 	.word	0xe000e010

0800555c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7ff ff05 	bl	8005374 <__NVIC_SetPriorityGrouping>
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	4603      	mov	r3, r0
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005580:	2300      	movs	r3, #0
 8005582:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005584:	f7ff ff1a 	bl	80053bc <__NVIC_GetPriorityGrouping>
 8005588:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	6978      	ldr	r0, [r7, #20]
 8005590:	f7ff ff8e 	bl	80054b0 <NVIC_EncodePriority>
 8005594:	4602      	mov	r2, r0
 8005596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559a:	4611      	mov	r1, r2
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff ff5d 	bl	800545c <__NVIC_SetPriority>
}
 80055a2:	bf00      	nop
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	4603      	mov	r3, r0
 80055b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ff0d 	bl	80053d8 <__NVIC_EnableIRQ>
}
 80055be:	bf00      	nop
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	4603      	mov	r3, r0
 80055ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff1d 	bl	8005414 <__NVIC_DisableIRQ>
}
 80055da:	bf00      	nop
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff ff94 	bl	8005518 <SysTick_Config>
 80055f0:	4603      	mov	r3, r0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005608:	f7fe fc4e 	bl	8003ea8 <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e099      	b.n	800574c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005638:	e00f      	b.n	800565a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800563a:	f7fe fc35 	bl	8003ea8 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b05      	cmp	r3, #5
 8005646:	d908      	bls.n	800565a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2203      	movs	r2, #3
 8005652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e078      	b.n	800574c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e8      	bne.n	800563a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4b38      	ldr	r3, [pc, #224]	; (8005754 <HAL_DMA_Init+0x158>)
 8005674:	4013      	ands	r3, r2
 8005676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800569e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d107      	bne.n	80056c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	4313      	orrs	r3, r2
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d117      	bne.n	800571e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00e      	beq.n	800571e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fb01 	bl	8005d08 <DMA_CheckFifoParam>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2240      	movs	r2, #64	; 0x40
 8005710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800571a:	2301      	movs	r3, #1
 800571c:	e016      	b.n	800574c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fab8 	bl	8005c9c <DMA_CalcBaseAndBitshift>
 800572c:	4603      	mov	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005734:	223f      	movs	r2, #63	; 0x3f
 8005736:	409a      	lsls	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3718      	adds	r7, #24
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	f010803f 	.word	0xf010803f

08005758 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005766:	2300      	movs	r3, #0
 8005768:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005776:	2b01      	cmp	r3, #1
 8005778:	d101      	bne.n	800577e <HAL_DMA_Start_IT+0x26>
 800577a:	2302      	movs	r3, #2
 800577c:	e040      	b.n	8005800 <HAL_DMA_Start_IT+0xa8>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b01      	cmp	r3, #1
 8005790:	d12f      	bne.n	80057f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	68f8      	ldr	r0, [r7, #12]
 80057a8:	f000 fa4a 	bl	8005c40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b0:	223f      	movs	r2, #63	; 0x3f
 80057b2:	409a      	lsls	r2, r3
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 0216 	orr.w	r2, r2, #22
 80057c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0208 	orr.w	r2, r2, #8
 80057de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	e005      	b.n	80057fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057fa:	2302      	movs	r3, #2
 80057fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005814:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005816:	f7fe fb47 	bl	8003ea8 <HAL_GetTick>
 800581a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d008      	beq.n	800583a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e052      	b.n	80058e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0216 	bic.w	r2, r2, #22
 8005848:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695a      	ldr	r2, [r3, #20]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005858:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d103      	bne.n	800586a <HAL_DMA_Abort+0x62>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0208 	bic.w	r2, r2, #8
 8005878:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 0201 	bic.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800588a:	e013      	b.n	80058b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800588c:	f7fe fb0c 	bl	8003ea8 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b05      	cmp	r3, #5
 8005898:	d90c      	bls.n	80058b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2220      	movs	r2, #32
 800589e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2203      	movs	r2, #3
 80058a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e015      	b.n	80058e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e4      	bne.n	800588c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	223f      	movs	r2, #63	; 0x3f
 80058c8:	409a      	lsls	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2280      	movs	r2, #128	; 0x80
 8005900:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e00c      	b.n	8005920 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2205      	movs	r2, #5
 800590a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005938:	4b8e      	ldr	r3, [pc, #568]	; (8005b74 <HAL_DMA_IRQHandler+0x248>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a8e      	ldr	r2, [pc, #568]	; (8005b78 <HAL_DMA_IRQHandler+0x24c>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0a9b      	lsrs	r3, r3, #10
 8005944:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	2208      	movs	r2, #8
 8005958:	409a      	lsls	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4013      	ands	r3, r2
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01a      	beq.n	8005998 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d013      	beq.n	8005998 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0204 	bic.w	r2, r2, #4
 800597e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005984:	2208      	movs	r2, #8
 8005986:	409a      	lsls	r2, r3
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005990:	f043 0201 	orr.w	r2, r3, #1
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599c:	2201      	movs	r2, #1
 800599e:	409a      	lsls	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d012      	beq.n	80059ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ba:	2201      	movs	r2, #1
 80059bc:	409a      	lsls	r2, r3
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	2204      	movs	r2, #4
 80059d4:	409a      	lsls	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d012      	beq.n	8005a04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f0:	2204      	movs	r2, #4
 80059f2:	409a      	lsls	r2, r3
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059fc:	f043 0204 	orr.w	r2, r3, #4
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a08:	2210      	movs	r2, #16
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4013      	ands	r3, r2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d043      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d03c      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a26:	2210      	movs	r2, #16
 8005a28:	409a      	lsls	r2, r3
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d018      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d108      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d024      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
 8005a5a:	e01f      	b.n	8005a9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
 8005a6c:	e016      	b.n	8005a9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d107      	bne.n	8005a8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0208 	bic.w	r2, r2, #8
 8005a8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d003      	beq.n	8005a9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 808f 	beq.w	8005bcc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8087 	beq.w	8005bcc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	409a      	lsls	r2, r3
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b05      	cmp	r3, #5
 8005ad4:	d136      	bne.n	8005b44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0216 	bic.w	r2, r2, #22
 8005ae4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005af4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <HAL_DMA_IRQHandler+0x1da>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f022 0208 	bic.w	r2, r2, #8
 8005b14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	223f      	movs	r2, #63	; 0x3f
 8005b1c:	409a      	lsls	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d07e      	beq.n	8005c38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
        }
        return;
 8005b42:	e079      	b.n	8005c38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d01d      	beq.n	8005b8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d031      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	4798      	blx	r3
 8005b70:	e02c      	b.n	8005bcc <HAL_DMA_IRQHandler+0x2a0>
 8005b72:	bf00      	nop
 8005b74:	20000000 	.word	0x20000000
 8005b78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d023      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
 8005b8c:	e01e      	b.n	8005bcc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10f      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 0210 	bic.w	r2, r2, #16
 8005baa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d032      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d022      	beq.n	8005c26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2205      	movs	r2, #5
 8005be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0201 	bic.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	697a      	ldr	r2, [r7, #20]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d307      	bcc.n	8005c14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1f2      	bne.n	8005bf8 <HAL_DMA_IRQHandler+0x2cc>
 8005c12:	e000      	b.n	8005c16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005c14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d005      	beq.n	8005c3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	4798      	blx	r3
 8005c36:	e000      	b.n	8005c3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005c38:	bf00      	nop
    }
  }
}
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b40      	cmp	r3, #64	; 0x40
 8005c6c:	d108      	bne.n	8005c80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c7e:	e007      	b.n	8005c90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
}
 8005c90:	bf00      	nop
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	3b10      	subs	r3, #16
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <DMA_CalcBaseAndBitshift+0x64>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	091b      	lsrs	r3, r3, #4
 8005cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005cb6:	4a13      	ldr	r2, [pc, #76]	; (8005d04 <DMA_CalcBaseAndBitshift+0x68>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4413      	add	r3, r2
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d909      	bls.n	8005cde <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	1d1a      	adds	r2, r3, #4
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	659a      	str	r2, [r3, #88]	; 0x58
 8005cdc:	e007      	b.n	8005cee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ce6:	f023 0303 	bic.w	r3, r3, #3
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	aaaaaaab 	.word	0xaaaaaaab
 8005d04:	0800b930 	.word	0x0800b930

08005d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11f      	bne.n	8005d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d856      	bhi.n	8005dd6 <DMA_CheckFifoParam+0xce>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <DMA_CheckFifoParam+0x28>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d41 	.word	0x08005d41
 8005d34:	08005d53 	.word	0x08005d53
 8005d38:	08005d41 	.word	0x08005d41
 8005d3c:	08005dd7 	.word	0x08005dd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d046      	beq.n	8005dda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d50:	e043      	b.n	8005dda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d5a:	d140      	bne.n	8005dde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d60:	e03d      	b.n	8005dde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6a:	d121      	bne.n	8005db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d837      	bhi.n	8005de2 <DMA_CheckFifoParam+0xda>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <DMA_CheckFifoParam+0x70>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005d89 	.word	0x08005d89
 8005d7c:	08005d8f 	.word	0x08005d8f
 8005d80:	08005d89 	.word	0x08005d89
 8005d84:	08005da1 	.word	0x08005da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d8c:	e030      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d025      	beq.n	8005de6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d9e:	e022      	b.n	8005de6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005da8:	d11f      	bne.n	8005dea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005dae:	e01c      	b.n	8005dea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d903      	bls.n	8005dbe <DMA_CheckFifoParam+0xb6>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d003      	beq.n	8005dc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005dbc:	e018      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc2:	e015      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00e      	beq.n	8005dee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e00b      	b.n	8005dee <DMA_CheckFifoParam+0xe6>
      break;
 8005dd6:	bf00      	nop
 8005dd8:	e00a      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dda:	bf00      	nop
 8005ddc:	e008      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dde:	bf00      	nop
 8005de0:	e006      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005de2:	bf00      	nop
 8005de4:	e004      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005de6:	bf00      	nop
 8005de8:	e002      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005dea:	bf00      	nop
 8005dec:	e000      	b.n	8005df0 <DMA_CheckFifoParam+0xe8>
      break;
 8005dee:	bf00      	nop
    }
  } 
  
  return status; 
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b089      	sub	sp, #36	; 0x24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e16:	2300      	movs	r3, #0
 8005e18:	61fb      	str	r3, [r7, #28]
 8005e1a:	e16b      	b.n	80060f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	f040 815a 	bne.w	80060ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f003 0303 	and.w	r3, r3, #3
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d005      	beq.n	8005e52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d130      	bne.n	8005eb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	4013      	ands	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	69ba      	ldr	r2, [r7, #24]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e88:	2201      	movs	r2, #1
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e90:	43db      	mvns	r3, r3
 8005e92:	69ba      	ldr	r2, [r7, #24]
 8005e94:	4013      	ands	r3, r2
 8005e96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	091b      	lsrs	r3, r3, #4
 8005e9e:	f003 0201 	and.w	r2, r3, #1
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f003 0303 	and.w	r3, r3, #3
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d017      	beq.n	8005ef0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005ec6:	69fb      	ldr	r3, [r7, #28]
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	2203      	movs	r2, #3
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d123      	bne.n	8005f44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	08da      	lsrs	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	3208      	adds	r2, #8
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	220f      	movs	r2, #15
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	08da      	lsrs	r2, r3, #3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3208      	adds	r2, #8
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	2203      	movs	r2, #3
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	43db      	mvns	r3, r3
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	f003 0203 	and.w	r2, r3, #3
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	f000 80b4 	beq.w	80060ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	4b60      	ldr	r3, [pc, #384]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	4a5f      	ldr	r2, [pc, #380]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f94:	6453      	str	r3, [r2, #68]	; 0x44
 8005f96:	4b5d      	ldr	r3, [pc, #372]	; (800610c <HAL_GPIO_Init+0x30c>)
 8005f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fa2:	4a5b      	ldr	r2, [pc, #364]	; (8006110 <HAL_GPIO_Init+0x310>)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	089b      	lsrs	r3, r3, #2
 8005fa8:	3302      	adds	r3, #2
 8005faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	220f      	movs	r2, #15
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a52      	ldr	r2, [pc, #328]	; (8006114 <HAL_GPIO_Init+0x314>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d02b      	beq.n	8006026 <HAL_GPIO_Init+0x226>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a51      	ldr	r2, [pc, #324]	; (8006118 <HAL_GPIO_Init+0x318>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d025      	beq.n	8006022 <HAL_GPIO_Init+0x222>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a50      	ldr	r2, [pc, #320]	; (800611c <HAL_GPIO_Init+0x31c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01f      	beq.n	800601e <HAL_GPIO_Init+0x21e>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a4f      	ldr	r2, [pc, #316]	; (8006120 <HAL_GPIO_Init+0x320>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d019      	beq.n	800601a <HAL_GPIO_Init+0x21a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a4e      	ldr	r2, [pc, #312]	; (8006124 <HAL_GPIO_Init+0x324>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <HAL_GPIO_Init+0x216>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a4d      	ldr	r2, [pc, #308]	; (8006128 <HAL_GPIO_Init+0x328>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00d      	beq.n	8006012 <HAL_GPIO_Init+0x212>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a4c      	ldr	r2, [pc, #304]	; (800612c <HAL_GPIO_Init+0x32c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d007      	beq.n	800600e <HAL_GPIO_Init+0x20e>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a4b      	ldr	r2, [pc, #300]	; (8006130 <HAL_GPIO_Init+0x330>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_GPIO_Init+0x20a>
 8006006:	2307      	movs	r3, #7
 8006008:	e00e      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800600a:	2308      	movs	r3, #8
 800600c:	e00c      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800600e:	2306      	movs	r3, #6
 8006010:	e00a      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006012:	2305      	movs	r3, #5
 8006014:	e008      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006016:	2304      	movs	r3, #4
 8006018:	e006      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800601a:	2303      	movs	r3, #3
 800601c:	e004      	b.n	8006028 <HAL_GPIO_Init+0x228>
 800601e:	2302      	movs	r3, #2
 8006020:	e002      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <HAL_GPIO_Init+0x228>
 8006026:	2300      	movs	r3, #0
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	f002 0203 	and.w	r2, r2, #3
 800602e:	0092      	lsls	r2, r2, #2
 8006030:	4093      	lsls	r3, r2
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	4313      	orrs	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006038:	4935      	ldr	r1, [pc, #212]	; (8006110 <HAL_GPIO_Init+0x310>)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	089b      	lsrs	r3, r3, #2
 800603e:	3302      	adds	r3, #2
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006046:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800606a:	4a32      	ldr	r2, [pc, #200]	; (8006134 <HAL_GPIO_Init+0x334>)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006070:	4b30      	ldr	r3, [pc, #192]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4313      	orrs	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006094:	4a27      	ldr	r2, [pc, #156]	; (8006134 <HAL_GPIO_Init+0x334>)
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800609a:	4b26      	ldr	r3, [pc, #152]	; (8006134 <HAL_GPIO_Init+0x334>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4013      	ands	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060be:	4a1d      	ldr	r2, [pc, #116]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060c4:	4b1b      	ldr	r3, [pc, #108]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	4013      	ands	r3, r2
 80060d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060e8:	4a12      	ldr	r2, [pc, #72]	; (8006134 <HAL_GPIO_Init+0x334>)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	2b0f      	cmp	r3, #15
 80060f8:	f67f ae90 	bls.w	8005e1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800
 8006110:	40013800 	.word	0x40013800
 8006114:	40020000 	.word	0x40020000
 8006118:	40020400 	.word	0x40020400
 800611c:	40020800 	.word	0x40020800
 8006120:	40020c00 	.word	0x40020c00
 8006124:	40021000 	.word	0x40021000
 8006128:	40021400 	.word	0x40021400
 800612c:	40021800 	.word	0x40021800
 8006130:	40021c00 	.word	0x40021c00
 8006134:	40013c00 	.word	0x40013c00

08006138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	807b      	strh	r3, [r7, #2]
 8006144:	4613      	mov	r3, r2
 8006146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006148:	787b      	ldrb	r3, [r7, #1]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800614e:	887a      	ldrh	r2, [r7, #2]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006154:	e003      	b.n	800615e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006156:	887b      	ldrh	r3, [r7, #2]
 8006158:	041a      	lsls	r2, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	619a      	str	r2, [r3, #24]
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800616a:	b480      	push	{r7}
 800616c:	b085      	sub	sp, #20
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800617c:	887a      	ldrh	r2, [r7, #2]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4013      	ands	r3, r2
 8006182:	041a      	lsls	r2, r3, #16
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	43d9      	mvns	r1, r3
 8006188:	887b      	ldrh	r3, [r7, #2]
 800618a:	400b      	ands	r3, r1
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	619a      	str	r2, [r3, #24]
}
 8006192:	bf00      	nop
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
	...

080061a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b086      	sub	sp, #24
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e267      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d075      	beq.n	80062aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061be:	4b88      	ldr	r3, [pc, #544]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d00c      	beq.n	80061e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ca:	4b85      	ldr	r3, [pc, #532]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061d2:	2b08      	cmp	r3, #8
 80061d4:	d112      	bne.n	80061fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d6:	4b82      	ldr	r3, [pc, #520]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e2:	d10b      	bne.n	80061fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e4:	4b7e      	ldr	r3, [pc, #504]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05b      	beq.n	80062a8 <HAL_RCC_OscConfig+0x108>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d157      	bne.n	80062a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e242      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006204:	d106      	bne.n	8006214 <HAL_RCC_OscConfig+0x74>
 8006206:	4b76      	ldr	r3, [pc, #472]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a75      	ldr	r2, [pc, #468]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800620c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e01d      	b.n	8006250 <HAL_RCC_OscConfig+0xb0>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800621c:	d10c      	bne.n	8006238 <HAL_RCC_OscConfig+0x98>
 800621e:	4b70      	ldr	r3, [pc, #448]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a6f      	ldr	r2, [pc, #444]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	4b6d      	ldr	r3, [pc, #436]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6c      	ldr	r2, [pc, #432]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e00b      	b.n	8006250 <HAL_RCC_OscConfig+0xb0>
 8006238:	4b69      	ldr	r3, [pc, #420]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a68      	ldr	r2, [pc, #416]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800623e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	4b66      	ldr	r3, [pc, #408]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a65      	ldr	r2, [pc, #404]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800624a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800624e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d013      	beq.n	8006280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006258:	f7fd fe26 	bl	8003ea8 <HAL_GetTick>
 800625c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800625e:	e008      	b.n	8006272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006260:	f7fd fe22 	bl	8003ea8 <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	2b64      	cmp	r3, #100	; 0x64
 800626c:	d901      	bls.n	8006272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e207      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006272:	4b5b      	ldr	r3, [pc, #364]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0f0      	beq.n	8006260 <HAL_RCC_OscConfig+0xc0>
 800627e:	e014      	b.n	80062aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006280:	f7fd fe12 	bl	8003ea8 <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006288:	f7fd fe0e 	bl	8003ea8 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b64      	cmp	r3, #100	; 0x64
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e1f3      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800629a:	4b51      	ldr	r3, [pc, #324]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1f0      	bne.n	8006288 <HAL_RCC_OscConfig+0xe8>
 80062a6:	e000      	b.n	80062aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d063      	beq.n	800637e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062b6:	4b4a      	ldr	r3, [pc, #296]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f003 030c 	and.w	r3, r3, #12
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062c2:	4b47      	ldr	r3, [pc, #284]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d11c      	bne.n	8006308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ce:	4b44      	ldr	r3, [pc, #272]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d116      	bne.n	8006308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062da:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d005      	beq.n	80062f2 <HAL_RCC_OscConfig+0x152>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d001      	beq.n	80062f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e1c7      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062f2:	4b3b      	ldr	r3, [pc, #236]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	691b      	ldr	r3, [r3, #16]
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4937      	ldr	r1, [pc, #220]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006302:	4313      	orrs	r3, r2
 8006304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	e03a      	b.n	800637e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006310:	4b34      	ldr	r3, [pc, #208]	; (80063e4 <HAL_RCC_OscConfig+0x244>)
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006316:	f7fd fdc7 	bl	8003ea8 <HAL_GetTick>
 800631a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800631c:	e008      	b.n	8006330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800631e:	f7fd fdc3 	bl	8003ea8 <HAL_GetTick>
 8006322:	4602      	mov	r2, r0
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	1ad3      	subs	r3, r2, r3
 8006328:	2b02      	cmp	r3, #2
 800632a:	d901      	bls.n	8006330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e1a8      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006330:	4b2b      	ldr	r3, [pc, #172]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0302 	and.w	r3, r3, #2
 8006338:	2b00      	cmp	r3, #0
 800633a:	d0f0      	beq.n	800631e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800633c:	4b28      	ldr	r3, [pc, #160]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4925      	ldr	r1, [pc, #148]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 800634c:	4313      	orrs	r3, r2
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	e015      	b.n	800637e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006352:	4b24      	ldr	r3, [pc, #144]	; (80063e4 <HAL_RCC_OscConfig+0x244>)
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fd fda6 	bl	8003ea8 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006360:	f7fd fda2 	bl	8003ea8 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b02      	cmp	r3, #2
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e187      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006372:	4b1b      	ldr	r3, [pc, #108]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d036      	beq.n	80063f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d016      	beq.n	80063c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <HAL_RCC_OscConfig+0x248>)
 8006394:	2201      	movs	r2, #1
 8006396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006398:	f7fd fd86 	bl	8003ea8 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063a0:	f7fd fd82 	bl	8003ea8 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e167      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063b2:	4b0b      	ldr	r3, [pc, #44]	; (80063e0 <HAL_RCC_OscConfig+0x240>)
 80063b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x200>
 80063be:	e01b      	b.n	80063f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063c0:	4b09      	ldr	r3, [pc, #36]	; (80063e8 <HAL_RCC_OscConfig+0x248>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063c6:	f7fd fd6f 	bl	8003ea8 <HAL_GetTick>
 80063ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	e00e      	b.n	80063ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ce:	f7fd fd6b 	bl	8003ea8 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d907      	bls.n	80063ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e150      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470000 	.word	0x42470000
 80063e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ec:	4b88      	ldr	r3, [pc, #544]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80063ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f0:	f003 0302 	and.w	r3, r3, #2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d1ea      	bne.n	80063ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8097 	beq.w	8006534 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006406:	2300      	movs	r3, #0
 8006408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800640a:	4b81      	ldr	r3, [pc, #516]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800640c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	4b7d      	ldr	r3, [pc, #500]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	4a7c      	ldr	r2, [pc, #496]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006424:	6413      	str	r3, [r2, #64]	; 0x40
 8006426:	4b7a      	ldr	r3, [pc, #488]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642e:	60bb      	str	r3, [r7, #8]
 8006430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006436:	4b77      	ldr	r3, [pc, #476]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d118      	bne.n	8006474 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006442:	4b74      	ldr	r3, [pc, #464]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a73      	ldr	r2, [pc, #460]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 8006448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800644c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800644e:	f7fd fd2b 	bl	8003ea8 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fd fd27 	bl	8003ea8 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e10c      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006468:	4b6a      	ldr	r3, [pc, #424]	; (8006614 <HAL_RCC_OscConfig+0x474>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d106      	bne.n	800648a <HAL_RCC_OscConfig+0x2ea>
 800647c:	4b64      	ldr	r3, [pc, #400]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006480:	4a63      	ldr	r2, [pc, #396]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006482:	f043 0301 	orr.w	r3, r3, #1
 8006486:	6713      	str	r3, [r2, #112]	; 0x70
 8006488:	e01c      	b.n	80064c4 <HAL_RCC_OscConfig+0x324>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	2b05      	cmp	r3, #5
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0x30c>
 8006492:	4b5f      	ldr	r3, [pc, #380]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006496:	4a5e      	ldr	r2, [pc, #376]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006498:	f043 0304 	orr.w	r3, r3, #4
 800649c:	6713      	str	r3, [r2, #112]	; 0x70
 800649e:	4b5c      	ldr	r3, [pc, #368]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a2:	4a5b      	ldr	r2, [pc, #364]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064a4:	f043 0301 	orr.w	r3, r3, #1
 80064a8:	6713      	str	r3, [r2, #112]	; 0x70
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0x324>
 80064ac:	4b58      	ldr	r3, [pc, #352]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	6713      	str	r3, [r2, #112]	; 0x70
 80064b8:	4b55      	ldr	r3, [pc, #340]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	4a54      	ldr	r2, [pc, #336]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064be:	f023 0304 	bic.w	r3, r3, #4
 80064c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d015      	beq.n	80064f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fd fcec 	bl	8003ea8 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064d2:	e00a      	b.n	80064ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064d4:	f7fd fce8 	bl	8003ea8 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e0cb      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ea:	4b49      	ldr	r3, [pc, #292]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80064ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d0ee      	beq.n	80064d4 <HAL_RCC_OscConfig+0x334>
 80064f6:	e014      	b.n	8006522 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064f8:	f7fd fcd6 	bl	8003ea8 <HAL_GetTick>
 80064fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064fe:	e00a      	b.n	8006516 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006500:	f7fd fcd2 	bl	8003ea8 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	f241 3288 	movw	r2, #5000	; 0x1388
 800650e:	4293      	cmp	r3, r2
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e0b5      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006516:	4b3e      	ldr	r3, [pc, #248]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ee      	bne.n	8006500 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006522:	7dfb      	ldrb	r3, [r7, #23]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d105      	bne.n	8006534 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006528:	4b39      	ldr	r3, [pc, #228]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	4a38      	ldr	r2, [pc, #224]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 800652e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006532:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 80a1 	beq.w	8006680 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800653e:	4b34      	ldr	r3, [pc, #208]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b08      	cmp	r3, #8
 8006548:	d05c      	beq.n	8006604 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d141      	bne.n	80065d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006552:	4b31      	ldr	r3, [pc, #196]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fd fca6 	bl	8003ea8 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006560:	f7fd fca2 	bl	8003ea8 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e087      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006572:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	69da      	ldr	r2, [r3, #28]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	019b      	lsls	r3, r3, #6
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	085b      	lsrs	r3, r3, #1
 8006596:	3b01      	subs	r3, #1
 8006598:	041b      	lsls	r3, r3, #16
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a0:	061b      	lsls	r3, r3, #24
 80065a2:	491b      	ldr	r1, [pc, #108]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065a8:	4b1b      	ldr	r3, [pc, #108]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 80065aa:	2201      	movs	r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ae:	f7fd fc7b 	bl	8003ea8 <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b6:	f7fd fc77 	bl	8003ea8 <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b02      	cmp	r3, #2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e05c      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065c8:	4b11      	ldr	r3, [pc, #68]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x416>
 80065d4:	e054      	b.n	8006680 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <HAL_RCC_OscConfig+0x478>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065dc:	f7fd fc64 	bl	8003ea8 <HAL_GetTick>
 80065e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065e2:	e008      	b.n	80065f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e4:	f7fd fc60 	bl	8003ea8 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d901      	bls.n	80065f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e045      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <HAL_RCC_OscConfig+0x470>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1f0      	bne.n	80065e4 <HAL_RCC_OscConfig+0x444>
 8006602:	e03d      	b.n	8006680 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d107      	bne.n	800661c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e038      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
 8006610:	40023800 	.word	0x40023800
 8006614:	40007000 	.word	0x40007000
 8006618:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800661c:	4b1b      	ldr	r3, [pc, #108]	; (800668c <HAL_RCC_OscConfig+0x4ec>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d028      	beq.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006634:	429a      	cmp	r2, r3
 8006636:	d121      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006642:	429a      	cmp	r2, r3
 8006644:	d11a      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800664c:	4013      	ands	r3, r2
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006652:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006654:	4293      	cmp	r3, r2
 8006656:	d111      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006662:	085b      	lsrs	r3, r3, #1
 8006664:	3b01      	subs	r3, #1
 8006666:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006668:	429a      	cmp	r2, r3
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006678:	429a      	cmp	r2, r3
 800667a:	d001      	beq.n	8006680 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40023800 	.word	0x40023800

08006690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0cc      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066a4:	4b68      	ldr	r3, [pc, #416]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d90c      	bls.n	80066cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b65      	ldr	r3, [pc, #404]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	4b63      	ldr	r3, [pc, #396]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0307 	and.w	r3, r3, #7
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d001      	beq.n	80066cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0b8      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d020      	beq.n	800671a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0304 	and.w	r3, r3, #4
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066e4:	4b59      	ldr	r3, [pc, #356]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	4a58      	ldr	r2, [pc, #352]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066fc:	4b53      	ldr	r3, [pc, #332]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	4a52      	ldr	r2, [pc, #328]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006708:	4b50      	ldr	r3, [pc, #320]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	494d      	ldr	r1, [pc, #308]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	4313      	orrs	r3, r2
 8006718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d044      	beq.n	80067b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672e:	4b47      	ldr	r3, [pc, #284]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d119      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e07f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d003      	beq.n	800674e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800674a:	2b03      	cmp	r3, #3
 800674c:	d107      	bne.n	800675e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800674e:	4b3f      	ldr	r3, [pc, #252]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e06f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800675e:	4b3b      	ldr	r3, [pc, #236]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d101      	bne.n	800676e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e067      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800676e:	4b37      	ldr	r3, [pc, #220]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f023 0203 	bic.w	r2, r3, #3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	4934      	ldr	r1, [pc, #208]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800677c:	4313      	orrs	r3, r2
 800677e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006780:	f7fd fb92 	bl	8003ea8 <HAL_GetTick>
 8006784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006786:	e00a      	b.n	800679e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006788:	f7fd fb8e 	bl	8003ea8 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	f241 3288 	movw	r2, #5000	; 0x1388
 8006796:	4293      	cmp	r3, r2
 8006798:	d901      	bls.n	800679e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e04f      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679e:	4b2b      	ldr	r3, [pc, #172]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 020c 	and.w	r2, r3, #12
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d1eb      	bne.n	8006788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d20c      	bcs.n	80067d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067be:	4b22      	ldr	r3, [pc, #136]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067c0:	683a      	ldr	r2, [r7, #0]
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c6:	4b20      	ldr	r3, [pc, #128]	; (8006848 <HAL_RCC_ClockConfig+0x1b8>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0307 	and.w	r3, r3, #7
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e032      	b.n	800683e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067e4:	4b19      	ldr	r3, [pc, #100]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	4916      	ldr	r1, [pc, #88]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d009      	beq.n	8006816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	490e      	ldr	r1, [pc, #56]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 8006812:	4313      	orrs	r3, r2
 8006814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006816:	f000 f821 	bl	800685c <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <HAL_RCC_ClockConfig+0x1bc>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_RCC_ClockConfig+0x1c0>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	4a09      	ldr	r2, [pc, #36]	; (8006854 <HAL_RCC_ClockConfig+0x1c4>)
 8006830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCC_ClockConfig+0x1c8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd faf2 	bl	8003e20 <HAL_InitTick>

  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40023c00 	.word	0x40023c00
 800684c:	40023800 	.word	0x40023800
 8006850:	0800b918 	.word	0x0800b918
 8006854:	20000000 	.word	0x20000000
 8006858:	20000004 	.word	0x20000004

0800685c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800685c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006860:	b090      	sub	sp, #64	; 0x40
 8006862:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	637b      	str	r3, [r7, #52]	; 0x34
 8006868:	2300      	movs	r3, #0
 800686a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800686c:	2300      	movs	r3, #0
 800686e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006870:	2300      	movs	r3, #0
 8006872:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006874:	4b59      	ldr	r3, [pc, #356]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 030c 	and.w	r3, r3, #12
 800687c:	2b08      	cmp	r3, #8
 800687e:	d00d      	beq.n	800689c <HAL_RCC_GetSysClockFreq+0x40>
 8006880:	2b08      	cmp	r3, #8
 8006882:	f200 80a1 	bhi.w	80069c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_RCC_GetSysClockFreq+0x34>
 800688a:	2b04      	cmp	r3, #4
 800688c:	d003      	beq.n	8006896 <HAL_RCC_GetSysClockFreq+0x3a>
 800688e:	e09b      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006890:	4b53      	ldr	r3, [pc, #332]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006894:	e09b      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006896:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800689a:	e098      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800689c:	4b4f      	ldr	r3, [pc, #316]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068a6:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d028      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b2:	4b4a      	ldr	r3, [pc, #296]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	099b      	lsrs	r3, r3, #6
 80068b8:	2200      	movs	r2, #0
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	627a      	str	r2, [r7, #36]	; 0x24
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80068c4:	2100      	movs	r1, #0
 80068c6:	4b47      	ldr	r3, [pc, #284]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068c8:	fb03 f201 	mul.w	r2, r3, r1
 80068cc:	2300      	movs	r3, #0
 80068ce:	fb00 f303 	mul.w	r3, r0, r3
 80068d2:	4413      	add	r3, r2
 80068d4:	4a43      	ldr	r2, [pc, #268]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068d6:	fba0 1202 	umull	r1, r2, r0, r2
 80068da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068dc:	460a      	mov	r2, r1
 80068de:	62ba      	str	r2, [r7, #40]	; 0x28
 80068e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e2:	4413      	add	r3, r2
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e8:	2200      	movs	r2, #0
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	61fa      	str	r2, [r7, #28]
 80068ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80068f6:	f7fa f9a9 	bl	8000c4c <__aeabi_uldivmod>
 80068fa:	4602      	mov	r2, r0
 80068fc:	460b      	mov	r3, r1
 80068fe:	4613      	mov	r3, r2
 8006900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006902:	e053      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006904:	4b35      	ldr	r3, [pc, #212]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	2200      	movs	r2, #0
 800690c:	613b      	str	r3, [r7, #16]
 800690e:	617a      	str	r2, [r7, #20]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006916:	f04f 0b00 	mov.w	fp, #0
 800691a:	4652      	mov	r2, sl
 800691c:	465b      	mov	r3, fp
 800691e:	f04f 0000 	mov.w	r0, #0
 8006922:	f04f 0100 	mov.w	r1, #0
 8006926:	0159      	lsls	r1, r3, #5
 8006928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800692c:	0150      	lsls	r0, r2, #5
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	ebb2 080a 	subs.w	r8, r2, sl
 8006936:	eb63 090b 	sbc.w	r9, r3, fp
 800693a:	f04f 0200 	mov.w	r2, #0
 800693e:	f04f 0300 	mov.w	r3, #0
 8006942:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006946:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800694a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800694e:	ebb2 0408 	subs.w	r4, r2, r8
 8006952:	eb63 0509 	sbc.w	r5, r3, r9
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	f04f 0300 	mov.w	r3, #0
 800695e:	00eb      	lsls	r3, r5, #3
 8006960:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006964:	00e2      	lsls	r2, r4, #3
 8006966:	4614      	mov	r4, r2
 8006968:	461d      	mov	r5, r3
 800696a:	eb14 030a 	adds.w	r3, r4, sl
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	eb45 030b 	adc.w	r3, r5, fp
 8006974:	607b      	str	r3, [r7, #4]
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006982:	4629      	mov	r1, r5
 8006984:	028b      	lsls	r3, r1, #10
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800698c:	4621      	mov	r1, r4
 800698e:	028a      	lsls	r2, r1, #10
 8006990:	4610      	mov	r0, r2
 8006992:	4619      	mov	r1, r3
 8006994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006996:	2200      	movs	r2, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	60fa      	str	r2, [r7, #12]
 800699c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069a0:	f7fa f954 	bl	8000c4c <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_GetSysClockFreq+0x180>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	3301      	adds	r3, #1
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80069bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069c6:	e002      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80069ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80069cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3740      	adds	r7, #64	; 0x40
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
 80069e0:	00f42400 	.word	0x00f42400
 80069e4:	017d7840 	.word	0x017d7840

080069e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <HAL_RCC_GetHCLKFreq+0x14>)
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000000 	.word	0x20000000

08006a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a04:	f7ff fff0 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	0a9b      	lsrs	r3, r3, #10
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4903      	ldr	r1, [pc, #12]	; (8006a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0800b928 	.word	0x0800b928

08006a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a2c:	f7ff ffdc 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a30:	4602      	mov	r2, r0
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	0b5b      	lsrs	r3, r3, #13
 8006a38:	f003 0307 	and.w	r3, r3, #7
 8006a3c:	4903      	ldr	r1, [pc, #12]	; (8006a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a3e:	5ccb      	ldrb	r3, [r1, r3]
 8006a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40023800 	.word	0x40023800
 8006a4c:	0800b928 	.word	0x0800b928

08006a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e041      	b.n	8006ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fc fdda 	bl	8003630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	f000 fcc4 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e04e      	b.n	8006ba6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f042 0201 	orr.w	r2, r2, #1
 8006b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a23      	ldr	r2, [pc, #140]	; (8006bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d022      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b32:	d01d      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d018      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a1e      	ldr	r2, [pc, #120]	; (8006bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d013      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1c      	ldr	r2, [pc, #112]	; (8006bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a19      	ldr	r2, [pc, #100]	; (8006bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_Base_Start_IT+0x80>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a18      	ldr	r2, [pc, #96]	; (8006bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d111      	bne.n	8006b94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f003 0307 	and.w	r3, r3, #7
 8006b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d010      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b92:	e007      	b.n	8006ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3714      	adds	r7, #20
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	40010000 	.word	0x40010000
 8006bb8:	40000400 	.word	0x40000400
 8006bbc:	40000800 	.word	0x40000800
 8006bc0:	40000c00 	.word	0x40000c00
 8006bc4:	40010400 	.word	0x40010400
 8006bc8:	40014000 	.word	0x40014000
 8006bcc:	40001800 	.word	0x40001800

08006bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	e041      	b.n	8006c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d106      	bne.n	8006bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fc fcd4 	bl	80035a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	4610      	mov	r0, r2
 8006c10:	f000 fc04 	bl	800741c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <HAL_TIM_PWM_Start+0x24>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	bf14      	ite	ne
 8006c8c:	2301      	movne	r3, #1
 8006c8e:	2300      	moveq	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	e022      	b.n	8006cda <HAL_TIM_PWM_Start+0x6a>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	d109      	bne.n	8006cae <HAL_TIM_PWM_Start+0x3e>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	bf14      	ite	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	2300      	moveq	r3, #0
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	e015      	b.n	8006cda <HAL_TIM_PWM_Start+0x6a>
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b08      	cmp	r3, #8
 8006cb2:	d109      	bne.n	8006cc8 <HAL_TIM_PWM_Start+0x58>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e008      	b.n	8006cda <HAL_TIM_PWM_Start+0x6a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	bf14      	ite	ne
 8006cd4:	2301      	movne	r3, #1
 8006cd6:	2300      	moveq	r3, #0
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e07c      	b.n	8006ddc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0x82>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2202      	movs	r2, #2
 8006cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf0:	e013      	b.n	8006d1a <HAL_TIM_PWM_Start+0xaa>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d104      	bne.n	8006d02 <HAL_TIM_PWM_Start+0x92>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d00:	e00b      	b.n	8006d1a <HAL_TIM_PWM_Start+0xaa>
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d104      	bne.n	8006d12 <HAL_TIM_PWM_Start+0xa2>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d10:	e003      	b.n	8006d1a <HAL_TIM_PWM_Start+0xaa>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2202      	movs	r2, #2
 8006d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fdd6 	bl	80078d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <HAL_TIM_PWM_Start+0x174>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d004      	beq.n	8006d3c <HAL_TIM_PWM_Start+0xcc>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_TIM_PWM_Start+0x178>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d101      	bne.n	8006d40 <HAL_TIM_PWM_Start+0xd0>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e000      	b.n	8006d42 <HAL_TIM_PWM_Start+0xd2>
 8006d40:	2300      	movs	r3, #0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a22      	ldr	r2, [pc, #136]	; (8006de4 <HAL_TIM_PWM_Start+0x174>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d022      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d01d      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a1f      	ldr	r2, [pc, #124]	; (8006dec <HAL_TIM_PWM_Start+0x17c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d018      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <HAL_TIM_PWM_Start+0x180>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1c      	ldr	r2, [pc, #112]	; (8006df4 <HAL_TIM_PWM_Start+0x184>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <HAL_TIM_PWM_Start+0x178>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a18      	ldr	r2, [pc, #96]	; (8006df8 <HAL_TIM_PWM_Start+0x188>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_TIM_PWM_Start+0x136>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a16      	ldr	r2, [pc, #88]	; (8006dfc <HAL_TIM_PWM_Start+0x18c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d111      	bne.n	8006dca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b06      	cmp	r3, #6
 8006db6:	d010      	beq.n	8006dda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0201 	orr.w	r2, r2, #1
 8006dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dc8:	e007      	b.n	8006dda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40010400 	.word	0x40010400
 8006dec:	40000400 	.word	0x40000400
 8006df0:	40000800 	.word	0x40000800
 8006df4:	40000c00 	.word	0x40000c00
 8006df8:	40014000 	.word	0x40014000
 8006dfc:	40001800 	.word	0x40001800

08006e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e097      	b.n	8006f44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d106      	bne.n	8006e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7fc fb2d 	bl	8003488 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2202      	movs	r2, #2
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e44:	f023 0307 	bic.w	r3, r3, #7
 8006e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	4619      	mov	r1, r3
 8006e54:	4610      	mov	r0, r2
 8006e56:	f000 fae1 	bl	800741c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	f023 0303 	bic.w	r3, r3, #3
 8006e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	021b      	lsls	r3, r3, #8
 8006e92:	4313      	orrs	r3, r2
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006ea0:	f023 030c 	bic.w	r3, r3, #12
 8006ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006eac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	011a      	lsls	r2, r3, #4
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	031b      	lsls	r3, r3, #12
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	693a      	ldr	r2, [r7, #16]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006ede:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d110      	bne.n	8006f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d102      	bne.n	8006f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f82:	7b7b      	ldrb	r3, [r7, #13]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e069      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f9c:	e031      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d110      	bne.n	8006fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d102      	bne.n	8006fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006faa:	7b3b      	ldrb	r3, [r7, #12]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d001      	beq.n	8006fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e055      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2202      	movs	r2, #2
 8006fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006fc4:	e01d      	b.n	8007002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc6:	7bfb      	ldrb	r3, [r7, #15]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d108      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d105      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fd2:	7b7b      	ldrb	r3, [r7, #13]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d102      	bne.n	8006fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd8:	7b3b      	ldrb	r3, [r7, #12]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e03e      	b.n	8007060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_TIM_Encoder_Start+0xc4>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d008      	beq.n	8007020 <HAL_TIM_Encoder_Start+0xd4>
 800700e:	e00f      	b.n	8007030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2201      	movs	r2, #1
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fc5b 	bl	80078d4 <TIM_CCxChannelCmd>
      break;
 800701e:	e016      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2201      	movs	r2, #1
 8007026:	2104      	movs	r1, #4
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fc53 	bl	80078d4 <TIM_CCxChannelCmd>
      break;
 800702e:	e00e      	b.n	800704e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fc4b 	bl	80078d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2201      	movs	r2, #1
 8007044:	2104      	movs	r1, #4
 8007046:	4618      	mov	r0, r3
 8007048:	f000 fc44 	bl	80078d4 <TIM_CCxChannelCmd>
      break;
 800704c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f042 0201 	orr.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d020      	beq.n	80070cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01b      	beq.n	80070cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0202 	mvn.w	r2, #2
 800709c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f994 	bl	80073e0 <HAL_TIM_IC_CaptureCallback>
 80070b8:	e005      	b.n	80070c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f986 	bl	80073cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f997 	bl	80073f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d020      	beq.n	8007118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01b      	beq.n	8007118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f06f 0204 	mvn.w	r2, #4
 80070e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f96e 	bl	80073e0 <HAL_TIM_IC_CaptureCallback>
 8007104:	e005      	b.n	8007112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f960 	bl	80073cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f971 	bl	80073f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	f003 0308 	and.w	r3, r3, #8
 800711e:	2b00      	cmp	r3, #0
 8007120:	d020      	beq.n	8007164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	2b00      	cmp	r3, #0
 800712a:	d01b      	beq.n	8007164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0208 	mvn.w	r2, #8
 8007134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2204      	movs	r2, #4
 800713a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f948 	bl	80073e0 <HAL_TIM_IC_CaptureCallback>
 8007150:	e005      	b.n	800715e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f93a 	bl	80073cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 f94b 	bl	80073f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	d020      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b00      	cmp	r3, #0
 8007176:	d01b      	beq.n	80071b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f06f 0210 	mvn.w	r2, #16
 8007180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2208      	movs	r2, #8
 8007186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007192:	2b00      	cmp	r3, #0
 8007194:	d003      	beq.n	800719e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f922 	bl	80073e0 <HAL_TIM_IC_CaptureCallback>
 800719c:	e005      	b.n	80071aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 f914 	bl	80073cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f925 	bl	80073f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00c      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0201 	mvn.w	r2, #1
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7f9 ff2a 	bl	8001028 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00c      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d007      	beq.n	80071f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fc1a 	bl	8007a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00c      	beq.n	800721c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8f6 	bl	8007408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00c      	beq.n	8007240 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f003 0320 	and.w	r3, r3, #32
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f06f 0220 	mvn.w	r2, #32
 8007238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fbec 	bl	8007a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007262:	2302      	movs	r3, #2
 8007264:	e0ae      	b.n	80073c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b0c      	cmp	r3, #12
 8007272:	f200 809f 	bhi.w	80073b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	080072b1 	.word	0x080072b1
 8007280:	080073b5 	.word	0x080073b5
 8007284:	080073b5 	.word	0x080073b5
 8007288:	080073b5 	.word	0x080073b5
 800728c:	080072f1 	.word	0x080072f1
 8007290:	080073b5 	.word	0x080073b5
 8007294:	080073b5 	.word	0x080073b5
 8007298:	080073b5 	.word	0x080073b5
 800729c:	08007333 	.word	0x08007333
 80072a0:	080073b5 	.word	0x080073b5
 80072a4:	080073b5 	.word	0x080073b5
 80072a8:	080073b5 	.word	0x080073b5
 80072ac:	08007373 	.word	0x08007373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68b9      	ldr	r1, [r7, #8]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 f95c 	bl	8007574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f042 0208 	orr.w	r2, r2, #8
 80072ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699a      	ldr	r2, [r3, #24]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0204 	bic.w	r2, r2, #4
 80072da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6999      	ldr	r1, [r3, #24]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	619a      	str	r2, [r3, #24]
      break;
 80072ee:	e064      	b.n	80073ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 f9ac 	bl	8007654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699a      	ldr	r2, [r3, #24]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800730a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699a      	ldr	r2, [r3, #24]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800731a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6999      	ldr	r1, [r3, #24]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	619a      	str	r2, [r3, #24]
      break;
 8007330:	e043      	b.n	80073ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	4618      	mov	r0, r3
 800733a:	f000 fa01 	bl	8007740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0208 	orr.w	r2, r2, #8
 800734c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69da      	ldr	r2, [r3, #28]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0204 	bic.w	r2, r2, #4
 800735c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69d9      	ldr	r1, [r3, #28]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	691a      	ldr	r2, [r3, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	61da      	str	r2, [r3, #28]
      break;
 8007370:	e023      	b.n	80073ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f000 fa55 	bl	8007828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69da      	ldr	r2, [r3, #28]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800738c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69da      	ldr	r2, [r3, #28]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	69d9      	ldr	r1, [r3, #28]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	021a      	lsls	r2, r3, #8
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	61da      	str	r2, [r3, #28]
      break;
 80073b2:	e002      	b.n	80073ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	75fb      	strb	r3, [r7, #23]
      break;
 80073b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3718      	adds	r7, #24
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073d4:	bf00      	nop
 80073d6:	370c      	adds	r7, #12
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073e8:	bf00      	nop
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a46      	ldr	r2, [pc, #280]	; (8007548 <TIM_Base_SetConfig+0x12c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743a:	d00f      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a43      	ldr	r2, [pc, #268]	; (800754c <TIM_Base_SetConfig+0x130>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a42      	ldr	r2, [pc, #264]	; (8007550 <TIM_Base_SetConfig+0x134>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a41      	ldr	r2, [pc, #260]	; (8007554 <TIM_Base_SetConfig+0x138>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a40      	ldr	r2, [pc, #256]	; (8007558 <TIM_Base_SetConfig+0x13c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d108      	bne.n	800746e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a35      	ldr	r2, [pc, #212]	; (8007548 <TIM_Base_SetConfig+0x12c>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800747c:	d027      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a32      	ldr	r2, [pc, #200]	; (800754c <TIM_Base_SetConfig+0x130>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d023      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a31      	ldr	r2, [pc, #196]	; (8007550 <TIM_Base_SetConfig+0x134>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01f      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a30      	ldr	r2, [pc, #192]	; (8007554 <TIM_Base_SetConfig+0x138>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2f      	ldr	r2, [pc, #188]	; (8007558 <TIM_Base_SetConfig+0x13c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d017      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2e      	ldr	r2, [pc, #184]	; (800755c <TIM_Base_SetConfig+0x140>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d013      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2d      	ldr	r2, [pc, #180]	; (8007560 <TIM_Base_SetConfig+0x144>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00f      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <TIM_Base_SetConfig+0x148>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00b      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <TIM_Base_SetConfig+0x14c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d007      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2a      	ldr	r2, [pc, #168]	; (800756c <TIM_Base_SetConfig+0x150>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d003      	beq.n	80074ce <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a29      	ldr	r2, [pc, #164]	; (8007570 <TIM_Base_SetConfig+0x154>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d108      	bne.n	80074e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	695b      	ldr	r3, [r3, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689a      	ldr	r2, [r3, #8]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a10      	ldr	r2, [pc, #64]	; (8007548 <TIM_Base_SetConfig+0x12c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_Base_SetConfig+0xf8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a12      	ldr	r2, [pc, #72]	; (8007558 <TIM_Base_SetConfig+0x13c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d103      	bne.n	800751c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	691a      	ldr	r2, [r3, #16]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b01      	cmp	r3, #1
 800752c:	d105      	bne.n	800753a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	f023 0201 	bic.w	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	611a      	str	r2, [r3, #16]
  }
}
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	40010000 	.word	0x40010000
 800754c:	40000400 	.word	0x40000400
 8007550:	40000800 	.word	0x40000800
 8007554:	40000c00 	.word	0x40000c00
 8007558:	40010400 	.word	0x40010400
 800755c:	40014000 	.word	0x40014000
 8007560:	40014400 	.word	0x40014400
 8007564:	40014800 	.word	0x40014800
 8007568:	40001800 	.word	0x40001800
 800756c:	40001c00 	.word	0x40001c00
 8007570:	40002000 	.word	0x40002000

08007574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a1b      	ldr	r3, [r3, #32]
 8007588:	f023 0201 	bic.w	r2, r3, #1
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f023 0302 	bic.w	r3, r3, #2
 80075bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a20      	ldr	r2, [pc, #128]	; (800764c <TIM_OC1_SetConfig+0xd8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_OC1_SetConfig+0x64>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d10c      	bne.n	80075f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f023 0308 	bic.w	r3, r3, #8
 80075de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	697a      	ldr	r2, [r7, #20]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 0304 	bic.w	r3, r3, #4
 80075f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <TIM_OC1_SetConfig+0xd8>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_OC1_SetConfig+0x8e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a14      	ldr	r2, [pc, #80]	; (8007650 <TIM_OC1_SetConfig+0xdc>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d111      	bne.n	8007626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	693a      	ldr	r2, [r7, #16]
 8007622:	4313      	orrs	r3, r2
 8007624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	685a      	ldr	r2, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	621a      	str	r2, [r3, #32]
}
 8007640:	bf00      	nop
 8007642:	371c      	adds	r7, #28
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	40010000 	.word	0x40010000
 8007650:	40010400 	.word	0x40010400

08007654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a1b      	ldr	r3, [r3, #32]
 8007668:	f023 0210 	bic.w	r2, r3, #16
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800768a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	021b      	lsls	r3, r3, #8
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f023 0320 	bic.w	r3, r3, #32
 800769e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a22      	ldr	r2, [pc, #136]	; (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d003      	beq.n	80076bc <TIM_OC2_SetConfig+0x68>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	4a21      	ldr	r2, [pc, #132]	; (800773c <TIM_OC2_SetConfig+0xe8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10d      	bne.n	80076d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <TIM_OC2_SetConfig+0xe4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_OC2_SetConfig+0x94>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a16      	ldr	r2, [pc, #88]	; (800773c <TIM_OC2_SetConfig+0xe8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d113      	bne.n	8007710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	695b      	ldr	r3, [r3, #20]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	009b      	lsls	r3, r3, #2
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	693a      	ldr	r2, [r7, #16]
 8007714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	bf00      	nop
 800772c:	371c      	adds	r7, #28
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40010000 	.word	0x40010000
 800773c:	40010400 	.word	0x40010400

08007740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	4313      	orrs	r3, r2
 8007780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a21      	ldr	r2, [pc, #132]	; (8007820 <TIM_OC3_SetConfig+0xe0>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d003      	beq.n	80077a6 <TIM_OC3_SetConfig+0x66>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a20      	ldr	r2, [pc, #128]	; (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10d      	bne.n	80077c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	021b      	lsls	r3, r3, #8
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a16      	ldr	r2, [pc, #88]	; (8007820 <TIM_OC3_SetConfig+0xe0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d003      	beq.n	80077d2 <TIM_OC3_SetConfig+0x92>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	; (8007824 <TIM_OC3_SetConfig+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d113      	bne.n	80077fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	699b      	ldr	r3, [r3, #24]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	621a      	str	r2, [r3, #32]
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400

08007828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a1b      	ldr	r3, [r3, #32]
 800783c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800785e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	031b      	lsls	r3, r3, #12
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a12      	ldr	r2, [pc, #72]	; (80078cc <TIM_OC4_SetConfig+0xa4>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_OC4_SetConfig+0x68>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <TIM_OC4_SetConfig+0xa8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d109      	bne.n	80078a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	019b      	lsls	r3, r3, #6
 800789e:	697a      	ldr	r2, [r7, #20]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685a      	ldr	r2, [r3, #4]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	621a      	str	r2, [r3, #32]
}
 80078be:	bf00      	nop
 80078c0:	371c      	adds	r7, #28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40010000 	.word	0x40010000
 80078d0:	40010400 	.word	0x40010400

080078d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	2201      	movs	r2, #1
 80078e8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a1a      	ldr	r2, [r3, #32]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	43db      	mvns	r3, r3
 80078f6:	401a      	ands	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1a      	ldr	r2, [r3, #32]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	f003 031f 	and.w	r3, r3, #31
 8007906:	6879      	ldr	r1, [r7, #4]
 8007908:	fa01 f303 	lsl.w	r3, r1, r3
 800790c:	431a      	orrs	r2, r3
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	621a      	str	r2, [r3, #32]
}
 8007912:	bf00      	nop
 8007914:	371c      	adds	r7, #28
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
	...

08007920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007934:	2302      	movs	r3, #2
 8007936:	e05a      	b.n	80079ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a21      	ldr	r2, [pc, #132]	; (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d022      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007984:	d01d      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1d      	ldr	r2, [pc, #116]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d018      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1b      	ldr	r2, [pc, #108]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1a      	ldr	r2, [pc, #104]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d004      	beq.n	80079c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d10c      	bne.n	80079dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40010400 	.word	0x40010400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40001800 	.word	0x40001800

08007a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e042      	b.n	8007ad8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d106      	bne.n	8007a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f7fb fe8c 	bl	8003784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fea1 	bl	80087cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	d121      	bne.n	8007b3e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <HAL_UART_Transmit_IT+0x26>
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e01a      	b.n	8007b40 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	88fa      	ldrh	r2, [r7, #6]
 8007b14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2221      	movs	r2, #33	; 0x21
 8007b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68da      	ldr	r2, [r3, #12]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007b38:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	e000      	b.n	8007b40 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007b3e:	2302      	movs	r3, #2
  }
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d112      	bne.n	8007b8c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <HAL_UART_Receive_DMA+0x26>
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e00b      	b.n	8007b8e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f000 fbc2 	bl	800830c <UART_Start_Receive_DMA>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	e000      	b.n	8007b8e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b8c:	2302      	movs	r3, #2
  }
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b0ba      	sub	sp, #232	; 0xe8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007bd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10f      	bne.n	8007bfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be2:	f003 0320 	and.w	r3, r3, #32
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d009      	beq.n	8007bfe <HAL_UART_IRQHandler+0x66>
 8007bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fd29 	bl	800864e <UART_Receive_IT>
      return;
 8007bfc:	e25b      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 80de 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x22c>
 8007c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d106      	bne.n	8007c22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 80d1 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <HAL_UART_IRQHandler+0xae>
 8007c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3e:	f043 0201 	orr.w	r2, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00b      	beq.n	8007c6a <HAL_UART_IRQHandler+0xd2>
 8007c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	f043 0202 	orr.w	r2, r3, #2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_UART_IRQHandler+0xf6>
 8007c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c86:	f043 0204 	orr.w	r2, r3, #4
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c92:	f003 0308 	and.w	r3, r3, #8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <HAL_UART_IRQHandler+0x126>
 8007c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d005      	beq.n	8007cbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	f043 0208 	orr.w	r2, r3, #8
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 81f2 	beq.w	80080ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ccc:	f003 0320 	and.w	r3, r3, #32
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x14e>
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fcb4 	bl	800864e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	695b      	ldr	r3, [r3, #20]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	bf0c      	ite	eq
 8007cf4:	2301      	moveq	r3, #1
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d103      	bne.n	8007d12 <HAL_UART_IRQHandler+0x17a>
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d04f      	beq.n	8007db2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fbbc 	bl	8008490 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	695b      	ldr	r3, [r3, #20]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d141      	bne.n	8007daa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	3314      	adds	r3, #20
 8007d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	3314      	adds	r3, #20
 8007d4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1d9      	bne.n	8007d26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d7e:	4a7e      	ldr	r2, [pc, #504]	; (8007f78 <HAL_UART_IRQHandler+0x3e0>)
 8007d80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fd fdae 	bl	80058e8 <HAL_DMA_Abort_IT>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d016      	beq.n	8007dc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da0:	e00e      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f99e 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da8:	e00a      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f99a 	bl	80080e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db0:	e006      	b.n	8007dc0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f996 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8007dbe:	e175      	b.n	80080ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	bf00      	nop
    return;
 8007dc2:	e173      	b.n	80080ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	f040 814f 	bne.w	800806c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dd2:	f003 0310 	and.w	r3, r3, #16
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8148 	beq.w	800806c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8141 	beq.w	800806c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dea:	2300      	movs	r3, #0
 8007dec:	60bb      	str	r3, [r7, #8]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	695b      	ldr	r3, [r3, #20]
 8007e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0a:	2b40      	cmp	r3, #64	; 0x40
 8007e0c:	f040 80b6 	bne.w	8007f7c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8145 	beq.w	80080b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	f080 813e 	bcs.w	80080b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e46:	f000 8088 	beq.w	8007f5a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	330c      	adds	r3, #12
 8007e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	330c      	adds	r3, #12
 8007e72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1d9      	bne.n	8007e4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3314      	adds	r3, #20
 8007e9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ea6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ec2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e1      	bne.n	8007e96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	3314      	adds	r3, #20
 8007ed8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007edc:	e853 3f00 	ldrex	r3, [r3]
 8007ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3314      	adds	r3, #20
 8007ef2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007ef6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ef8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007efc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007efe:	e841 2300 	strex	r3, r2, [r1]
 8007f02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1e3      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2200      	movs	r2, #0
 8007f16:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f22:	e853 3f00 	ldrex	r3, [r3]
 8007f26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f2a:	f023 0310 	bic.w	r3, r3, #16
 8007f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	330c      	adds	r3, #12
 8007f38:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f3e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f44:	e841 2300 	strex	r3, r2, [r1]
 8007f48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1e3      	bne.n	8007f18 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fd fc57 	bl	8005808 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 f8c1 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f76:	e09b      	b.n	80080b0 <HAL_UART_IRQHandler+0x518>
 8007f78:	08008557 	.word	0x08008557
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 808e 	beq.w	80080b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8089 	beq.w	80080b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	330c      	adds	r3, #12
 8007fa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	e853 3f00 	ldrex	r3, [r3]
 8007fb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fb8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e3      	bne.n	8007fa2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f023 0301 	bic.w	r3, r3, #1
 8007ff0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	3314      	adds	r3, #20
 8007ffa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ffe:	633a      	str	r2, [r7, #48]	; 0x30
 8008000:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800800c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e3      	bne.n	8007fda <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2220      	movs	r2, #32
 8008016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	e853 3f00 	ldrex	r3, [r3]
 800802e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0310 	bic.w	r3, r3, #16
 8008036:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008044:	61fa      	str	r2, [r7, #28]
 8008046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008048:	69b9      	ldr	r1, [r7, #24]
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	e841 2300 	strex	r3, r2, [r1]
 8008050:	617b      	str	r3, [r7, #20]
   return(result);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e3      	bne.n	8008020 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800805e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f847 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800806a:	e023      	b.n	80080b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800806c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008074:	2b00      	cmp	r3, #0
 8008076:	d009      	beq.n	800808c <HAL_UART_IRQHandler+0x4f4>
 8008078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b00      	cmp	r3, #0
 8008082:	d003      	beq.n	800808c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fa7a 	bl	800857e <UART_Transmit_IT>
    return;
 800808a:	e014      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800808c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00e      	beq.n	80080b6 <HAL_UART_IRQHandler+0x51e>
 8008098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 faba 	bl	800861e <UART_EndTransmit_IT>
    return;
 80080aa:	e004      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80080ac:	bf00      	nop
 80080ae:	e002      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80080b4:	bf00      	nop
  }
}
 80080b6:	37e8      	adds	r7, #232	; 0xe8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080ec:	bf00      	nop
 80080ee:	370c      	adds	r7, #12
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	460b      	mov	r3, r1
 8008102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b09c      	sub	sp, #112	; 0x70
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008128:	2b00      	cmp	r3, #0
 800812a:	d172      	bne.n	8008212 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800812c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800812e:	2200      	movs	r2, #0
 8008130:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813c:	e853 3f00 	ldrex	r3, [r3]
 8008140:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	66bb      	str	r3, [r7, #104]	; 0x68
 800814a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	330c      	adds	r3, #12
 8008150:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008152:	65ba      	str	r2, [r7, #88]	; 0x58
 8008154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e5      	bne.n	8008132 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3314      	adds	r3, #20
 800816c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	e853 3f00 	ldrex	r3, [r3]
 8008174:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008178:	f023 0301 	bic.w	r3, r3, #1
 800817c:	667b      	str	r3, [r7, #100]	; 0x64
 800817e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008186:	647a      	str	r2, [r7, #68]	; 0x44
 8008188:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800818c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800818e:	e841 2300 	strex	r3, r2, [r1]
 8008192:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1e5      	bne.n	8008166 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800819a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3314      	adds	r3, #20
 80081a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	623b      	str	r3, [r7, #32]
   return(result);
 80081aa:	6a3b      	ldr	r3, [r7, #32]
 80081ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b0:	663b      	str	r3, [r7, #96]	; 0x60
 80081b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3314      	adds	r3, #20
 80081b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ba:	633a      	str	r2, [r7, #48]	; 0x30
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081c2:	e841 2300 	strex	r3, r2, [r1]
 80081c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1e5      	bne.n	800819a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80081ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d0:	2220      	movs	r2, #32
 80081d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d119      	bne.n	8008212 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	330c      	adds	r3, #12
 80081e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f023 0310 	bic.w	r3, r3, #16
 80081f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	330c      	adds	r3, #12
 80081fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081fe:	61fa      	str	r2, [r7, #28]
 8008200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	617b      	str	r3, [r7, #20]
   return(result);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e5      	bne.n	80081de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008214:	2200      	movs	r2, #0
 8008216:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821c:	2b01      	cmp	r3, #1
 800821e:	d106      	bne.n	800822e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008222:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008224:	4619      	mov	r1, r3
 8008226:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008228:	f7ff ff66 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800822c:	e002      	b.n	8008234 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800822e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008230:	f7f9 ff2e 	bl	8002090 <HAL_UART_RxCpltCallback>
}
 8008234:	bf00      	nop
 8008236:	3770      	adds	r7, #112	; 0x70
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2201      	movs	r2, #1
 800824e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	2b01      	cmp	r3, #1
 8008256:	d108      	bne.n	800826a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800825c:	085b      	lsrs	r3, r3, #1
 800825e:	b29b      	uxth	r3, r3
 8008260:	4619      	mov	r1, r3
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f7ff ff48 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008268:	e002      	b.n	8008270 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff ff30 	bl	80080d0 <HAL_UART_RxHalfCpltCallback>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008280:	2300      	movs	r3, #0
 8008282:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	695b      	ldr	r3, [r3, #20]
 8008290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008294:	2b80      	cmp	r3, #128	; 0x80
 8008296:	bf0c      	ite	eq
 8008298:	2301      	moveq	r3, #1
 800829a:	2300      	movne	r3, #0
 800829c:	b2db      	uxtb	r3, r3
 800829e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	2b21      	cmp	r3, #33	; 0x21
 80082aa:	d108      	bne.n	80082be <UART_DMAError+0x46>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d005      	beq.n	80082be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2200      	movs	r2, #0
 80082b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80082b8:	68b8      	ldr	r0, [r7, #8]
 80082ba:	f000 f8c1 	bl	8008440 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	bf0c      	ite	eq
 80082cc:	2301      	moveq	r3, #1
 80082ce:	2300      	movne	r3, #0
 80082d0:	b2db      	uxtb	r3, r3
 80082d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b22      	cmp	r3, #34	; 0x22
 80082de:	d108      	bne.n	80082f2 <UART_DMAError+0x7a>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d005      	beq.n	80082f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	2200      	movs	r2, #0
 80082ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80082ec:	68b8      	ldr	r0, [r7, #8]
 80082ee:	f000 f8cf 	bl	8008490 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	f043 0210 	orr.w	r2, r3, #16
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082fe:	68b8      	ldr	r0, [r7, #8]
 8008300:	f7ff fef0 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b098      	sub	sp, #96	; 0x60
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2222      	movs	r2, #34	; 0x22
 8008330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008338:	4a3e      	ldr	r2, [pc, #248]	; (8008434 <UART_Start_Receive_DMA+0x128>)
 800833a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008340:	4a3d      	ldr	r2, [pc, #244]	; (8008438 <UART_Start_Receive_DMA+0x12c>)
 8008342:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008348:	4a3c      	ldr	r2, [pc, #240]	; (800843c <UART_Start_Receive_DMA+0x130>)
 800834a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008350:	2200      	movs	r2, #0
 8008352:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3304      	adds	r3, #4
 8008364:	4619      	mov	r1, r3
 8008366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	f7fd f9f4 	bl	8005758 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008370:	2300      	movs	r3, #0
 8008372:	613b      	str	r3, [r7, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	613b      	str	r3, [r7, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	613b      	str	r3, [r7, #16]
 8008384:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d019      	beq.n	80083c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	330c      	adds	r3, #12
 8008394:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008398:	e853 3f00 	ldrex	r3, [r3]
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	330c      	adds	r3, #12
 80083ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083ae:	64fa      	str	r2, [r7, #76]	; 0x4c
 80083b0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80083b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083b6:	e841 2300 	strex	r3, r2, [r1]
 80083ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80083bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e5      	bne.n	800838e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	3314      	adds	r3, #20
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	e853 3f00 	ldrex	r3, [r3]
 80083d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	657b      	str	r3, [r7, #84]	; 0x54
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80083e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e5      	bne.n	80083c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3314      	adds	r3, #20
 80083fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	e853 3f00 	ldrex	r3, [r3]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800840c:	653b      	str	r3, [r7, #80]	; 0x50
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3314      	adds	r3, #20
 8008414:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008416:	627a      	str	r2, [r7, #36]	; 0x24
 8008418:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841a:	6a39      	ldr	r1, [r7, #32]
 800841c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841e:	e841 2300 	strex	r3, r2, [r1]
 8008422:	61fb      	str	r3, [r7, #28]
   return(result);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1e5      	bne.n	80083f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3760      	adds	r7, #96	; 0x60
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	08008111 	.word	0x08008111
 8008438:	0800823d 	.word	0x0800823d
 800843c:	08008279 	.word	0x08008279

08008440 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b089      	sub	sp, #36	; 0x24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	e853 3f00 	ldrex	r3, [r3]
 8008456:	60bb      	str	r3, [r7, #8]
   return(result);
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800845e:	61fb      	str	r3, [r7, #28]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	330c      	adds	r3, #12
 8008466:	69fa      	ldr	r2, [r7, #28]
 8008468:	61ba      	str	r2, [r7, #24]
 800846a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846c:	6979      	ldr	r1, [r7, #20]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	e841 2300 	strex	r3, r2, [r1]
 8008474:	613b      	str	r3, [r7, #16]
   return(result);
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d1e5      	bne.n	8008448 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8008484:	bf00      	nop
 8008486:	3724      	adds	r7, #36	; 0x24
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b095      	sub	sp, #84	; 0x54
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	330c      	adds	r3, #12
 800849e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b8:	643a      	str	r2, [r7, #64]	; 0x40
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3314      	adds	r3, #20
 80084d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	61fb      	str	r3, [r7, #28]
   return(result);
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f023 0301 	bic.w	r3, r3, #1
 80084e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3314      	adds	r3, #20
 80084ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e5      	bne.n	80084cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	2b01      	cmp	r3, #1
 8008506:	d119      	bne.n	800853c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60bb      	str	r3, [r7, #8]
   return(result);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008528:	61ba      	str	r2, [r7, #24]
 800852a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852c:	6979      	ldr	r1, [r7, #20]
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	e841 2300 	strex	r3, r2, [r1]
 8008534:	613b      	str	r3, [r7, #16]
   return(result);
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e5      	bne.n	8008508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800854a:	bf00      	nop
 800854c:	3754      	adds	r7, #84	; 0x54
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008562:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f7ff fdb7 	bl	80080e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008576:	bf00      	nop
 8008578:	3710      	adds	r7, #16
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b21      	cmp	r3, #33	; 0x21
 8008590:	d13e      	bne.n	8008610 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800859a:	d114      	bne.n	80085c6 <UART_Transmit_IT+0x48>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d110      	bne.n	80085c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a1b      	ldr	r3, [r3, #32]
 80085a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a1b      	ldr	r3, [r3, #32]
 80085be:	1c9a      	adds	r2, r3, #2
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]
 80085c4:	e008      	b.n	80085d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	1c59      	adds	r1, r3, #1
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	6211      	str	r1, [r2, #32]
 80085d0:	781a      	ldrb	r2, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4619      	mov	r1, r3
 80085e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10f      	bne.n	800860c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800860a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	e000      	b.n	8008612 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008610:	2302      	movs	r3, #2
  }
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68da      	ldr	r2, [r3, #12]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff fd3c 	bl	80080bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b08c      	sub	sp, #48	; 0x30
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b22      	cmp	r3, #34	; 0x22
 8008660:	f040 80ae 	bne.w	80087c0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800866c:	d117      	bne.n	800869e <UART_Receive_IT+0x50>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d113      	bne.n	800869e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008676:	2300      	movs	r3, #0
 8008678:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b29b      	uxth	r3, r3
 8008688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868c:	b29a      	uxth	r2, r3
 800868e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	1c9a      	adds	r2, r3, #2
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	629a      	str	r2, [r3, #40]	; 0x28
 800869c:	e026      	b.n	80086ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80086a4:	2300      	movs	r3, #0
 80086a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	d007      	beq.n	80086c2 <UART_Receive_IT+0x74>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10a      	bne.n	80086d0 <UART_Receive_IT+0x82>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086cc:	701a      	strb	r2, [r3, #0]
 80086ce:	e008      	b.n	80086e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	3b01      	subs	r3, #1
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	4619      	mov	r1, r3
 80086fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d15d      	bne.n	80087bc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f022 0220 	bic.w	r2, r2, #32
 800870e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800871e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695a      	ldr	r2, [r3, #20]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f022 0201 	bic.w	r2, r2, #1
 800872e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2220      	movs	r2, #32
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	2b01      	cmp	r3, #1
 8008744:	d135      	bne.n	80087b2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	330c      	adds	r3, #12
 8008752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	e853 3f00 	ldrex	r3, [r3]
 800875a:	613b      	str	r3, [r7, #16]
   return(result);
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	f023 0310 	bic.w	r3, r3, #16
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	330c      	adds	r3, #12
 800876a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800876c:	623a      	str	r2, [r7, #32]
 800876e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008770:	69f9      	ldr	r1, [r7, #28]
 8008772:	6a3a      	ldr	r2, [r7, #32]
 8008774:	e841 2300 	strex	r3, r2, [r1]
 8008778:	61bb      	str	r3, [r7, #24]
   return(result);
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1e5      	bne.n	800874c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0310 	and.w	r3, r3, #16
 800878a:	2b10      	cmp	r3, #16
 800878c:	d10a      	bne.n	80087a4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
 80087a2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fca4 	bl	80080f8 <HAL_UARTEx_RxEventCallback>
 80087b0:	e002      	b.n	80087b8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7f9 fc6c 	bl	8002090 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	e002      	b.n	80087c2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	e000      	b.n	80087c2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3730      	adds	r7, #48	; 0x30
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087d0:	b0c0      	sub	sp, #256	; 0x100
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	68d9      	ldr	r1, [r3, #12]
 80087ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	ea40 0301 	orr.w	r3, r0, r1
 80087f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	431a      	orrs	r2, r3
 8008804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	431a      	orrs	r2, r3
 800880c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
 8008814:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008824:	f021 010c 	bic.w	r1, r1, #12
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008832:	430b      	orrs	r3, r1
 8008834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008846:	6999      	ldr	r1, [r3, #24]
 8008848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	ea40 0301 	orr.w	r3, r0, r1
 8008852:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	4b8f      	ldr	r3, [pc, #572]	; (8008a98 <UART_SetConfig+0x2cc>)
 800885c:	429a      	cmp	r2, r3
 800885e:	d005      	beq.n	800886c <UART_SetConfig+0xa0>
 8008860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	4b8d      	ldr	r3, [pc, #564]	; (8008a9c <UART_SetConfig+0x2d0>)
 8008868:	429a      	cmp	r2, r3
 800886a:	d104      	bne.n	8008876 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800886c:	f7fe f8dc 	bl	8006a28 <HAL_RCC_GetPCLK2Freq>
 8008870:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008874:	e003      	b.n	800887e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008876:	f7fe f8c3 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 800887a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800887e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008888:	f040 810c 	bne.w	8008aa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800888c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008890:	2200      	movs	r2, #0
 8008892:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008896:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800889a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800889e:	4622      	mov	r2, r4
 80088a0:	462b      	mov	r3, r5
 80088a2:	1891      	adds	r1, r2, r2
 80088a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80088a6:	415b      	adcs	r3, r3
 80088a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80088ae:	4621      	mov	r1, r4
 80088b0:	eb12 0801 	adds.w	r8, r2, r1
 80088b4:	4629      	mov	r1, r5
 80088b6:	eb43 0901 	adc.w	r9, r3, r1
 80088ba:	f04f 0200 	mov.w	r2, #0
 80088be:	f04f 0300 	mov.w	r3, #0
 80088c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088ce:	4690      	mov	r8, r2
 80088d0:	4699      	mov	r9, r3
 80088d2:	4623      	mov	r3, r4
 80088d4:	eb18 0303 	adds.w	r3, r8, r3
 80088d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088dc:	462b      	mov	r3, r5
 80088de:	eb49 0303 	adc.w	r3, r9, r3
 80088e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088fa:	460b      	mov	r3, r1
 80088fc:	18db      	adds	r3, r3, r3
 80088fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008900:	4613      	mov	r3, r2
 8008902:	eb42 0303 	adc.w	r3, r2, r3
 8008906:	657b      	str	r3, [r7, #84]	; 0x54
 8008908:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800890c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008910:	f7f8 f99c 	bl	8000c4c <__aeabi_uldivmod>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	4b61      	ldr	r3, [pc, #388]	; (8008aa0 <UART_SetConfig+0x2d4>)
 800891a:	fba3 2302 	umull	r2, r3, r3, r2
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	011c      	lsls	r4, r3, #4
 8008922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800892c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008930:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	64b9      	str	r1, [r7, #72]	; 0x48
 800893c:	415b      	adcs	r3, r3
 800893e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008940:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008944:	4641      	mov	r1, r8
 8008946:	eb12 0a01 	adds.w	sl, r2, r1
 800894a:	4649      	mov	r1, r9
 800894c:	eb43 0b01 	adc.w	fp, r3, r1
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800895c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008964:	4692      	mov	sl, r2
 8008966:	469b      	mov	fp, r3
 8008968:	4643      	mov	r3, r8
 800896a:	eb1a 0303 	adds.w	r3, sl, r3
 800896e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008972:	464b      	mov	r3, r9
 8008974:	eb4b 0303 	adc.w	r3, fp, r3
 8008978:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800897c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008988:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800898c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008990:	460b      	mov	r3, r1
 8008992:	18db      	adds	r3, r3, r3
 8008994:	643b      	str	r3, [r7, #64]	; 0x40
 8008996:	4613      	mov	r3, r2
 8008998:	eb42 0303 	adc.w	r3, r2, r3
 800899c:	647b      	str	r3, [r7, #68]	; 0x44
 800899e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80089a6:	f7f8 f951 	bl	8000c4c <__aeabi_uldivmod>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4611      	mov	r1, r2
 80089b0:	4b3b      	ldr	r3, [pc, #236]	; (8008aa0 <UART_SetConfig+0x2d4>)
 80089b2:	fba3 2301 	umull	r2, r3, r3, r1
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	2264      	movs	r2, #100	; 0x64
 80089ba:	fb02 f303 	mul.w	r3, r2, r3
 80089be:	1acb      	subs	r3, r1, r3
 80089c0:	00db      	lsls	r3, r3, #3
 80089c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089c6:	4b36      	ldr	r3, [pc, #216]	; (8008aa0 <UART_SetConfig+0x2d4>)
 80089c8:	fba3 2302 	umull	r2, r3, r3, r2
 80089cc:	095b      	lsrs	r3, r3, #5
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089d4:	441c      	add	r4, r3
 80089d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089e8:	4642      	mov	r2, r8
 80089ea:	464b      	mov	r3, r9
 80089ec:	1891      	adds	r1, r2, r2
 80089ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80089f0:	415b      	adcs	r3, r3
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089f8:	4641      	mov	r1, r8
 80089fa:	1851      	adds	r1, r2, r1
 80089fc:	6339      	str	r1, [r7, #48]	; 0x30
 80089fe:	4649      	mov	r1, r9
 8008a00:	414b      	adcs	r3, r1
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
 8008a04:	f04f 0200 	mov.w	r2, #0
 8008a08:	f04f 0300 	mov.w	r3, #0
 8008a0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a10:	4659      	mov	r1, fp
 8008a12:	00cb      	lsls	r3, r1, #3
 8008a14:	4651      	mov	r1, sl
 8008a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a1a:	4651      	mov	r1, sl
 8008a1c:	00ca      	lsls	r2, r1, #3
 8008a1e:	4610      	mov	r0, r2
 8008a20:	4619      	mov	r1, r3
 8008a22:	4603      	mov	r3, r0
 8008a24:	4642      	mov	r2, r8
 8008a26:	189b      	adds	r3, r3, r2
 8008a28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a2c:	464b      	mov	r3, r9
 8008a2e:	460a      	mov	r2, r1
 8008a30:	eb42 0303 	adc.w	r3, r2, r3
 8008a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	18db      	adds	r3, r3, r3
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a52:	4613      	mov	r3, r2
 8008a54:	eb42 0303 	adc.w	r3, r2, r3
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a62:	f7f8 f8f3 	bl	8000c4c <__aeabi_uldivmod>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	; (8008aa0 <UART_SetConfig+0x2d4>)
 8008a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a70:	095b      	lsrs	r3, r3, #5
 8008a72:	2164      	movs	r1, #100	; 0x64
 8008a74:	fb01 f303 	mul.w	r3, r1, r3
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	3332      	adds	r3, #50	; 0x32
 8008a7e:	4a08      	ldr	r2, [pc, #32]	; (8008aa0 <UART_SetConfig+0x2d4>)
 8008a80:	fba2 2303 	umull	r2, r3, r2, r3
 8008a84:	095b      	lsrs	r3, r3, #5
 8008a86:	f003 0207 	and.w	r2, r3, #7
 8008a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4422      	add	r2, r4
 8008a92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a94:	e106      	b.n	8008ca4 <UART_SetConfig+0x4d8>
 8008a96:	bf00      	nop
 8008a98:	40011000 	.word	0x40011000
 8008a9c:	40011400 	.word	0x40011400
 8008aa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008aae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ab2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008ab6:	4642      	mov	r2, r8
 8008ab8:	464b      	mov	r3, r9
 8008aba:	1891      	adds	r1, r2, r2
 8008abc:	6239      	str	r1, [r7, #32]
 8008abe:	415b      	adcs	r3, r3
 8008ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ac6:	4641      	mov	r1, r8
 8008ac8:	1854      	adds	r4, r2, r1
 8008aca:	4649      	mov	r1, r9
 8008acc:	eb43 0501 	adc.w	r5, r3, r1
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	f04f 0300 	mov.w	r3, #0
 8008ad8:	00eb      	lsls	r3, r5, #3
 8008ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ade:	00e2      	lsls	r2, r4, #3
 8008ae0:	4614      	mov	r4, r2
 8008ae2:	461d      	mov	r5, r3
 8008ae4:	4643      	mov	r3, r8
 8008ae6:	18e3      	adds	r3, r4, r3
 8008ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008aec:	464b      	mov	r3, r9
 8008aee:	eb45 0303 	adc.w	r3, r5, r3
 8008af2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	f04f 0300 	mov.w	r3, #0
 8008b0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b12:	4629      	mov	r1, r5
 8008b14:	008b      	lsls	r3, r1, #2
 8008b16:	4621      	mov	r1, r4
 8008b18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	008a      	lsls	r2, r1, #2
 8008b20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b24:	f7f8 f892 	bl	8000c4c <__aeabi_uldivmod>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4b60      	ldr	r3, [pc, #384]	; (8008cb0 <UART_SetConfig+0x4e4>)
 8008b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	011c      	lsls	r4, r3, #4
 8008b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b48:	4642      	mov	r2, r8
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	1891      	adds	r1, r2, r2
 8008b4e:	61b9      	str	r1, [r7, #24]
 8008b50:	415b      	adcs	r3, r3
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b58:	4641      	mov	r1, r8
 8008b5a:	1851      	adds	r1, r2, r1
 8008b5c:	6139      	str	r1, [r7, #16]
 8008b5e:	4649      	mov	r1, r9
 8008b60:	414b      	adcs	r3, r1
 8008b62:	617b      	str	r3, [r7, #20]
 8008b64:	f04f 0200 	mov.w	r2, #0
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b70:	4659      	mov	r1, fp
 8008b72:	00cb      	lsls	r3, r1, #3
 8008b74:	4651      	mov	r1, sl
 8008b76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b7a:	4651      	mov	r1, sl
 8008b7c:	00ca      	lsls	r2, r1, #3
 8008b7e:	4610      	mov	r0, r2
 8008b80:	4619      	mov	r1, r3
 8008b82:	4603      	mov	r3, r0
 8008b84:	4642      	mov	r2, r8
 8008b86:	189b      	adds	r3, r3, r2
 8008b88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b8c:	464b      	mov	r3, r9
 8008b8e:	460a      	mov	r2, r1
 8008b90:	eb42 0303 	adc.w	r3, r2, r3
 8008b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ba2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f04f 0300 	mov.w	r3, #0
 8008bac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	008b      	lsls	r3, r1, #2
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bba:	4641      	mov	r1, r8
 8008bbc:	008a      	lsls	r2, r1, #2
 8008bbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bc2:	f7f8 f843 	bl	8000c4c <__aeabi_uldivmod>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4b38      	ldr	r3, [pc, #224]	; (8008cb0 <UART_SetConfig+0x4e4>)
 8008bce:	fba3 2301 	umull	r2, r3, r3, r1
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2264      	movs	r2, #100	; 0x64
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	011b      	lsls	r3, r3, #4
 8008bde:	3332      	adds	r3, #50	; 0x32
 8008be0:	4a33      	ldr	r2, [pc, #204]	; (8008cb0 <UART_SetConfig+0x4e4>)
 8008be2:	fba2 2303 	umull	r2, r3, r2, r3
 8008be6:	095b      	lsrs	r3, r3, #5
 8008be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bec:	441c      	add	r4, r3
 8008bee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	673b      	str	r3, [r7, #112]	; 0x70
 8008bf6:	677a      	str	r2, [r7, #116]	; 0x74
 8008bf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bfc:	4642      	mov	r2, r8
 8008bfe:	464b      	mov	r3, r9
 8008c00:	1891      	adds	r1, r2, r2
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	415b      	adcs	r3, r3
 8008c06:	60fb      	str	r3, [r7, #12]
 8008c08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c0c:	4641      	mov	r1, r8
 8008c0e:	1851      	adds	r1, r2, r1
 8008c10:	6039      	str	r1, [r7, #0]
 8008c12:	4649      	mov	r1, r9
 8008c14:	414b      	adcs	r3, r1
 8008c16:	607b      	str	r3, [r7, #4]
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	f04f 0300 	mov.w	r3, #0
 8008c20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c24:	4659      	mov	r1, fp
 8008c26:	00cb      	lsls	r3, r1, #3
 8008c28:	4651      	mov	r1, sl
 8008c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c2e:	4651      	mov	r1, sl
 8008c30:	00ca      	lsls	r2, r1, #3
 8008c32:	4610      	mov	r0, r2
 8008c34:	4619      	mov	r1, r3
 8008c36:	4603      	mov	r3, r0
 8008c38:	4642      	mov	r2, r8
 8008c3a:	189b      	adds	r3, r3, r2
 8008c3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c3e:	464b      	mov	r3, r9
 8008c40:	460a      	mov	r2, r1
 8008c42:	eb42 0303 	adc.w	r3, r2, r3
 8008c46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	663b      	str	r3, [r7, #96]	; 0x60
 8008c52:	667a      	str	r2, [r7, #100]	; 0x64
 8008c54:	f04f 0200 	mov.w	r2, #0
 8008c58:	f04f 0300 	mov.w	r3, #0
 8008c5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c60:	4649      	mov	r1, r9
 8008c62:	008b      	lsls	r3, r1, #2
 8008c64:	4641      	mov	r1, r8
 8008c66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c6a:	4641      	mov	r1, r8
 8008c6c:	008a      	lsls	r2, r1, #2
 8008c6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c72:	f7f7 ffeb 	bl	8000c4c <__aeabi_uldivmod>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <UART_SetConfig+0x4e4>)
 8008c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c80:	095b      	lsrs	r3, r3, #5
 8008c82:	2164      	movs	r1, #100	; 0x64
 8008c84:	fb01 f303 	mul.w	r3, r1, r3
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	3332      	adds	r3, #50	; 0x32
 8008c8e:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <UART_SetConfig+0x4e4>)
 8008c90:	fba2 2303 	umull	r2, r3, r2, r3
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f003 020f 	and.w	r2, r3, #15
 8008c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4422      	add	r2, r4
 8008ca2:	609a      	str	r2, [r3, #8]
}
 8008ca4:	bf00      	nop
 8008ca6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008caa:	46bd      	mov	sp, r7
 8008cac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008cb0:	51eb851f 	.word	0x51eb851f

08008cb4 <sulp>:
 8008cb4:	b570      	push	{r4, r5, r6, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	ec45 4b10 	vmov	d0, r4, r5
 8008cbe:	4616      	mov	r6, r2
 8008cc0:	f001 ff8c 	bl	800abdc <__ulp>
 8008cc4:	ec51 0b10 	vmov	r0, r1, d0
 8008cc8:	b17e      	cbz	r6, 8008cea <sulp+0x36>
 8008cca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd09      	ble.n	8008cea <sulp+0x36>
 8008cd6:	051b      	lsls	r3, r3, #20
 8008cd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cdc:	2400      	movs	r4, #0
 8008cde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008ce2:	4622      	mov	r2, r4
 8008ce4:	462b      	mov	r3, r5
 8008ce6:	f7f7 fc7f 	bl	80005e8 <__aeabi_dmul>
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
 8008cec:	0000      	movs	r0, r0
	...

08008cf0 <_strtod_l>:
 8008cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf4:	ed2d 8b02 	vpush	{d8}
 8008cf8:	b09b      	sub	sp, #108	; 0x6c
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	9213      	str	r2, [sp, #76]	; 0x4c
 8008cfe:	2200      	movs	r2, #0
 8008d00:	9216      	str	r2, [sp, #88]	; 0x58
 8008d02:	460d      	mov	r5, r1
 8008d04:	f04f 0800 	mov.w	r8, #0
 8008d08:	f04f 0900 	mov.w	r9, #0
 8008d0c:	460a      	mov	r2, r1
 8008d0e:	9215      	str	r2, [sp, #84]	; 0x54
 8008d10:	7811      	ldrb	r1, [r2, #0]
 8008d12:	292b      	cmp	r1, #43	; 0x2b
 8008d14:	d04c      	beq.n	8008db0 <_strtod_l+0xc0>
 8008d16:	d83a      	bhi.n	8008d8e <_strtod_l+0x9e>
 8008d18:	290d      	cmp	r1, #13
 8008d1a:	d834      	bhi.n	8008d86 <_strtod_l+0x96>
 8008d1c:	2908      	cmp	r1, #8
 8008d1e:	d834      	bhi.n	8008d8a <_strtod_l+0x9a>
 8008d20:	2900      	cmp	r1, #0
 8008d22:	d03d      	beq.n	8008da0 <_strtod_l+0xb0>
 8008d24:	2200      	movs	r2, #0
 8008d26:	920a      	str	r2, [sp, #40]	; 0x28
 8008d28:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008d2a:	7832      	ldrb	r2, [r6, #0]
 8008d2c:	2a30      	cmp	r2, #48	; 0x30
 8008d2e:	f040 80b4 	bne.w	8008e9a <_strtod_l+0x1aa>
 8008d32:	7872      	ldrb	r2, [r6, #1]
 8008d34:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008d38:	2a58      	cmp	r2, #88	; 0x58
 8008d3a:	d170      	bne.n	8008e1e <_strtod_l+0x12e>
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d40:	9301      	str	r3, [sp, #4]
 8008d42:	ab16      	add	r3, sp, #88	; 0x58
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4a8e      	ldr	r2, [pc, #568]	; (8008f80 <_strtod_l+0x290>)
 8008d48:	ab17      	add	r3, sp, #92	; 0x5c
 8008d4a:	a915      	add	r1, sp, #84	; 0x54
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f001 f82b 	bl	8009da8 <__gethex>
 8008d52:	f010 070f 	ands.w	r7, r0, #15
 8008d56:	4605      	mov	r5, r0
 8008d58:	d005      	beq.n	8008d66 <_strtod_l+0x76>
 8008d5a:	2f06      	cmp	r7, #6
 8008d5c:	d12a      	bne.n	8008db4 <_strtod_l+0xc4>
 8008d5e:	3601      	adds	r6, #1
 8008d60:	2300      	movs	r3, #0
 8008d62:	9615      	str	r6, [sp, #84]	; 0x54
 8008d64:	930a      	str	r3, [sp, #40]	; 0x28
 8008d66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f040 857f 	bne.w	800986c <_strtod_l+0xb7c>
 8008d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d70:	b1db      	cbz	r3, 8008daa <_strtod_l+0xba>
 8008d72:	4642      	mov	r2, r8
 8008d74:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d78:	ec43 2b10 	vmov	d0, r2, r3
 8008d7c:	b01b      	add	sp, #108	; 0x6c
 8008d7e:	ecbd 8b02 	vpop	{d8}
 8008d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d86:	2920      	cmp	r1, #32
 8008d88:	d1cc      	bne.n	8008d24 <_strtod_l+0x34>
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	e7bf      	b.n	8008d0e <_strtod_l+0x1e>
 8008d8e:	292d      	cmp	r1, #45	; 0x2d
 8008d90:	d1c8      	bne.n	8008d24 <_strtod_l+0x34>
 8008d92:	2101      	movs	r1, #1
 8008d94:	910a      	str	r1, [sp, #40]	; 0x28
 8008d96:	1c51      	adds	r1, r2, #1
 8008d98:	9115      	str	r1, [sp, #84]	; 0x54
 8008d9a:	7852      	ldrb	r2, [r2, #1]
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	d1c3      	bne.n	8008d28 <_strtod_l+0x38>
 8008da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008da2:	9515      	str	r5, [sp, #84]	; 0x54
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 855f 	bne.w	8009868 <_strtod_l+0xb78>
 8008daa:	4642      	mov	r2, r8
 8008dac:	464b      	mov	r3, r9
 8008dae:	e7e3      	b.n	8008d78 <_strtod_l+0x88>
 8008db0:	2100      	movs	r1, #0
 8008db2:	e7ef      	b.n	8008d94 <_strtod_l+0xa4>
 8008db4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008db6:	b13a      	cbz	r2, 8008dc8 <_strtod_l+0xd8>
 8008db8:	2135      	movs	r1, #53	; 0x35
 8008dba:	a818      	add	r0, sp, #96	; 0x60
 8008dbc:	f002 f80b 	bl	800add6 <__copybits>
 8008dc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f001 fbde 	bl	800a584 <_Bfree>
 8008dc8:	3f01      	subs	r7, #1
 8008dca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008dcc:	2f04      	cmp	r7, #4
 8008dce:	d806      	bhi.n	8008dde <_strtod_l+0xee>
 8008dd0:	e8df f007 	tbb	[pc, r7]
 8008dd4:	201d0314 	.word	0x201d0314
 8008dd8:	14          	.byte	0x14
 8008dd9:	00          	.byte	0x00
 8008dda:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8008dde:	05e9      	lsls	r1, r5, #23
 8008de0:	bf48      	it	mi
 8008de2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008de6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008dea:	0d1b      	lsrs	r3, r3, #20
 8008dec:	051b      	lsls	r3, r3, #20
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1b9      	bne.n	8008d66 <_strtod_l+0x76>
 8008df2:	f000 fedf 	bl	8009bb4 <__errno>
 8008df6:	2322      	movs	r3, #34	; 0x22
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	e7b4      	b.n	8008d66 <_strtod_l+0x76>
 8008dfc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008e00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e08:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e0c:	e7e7      	b.n	8008dde <_strtod_l+0xee>
 8008e0e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f88 <_strtod_l+0x298>
 8008e12:	e7e4      	b.n	8008dde <_strtod_l+0xee>
 8008e14:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e18:	f04f 38ff 	mov.w	r8, #4294967295
 8008e1c:	e7df      	b.n	8008dde <_strtod_l+0xee>
 8008e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e20:	1c5a      	adds	r2, r3, #1
 8008e22:	9215      	str	r2, [sp, #84]	; 0x54
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2b30      	cmp	r3, #48	; 0x30
 8008e28:	d0f9      	beq.n	8008e1e <_strtod_l+0x12e>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d09b      	beq.n	8008d66 <_strtod_l+0x76>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008e38:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e3a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008e3e:	46d3      	mov	fp, sl
 8008e40:	220a      	movs	r2, #10
 8008e42:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008e44:	7806      	ldrb	r6, [r0, #0]
 8008e46:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e4a:	b2d9      	uxtb	r1, r3
 8008e4c:	2909      	cmp	r1, #9
 8008e4e:	d926      	bls.n	8008e9e <_strtod_l+0x1ae>
 8008e50:	494c      	ldr	r1, [pc, #304]	; (8008f84 <_strtod_l+0x294>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	f000 fe55 	bl	8009b02 <strncmp>
 8008e58:	2800      	cmp	r0, #0
 8008e5a:	d030      	beq.n	8008ebe <_strtod_l+0x1ce>
 8008e5c:	2000      	movs	r0, #0
 8008e5e:	4632      	mov	r2, r6
 8008e60:	9005      	str	r0, [sp, #20]
 8008e62:	465e      	mov	r6, fp
 8008e64:	4603      	mov	r3, r0
 8008e66:	2a65      	cmp	r2, #101	; 0x65
 8008e68:	d001      	beq.n	8008e6e <_strtod_l+0x17e>
 8008e6a:	2a45      	cmp	r2, #69	; 0x45
 8008e6c:	d113      	bne.n	8008e96 <_strtod_l+0x1a6>
 8008e6e:	b91e      	cbnz	r6, 8008e78 <_strtod_l+0x188>
 8008e70:	9a04      	ldr	r2, [sp, #16]
 8008e72:	4302      	orrs	r2, r0
 8008e74:	d094      	beq.n	8008da0 <_strtod_l+0xb0>
 8008e76:	2600      	movs	r6, #0
 8008e78:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008e7a:	1c6a      	adds	r2, r5, #1
 8008e7c:	9215      	str	r2, [sp, #84]	; 0x54
 8008e7e:	786a      	ldrb	r2, [r5, #1]
 8008e80:	2a2b      	cmp	r2, #43	; 0x2b
 8008e82:	d074      	beq.n	8008f6e <_strtod_l+0x27e>
 8008e84:	2a2d      	cmp	r2, #45	; 0x2d
 8008e86:	d078      	beq.n	8008f7a <_strtod_l+0x28a>
 8008e88:	f04f 0c00 	mov.w	ip, #0
 8008e8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e90:	2909      	cmp	r1, #9
 8008e92:	d97f      	bls.n	8008f94 <_strtod_l+0x2a4>
 8008e94:	9515      	str	r5, [sp, #84]	; 0x54
 8008e96:	2700      	movs	r7, #0
 8008e98:	e09e      	b.n	8008fd8 <_strtod_l+0x2e8>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e7c8      	b.n	8008e30 <_strtod_l+0x140>
 8008e9e:	f1bb 0f08 	cmp.w	fp, #8
 8008ea2:	bfd8      	it	le
 8008ea4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008ea6:	f100 0001 	add.w	r0, r0, #1
 8008eaa:	bfda      	itte	le
 8008eac:	fb02 3301 	mlale	r3, r2, r1, r3
 8008eb0:	9309      	strle	r3, [sp, #36]	; 0x24
 8008eb2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008eb6:	f10b 0b01 	add.w	fp, fp, #1
 8008eba:	9015      	str	r0, [sp, #84]	; 0x54
 8008ebc:	e7c1      	b.n	8008e42 <_strtod_l+0x152>
 8008ebe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	9215      	str	r2, [sp, #84]	; 0x54
 8008ec4:	785a      	ldrb	r2, [r3, #1]
 8008ec6:	f1bb 0f00 	cmp.w	fp, #0
 8008eca:	d037      	beq.n	8008f3c <_strtod_l+0x24c>
 8008ecc:	9005      	str	r0, [sp, #20]
 8008ece:	465e      	mov	r6, fp
 8008ed0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008ed4:	2b09      	cmp	r3, #9
 8008ed6:	d912      	bls.n	8008efe <_strtod_l+0x20e>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e7c4      	b.n	8008e66 <_strtod_l+0x176>
 8008edc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	9215      	str	r2, [sp, #84]	; 0x54
 8008ee2:	785a      	ldrb	r2, [r3, #1]
 8008ee4:	3001      	adds	r0, #1
 8008ee6:	2a30      	cmp	r2, #48	; 0x30
 8008ee8:	d0f8      	beq.n	8008edc <_strtod_l+0x1ec>
 8008eea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008eee:	2b08      	cmp	r3, #8
 8008ef0:	f200 84c1 	bhi.w	8009876 <_strtod_l+0xb86>
 8008ef4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008ef6:	9005      	str	r0, [sp, #20]
 8008ef8:	2000      	movs	r0, #0
 8008efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8008efc:	4606      	mov	r6, r0
 8008efe:	3a30      	subs	r2, #48	; 0x30
 8008f00:	f100 0301 	add.w	r3, r0, #1
 8008f04:	d014      	beq.n	8008f30 <_strtod_l+0x240>
 8008f06:	9905      	ldr	r1, [sp, #20]
 8008f08:	4419      	add	r1, r3
 8008f0a:	9105      	str	r1, [sp, #20]
 8008f0c:	4633      	mov	r3, r6
 8008f0e:	eb00 0c06 	add.w	ip, r0, r6
 8008f12:	210a      	movs	r1, #10
 8008f14:	4563      	cmp	r3, ip
 8008f16:	d113      	bne.n	8008f40 <_strtod_l+0x250>
 8008f18:	1833      	adds	r3, r6, r0
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	f106 0601 	add.w	r6, r6, #1
 8008f20:	4406      	add	r6, r0
 8008f22:	dc1a      	bgt.n	8008f5a <_strtod_l+0x26a>
 8008f24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f26:	230a      	movs	r3, #10
 8008f28:	fb03 2301 	mla	r3, r3, r1, r2
 8008f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f32:	1c51      	adds	r1, r2, #1
 8008f34:	9115      	str	r1, [sp, #84]	; 0x54
 8008f36:	7852      	ldrb	r2, [r2, #1]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	e7c9      	b.n	8008ed0 <_strtod_l+0x1e0>
 8008f3c:	4658      	mov	r0, fp
 8008f3e:	e7d2      	b.n	8008ee6 <_strtod_l+0x1f6>
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	f103 0301 	add.w	r3, r3, #1
 8008f46:	dc03      	bgt.n	8008f50 <_strtod_l+0x260>
 8008f48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008f4a:	434f      	muls	r7, r1
 8008f4c:	9709      	str	r7, [sp, #36]	; 0x24
 8008f4e:	e7e1      	b.n	8008f14 <_strtod_l+0x224>
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	bfd8      	it	le
 8008f54:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008f58:	e7dc      	b.n	8008f14 <_strtod_l+0x224>
 8008f5a:	2e10      	cmp	r6, #16
 8008f5c:	bfdc      	itt	le
 8008f5e:	230a      	movle	r3, #10
 8008f60:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8008f64:	e7e3      	b.n	8008f2e <_strtod_l+0x23e>
 8008f66:	2300      	movs	r3, #0
 8008f68:	9305      	str	r3, [sp, #20]
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e780      	b.n	8008e70 <_strtod_l+0x180>
 8008f6e:	f04f 0c00 	mov.w	ip, #0
 8008f72:	1caa      	adds	r2, r5, #2
 8008f74:	9215      	str	r2, [sp, #84]	; 0x54
 8008f76:	78aa      	ldrb	r2, [r5, #2]
 8008f78:	e788      	b.n	8008e8c <_strtod_l+0x19c>
 8008f7a:	f04f 0c01 	mov.w	ip, #1
 8008f7e:	e7f8      	b.n	8008f72 <_strtod_l+0x282>
 8008f80:	0800b948 	.word	0x0800b948
 8008f84:	0800b938 	.word	0x0800b938
 8008f88:	7ff00000 	.word	0x7ff00000
 8008f8c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008f8e:	1c51      	adds	r1, r2, #1
 8008f90:	9115      	str	r1, [sp, #84]	; 0x54
 8008f92:	7852      	ldrb	r2, [r2, #1]
 8008f94:	2a30      	cmp	r2, #48	; 0x30
 8008f96:	d0f9      	beq.n	8008f8c <_strtod_l+0x29c>
 8008f98:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f9c:	2908      	cmp	r1, #8
 8008f9e:	f63f af7a 	bhi.w	8008e96 <_strtod_l+0x1a6>
 8008fa2:	3a30      	subs	r2, #48	; 0x30
 8008fa4:	9208      	str	r2, [sp, #32]
 8008fa6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fa8:	920c      	str	r2, [sp, #48]	; 0x30
 8008faa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008fac:	1c57      	adds	r7, r2, #1
 8008fae:	9715      	str	r7, [sp, #84]	; 0x54
 8008fb0:	7852      	ldrb	r2, [r2, #1]
 8008fb2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008fb6:	f1be 0f09 	cmp.w	lr, #9
 8008fba:	d938      	bls.n	800902e <_strtod_l+0x33e>
 8008fbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008fbe:	1a7f      	subs	r7, r7, r1
 8008fc0:	2f08      	cmp	r7, #8
 8008fc2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008fc6:	dc03      	bgt.n	8008fd0 <_strtod_l+0x2e0>
 8008fc8:	9908      	ldr	r1, [sp, #32]
 8008fca:	428f      	cmp	r7, r1
 8008fcc:	bfa8      	it	ge
 8008fce:	460f      	movge	r7, r1
 8008fd0:	f1bc 0f00 	cmp.w	ip, #0
 8008fd4:	d000      	beq.n	8008fd8 <_strtod_l+0x2e8>
 8008fd6:	427f      	negs	r7, r7
 8008fd8:	2e00      	cmp	r6, #0
 8008fda:	d14f      	bne.n	800907c <_strtod_l+0x38c>
 8008fdc:	9904      	ldr	r1, [sp, #16]
 8008fde:	4301      	orrs	r1, r0
 8008fe0:	f47f aec1 	bne.w	8008d66 <_strtod_l+0x76>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	f47f aedb 	bne.w	8008da0 <_strtod_l+0xb0>
 8008fea:	2a69      	cmp	r2, #105	; 0x69
 8008fec:	d029      	beq.n	8009042 <_strtod_l+0x352>
 8008fee:	dc26      	bgt.n	800903e <_strtod_l+0x34e>
 8008ff0:	2a49      	cmp	r2, #73	; 0x49
 8008ff2:	d026      	beq.n	8009042 <_strtod_l+0x352>
 8008ff4:	2a4e      	cmp	r2, #78	; 0x4e
 8008ff6:	f47f aed3 	bne.w	8008da0 <_strtod_l+0xb0>
 8008ffa:	499b      	ldr	r1, [pc, #620]	; (8009268 <_strtod_l+0x578>)
 8008ffc:	a815      	add	r0, sp, #84	; 0x54
 8008ffe:	f001 f913 	bl	800a228 <__match>
 8009002:	2800      	cmp	r0, #0
 8009004:	f43f aecc 	beq.w	8008da0 <_strtod_l+0xb0>
 8009008:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	2b28      	cmp	r3, #40	; 0x28
 800900e:	d12f      	bne.n	8009070 <_strtod_l+0x380>
 8009010:	4996      	ldr	r1, [pc, #600]	; (800926c <_strtod_l+0x57c>)
 8009012:	aa18      	add	r2, sp, #96	; 0x60
 8009014:	a815      	add	r0, sp, #84	; 0x54
 8009016:	f001 f91b 	bl	800a250 <__hexnan>
 800901a:	2805      	cmp	r0, #5
 800901c:	d128      	bne.n	8009070 <_strtod_l+0x380>
 800901e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009020:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009024:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009028:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800902c:	e69b      	b.n	8008d66 <_strtod_l+0x76>
 800902e:	9f08      	ldr	r7, [sp, #32]
 8009030:	210a      	movs	r1, #10
 8009032:	fb01 2107 	mla	r1, r1, r7, r2
 8009036:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800903a:	9208      	str	r2, [sp, #32]
 800903c:	e7b5      	b.n	8008faa <_strtod_l+0x2ba>
 800903e:	2a6e      	cmp	r2, #110	; 0x6e
 8009040:	e7d9      	b.n	8008ff6 <_strtod_l+0x306>
 8009042:	498b      	ldr	r1, [pc, #556]	; (8009270 <_strtod_l+0x580>)
 8009044:	a815      	add	r0, sp, #84	; 0x54
 8009046:	f001 f8ef 	bl	800a228 <__match>
 800904a:	2800      	cmp	r0, #0
 800904c:	f43f aea8 	beq.w	8008da0 <_strtod_l+0xb0>
 8009050:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009052:	4988      	ldr	r1, [pc, #544]	; (8009274 <_strtod_l+0x584>)
 8009054:	3b01      	subs	r3, #1
 8009056:	a815      	add	r0, sp, #84	; 0x54
 8009058:	9315      	str	r3, [sp, #84]	; 0x54
 800905a:	f001 f8e5 	bl	800a228 <__match>
 800905e:	b910      	cbnz	r0, 8009066 <_strtod_l+0x376>
 8009060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009062:	3301      	adds	r3, #1
 8009064:	9315      	str	r3, [sp, #84]	; 0x54
 8009066:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009284 <_strtod_l+0x594>
 800906a:	f04f 0800 	mov.w	r8, #0
 800906e:	e67a      	b.n	8008d66 <_strtod_l+0x76>
 8009070:	4881      	ldr	r0, [pc, #516]	; (8009278 <_strtod_l+0x588>)
 8009072:	f000 fddd 	bl	8009c30 <nan>
 8009076:	ec59 8b10 	vmov	r8, r9, d0
 800907a:	e674      	b.n	8008d66 <_strtod_l+0x76>
 800907c:	9b05      	ldr	r3, [sp, #20]
 800907e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009080:	1afb      	subs	r3, r7, r3
 8009082:	f1bb 0f00 	cmp.w	fp, #0
 8009086:	bf08      	it	eq
 8009088:	46b3      	moveq	fp, r6
 800908a:	2e10      	cmp	r6, #16
 800908c:	9308      	str	r3, [sp, #32]
 800908e:	4635      	mov	r5, r6
 8009090:	bfa8      	it	ge
 8009092:	2510      	movge	r5, #16
 8009094:	f7f7 fa2e 	bl	80004f4 <__aeabi_ui2d>
 8009098:	2e09      	cmp	r6, #9
 800909a:	4680      	mov	r8, r0
 800909c:	4689      	mov	r9, r1
 800909e:	dd13      	ble.n	80090c8 <_strtod_l+0x3d8>
 80090a0:	4b76      	ldr	r3, [pc, #472]	; (800927c <_strtod_l+0x58c>)
 80090a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80090a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090aa:	f7f7 fa9d 	bl	80005e8 <__aeabi_dmul>
 80090ae:	4680      	mov	r8, r0
 80090b0:	4650      	mov	r0, sl
 80090b2:	4689      	mov	r9, r1
 80090b4:	f7f7 fa1e 	bl	80004f4 <__aeabi_ui2d>
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4640      	mov	r0, r8
 80090be:	4649      	mov	r1, r9
 80090c0:	f7f7 f8dc 	bl	800027c <__adddf3>
 80090c4:	4680      	mov	r8, r0
 80090c6:	4689      	mov	r9, r1
 80090c8:	2e0f      	cmp	r6, #15
 80090ca:	dc38      	bgt.n	800913e <_strtod_l+0x44e>
 80090cc:	9b08      	ldr	r3, [sp, #32]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f43f ae49 	beq.w	8008d66 <_strtod_l+0x76>
 80090d4:	dd24      	ble.n	8009120 <_strtod_l+0x430>
 80090d6:	2b16      	cmp	r3, #22
 80090d8:	dc0b      	bgt.n	80090f2 <_strtod_l+0x402>
 80090da:	4968      	ldr	r1, [pc, #416]	; (800927c <_strtod_l+0x58c>)
 80090dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e4:	4642      	mov	r2, r8
 80090e6:	464b      	mov	r3, r9
 80090e8:	f7f7 fa7e 	bl	80005e8 <__aeabi_dmul>
 80090ec:	4680      	mov	r8, r0
 80090ee:	4689      	mov	r9, r1
 80090f0:	e639      	b.n	8008d66 <_strtod_l+0x76>
 80090f2:	9a08      	ldr	r2, [sp, #32]
 80090f4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80090f8:	4293      	cmp	r3, r2
 80090fa:	db20      	blt.n	800913e <_strtod_l+0x44e>
 80090fc:	4c5f      	ldr	r4, [pc, #380]	; (800927c <_strtod_l+0x58c>)
 80090fe:	f1c6 060f 	rsb	r6, r6, #15
 8009102:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009106:	4642      	mov	r2, r8
 8009108:	464b      	mov	r3, r9
 800910a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800910e:	f7f7 fa6b 	bl	80005e8 <__aeabi_dmul>
 8009112:	9b08      	ldr	r3, [sp, #32]
 8009114:	1b9e      	subs	r6, r3, r6
 8009116:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800911a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800911e:	e7e3      	b.n	80090e8 <_strtod_l+0x3f8>
 8009120:	9b08      	ldr	r3, [sp, #32]
 8009122:	3316      	adds	r3, #22
 8009124:	db0b      	blt.n	800913e <_strtod_l+0x44e>
 8009126:	9b05      	ldr	r3, [sp, #20]
 8009128:	1bdf      	subs	r7, r3, r7
 800912a:	4b54      	ldr	r3, [pc, #336]	; (800927c <_strtod_l+0x58c>)
 800912c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009134:	4640      	mov	r0, r8
 8009136:	4649      	mov	r1, r9
 8009138:	f7f7 fb80 	bl	800083c <__aeabi_ddiv>
 800913c:	e7d6      	b.n	80090ec <_strtod_l+0x3fc>
 800913e:	9b08      	ldr	r3, [sp, #32]
 8009140:	1b75      	subs	r5, r6, r5
 8009142:	441d      	add	r5, r3
 8009144:	2d00      	cmp	r5, #0
 8009146:	dd70      	ble.n	800922a <_strtod_l+0x53a>
 8009148:	f015 030f 	ands.w	r3, r5, #15
 800914c:	d00a      	beq.n	8009164 <_strtod_l+0x474>
 800914e:	494b      	ldr	r1, [pc, #300]	; (800927c <_strtod_l+0x58c>)
 8009150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009154:	4642      	mov	r2, r8
 8009156:	464b      	mov	r3, r9
 8009158:	e9d1 0100 	ldrd	r0, r1, [r1]
 800915c:	f7f7 fa44 	bl	80005e8 <__aeabi_dmul>
 8009160:	4680      	mov	r8, r0
 8009162:	4689      	mov	r9, r1
 8009164:	f035 050f 	bics.w	r5, r5, #15
 8009168:	d04d      	beq.n	8009206 <_strtod_l+0x516>
 800916a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800916e:	dd22      	ble.n	80091b6 <_strtod_l+0x4c6>
 8009170:	2500      	movs	r5, #0
 8009172:	46ab      	mov	fp, r5
 8009174:	9509      	str	r5, [sp, #36]	; 0x24
 8009176:	9505      	str	r5, [sp, #20]
 8009178:	2322      	movs	r3, #34	; 0x22
 800917a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009284 <_strtod_l+0x594>
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	f04f 0800 	mov.w	r8, #0
 8009184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	f43f aded 	beq.w	8008d66 <_strtod_l+0x76>
 800918c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800918e:	4620      	mov	r0, r4
 8009190:	f001 f9f8 	bl	800a584 <_Bfree>
 8009194:	9905      	ldr	r1, [sp, #20]
 8009196:	4620      	mov	r0, r4
 8009198:	f001 f9f4 	bl	800a584 <_Bfree>
 800919c:	4659      	mov	r1, fp
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 f9f0 	bl	800a584 <_Bfree>
 80091a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091a6:	4620      	mov	r0, r4
 80091a8:	f001 f9ec 	bl	800a584 <_Bfree>
 80091ac:	4629      	mov	r1, r5
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 f9e8 	bl	800a584 <_Bfree>
 80091b4:	e5d7      	b.n	8008d66 <_strtod_l+0x76>
 80091b6:	4b32      	ldr	r3, [pc, #200]	; (8009280 <_strtod_l+0x590>)
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	2300      	movs	r3, #0
 80091bc:	112d      	asrs	r5, r5, #4
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	469a      	mov	sl, r3
 80091c4:	2d01      	cmp	r5, #1
 80091c6:	dc21      	bgt.n	800920c <_strtod_l+0x51c>
 80091c8:	b10b      	cbz	r3, 80091ce <_strtod_l+0x4de>
 80091ca:	4680      	mov	r8, r0
 80091cc:	4689      	mov	r9, r1
 80091ce:	492c      	ldr	r1, [pc, #176]	; (8009280 <_strtod_l+0x590>)
 80091d0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80091d4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80091d8:	4642      	mov	r2, r8
 80091da:	464b      	mov	r3, r9
 80091dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091e0:	f7f7 fa02 	bl	80005e8 <__aeabi_dmul>
 80091e4:	4b27      	ldr	r3, [pc, #156]	; (8009284 <_strtod_l+0x594>)
 80091e6:	460a      	mov	r2, r1
 80091e8:	400b      	ands	r3, r1
 80091ea:	4927      	ldr	r1, [pc, #156]	; (8009288 <_strtod_l+0x598>)
 80091ec:	428b      	cmp	r3, r1
 80091ee:	4680      	mov	r8, r0
 80091f0:	d8be      	bhi.n	8009170 <_strtod_l+0x480>
 80091f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091f6:	428b      	cmp	r3, r1
 80091f8:	bf86      	itte	hi
 80091fa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800928c <_strtod_l+0x59c>
 80091fe:	f04f 38ff 	movhi.w	r8, #4294967295
 8009202:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009206:	2300      	movs	r3, #0
 8009208:	9304      	str	r3, [sp, #16]
 800920a:	e07b      	b.n	8009304 <_strtod_l+0x614>
 800920c:	07ea      	lsls	r2, r5, #31
 800920e:	d505      	bpl.n	800921c <_strtod_l+0x52c>
 8009210:	9b04      	ldr	r3, [sp, #16]
 8009212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009216:	f7f7 f9e7 	bl	80005e8 <__aeabi_dmul>
 800921a:	2301      	movs	r3, #1
 800921c:	9a04      	ldr	r2, [sp, #16]
 800921e:	3208      	adds	r2, #8
 8009220:	f10a 0a01 	add.w	sl, sl, #1
 8009224:	106d      	asrs	r5, r5, #1
 8009226:	9204      	str	r2, [sp, #16]
 8009228:	e7cc      	b.n	80091c4 <_strtod_l+0x4d4>
 800922a:	d0ec      	beq.n	8009206 <_strtod_l+0x516>
 800922c:	426d      	negs	r5, r5
 800922e:	f015 020f 	ands.w	r2, r5, #15
 8009232:	d00a      	beq.n	800924a <_strtod_l+0x55a>
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <_strtod_l+0x58c>)
 8009236:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800923a:	4640      	mov	r0, r8
 800923c:	4649      	mov	r1, r9
 800923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009242:	f7f7 fafb 	bl	800083c <__aeabi_ddiv>
 8009246:	4680      	mov	r8, r0
 8009248:	4689      	mov	r9, r1
 800924a:	112d      	asrs	r5, r5, #4
 800924c:	d0db      	beq.n	8009206 <_strtod_l+0x516>
 800924e:	2d1f      	cmp	r5, #31
 8009250:	dd1e      	ble.n	8009290 <_strtod_l+0x5a0>
 8009252:	2500      	movs	r5, #0
 8009254:	46ab      	mov	fp, r5
 8009256:	9509      	str	r5, [sp, #36]	; 0x24
 8009258:	9505      	str	r5, [sp, #20]
 800925a:	2322      	movs	r3, #34	; 0x22
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	e78d      	b.n	8009184 <_strtod_l+0x494>
 8009268:	0800b943 	.word	0x0800b943
 800926c:	0800b95c 	.word	0x0800b95c
 8009270:	0800b93a 	.word	0x0800b93a
 8009274:	0800b93d 	.word	0x0800b93d
 8009278:	0800bcc0 	.word	0x0800bcc0
 800927c:	0800bab0 	.word	0x0800bab0
 8009280:	0800ba88 	.word	0x0800ba88
 8009284:	7ff00000 	.word	0x7ff00000
 8009288:	7ca00000 	.word	0x7ca00000
 800928c:	7fefffff 	.word	0x7fefffff
 8009290:	f015 0310 	ands.w	r3, r5, #16
 8009294:	bf18      	it	ne
 8009296:	236a      	movne	r3, #106	; 0x6a
 8009298:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800963c <_strtod_l+0x94c>
 800929c:	9304      	str	r3, [sp, #16]
 800929e:	4640      	mov	r0, r8
 80092a0:	4649      	mov	r1, r9
 80092a2:	2300      	movs	r3, #0
 80092a4:	07ea      	lsls	r2, r5, #31
 80092a6:	d504      	bpl.n	80092b2 <_strtod_l+0x5c2>
 80092a8:	e9da 2300 	ldrd	r2, r3, [sl]
 80092ac:	f7f7 f99c 	bl	80005e8 <__aeabi_dmul>
 80092b0:	2301      	movs	r3, #1
 80092b2:	106d      	asrs	r5, r5, #1
 80092b4:	f10a 0a08 	add.w	sl, sl, #8
 80092b8:	d1f4      	bne.n	80092a4 <_strtod_l+0x5b4>
 80092ba:	b10b      	cbz	r3, 80092c0 <_strtod_l+0x5d0>
 80092bc:	4680      	mov	r8, r0
 80092be:	4689      	mov	r9, r1
 80092c0:	9b04      	ldr	r3, [sp, #16]
 80092c2:	b1bb      	cbz	r3, 80092f4 <_strtod_l+0x604>
 80092c4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80092c8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	4649      	mov	r1, r9
 80092d0:	dd10      	ble.n	80092f4 <_strtod_l+0x604>
 80092d2:	2b1f      	cmp	r3, #31
 80092d4:	f340 811e 	ble.w	8009514 <_strtod_l+0x824>
 80092d8:	2b34      	cmp	r3, #52	; 0x34
 80092da:	bfde      	ittt	le
 80092dc:	f04f 33ff 	movle.w	r3, #4294967295
 80092e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80092e4:	4093      	lslle	r3, r2
 80092e6:	f04f 0800 	mov.w	r8, #0
 80092ea:	bfcc      	ite	gt
 80092ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80092f0:	ea03 0901 	andle.w	r9, r3, r1
 80092f4:	2200      	movs	r2, #0
 80092f6:	2300      	movs	r3, #0
 80092f8:	4640      	mov	r0, r8
 80092fa:	4649      	mov	r1, r9
 80092fc:	f7f7 fbdc 	bl	8000ab8 <__aeabi_dcmpeq>
 8009300:	2800      	cmp	r0, #0
 8009302:	d1a6      	bne.n	8009252 <_strtod_l+0x562>
 8009304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800930a:	4633      	mov	r3, r6
 800930c:	465a      	mov	r2, fp
 800930e:	4620      	mov	r0, r4
 8009310:	f001 f9a0 	bl	800a654 <__s2b>
 8009314:	9009      	str	r0, [sp, #36]	; 0x24
 8009316:	2800      	cmp	r0, #0
 8009318:	f43f af2a 	beq.w	8009170 <_strtod_l+0x480>
 800931c:	9a08      	ldr	r2, [sp, #32]
 800931e:	9b05      	ldr	r3, [sp, #20]
 8009320:	2a00      	cmp	r2, #0
 8009322:	eba3 0307 	sub.w	r3, r3, r7
 8009326:	bfa8      	it	ge
 8009328:	2300      	movge	r3, #0
 800932a:	930c      	str	r3, [sp, #48]	; 0x30
 800932c:	2500      	movs	r5, #0
 800932e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009332:	9312      	str	r3, [sp, #72]	; 0x48
 8009334:	46ab      	mov	fp, r5
 8009336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009338:	4620      	mov	r0, r4
 800933a:	6859      	ldr	r1, [r3, #4]
 800933c:	f001 f8e2 	bl	800a504 <_Balloc>
 8009340:	9005      	str	r0, [sp, #20]
 8009342:	2800      	cmp	r0, #0
 8009344:	f43f af18 	beq.w	8009178 <_strtod_l+0x488>
 8009348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934a:	691a      	ldr	r2, [r3, #16]
 800934c:	3202      	adds	r2, #2
 800934e:	f103 010c 	add.w	r1, r3, #12
 8009352:	0092      	lsls	r2, r2, #2
 8009354:	300c      	adds	r0, #12
 8009356:	f000 fc5a 	bl	8009c0e <memcpy>
 800935a:	ec49 8b10 	vmov	d0, r8, r9
 800935e:	aa18      	add	r2, sp, #96	; 0x60
 8009360:	a917      	add	r1, sp, #92	; 0x5c
 8009362:	4620      	mov	r0, r4
 8009364:	f001 fcaa 	bl	800acbc <__d2b>
 8009368:	ec49 8b18 	vmov	d8, r8, r9
 800936c:	9016      	str	r0, [sp, #88]	; 0x58
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f af02 	beq.w	8009178 <_strtod_l+0x488>
 8009374:	2101      	movs	r1, #1
 8009376:	4620      	mov	r0, r4
 8009378:	f001 fa04 	bl	800a784 <__i2b>
 800937c:	4683      	mov	fp, r0
 800937e:	2800      	cmp	r0, #0
 8009380:	f43f aefa 	beq.w	8009178 <_strtod_l+0x488>
 8009384:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009386:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009388:	2e00      	cmp	r6, #0
 800938a:	bfab      	itete	ge
 800938c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800938e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009390:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009392:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009396:	bfac      	ite	ge
 8009398:	eb06 0a03 	addge.w	sl, r6, r3
 800939c:	1b9f      	sublt	r7, r3, r6
 800939e:	9b04      	ldr	r3, [sp, #16]
 80093a0:	1af6      	subs	r6, r6, r3
 80093a2:	4416      	add	r6, r2
 80093a4:	4ba0      	ldr	r3, [pc, #640]	; (8009628 <_strtod_l+0x938>)
 80093a6:	3e01      	subs	r6, #1
 80093a8:	429e      	cmp	r6, r3
 80093aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80093ae:	f280 80c4 	bge.w	800953a <_strtod_l+0x84a>
 80093b2:	1b9b      	subs	r3, r3, r6
 80093b4:	2b1f      	cmp	r3, #31
 80093b6:	eba2 0203 	sub.w	r2, r2, r3
 80093ba:	f04f 0101 	mov.w	r1, #1
 80093be:	f300 80b0 	bgt.w	8009522 <_strtod_l+0x832>
 80093c2:	fa01 f303 	lsl.w	r3, r1, r3
 80093c6:	930e      	str	r3, [sp, #56]	; 0x38
 80093c8:	2300      	movs	r3, #0
 80093ca:	930d      	str	r3, [sp, #52]	; 0x34
 80093cc:	eb0a 0602 	add.w	r6, sl, r2
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	45b2      	cmp	sl, r6
 80093d4:	4417      	add	r7, r2
 80093d6:	441f      	add	r7, r3
 80093d8:	4653      	mov	r3, sl
 80093da:	bfa8      	it	ge
 80093dc:	4633      	movge	r3, r6
 80093de:	42bb      	cmp	r3, r7
 80093e0:	bfa8      	it	ge
 80093e2:	463b      	movge	r3, r7
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	bfc2      	ittt	gt
 80093e8:	1af6      	subgt	r6, r6, r3
 80093ea:	1aff      	subgt	r7, r7, r3
 80093ec:	ebaa 0a03 	subgt.w	sl, sl, r3
 80093f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd17      	ble.n	8009426 <_strtod_l+0x736>
 80093f6:	4659      	mov	r1, fp
 80093f8:	461a      	mov	r2, r3
 80093fa:	4620      	mov	r0, r4
 80093fc:	f001 fa82 	bl	800a904 <__pow5mult>
 8009400:	4683      	mov	fp, r0
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f aeb8 	beq.w	8009178 <_strtod_l+0x488>
 8009408:	4601      	mov	r1, r0
 800940a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800940c:	4620      	mov	r0, r4
 800940e:	f001 f9cf 	bl	800a7b0 <__multiply>
 8009412:	900b      	str	r0, [sp, #44]	; 0x2c
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f aeaf 	beq.w	8009178 <_strtod_l+0x488>
 800941a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800941c:	4620      	mov	r0, r4
 800941e:	f001 f8b1 	bl	800a584 <_Bfree>
 8009422:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009424:	9316      	str	r3, [sp, #88]	; 0x58
 8009426:	2e00      	cmp	r6, #0
 8009428:	f300 808c 	bgt.w	8009544 <_strtod_l+0x854>
 800942c:	9b08      	ldr	r3, [sp, #32]
 800942e:	2b00      	cmp	r3, #0
 8009430:	dd08      	ble.n	8009444 <_strtod_l+0x754>
 8009432:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009434:	9905      	ldr	r1, [sp, #20]
 8009436:	4620      	mov	r0, r4
 8009438:	f001 fa64 	bl	800a904 <__pow5mult>
 800943c:	9005      	str	r0, [sp, #20]
 800943e:	2800      	cmp	r0, #0
 8009440:	f43f ae9a 	beq.w	8009178 <_strtod_l+0x488>
 8009444:	2f00      	cmp	r7, #0
 8009446:	dd08      	ble.n	800945a <_strtod_l+0x76a>
 8009448:	9905      	ldr	r1, [sp, #20]
 800944a:	463a      	mov	r2, r7
 800944c:	4620      	mov	r0, r4
 800944e:	f001 fab3 	bl	800a9b8 <__lshift>
 8009452:	9005      	str	r0, [sp, #20]
 8009454:	2800      	cmp	r0, #0
 8009456:	f43f ae8f 	beq.w	8009178 <_strtod_l+0x488>
 800945a:	f1ba 0f00 	cmp.w	sl, #0
 800945e:	dd08      	ble.n	8009472 <_strtod_l+0x782>
 8009460:	4659      	mov	r1, fp
 8009462:	4652      	mov	r2, sl
 8009464:	4620      	mov	r0, r4
 8009466:	f001 faa7 	bl	800a9b8 <__lshift>
 800946a:	4683      	mov	fp, r0
 800946c:	2800      	cmp	r0, #0
 800946e:	f43f ae83 	beq.w	8009178 <_strtod_l+0x488>
 8009472:	9a05      	ldr	r2, [sp, #20]
 8009474:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009476:	4620      	mov	r0, r4
 8009478:	f001 fb26 	bl	800aac8 <__mdiff>
 800947c:	4605      	mov	r5, r0
 800947e:	2800      	cmp	r0, #0
 8009480:	f43f ae7a 	beq.w	8009178 <_strtod_l+0x488>
 8009484:	68c3      	ldr	r3, [r0, #12]
 8009486:	930b      	str	r3, [sp, #44]	; 0x2c
 8009488:	2300      	movs	r3, #0
 800948a:	60c3      	str	r3, [r0, #12]
 800948c:	4659      	mov	r1, fp
 800948e:	f001 faff 	bl	800aa90 <__mcmp>
 8009492:	2800      	cmp	r0, #0
 8009494:	da60      	bge.n	8009558 <_strtod_l+0x868>
 8009496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009498:	ea53 0308 	orrs.w	r3, r3, r8
 800949c:	f040 8084 	bne.w	80095a8 <_strtod_l+0x8b8>
 80094a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d17f      	bne.n	80095a8 <_strtod_l+0x8b8>
 80094a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ac:	0d1b      	lsrs	r3, r3, #20
 80094ae:	051b      	lsls	r3, r3, #20
 80094b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80094b4:	d978      	bls.n	80095a8 <_strtod_l+0x8b8>
 80094b6:	696b      	ldr	r3, [r5, #20]
 80094b8:	b913      	cbnz	r3, 80094c0 <_strtod_l+0x7d0>
 80094ba:	692b      	ldr	r3, [r5, #16]
 80094bc:	2b01      	cmp	r3, #1
 80094be:	dd73      	ble.n	80095a8 <_strtod_l+0x8b8>
 80094c0:	4629      	mov	r1, r5
 80094c2:	2201      	movs	r2, #1
 80094c4:	4620      	mov	r0, r4
 80094c6:	f001 fa77 	bl	800a9b8 <__lshift>
 80094ca:	4659      	mov	r1, fp
 80094cc:	4605      	mov	r5, r0
 80094ce:	f001 fadf 	bl	800aa90 <__mcmp>
 80094d2:	2800      	cmp	r0, #0
 80094d4:	dd68      	ble.n	80095a8 <_strtod_l+0x8b8>
 80094d6:	9904      	ldr	r1, [sp, #16]
 80094d8:	4a54      	ldr	r2, [pc, #336]	; (800962c <_strtod_l+0x93c>)
 80094da:	464b      	mov	r3, r9
 80094dc:	2900      	cmp	r1, #0
 80094de:	f000 8084 	beq.w	80095ea <_strtod_l+0x8fa>
 80094e2:	ea02 0109 	and.w	r1, r2, r9
 80094e6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80094ea:	dc7e      	bgt.n	80095ea <_strtod_l+0x8fa>
 80094ec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80094f0:	f77f aeb3 	ble.w	800925a <_strtod_l+0x56a>
 80094f4:	4b4e      	ldr	r3, [pc, #312]	; (8009630 <_strtod_l+0x940>)
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f7 f874 	bl	80005e8 <__aeabi_dmul>
 8009500:	4b4a      	ldr	r3, [pc, #296]	; (800962c <_strtod_l+0x93c>)
 8009502:	400b      	ands	r3, r1
 8009504:	4680      	mov	r8, r0
 8009506:	4689      	mov	r9, r1
 8009508:	2b00      	cmp	r3, #0
 800950a:	f47f ae3f 	bne.w	800918c <_strtod_l+0x49c>
 800950e:	2322      	movs	r3, #34	; 0x22
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	e63b      	b.n	800918c <_strtod_l+0x49c>
 8009514:	f04f 32ff 	mov.w	r2, #4294967295
 8009518:	fa02 f303 	lsl.w	r3, r2, r3
 800951c:	ea03 0808 	and.w	r8, r3, r8
 8009520:	e6e8      	b.n	80092f4 <_strtod_l+0x604>
 8009522:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009526:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800952a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800952e:	36e2      	adds	r6, #226	; 0xe2
 8009530:	fa01 f306 	lsl.w	r3, r1, r6
 8009534:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009538:	e748      	b.n	80093cc <_strtod_l+0x6dc>
 800953a:	2100      	movs	r1, #0
 800953c:	2301      	movs	r3, #1
 800953e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009542:	e743      	b.n	80093cc <_strtod_l+0x6dc>
 8009544:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009546:	4632      	mov	r2, r6
 8009548:	4620      	mov	r0, r4
 800954a:	f001 fa35 	bl	800a9b8 <__lshift>
 800954e:	9016      	str	r0, [sp, #88]	; 0x58
 8009550:	2800      	cmp	r0, #0
 8009552:	f47f af6b 	bne.w	800942c <_strtod_l+0x73c>
 8009556:	e60f      	b.n	8009178 <_strtod_l+0x488>
 8009558:	46ca      	mov	sl, r9
 800955a:	d171      	bne.n	8009640 <_strtod_l+0x950>
 800955c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800955e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009562:	b352      	cbz	r2, 80095ba <_strtod_l+0x8ca>
 8009564:	4a33      	ldr	r2, [pc, #204]	; (8009634 <_strtod_l+0x944>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d12a      	bne.n	80095c0 <_strtod_l+0x8d0>
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	4641      	mov	r1, r8
 800956e:	b1fb      	cbz	r3, 80095b0 <_strtod_l+0x8c0>
 8009570:	4b2e      	ldr	r3, [pc, #184]	; (800962c <_strtod_l+0x93c>)
 8009572:	ea09 0303 	and.w	r3, r9, r3
 8009576:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	d81a      	bhi.n	80095b6 <_strtod_l+0x8c6>
 8009580:	0d1b      	lsrs	r3, r3, #20
 8009582:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009586:	fa02 f303 	lsl.w	r3, r2, r3
 800958a:	4299      	cmp	r1, r3
 800958c:	d118      	bne.n	80095c0 <_strtod_l+0x8d0>
 800958e:	4b2a      	ldr	r3, [pc, #168]	; (8009638 <_strtod_l+0x948>)
 8009590:	459a      	cmp	sl, r3
 8009592:	d102      	bne.n	800959a <_strtod_l+0x8aa>
 8009594:	3101      	adds	r1, #1
 8009596:	f43f adef 	beq.w	8009178 <_strtod_l+0x488>
 800959a:	4b24      	ldr	r3, [pc, #144]	; (800962c <_strtod_l+0x93c>)
 800959c:	ea0a 0303 	and.w	r3, sl, r3
 80095a0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80095a4:	f04f 0800 	mov.w	r8, #0
 80095a8:	9b04      	ldr	r3, [sp, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1a2      	bne.n	80094f4 <_strtod_l+0x804>
 80095ae:	e5ed      	b.n	800918c <_strtod_l+0x49c>
 80095b0:	f04f 33ff 	mov.w	r3, #4294967295
 80095b4:	e7e9      	b.n	800958a <_strtod_l+0x89a>
 80095b6:	4613      	mov	r3, r2
 80095b8:	e7e7      	b.n	800958a <_strtod_l+0x89a>
 80095ba:	ea53 0308 	orrs.w	r3, r3, r8
 80095be:	d08a      	beq.n	80094d6 <_strtod_l+0x7e6>
 80095c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095c2:	b1e3      	cbz	r3, 80095fe <_strtod_l+0x90e>
 80095c4:	ea13 0f0a 	tst.w	r3, sl
 80095c8:	d0ee      	beq.n	80095a8 <_strtod_l+0x8b8>
 80095ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095cc:	9a04      	ldr	r2, [sp, #16]
 80095ce:	4640      	mov	r0, r8
 80095d0:	4649      	mov	r1, r9
 80095d2:	b1c3      	cbz	r3, 8009606 <_strtod_l+0x916>
 80095d4:	f7ff fb6e 	bl	8008cb4 <sulp>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	ec51 0b18 	vmov	r0, r1, d8
 80095e0:	f7f6 fe4c 	bl	800027c <__adddf3>
 80095e4:	4680      	mov	r8, r0
 80095e6:	4689      	mov	r9, r1
 80095e8:	e7de      	b.n	80095a8 <_strtod_l+0x8b8>
 80095ea:	4013      	ands	r3, r2
 80095ec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095f0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095f4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095f8:	f04f 38ff 	mov.w	r8, #4294967295
 80095fc:	e7d4      	b.n	80095a8 <_strtod_l+0x8b8>
 80095fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009600:	ea13 0f08 	tst.w	r3, r8
 8009604:	e7e0      	b.n	80095c8 <_strtod_l+0x8d8>
 8009606:	f7ff fb55 	bl	8008cb4 <sulp>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	ec51 0b18 	vmov	r0, r1, d8
 8009612:	f7f6 fe31 	bl	8000278 <__aeabi_dsub>
 8009616:	2200      	movs	r2, #0
 8009618:	2300      	movs	r3, #0
 800961a:	4680      	mov	r8, r0
 800961c:	4689      	mov	r9, r1
 800961e:	f7f7 fa4b 	bl	8000ab8 <__aeabi_dcmpeq>
 8009622:	2800      	cmp	r0, #0
 8009624:	d0c0      	beq.n	80095a8 <_strtod_l+0x8b8>
 8009626:	e618      	b.n	800925a <_strtod_l+0x56a>
 8009628:	fffffc02 	.word	0xfffffc02
 800962c:	7ff00000 	.word	0x7ff00000
 8009630:	39500000 	.word	0x39500000
 8009634:	000fffff 	.word	0x000fffff
 8009638:	7fefffff 	.word	0x7fefffff
 800963c:	0800b970 	.word	0x0800b970
 8009640:	4659      	mov	r1, fp
 8009642:	4628      	mov	r0, r5
 8009644:	f001 fb94 	bl	800ad70 <__ratio>
 8009648:	ec57 6b10 	vmov	r6, r7, d0
 800964c:	ee10 0a10 	vmov	r0, s0
 8009650:	2200      	movs	r2, #0
 8009652:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009656:	4639      	mov	r1, r7
 8009658:	f7f7 fa42 	bl	8000ae0 <__aeabi_dcmple>
 800965c:	2800      	cmp	r0, #0
 800965e:	d071      	beq.n	8009744 <_strtod_l+0xa54>
 8009660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d17c      	bne.n	8009760 <_strtod_l+0xa70>
 8009666:	f1b8 0f00 	cmp.w	r8, #0
 800966a:	d15a      	bne.n	8009722 <_strtod_l+0xa32>
 800966c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009670:	2b00      	cmp	r3, #0
 8009672:	d15d      	bne.n	8009730 <_strtod_l+0xa40>
 8009674:	4b90      	ldr	r3, [pc, #576]	; (80098b8 <_strtod_l+0xbc8>)
 8009676:	2200      	movs	r2, #0
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f7 fa26 	bl	8000acc <__aeabi_dcmplt>
 8009680:	2800      	cmp	r0, #0
 8009682:	d15c      	bne.n	800973e <_strtod_l+0xa4e>
 8009684:	4630      	mov	r0, r6
 8009686:	4639      	mov	r1, r7
 8009688:	4b8c      	ldr	r3, [pc, #560]	; (80098bc <_strtod_l+0xbcc>)
 800968a:	2200      	movs	r2, #0
 800968c:	f7f6 ffac 	bl	80005e8 <__aeabi_dmul>
 8009690:	4606      	mov	r6, r0
 8009692:	460f      	mov	r7, r1
 8009694:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009698:	9606      	str	r6, [sp, #24]
 800969a:	9307      	str	r3, [sp, #28]
 800969c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80096a4:	4b86      	ldr	r3, [pc, #536]	; (80098c0 <_strtod_l+0xbd0>)
 80096a6:	ea0a 0303 	and.w	r3, sl, r3
 80096aa:	930d      	str	r3, [sp, #52]	; 0x34
 80096ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096ae:	4b85      	ldr	r3, [pc, #532]	; (80098c4 <_strtod_l+0xbd4>)
 80096b0:	429a      	cmp	r2, r3
 80096b2:	f040 8090 	bne.w	80097d6 <_strtod_l+0xae6>
 80096b6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80096ba:	ec49 8b10 	vmov	d0, r8, r9
 80096be:	f001 fa8d 	bl	800abdc <__ulp>
 80096c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80096c6:	ec51 0b10 	vmov	r0, r1, d0
 80096ca:	f7f6 ff8d 	bl	80005e8 <__aeabi_dmul>
 80096ce:	4642      	mov	r2, r8
 80096d0:	464b      	mov	r3, r9
 80096d2:	f7f6 fdd3 	bl	800027c <__adddf3>
 80096d6:	460b      	mov	r3, r1
 80096d8:	4979      	ldr	r1, [pc, #484]	; (80098c0 <_strtod_l+0xbd0>)
 80096da:	4a7b      	ldr	r2, [pc, #492]	; (80098c8 <_strtod_l+0xbd8>)
 80096dc:	4019      	ands	r1, r3
 80096de:	4291      	cmp	r1, r2
 80096e0:	4680      	mov	r8, r0
 80096e2:	d944      	bls.n	800976e <_strtod_l+0xa7e>
 80096e4:	ee18 2a90 	vmov	r2, s17
 80096e8:	4b78      	ldr	r3, [pc, #480]	; (80098cc <_strtod_l+0xbdc>)
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d104      	bne.n	80096f8 <_strtod_l+0xa08>
 80096ee:	ee18 3a10 	vmov	r3, s16
 80096f2:	3301      	adds	r3, #1
 80096f4:	f43f ad40 	beq.w	8009178 <_strtod_l+0x488>
 80096f8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80098cc <_strtod_l+0xbdc>
 80096fc:	f04f 38ff 	mov.w	r8, #4294967295
 8009700:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009702:	4620      	mov	r0, r4
 8009704:	f000 ff3e 	bl	800a584 <_Bfree>
 8009708:	9905      	ldr	r1, [sp, #20]
 800970a:	4620      	mov	r0, r4
 800970c:	f000 ff3a 	bl	800a584 <_Bfree>
 8009710:	4659      	mov	r1, fp
 8009712:	4620      	mov	r0, r4
 8009714:	f000 ff36 	bl	800a584 <_Bfree>
 8009718:	4629      	mov	r1, r5
 800971a:	4620      	mov	r0, r4
 800971c:	f000 ff32 	bl	800a584 <_Bfree>
 8009720:	e609      	b.n	8009336 <_strtod_l+0x646>
 8009722:	f1b8 0f01 	cmp.w	r8, #1
 8009726:	d103      	bne.n	8009730 <_strtod_l+0xa40>
 8009728:	f1b9 0f00 	cmp.w	r9, #0
 800972c:	f43f ad95 	beq.w	800925a <_strtod_l+0x56a>
 8009730:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8009888 <_strtod_l+0xb98>
 8009734:	4f60      	ldr	r7, [pc, #384]	; (80098b8 <_strtod_l+0xbc8>)
 8009736:	ed8d 7b06 	vstr	d7, [sp, #24]
 800973a:	2600      	movs	r6, #0
 800973c:	e7ae      	b.n	800969c <_strtod_l+0x9ac>
 800973e:	4f5f      	ldr	r7, [pc, #380]	; (80098bc <_strtod_l+0xbcc>)
 8009740:	2600      	movs	r6, #0
 8009742:	e7a7      	b.n	8009694 <_strtod_l+0x9a4>
 8009744:	4b5d      	ldr	r3, [pc, #372]	; (80098bc <_strtod_l+0xbcc>)
 8009746:	4630      	mov	r0, r6
 8009748:	4639      	mov	r1, r7
 800974a:	2200      	movs	r2, #0
 800974c:	f7f6 ff4c 	bl	80005e8 <__aeabi_dmul>
 8009750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009752:	4606      	mov	r6, r0
 8009754:	460f      	mov	r7, r1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d09c      	beq.n	8009694 <_strtod_l+0x9a4>
 800975a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800975e:	e79d      	b.n	800969c <_strtod_l+0x9ac>
 8009760:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8009890 <_strtod_l+0xba0>
 8009764:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009768:	ec57 6b17 	vmov	r6, r7, d7
 800976c:	e796      	b.n	800969c <_strtod_l+0x9ac>
 800976e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	46ca      	mov	sl, r9
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1c2      	bne.n	8009700 <_strtod_l+0xa10>
 800977a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800977e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009780:	0d1b      	lsrs	r3, r3, #20
 8009782:	051b      	lsls	r3, r3, #20
 8009784:	429a      	cmp	r2, r3
 8009786:	d1bb      	bne.n	8009700 <_strtod_l+0xa10>
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f7 fa76 	bl	8000c7c <__aeabi_d2lz>
 8009790:	f7f6 fefc 	bl	800058c <__aeabi_l2d>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f6 fd6c 	bl	8000278 <__aeabi_dsub>
 80097a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097a6:	ea43 0308 	orr.w	r3, r3, r8
 80097aa:	4313      	orrs	r3, r2
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	d054      	beq.n	800985c <_strtod_l+0xb6c>
 80097b2:	a339      	add	r3, pc, #228	; (adr r3, 8009898 <_strtod_l+0xba8>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f7f7 f988 	bl	8000acc <__aeabi_dcmplt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f47f ace5 	bne.w	800918c <_strtod_l+0x49c>
 80097c2:	a337      	add	r3, pc, #220	; (adr r3, 80098a0 <_strtod_l+0xbb0>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f7 f99c 	bl	8000b08 <__aeabi_dcmpgt>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d095      	beq.n	8009700 <_strtod_l+0xa10>
 80097d4:	e4da      	b.n	800918c <_strtod_l+0x49c>
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	b333      	cbz	r3, 8009828 <_strtod_l+0xb38>
 80097da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097e0:	d822      	bhi.n	8009828 <_strtod_l+0xb38>
 80097e2:	a331      	add	r3, pc, #196	; (adr r3, 80098a8 <_strtod_l+0xbb8>)
 80097e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f7 f978 	bl	8000ae0 <__aeabi_dcmple>
 80097f0:	b1a0      	cbz	r0, 800981c <_strtod_l+0xb2c>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4630      	mov	r0, r6
 80097f6:	f7f7 f9b9 	bl	8000b6c <__aeabi_d2uiz>
 80097fa:	2801      	cmp	r0, #1
 80097fc:	bf38      	it	cc
 80097fe:	2001      	movcc	r0, #1
 8009800:	f7f6 fe78 	bl	80004f4 <__aeabi_ui2d>
 8009804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	bb23      	cbnz	r3, 8009856 <_strtod_l+0xb66>
 800980c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009810:	9010      	str	r0, [sp, #64]	; 0x40
 8009812:	9311      	str	r3, [sp, #68]	; 0x44
 8009814:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009818:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800981c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800981e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009820:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	930f      	str	r3, [sp, #60]	; 0x3c
 8009828:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800982c:	eeb0 0a48 	vmov.f32	s0, s16
 8009830:	eef0 0a68 	vmov.f32	s1, s17
 8009834:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009838:	f001 f9d0 	bl	800abdc <__ulp>
 800983c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009840:	ec53 2b10 	vmov	r2, r3, d0
 8009844:	f7f6 fed0 	bl	80005e8 <__aeabi_dmul>
 8009848:	ec53 2b18 	vmov	r2, r3, d8
 800984c:	f7f6 fd16 	bl	800027c <__adddf3>
 8009850:	4680      	mov	r8, r0
 8009852:	4689      	mov	r9, r1
 8009854:	e78d      	b.n	8009772 <_strtod_l+0xa82>
 8009856:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800985a:	e7db      	b.n	8009814 <_strtod_l+0xb24>
 800985c:	a314      	add	r3, pc, #80	; (adr r3, 80098b0 <_strtod_l+0xbc0>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f7 f933 	bl	8000acc <__aeabi_dcmplt>
 8009866:	e7b3      	b.n	80097d0 <_strtod_l+0xae0>
 8009868:	2300      	movs	r3, #0
 800986a:	930a      	str	r3, [sp, #40]	; 0x28
 800986c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800986e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	f7ff ba7c 	b.w	8008d6e <_strtod_l+0x7e>
 8009876:	2a65      	cmp	r2, #101	; 0x65
 8009878:	f43f ab75 	beq.w	8008f66 <_strtod_l+0x276>
 800987c:	2a45      	cmp	r2, #69	; 0x45
 800987e:	f43f ab72 	beq.w	8008f66 <_strtod_l+0x276>
 8009882:	2301      	movs	r3, #1
 8009884:	f7ff bbaa 	b.w	8008fdc <_strtod_l+0x2ec>
 8009888:	00000000 	.word	0x00000000
 800988c:	bff00000 	.word	0xbff00000
 8009890:	00000000 	.word	0x00000000
 8009894:	3ff00000 	.word	0x3ff00000
 8009898:	94a03595 	.word	0x94a03595
 800989c:	3fdfffff 	.word	0x3fdfffff
 80098a0:	35afe535 	.word	0x35afe535
 80098a4:	3fe00000 	.word	0x3fe00000
 80098a8:	ffc00000 	.word	0xffc00000
 80098ac:	41dfffff 	.word	0x41dfffff
 80098b0:	94a03595 	.word	0x94a03595
 80098b4:	3fcfffff 	.word	0x3fcfffff
 80098b8:	3ff00000 	.word	0x3ff00000
 80098bc:	3fe00000 	.word	0x3fe00000
 80098c0:	7ff00000 	.word	0x7ff00000
 80098c4:	7fe00000 	.word	0x7fe00000
 80098c8:	7c9fffff 	.word	0x7c9fffff
 80098cc:	7fefffff 	.word	0x7fefffff

080098d0 <strtod>:
 80098d0:	460a      	mov	r2, r1
 80098d2:	4601      	mov	r1, r0
 80098d4:	4802      	ldr	r0, [pc, #8]	; (80098e0 <strtod+0x10>)
 80098d6:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <strtod+0x14>)
 80098d8:	6800      	ldr	r0, [r0, #0]
 80098da:	f7ff ba09 	b.w	8008cf0 <_strtod_l>
 80098de:	bf00      	nop
 80098e0:	200001d0 	.word	0x200001d0
 80098e4:	20000018 	.word	0x20000018

080098e8 <std>:
 80098e8:	2300      	movs	r3, #0
 80098ea:	b510      	push	{r4, lr}
 80098ec:	4604      	mov	r4, r0
 80098ee:	e9c0 3300 	strd	r3, r3, [r0]
 80098f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f6:	6083      	str	r3, [r0, #8]
 80098f8:	8181      	strh	r1, [r0, #12]
 80098fa:	6643      	str	r3, [r0, #100]	; 0x64
 80098fc:	81c2      	strh	r2, [r0, #14]
 80098fe:	6183      	str	r3, [r0, #24]
 8009900:	4619      	mov	r1, r3
 8009902:	2208      	movs	r2, #8
 8009904:	305c      	adds	r0, #92	; 0x5c
 8009906:	f000 f8f4 	bl	8009af2 <memset>
 800990a:	4b0d      	ldr	r3, [pc, #52]	; (8009940 <std+0x58>)
 800990c:	6263      	str	r3, [r4, #36]	; 0x24
 800990e:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <std+0x5c>)
 8009910:	62a3      	str	r3, [r4, #40]	; 0x28
 8009912:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <std+0x60>)
 8009914:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009916:	4b0d      	ldr	r3, [pc, #52]	; (800994c <std+0x64>)
 8009918:	6323      	str	r3, [r4, #48]	; 0x30
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <std+0x68>)
 800991c:	6224      	str	r4, [r4, #32]
 800991e:	429c      	cmp	r4, r3
 8009920:	d006      	beq.n	8009930 <std+0x48>
 8009922:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009926:	4294      	cmp	r4, r2
 8009928:	d002      	beq.n	8009930 <std+0x48>
 800992a:	33d0      	adds	r3, #208	; 0xd0
 800992c:	429c      	cmp	r4, r3
 800992e:	d105      	bne.n	800993c <std+0x54>
 8009930:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009938:	f000 b966 	b.w	8009c08 <__retarget_lock_init_recursive>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	bf00      	nop
 8009940:	08009a6d 	.word	0x08009a6d
 8009944:	08009a8f 	.word	0x08009a8f
 8009948:	08009ac7 	.word	0x08009ac7
 800994c:	08009aeb 	.word	0x08009aeb
 8009950:	200009cc 	.word	0x200009cc

08009954 <stdio_exit_handler>:
 8009954:	4a02      	ldr	r2, [pc, #8]	; (8009960 <stdio_exit_handler+0xc>)
 8009956:	4903      	ldr	r1, [pc, #12]	; (8009964 <stdio_exit_handler+0x10>)
 8009958:	4803      	ldr	r0, [pc, #12]	; (8009968 <stdio_exit_handler+0x14>)
 800995a:	f000 b869 	b.w	8009a30 <_fwalk_sglue>
 800995e:	bf00      	nop
 8009960:	2000000c 	.word	0x2000000c
 8009964:	0800af85 	.word	0x0800af85
 8009968:	20000184 	.word	0x20000184

0800996c <cleanup_stdio>:
 800996c:	6841      	ldr	r1, [r0, #4]
 800996e:	4b0c      	ldr	r3, [pc, #48]	; (80099a0 <cleanup_stdio+0x34>)
 8009970:	4299      	cmp	r1, r3
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	d001      	beq.n	800997c <cleanup_stdio+0x10>
 8009978:	f001 fb04 	bl	800af84 <_fflush_r>
 800997c:	68a1      	ldr	r1, [r4, #8]
 800997e:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <cleanup_stdio+0x38>)
 8009980:	4299      	cmp	r1, r3
 8009982:	d002      	beq.n	800998a <cleanup_stdio+0x1e>
 8009984:	4620      	mov	r0, r4
 8009986:	f001 fafd 	bl	800af84 <_fflush_r>
 800998a:	68e1      	ldr	r1, [r4, #12]
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <cleanup_stdio+0x3c>)
 800998e:	4299      	cmp	r1, r3
 8009990:	d004      	beq.n	800999c <cleanup_stdio+0x30>
 8009992:	4620      	mov	r0, r4
 8009994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009998:	f001 baf4 	b.w	800af84 <_fflush_r>
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	200009cc 	.word	0x200009cc
 80099a4:	20000a34 	.word	0x20000a34
 80099a8:	20000a9c 	.word	0x20000a9c

080099ac <global_stdio_init.part.0>:
 80099ac:	b510      	push	{r4, lr}
 80099ae:	4b0b      	ldr	r3, [pc, #44]	; (80099dc <global_stdio_init.part.0+0x30>)
 80099b0:	4c0b      	ldr	r4, [pc, #44]	; (80099e0 <global_stdio_init.part.0+0x34>)
 80099b2:	4a0c      	ldr	r2, [pc, #48]	; (80099e4 <global_stdio_init.part.0+0x38>)
 80099b4:	601a      	str	r2, [r3, #0]
 80099b6:	4620      	mov	r0, r4
 80099b8:	2200      	movs	r2, #0
 80099ba:	2104      	movs	r1, #4
 80099bc:	f7ff ff94 	bl	80098e8 <std>
 80099c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80099c4:	2201      	movs	r2, #1
 80099c6:	2109      	movs	r1, #9
 80099c8:	f7ff ff8e 	bl	80098e8 <std>
 80099cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80099d0:	2202      	movs	r2, #2
 80099d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d6:	2112      	movs	r1, #18
 80099d8:	f7ff bf86 	b.w	80098e8 <std>
 80099dc:	20000b04 	.word	0x20000b04
 80099e0:	200009cc 	.word	0x200009cc
 80099e4:	08009955 	.word	0x08009955

080099e8 <__sfp_lock_acquire>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sfp_lock_acquire+0x8>)
 80099ea:	f000 b90e 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 80099ee:	bf00      	nop
 80099f0:	20000b0d 	.word	0x20000b0d

080099f4 <__sfp_lock_release>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__sfp_lock_release+0x8>)
 80099f6:	f000 b909 	b.w	8009c0c <__retarget_lock_release_recursive>
 80099fa:	bf00      	nop
 80099fc:	20000b0d 	.word	0x20000b0d

08009a00 <__sinit>:
 8009a00:	b510      	push	{r4, lr}
 8009a02:	4604      	mov	r4, r0
 8009a04:	f7ff fff0 	bl	80099e8 <__sfp_lock_acquire>
 8009a08:	6a23      	ldr	r3, [r4, #32]
 8009a0a:	b11b      	cbz	r3, 8009a14 <__sinit+0x14>
 8009a0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a10:	f7ff bff0 	b.w	80099f4 <__sfp_lock_release>
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <__sinit+0x28>)
 8009a16:	6223      	str	r3, [r4, #32]
 8009a18:	4b04      	ldr	r3, [pc, #16]	; (8009a2c <__sinit+0x2c>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1f5      	bne.n	8009a0c <__sinit+0xc>
 8009a20:	f7ff ffc4 	bl	80099ac <global_stdio_init.part.0>
 8009a24:	e7f2      	b.n	8009a0c <__sinit+0xc>
 8009a26:	bf00      	nop
 8009a28:	0800996d 	.word	0x0800996d
 8009a2c:	20000b04 	.word	0x20000b04

08009a30 <_fwalk_sglue>:
 8009a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a34:	4607      	mov	r7, r0
 8009a36:	4688      	mov	r8, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	2600      	movs	r6, #0
 8009a3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a40:	f1b9 0901 	subs.w	r9, r9, #1
 8009a44:	d505      	bpl.n	8009a52 <_fwalk_sglue+0x22>
 8009a46:	6824      	ldr	r4, [r4, #0]
 8009a48:	2c00      	cmp	r4, #0
 8009a4a:	d1f7      	bne.n	8009a3c <_fwalk_sglue+0xc>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a52:	89ab      	ldrh	r3, [r5, #12]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d907      	bls.n	8009a68 <_fwalk_sglue+0x38>
 8009a58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	d003      	beq.n	8009a68 <_fwalk_sglue+0x38>
 8009a60:	4629      	mov	r1, r5
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c0      	blx	r8
 8009a66:	4306      	orrs	r6, r0
 8009a68:	3568      	adds	r5, #104	; 0x68
 8009a6a:	e7e9      	b.n	8009a40 <_fwalk_sglue+0x10>

08009a6c <__sread>:
 8009a6c:	b510      	push	{r4, lr}
 8009a6e:	460c      	mov	r4, r1
 8009a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a74:	f000 f87a 	bl	8009b6c <_read_r>
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	bfab      	itete	ge
 8009a7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009a7e:	89a3      	ldrhlt	r3, [r4, #12]
 8009a80:	181b      	addge	r3, r3, r0
 8009a82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009a86:	bfac      	ite	ge
 8009a88:	6563      	strge	r3, [r4, #84]	; 0x54
 8009a8a:	81a3      	strhlt	r3, [r4, #12]
 8009a8c:	bd10      	pop	{r4, pc}

08009a8e <__swrite>:
 8009a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a92:	461f      	mov	r7, r3
 8009a94:	898b      	ldrh	r3, [r1, #12]
 8009a96:	05db      	lsls	r3, r3, #23
 8009a98:	4605      	mov	r5, r0
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	4616      	mov	r6, r2
 8009a9e:	d505      	bpl.n	8009aac <__swrite+0x1e>
 8009aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f000 f84e 	bl	8009b48 <_lseek_r>
 8009aac:	89a3      	ldrh	r3, [r4, #12]
 8009aae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ab6:	81a3      	strh	r3, [r4, #12]
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	4628      	mov	r0, r5
 8009abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac2:	f000 b865 	b.w	8009b90 <_write_r>

08009ac6 <__sseek>:
 8009ac6:	b510      	push	{r4, lr}
 8009ac8:	460c      	mov	r4, r1
 8009aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ace:	f000 f83b 	bl	8009b48 <_lseek_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	89a3      	ldrh	r3, [r4, #12]
 8009ad6:	bf15      	itete	ne
 8009ad8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ada:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ade:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009ae2:	81a3      	strheq	r3, [r4, #12]
 8009ae4:	bf18      	it	ne
 8009ae6:	81a3      	strhne	r3, [r4, #12]
 8009ae8:	bd10      	pop	{r4, pc}

08009aea <__sclose>:
 8009aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aee:	f000 b81b 	b.w	8009b28 <_close_r>

08009af2 <memset>:
 8009af2:	4402      	add	r2, r0
 8009af4:	4603      	mov	r3, r0
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d100      	bne.n	8009afc <memset+0xa>
 8009afa:	4770      	bx	lr
 8009afc:	f803 1b01 	strb.w	r1, [r3], #1
 8009b00:	e7f9      	b.n	8009af6 <memset+0x4>

08009b02 <strncmp>:
 8009b02:	b510      	push	{r4, lr}
 8009b04:	b16a      	cbz	r2, 8009b22 <strncmp+0x20>
 8009b06:	3901      	subs	r1, #1
 8009b08:	1884      	adds	r4, r0, r2
 8009b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b0e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d103      	bne.n	8009b1e <strncmp+0x1c>
 8009b16:	42a0      	cmp	r0, r4
 8009b18:	d001      	beq.n	8009b1e <strncmp+0x1c>
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d1f5      	bne.n	8009b0a <strncmp+0x8>
 8009b1e:	1ad0      	subs	r0, r2, r3
 8009b20:	bd10      	pop	{r4, pc}
 8009b22:	4610      	mov	r0, r2
 8009b24:	e7fc      	b.n	8009b20 <strncmp+0x1e>
	...

08009b28 <_close_r>:
 8009b28:	b538      	push	{r3, r4, r5, lr}
 8009b2a:	4d06      	ldr	r5, [pc, #24]	; (8009b44 <_close_r+0x1c>)
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4604      	mov	r4, r0
 8009b30:	4608      	mov	r0, r1
 8009b32:	602b      	str	r3, [r5, #0]
 8009b34:	f7fa f8ab 	bl	8003c8e <_close>
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	d102      	bne.n	8009b42 <_close_r+0x1a>
 8009b3c:	682b      	ldr	r3, [r5, #0]
 8009b3e:	b103      	cbz	r3, 8009b42 <_close_r+0x1a>
 8009b40:	6023      	str	r3, [r4, #0]
 8009b42:	bd38      	pop	{r3, r4, r5, pc}
 8009b44:	20000b08 	.word	0x20000b08

08009b48 <_lseek_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4d07      	ldr	r5, [pc, #28]	; (8009b68 <_lseek_r+0x20>)
 8009b4c:	4604      	mov	r4, r0
 8009b4e:	4608      	mov	r0, r1
 8009b50:	4611      	mov	r1, r2
 8009b52:	2200      	movs	r2, #0
 8009b54:	602a      	str	r2, [r5, #0]
 8009b56:	461a      	mov	r2, r3
 8009b58:	f7fa f8c0 	bl	8003cdc <_lseek>
 8009b5c:	1c43      	adds	r3, r0, #1
 8009b5e:	d102      	bne.n	8009b66 <_lseek_r+0x1e>
 8009b60:	682b      	ldr	r3, [r5, #0]
 8009b62:	b103      	cbz	r3, 8009b66 <_lseek_r+0x1e>
 8009b64:	6023      	str	r3, [r4, #0]
 8009b66:	bd38      	pop	{r3, r4, r5, pc}
 8009b68:	20000b08 	.word	0x20000b08

08009b6c <_read_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4d07      	ldr	r5, [pc, #28]	; (8009b8c <_read_r+0x20>)
 8009b70:	4604      	mov	r4, r0
 8009b72:	4608      	mov	r0, r1
 8009b74:	4611      	mov	r1, r2
 8009b76:	2200      	movs	r2, #0
 8009b78:	602a      	str	r2, [r5, #0]
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	f7fa f84e 	bl	8003c1c <_read>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d102      	bne.n	8009b8a <_read_r+0x1e>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	b103      	cbz	r3, 8009b8a <_read_r+0x1e>
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	bd38      	pop	{r3, r4, r5, pc}
 8009b8c:	20000b08 	.word	0x20000b08

08009b90 <_write_r>:
 8009b90:	b538      	push	{r3, r4, r5, lr}
 8009b92:	4d07      	ldr	r5, [pc, #28]	; (8009bb0 <_write_r+0x20>)
 8009b94:	4604      	mov	r4, r0
 8009b96:	4608      	mov	r0, r1
 8009b98:	4611      	mov	r1, r2
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	602a      	str	r2, [r5, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f7fa f859 	bl	8003c56 <_write>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_write_r+0x1e>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_write_r+0x1e>
 8009bac:	6023      	str	r3, [r4, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20000b08 	.word	0x20000b08

08009bb4 <__errno>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	; (8009bbc <__errno+0x8>)
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	200001d0 	.word	0x200001d0

08009bc0 <__libc_init_array>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4d0d      	ldr	r5, [pc, #52]	; (8009bf8 <__libc_init_array+0x38>)
 8009bc4:	4c0d      	ldr	r4, [pc, #52]	; (8009bfc <__libc_init_array+0x3c>)
 8009bc6:	1b64      	subs	r4, r4, r5
 8009bc8:	10a4      	asrs	r4, r4, #2
 8009bca:	2600      	movs	r6, #0
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	d109      	bne.n	8009be4 <__libc_init_array+0x24>
 8009bd0:	4d0b      	ldr	r5, [pc, #44]	; (8009c00 <__libc_init_array+0x40>)
 8009bd2:	4c0c      	ldr	r4, [pc, #48]	; (8009c04 <__libc_init_array+0x44>)
 8009bd4:	f001 fe94 	bl	800b900 <_init>
 8009bd8:	1b64      	subs	r4, r4, r5
 8009bda:	10a4      	asrs	r4, r4, #2
 8009bdc:	2600      	movs	r6, #0
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	d105      	bne.n	8009bee <__libc_init_array+0x2e>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be8:	4798      	blx	r3
 8009bea:	3601      	adds	r6, #1
 8009bec:	e7ee      	b.n	8009bcc <__libc_init_array+0xc>
 8009bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf2:	4798      	blx	r3
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	e7f2      	b.n	8009bde <__libc_init_array+0x1e>
 8009bf8:	0800bcfc 	.word	0x0800bcfc
 8009bfc:	0800bcfc 	.word	0x0800bcfc
 8009c00:	0800bcfc 	.word	0x0800bcfc
 8009c04:	0800bd00 	.word	0x0800bd00

08009c08 <__retarget_lock_init_recursive>:
 8009c08:	4770      	bx	lr

08009c0a <__retarget_lock_acquire_recursive>:
 8009c0a:	4770      	bx	lr

08009c0c <__retarget_lock_release_recursive>:
 8009c0c:	4770      	bx	lr

08009c0e <memcpy>:
 8009c0e:	440a      	add	r2, r1
 8009c10:	4291      	cmp	r1, r2
 8009c12:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c16:	d100      	bne.n	8009c1a <memcpy+0xc>
 8009c18:	4770      	bx	lr
 8009c1a:	b510      	push	{r4, lr}
 8009c1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c24:	4291      	cmp	r1, r2
 8009c26:	d1f9      	bne.n	8009c1c <memcpy+0xe>
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	0000      	movs	r0, r0
 8009c2c:	0000      	movs	r0, r0
	...

08009c30 <nan>:
 8009c30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009c38 <nan+0x8>
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	7ff80000 	.word	0x7ff80000

08009c40 <_free_r>:
 8009c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c42:	2900      	cmp	r1, #0
 8009c44:	d044      	beq.n	8009cd0 <_free_r+0x90>
 8009c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c4a:	9001      	str	r0, [sp, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f1a1 0404 	sub.w	r4, r1, #4
 8009c52:	bfb8      	it	lt
 8009c54:	18e4      	addlt	r4, r4, r3
 8009c56:	f000 fc49 	bl	800a4ec <__malloc_lock>
 8009c5a:	4a1e      	ldr	r2, [pc, #120]	; (8009cd4 <_free_r+0x94>)
 8009c5c:	9801      	ldr	r0, [sp, #4]
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	b933      	cbnz	r3, 8009c70 <_free_r+0x30>
 8009c62:	6063      	str	r3, [r4, #4]
 8009c64:	6014      	str	r4, [r2, #0]
 8009c66:	b003      	add	sp, #12
 8009c68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c6c:	f000 bc44 	b.w	800a4f8 <__malloc_unlock>
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	d908      	bls.n	8009c86 <_free_r+0x46>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	1961      	adds	r1, r4, r5
 8009c78:	428b      	cmp	r3, r1
 8009c7a:	bf01      	itttt	eq
 8009c7c:	6819      	ldreq	r1, [r3, #0]
 8009c7e:	685b      	ldreq	r3, [r3, #4]
 8009c80:	1949      	addeq	r1, r1, r5
 8009c82:	6021      	streq	r1, [r4, #0]
 8009c84:	e7ed      	b.n	8009c62 <_free_r+0x22>
 8009c86:	461a      	mov	r2, r3
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	b10b      	cbz	r3, 8009c90 <_free_r+0x50>
 8009c8c:	42a3      	cmp	r3, r4
 8009c8e:	d9fa      	bls.n	8009c86 <_free_r+0x46>
 8009c90:	6811      	ldr	r1, [r2, #0]
 8009c92:	1855      	adds	r5, r2, r1
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d10b      	bne.n	8009cb0 <_free_r+0x70>
 8009c98:	6824      	ldr	r4, [r4, #0]
 8009c9a:	4421      	add	r1, r4
 8009c9c:	1854      	adds	r4, r2, r1
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6011      	str	r1, [r2, #0]
 8009ca2:	d1e0      	bne.n	8009c66 <_free_r+0x26>
 8009ca4:	681c      	ldr	r4, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	6053      	str	r3, [r2, #4]
 8009caa:	440c      	add	r4, r1
 8009cac:	6014      	str	r4, [r2, #0]
 8009cae:	e7da      	b.n	8009c66 <_free_r+0x26>
 8009cb0:	d902      	bls.n	8009cb8 <_free_r+0x78>
 8009cb2:	230c      	movs	r3, #12
 8009cb4:	6003      	str	r3, [r0, #0]
 8009cb6:	e7d6      	b.n	8009c66 <_free_r+0x26>
 8009cb8:	6825      	ldr	r5, [r4, #0]
 8009cba:	1961      	adds	r1, r4, r5
 8009cbc:	428b      	cmp	r3, r1
 8009cbe:	bf04      	itt	eq
 8009cc0:	6819      	ldreq	r1, [r3, #0]
 8009cc2:	685b      	ldreq	r3, [r3, #4]
 8009cc4:	6063      	str	r3, [r4, #4]
 8009cc6:	bf04      	itt	eq
 8009cc8:	1949      	addeq	r1, r1, r5
 8009cca:	6021      	streq	r1, [r4, #0]
 8009ccc:	6054      	str	r4, [r2, #4]
 8009cce:	e7ca      	b.n	8009c66 <_free_r+0x26>
 8009cd0:	b003      	add	sp, #12
 8009cd2:	bd30      	pop	{r4, r5, pc}
 8009cd4:	20000b10 	.word	0x20000b10

08009cd8 <rshift>:
 8009cd8:	6903      	ldr	r3, [r0, #16]
 8009cda:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cde:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ce2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009ce6:	f100 0414 	add.w	r4, r0, #20
 8009cea:	dd45      	ble.n	8009d78 <rshift+0xa0>
 8009cec:	f011 011f 	ands.w	r1, r1, #31
 8009cf0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cf4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cf8:	d10c      	bne.n	8009d14 <rshift+0x3c>
 8009cfa:	f100 0710 	add.w	r7, r0, #16
 8009cfe:	4629      	mov	r1, r5
 8009d00:	42b1      	cmp	r1, r6
 8009d02:	d334      	bcc.n	8009d6e <rshift+0x96>
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	1eea      	subs	r2, r5, #3
 8009d0a:	4296      	cmp	r6, r2
 8009d0c:	bf38      	it	cc
 8009d0e:	2300      	movcc	r3, #0
 8009d10:	4423      	add	r3, r4
 8009d12:	e015      	b.n	8009d40 <rshift+0x68>
 8009d14:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009d18:	f1c1 0820 	rsb	r8, r1, #32
 8009d1c:	40cf      	lsrs	r7, r1
 8009d1e:	f105 0e04 	add.w	lr, r5, #4
 8009d22:	46a1      	mov	r9, r4
 8009d24:	4576      	cmp	r6, lr
 8009d26:	46f4      	mov	ip, lr
 8009d28:	d815      	bhi.n	8009d56 <rshift+0x7e>
 8009d2a:	1a9a      	subs	r2, r3, r2
 8009d2c:	0092      	lsls	r2, r2, #2
 8009d2e:	3a04      	subs	r2, #4
 8009d30:	3501      	adds	r5, #1
 8009d32:	42ae      	cmp	r6, r5
 8009d34:	bf38      	it	cc
 8009d36:	2200      	movcc	r2, #0
 8009d38:	18a3      	adds	r3, r4, r2
 8009d3a:	50a7      	str	r7, [r4, r2]
 8009d3c:	b107      	cbz	r7, 8009d40 <rshift+0x68>
 8009d3e:	3304      	adds	r3, #4
 8009d40:	1b1a      	subs	r2, r3, r4
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d48:	bf08      	it	eq
 8009d4a:	2300      	moveq	r3, #0
 8009d4c:	6102      	str	r2, [r0, #16]
 8009d4e:	bf08      	it	eq
 8009d50:	6143      	streq	r3, [r0, #20]
 8009d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d56:	f8dc c000 	ldr.w	ip, [ip]
 8009d5a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d5e:	ea4c 0707 	orr.w	r7, ip, r7
 8009d62:	f849 7b04 	str.w	r7, [r9], #4
 8009d66:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d6a:	40cf      	lsrs	r7, r1
 8009d6c:	e7da      	b.n	8009d24 <rshift+0x4c>
 8009d6e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d72:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d76:	e7c3      	b.n	8009d00 <rshift+0x28>
 8009d78:	4623      	mov	r3, r4
 8009d7a:	e7e1      	b.n	8009d40 <rshift+0x68>

08009d7c <__hexdig_fun>:
 8009d7c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d80:	2b09      	cmp	r3, #9
 8009d82:	d802      	bhi.n	8009d8a <__hexdig_fun+0xe>
 8009d84:	3820      	subs	r0, #32
 8009d86:	b2c0      	uxtb	r0, r0
 8009d88:	4770      	bx	lr
 8009d8a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d801      	bhi.n	8009d96 <__hexdig_fun+0x1a>
 8009d92:	3847      	subs	r0, #71	; 0x47
 8009d94:	e7f7      	b.n	8009d86 <__hexdig_fun+0xa>
 8009d96:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d9a:	2b05      	cmp	r3, #5
 8009d9c:	d801      	bhi.n	8009da2 <__hexdig_fun+0x26>
 8009d9e:	3827      	subs	r0, #39	; 0x27
 8009da0:	e7f1      	b.n	8009d86 <__hexdig_fun+0xa>
 8009da2:	2000      	movs	r0, #0
 8009da4:	4770      	bx	lr
	...

08009da8 <__gethex>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	4617      	mov	r7, r2
 8009dae:	680a      	ldr	r2, [r1, #0]
 8009db0:	b085      	sub	sp, #20
 8009db2:	f102 0b02 	add.w	fp, r2, #2
 8009db6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009dba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009dbe:	4681      	mov	r9, r0
 8009dc0:	468a      	mov	sl, r1
 8009dc2:	9302      	str	r3, [sp, #8]
 8009dc4:	32fe      	adds	r2, #254	; 0xfe
 8009dc6:	eb02 030b 	add.w	r3, r2, fp
 8009dca:	46d8      	mov	r8, fp
 8009dcc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009dd0:	9301      	str	r3, [sp, #4]
 8009dd2:	2830      	cmp	r0, #48	; 0x30
 8009dd4:	d0f7      	beq.n	8009dc6 <__gethex+0x1e>
 8009dd6:	f7ff ffd1 	bl	8009d7c <__hexdig_fun>
 8009dda:	4604      	mov	r4, r0
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d138      	bne.n	8009e52 <__gethex+0xaa>
 8009de0:	49a7      	ldr	r1, [pc, #668]	; (800a080 <__gethex+0x2d8>)
 8009de2:	2201      	movs	r2, #1
 8009de4:	4640      	mov	r0, r8
 8009de6:	f7ff fe8c 	bl	8009b02 <strncmp>
 8009dea:	4606      	mov	r6, r0
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d169      	bne.n	8009ec4 <__gethex+0x11c>
 8009df0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009df4:	465d      	mov	r5, fp
 8009df6:	f7ff ffc1 	bl	8009d7c <__hexdig_fun>
 8009dfa:	2800      	cmp	r0, #0
 8009dfc:	d064      	beq.n	8009ec8 <__gethex+0x120>
 8009dfe:	465a      	mov	r2, fp
 8009e00:	7810      	ldrb	r0, [r2, #0]
 8009e02:	2830      	cmp	r0, #48	; 0x30
 8009e04:	4690      	mov	r8, r2
 8009e06:	f102 0201 	add.w	r2, r2, #1
 8009e0a:	d0f9      	beq.n	8009e00 <__gethex+0x58>
 8009e0c:	f7ff ffb6 	bl	8009d7c <__hexdig_fun>
 8009e10:	2301      	movs	r3, #1
 8009e12:	fab0 f480 	clz	r4, r0
 8009e16:	0964      	lsrs	r4, r4, #5
 8009e18:	465e      	mov	r6, fp
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	4615      	mov	r5, r2
 8009e20:	3201      	adds	r2, #1
 8009e22:	7828      	ldrb	r0, [r5, #0]
 8009e24:	f7ff ffaa 	bl	8009d7c <__hexdig_fun>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d1f8      	bne.n	8009e1e <__gethex+0x76>
 8009e2c:	4994      	ldr	r1, [pc, #592]	; (800a080 <__gethex+0x2d8>)
 8009e2e:	2201      	movs	r2, #1
 8009e30:	4628      	mov	r0, r5
 8009e32:	f7ff fe66 	bl	8009b02 <strncmp>
 8009e36:	b978      	cbnz	r0, 8009e58 <__gethex+0xb0>
 8009e38:	b946      	cbnz	r6, 8009e4c <__gethex+0xa4>
 8009e3a:	1c6e      	adds	r6, r5, #1
 8009e3c:	4632      	mov	r2, r6
 8009e3e:	4615      	mov	r5, r2
 8009e40:	3201      	adds	r2, #1
 8009e42:	7828      	ldrb	r0, [r5, #0]
 8009e44:	f7ff ff9a 	bl	8009d7c <__hexdig_fun>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d1f8      	bne.n	8009e3e <__gethex+0x96>
 8009e4c:	1b73      	subs	r3, r6, r5
 8009e4e:	009e      	lsls	r6, r3, #2
 8009e50:	e004      	b.n	8009e5c <__gethex+0xb4>
 8009e52:	2400      	movs	r4, #0
 8009e54:	4626      	mov	r6, r4
 8009e56:	e7e1      	b.n	8009e1c <__gethex+0x74>
 8009e58:	2e00      	cmp	r6, #0
 8009e5a:	d1f7      	bne.n	8009e4c <__gethex+0xa4>
 8009e5c:	782b      	ldrb	r3, [r5, #0]
 8009e5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e62:	2b50      	cmp	r3, #80	; 0x50
 8009e64:	d13d      	bne.n	8009ee2 <__gethex+0x13a>
 8009e66:	786b      	ldrb	r3, [r5, #1]
 8009e68:	2b2b      	cmp	r3, #43	; 0x2b
 8009e6a:	d02f      	beq.n	8009ecc <__gethex+0x124>
 8009e6c:	2b2d      	cmp	r3, #45	; 0x2d
 8009e6e:	d031      	beq.n	8009ed4 <__gethex+0x12c>
 8009e70:	1c69      	adds	r1, r5, #1
 8009e72:	f04f 0b00 	mov.w	fp, #0
 8009e76:	7808      	ldrb	r0, [r1, #0]
 8009e78:	f7ff ff80 	bl	8009d7c <__hexdig_fun>
 8009e7c:	1e42      	subs	r2, r0, #1
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	2a18      	cmp	r2, #24
 8009e82:	d82e      	bhi.n	8009ee2 <__gethex+0x13a>
 8009e84:	f1a0 0210 	sub.w	r2, r0, #16
 8009e88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e8c:	f7ff ff76 	bl	8009d7c <__hexdig_fun>
 8009e90:	f100 3cff 	add.w	ip, r0, #4294967295
 8009e94:	fa5f fc8c 	uxtb.w	ip, ip
 8009e98:	f1bc 0f18 	cmp.w	ip, #24
 8009e9c:	d91d      	bls.n	8009eda <__gethex+0x132>
 8009e9e:	f1bb 0f00 	cmp.w	fp, #0
 8009ea2:	d000      	beq.n	8009ea6 <__gethex+0xfe>
 8009ea4:	4252      	negs	r2, r2
 8009ea6:	4416      	add	r6, r2
 8009ea8:	f8ca 1000 	str.w	r1, [sl]
 8009eac:	b1dc      	cbz	r4, 8009ee6 <__gethex+0x13e>
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bf14      	ite	ne
 8009eb4:	f04f 0800 	movne.w	r8, #0
 8009eb8:	f04f 0806 	moveq.w	r8, #6
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	b005      	add	sp, #20
 8009ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	4645      	mov	r5, r8
 8009ec6:	4626      	mov	r6, r4
 8009ec8:	2401      	movs	r4, #1
 8009eca:	e7c7      	b.n	8009e5c <__gethex+0xb4>
 8009ecc:	f04f 0b00 	mov.w	fp, #0
 8009ed0:	1ca9      	adds	r1, r5, #2
 8009ed2:	e7d0      	b.n	8009e76 <__gethex+0xce>
 8009ed4:	f04f 0b01 	mov.w	fp, #1
 8009ed8:	e7fa      	b.n	8009ed0 <__gethex+0x128>
 8009eda:	230a      	movs	r3, #10
 8009edc:	fb03 0002 	mla	r0, r3, r2, r0
 8009ee0:	e7d0      	b.n	8009e84 <__gethex+0xdc>
 8009ee2:	4629      	mov	r1, r5
 8009ee4:	e7e0      	b.n	8009ea8 <__gethex+0x100>
 8009ee6:	eba5 0308 	sub.w	r3, r5, r8
 8009eea:	3b01      	subs	r3, #1
 8009eec:	4621      	mov	r1, r4
 8009eee:	2b07      	cmp	r3, #7
 8009ef0:	dc0a      	bgt.n	8009f08 <__gethex+0x160>
 8009ef2:	4648      	mov	r0, r9
 8009ef4:	f000 fb06 	bl	800a504 <_Balloc>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	b940      	cbnz	r0, 8009f0e <__gethex+0x166>
 8009efc:	4b61      	ldr	r3, [pc, #388]	; (800a084 <__gethex+0x2dc>)
 8009efe:	4602      	mov	r2, r0
 8009f00:	21e4      	movs	r1, #228	; 0xe4
 8009f02:	4861      	ldr	r0, [pc, #388]	; (800a088 <__gethex+0x2e0>)
 8009f04:	f001 f876 	bl	800aff4 <__assert_func>
 8009f08:	3101      	adds	r1, #1
 8009f0a:	105b      	asrs	r3, r3, #1
 8009f0c:	e7ef      	b.n	8009eee <__gethex+0x146>
 8009f0e:	f100 0a14 	add.w	sl, r0, #20
 8009f12:	2300      	movs	r3, #0
 8009f14:	495a      	ldr	r1, [pc, #360]	; (800a080 <__gethex+0x2d8>)
 8009f16:	f8cd a004 	str.w	sl, [sp, #4]
 8009f1a:	469b      	mov	fp, r3
 8009f1c:	45a8      	cmp	r8, r5
 8009f1e:	d342      	bcc.n	8009fa6 <__gethex+0x1fe>
 8009f20:	9801      	ldr	r0, [sp, #4]
 8009f22:	f840 bb04 	str.w	fp, [r0], #4
 8009f26:	eba0 000a 	sub.w	r0, r0, sl
 8009f2a:	1080      	asrs	r0, r0, #2
 8009f2c:	6120      	str	r0, [r4, #16]
 8009f2e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009f32:	4658      	mov	r0, fp
 8009f34:	f000 fbd8 	bl	800a6e8 <__hi0bits>
 8009f38:	683d      	ldr	r5, [r7, #0]
 8009f3a:	eba8 0000 	sub.w	r0, r8, r0
 8009f3e:	42a8      	cmp	r0, r5
 8009f40:	dd59      	ble.n	8009ff6 <__gethex+0x24e>
 8009f42:	eba0 0805 	sub.w	r8, r0, r5
 8009f46:	4641      	mov	r1, r8
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 ff67 	bl	800ae1c <__any_on>
 8009f4e:	4683      	mov	fp, r0
 8009f50:	b1b8      	cbz	r0, 8009f82 <__gethex+0x1da>
 8009f52:	f108 33ff 	add.w	r3, r8, #4294967295
 8009f56:	1159      	asrs	r1, r3, #5
 8009f58:	f003 021f 	and.w	r2, r3, #31
 8009f5c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009f60:	f04f 0b01 	mov.w	fp, #1
 8009f64:	fa0b f202 	lsl.w	r2, fp, r2
 8009f68:	420a      	tst	r2, r1
 8009f6a:	d00a      	beq.n	8009f82 <__gethex+0x1da>
 8009f6c:	455b      	cmp	r3, fp
 8009f6e:	dd06      	ble.n	8009f7e <__gethex+0x1d6>
 8009f70:	f1a8 0102 	sub.w	r1, r8, #2
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 ff51 	bl	800ae1c <__any_on>
 8009f7a:	2800      	cmp	r0, #0
 8009f7c:	d138      	bne.n	8009ff0 <__gethex+0x248>
 8009f7e:	f04f 0b02 	mov.w	fp, #2
 8009f82:	4641      	mov	r1, r8
 8009f84:	4620      	mov	r0, r4
 8009f86:	f7ff fea7 	bl	8009cd8 <rshift>
 8009f8a:	4446      	add	r6, r8
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	42b3      	cmp	r3, r6
 8009f90:	da41      	bge.n	800a016 <__gethex+0x26e>
 8009f92:	4621      	mov	r1, r4
 8009f94:	4648      	mov	r0, r9
 8009f96:	f000 faf5 	bl	800a584 <_Bfree>
 8009f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009fa4:	e78a      	b.n	8009ebc <__gethex+0x114>
 8009fa6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009faa:	2a2e      	cmp	r2, #46	; 0x2e
 8009fac:	d014      	beq.n	8009fd8 <__gethex+0x230>
 8009fae:	2b20      	cmp	r3, #32
 8009fb0:	d106      	bne.n	8009fc0 <__gethex+0x218>
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	f843 bb04 	str.w	fp, [r3], #4
 8009fb8:	f04f 0b00 	mov.w	fp, #0
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	465b      	mov	r3, fp
 8009fc0:	7828      	ldrb	r0, [r5, #0]
 8009fc2:	9303      	str	r3, [sp, #12]
 8009fc4:	f7ff feda 	bl	8009d7c <__hexdig_fun>
 8009fc8:	9b03      	ldr	r3, [sp, #12]
 8009fca:	f000 000f 	and.w	r0, r0, #15
 8009fce:	4098      	lsls	r0, r3
 8009fd0:	ea4b 0b00 	orr.w	fp, fp, r0
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	e7a1      	b.n	8009f1c <__gethex+0x174>
 8009fd8:	45a8      	cmp	r8, r5
 8009fda:	d8e8      	bhi.n	8009fae <__gethex+0x206>
 8009fdc:	2201      	movs	r2, #1
 8009fde:	4628      	mov	r0, r5
 8009fe0:	9303      	str	r3, [sp, #12]
 8009fe2:	f7ff fd8e 	bl	8009b02 <strncmp>
 8009fe6:	4926      	ldr	r1, [pc, #152]	; (800a080 <__gethex+0x2d8>)
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d1df      	bne.n	8009fae <__gethex+0x206>
 8009fee:	e795      	b.n	8009f1c <__gethex+0x174>
 8009ff0:	f04f 0b03 	mov.w	fp, #3
 8009ff4:	e7c5      	b.n	8009f82 <__gethex+0x1da>
 8009ff6:	da0b      	bge.n	800a010 <__gethex+0x268>
 8009ff8:	eba5 0800 	sub.w	r8, r5, r0
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	4642      	mov	r2, r8
 800a000:	4648      	mov	r0, r9
 800a002:	f000 fcd9 	bl	800a9b8 <__lshift>
 800a006:	eba6 0608 	sub.w	r6, r6, r8
 800a00a:	4604      	mov	r4, r0
 800a00c:	f100 0a14 	add.w	sl, r0, #20
 800a010:	f04f 0b00 	mov.w	fp, #0
 800a014:	e7ba      	b.n	8009f8c <__gethex+0x1e4>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	42b3      	cmp	r3, r6
 800a01a:	dd73      	ble.n	800a104 <__gethex+0x35c>
 800a01c:	1b9e      	subs	r6, r3, r6
 800a01e:	42b5      	cmp	r5, r6
 800a020:	dc34      	bgt.n	800a08c <__gethex+0x2e4>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b02      	cmp	r3, #2
 800a026:	d023      	beq.n	800a070 <__gethex+0x2c8>
 800a028:	2b03      	cmp	r3, #3
 800a02a:	d025      	beq.n	800a078 <__gethex+0x2d0>
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d115      	bne.n	800a05c <__gethex+0x2b4>
 800a030:	42b5      	cmp	r5, r6
 800a032:	d113      	bne.n	800a05c <__gethex+0x2b4>
 800a034:	2d01      	cmp	r5, #1
 800a036:	d10b      	bne.n	800a050 <__gethex+0x2a8>
 800a038:	9a02      	ldr	r2, [sp, #8]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	2301      	movs	r3, #1
 800a040:	6123      	str	r3, [r4, #16]
 800a042:	f8ca 3000 	str.w	r3, [sl]
 800a046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a048:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a04c:	601c      	str	r4, [r3, #0]
 800a04e:	e735      	b.n	8009ebc <__gethex+0x114>
 800a050:	1e69      	subs	r1, r5, #1
 800a052:	4620      	mov	r0, r4
 800a054:	f000 fee2 	bl	800ae1c <__any_on>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d1ed      	bne.n	800a038 <__gethex+0x290>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4648      	mov	r0, r9
 800a060:	f000 fa90 	bl	800a584 <_Bfree>
 800a064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a066:	2300      	movs	r3, #0
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a06e:	e725      	b.n	8009ebc <__gethex+0x114>
 800a070:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1f2      	bne.n	800a05c <__gethex+0x2b4>
 800a076:	e7df      	b.n	800a038 <__gethex+0x290>
 800a078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1dc      	bne.n	800a038 <__gethex+0x290>
 800a07e:	e7ed      	b.n	800a05c <__gethex+0x2b4>
 800a080:	0800b938 	.word	0x0800b938
 800a084:	0800b9a0 	.word	0x0800b9a0
 800a088:	0800b9b1 	.word	0x0800b9b1
 800a08c:	f106 38ff 	add.w	r8, r6, #4294967295
 800a090:	f1bb 0f00 	cmp.w	fp, #0
 800a094:	d133      	bne.n	800a0fe <__gethex+0x356>
 800a096:	f1b8 0f00 	cmp.w	r8, #0
 800a09a:	d004      	beq.n	800a0a6 <__gethex+0x2fe>
 800a09c:	4641      	mov	r1, r8
 800a09e:	4620      	mov	r0, r4
 800a0a0:	f000 febc 	bl	800ae1c <__any_on>
 800a0a4:	4683      	mov	fp, r0
 800a0a6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a0b0:	f008 081f 	and.w	r8, r8, #31
 800a0b4:	fa03 f308 	lsl.w	r3, r3, r8
 800a0b8:	4213      	tst	r3, r2
 800a0ba:	4631      	mov	r1, r6
 800a0bc:	4620      	mov	r0, r4
 800a0be:	bf18      	it	ne
 800a0c0:	f04b 0b02 	orrne.w	fp, fp, #2
 800a0c4:	1bad      	subs	r5, r5, r6
 800a0c6:	f7ff fe07 	bl	8009cd8 <rshift>
 800a0ca:	687e      	ldr	r6, [r7, #4]
 800a0cc:	f04f 0802 	mov.w	r8, #2
 800a0d0:	f1bb 0f00 	cmp.w	fp, #0
 800a0d4:	d04a      	beq.n	800a16c <__gethex+0x3c4>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d016      	beq.n	800a10a <__gethex+0x362>
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d018      	beq.n	800a112 <__gethex+0x36a>
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d109      	bne.n	800a0f8 <__gethex+0x350>
 800a0e4:	f01b 0f02 	tst.w	fp, #2
 800a0e8:	d006      	beq.n	800a0f8 <__gethex+0x350>
 800a0ea:	f8da 3000 	ldr.w	r3, [sl]
 800a0ee:	ea4b 0b03 	orr.w	fp, fp, r3
 800a0f2:	f01b 0f01 	tst.w	fp, #1
 800a0f6:	d10f      	bne.n	800a118 <__gethex+0x370>
 800a0f8:	f048 0810 	orr.w	r8, r8, #16
 800a0fc:	e036      	b.n	800a16c <__gethex+0x3c4>
 800a0fe:	f04f 0b01 	mov.w	fp, #1
 800a102:	e7d0      	b.n	800a0a6 <__gethex+0x2fe>
 800a104:	f04f 0801 	mov.w	r8, #1
 800a108:	e7e2      	b.n	800a0d0 <__gethex+0x328>
 800a10a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a10c:	f1c3 0301 	rsb	r3, r3, #1
 800a110:	930f      	str	r3, [sp, #60]	; 0x3c
 800a112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0ef      	beq.n	800a0f8 <__gethex+0x350>
 800a118:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a11c:	f104 0214 	add.w	r2, r4, #20
 800a120:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a12a:	2300      	movs	r3, #0
 800a12c:	4694      	mov	ip, r2
 800a12e:	f852 1b04 	ldr.w	r1, [r2], #4
 800a132:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a136:	d01e      	beq.n	800a176 <__gethex+0x3ce>
 800a138:	3101      	adds	r1, #1
 800a13a:	f8cc 1000 	str.w	r1, [ip]
 800a13e:	f1b8 0f02 	cmp.w	r8, #2
 800a142:	f104 0214 	add.w	r2, r4, #20
 800a146:	d13d      	bne.n	800a1c4 <__gethex+0x41c>
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	42ab      	cmp	r3, r5
 800a14e:	d10b      	bne.n	800a168 <__gethex+0x3c0>
 800a150:	1169      	asrs	r1, r5, #5
 800a152:	2301      	movs	r3, #1
 800a154:	f005 051f 	and.w	r5, r5, #31
 800a158:	fa03 f505 	lsl.w	r5, r3, r5
 800a15c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a160:	421d      	tst	r5, r3
 800a162:	bf18      	it	ne
 800a164:	f04f 0801 	movne.w	r8, #1
 800a168:	f048 0820 	orr.w	r8, r8, #32
 800a16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a16e:	601c      	str	r4, [r3, #0]
 800a170:	9b02      	ldr	r3, [sp, #8]
 800a172:	601e      	str	r6, [r3, #0]
 800a174:	e6a2      	b.n	8009ebc <__gethex+0x114>
 800a176:	4290      	cmp	r0, r2
 800a178:	f842 3c04 	str.w	r3, [r2, #-4]
 800a17c:	d8d6      	bhi.n	800a12c <__gethex+0x384>
 800a17e:	68a2      	ldr	r2, [r4, #8]
 800a180:	4593      	cmp	fp, r2
 800a182:	db17      	blt.n	800a1b4 <__gethex+0x40c>
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	4648      	mov	r0, r9
 800a188:	3101      	adds	r1, #1
 800a18a:	f000 f9bb 	bl	800a504 <_Balloc>
 800a18e:	4682      	mov	sl, r0
 800a190:	b918      	cbnz	r0, 800a19a <__gethex+0x3f2>
 800a192:	4b1b      	ldr	r3, [pc, #108]	; (800a200 <__gethex+0x458>)
 800a194:	4602      	mov	r2, r0
 800a196:	2184      	movs	r1, #132	; 0x84
 800a198:	e6b3      	b.n	8009f02 <__gethex+0x15a>
 800a19a:	6922      	ldr	r2, [r4, #16]
 800a19c:	3202      	adds	r2, #2
 800a19e:	f104 010c 	add.w	r1, r4, #12
 800a1a2:	0092      	lsls	r2, r2, #2
 800a1a4:	300c      	adds	r0, #12
 800a1a6:	f7ff fd32 	bl	8009c0e <memcpy>
 800a1aa:	4621      	mov	r1, r4
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f000 f9e9 	bl	800a584 <_Bfree>
 800a1b2:	4654      	mov	r4, sl
 800a1b4:	6922      	ldr	r2, [r4, #16]
 800a1b6:	1c51      	adds	r1, r2, #1
 800a1b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a1bc:	6121      	str	r1, [r4, #16]
 800a1be:	2101      	movs	r1, #1
 800a1c0:	6151      	str	r1, [r2, #20]
 800a1c2:	e7bc      	b.n	800a13e <__gethex+0x396>
 800a1c4:	6921      	ldr	r1, [r4, #16]
 800a1c6:	4559      	cmp	r1, fp
 800a1c8:	dd0b      	ble.n	800a1e2 <__gethex+0x43a>
 800a1ca:	2101      	movs	r1, #1
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	f7ff fd83 	bl	8009cd8 <rshift>
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	3601      	adds	r6, #1
 800a1d6:	42b3      	cmp	r3, r6
 800a1d8:	f6ff aedb 	blt.w	8009f92 <__gethex+0x1ea>
 800a1dc:	f04f 0801 	mov.w	r8, #1
 800a1e0:	e7c2      	b.n	800a168 <__gethex+0x3c0>
 800a1e2:	f015 051f 	ands.w	r5, r5, #31
 800a1e6:	d0f9      	beq.n	800a1dc <__gethex+0x434>
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	441a      	add	r2, r3
 800a1ec:	f1c5 0520 	rsb	r5, r5, #32
 800a1f0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a1f4:	f000 fa78 	bl	800a6e8 <__hi0bits>
 800a1f8:	42a8      	cmp	r0, r5
 800a1fa:	dbe6      	blt.n	800a1ca <__gethex+0x422>
 800a1fc:	e7ee      	b.n	800a1dc <__gethex+0x434>
 800a1fe:	bf00      	nop
 800a200:	0800b9a0 	.word	0x0800b9a0

0800a204 <L_shift>:
 800a204:	f1c2 0208 	rsb	r2, r2, #8
 800a208:	0092      	lsls	r2, r2, #2
 800a20a:	b570      	push	{r4, r5, r6, lr}
 800a20c:	f1c2 0620 	rsb	r6, r2, #32
 800a210:	6843      	ldr	r3, [r0, #4]
 800a212:	6804      	ldr	r4, [r0, #0]
 800a214:	fa03 f506 	lsl.w	r5, r3, r6
 800a218:	432c      	orrs	r4, r5
 800a21a:	40d3      	lsrs	r3, r2
 800a21c:	6004      	str	r4, [r0, #0]
 800a21e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a222:	4288      	cmp	r0, r1
 800a224:	d3f4      	bcc.n	800a210 <L_shift+0xc>
 800a226:	bd70      	pop	{r4, r5, r6, pc}

0800a228 <__match>:
 800a228:	b530      	push	{r4, r5, lr}
 800a22a:	6803      	ldr	r3, [r0, #0]
 800a22c:	3301      	adds	r3, #1
 800a22e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a232:	b914      	cbnz	r4, 800a23a <__match+0x12>
 800a234:	6003      	str	r3, [r0, #0]
 800a236:	2001      	movs	r0, #1
 800a238:	bd30      	pop	{r4, r5, pc}
 800a23a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a23e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a242:	2d19      	cmp	r5, #25
 800a244:	bf98      	it	ls
 800a246:	3220      	addls	r2, #32
 800a248:	42a2      	cmp	r2, r4
 800a24a:	d0f0      	beq.n	800a22e <__match+0x6>
 800a24c:	2000      	movs	r0, #0
 800a24e:	e7f3      	b.n	800a238 <__match+0x10>

0800a250 <__hexnan>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	680b      	ldr	r3, [r1, #0]
 800a256:	6801      	ldr	r1, [r0, #0]
 800a258:	115e      	asrs	r6, r3, #5
 800a25a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a25e:	f013 031f 	ands.w	r3, r3, #31
 800a262:	b087      	sub	sp, #28
 800a264:	bf18      	it	ne
 800a266:	3604      	addne	r6, #4
 800a268:	2500      	movs	r5, #0
 800a26a:	1f37      	subs	r7, r6, #4
 800a26c:	4682      	mov	sl, r0
 800a26e:	4690      	mov	r8, r2
 800a270:	9301      	str	r3, [sp, #4]
 800a272:	f846 5c04 	str.w	r5, [r6, #-4]
 800a276:	46b9      	mov	r9, r7
 800a278:	463c      	mov	r4, r7
 800a27a:	9502      	str	r5, [sp, #8]
 800a27c:	46ab      	mov	fp, r5
 800a27e:	784a      	ldrb	r2, [r1, #1]
 800a280:	1c4b      	adds	r3, r1, #1
 800a282:	9303      	str	r3, [sp, #12]
 800a284:	b342      	cbz	r2, 800a2d8 <__hexnan+0x88>
 800a286:	4610      	mov	r0, r2
 800a288:	9105      	str	r1, [sp, #20]
 800a28a:	9204      	str	r2, [sp, #16]
 800a28c:	f7ff fd76 	bl	8009d7c <__hexdig_fun>
 800a290:	2800      	cmp	r0, #0
 800a292:	d14f      	bne.n	800a334 <__hexnan+0xe4>
 800a294:	9a04      	ldr	r2, [sp, #16]
 800a296:	9905      	ldr	r1, [sp, #20]
 800a298:	2a20      	cmp	r2, #32
 800a29a:	d818      	bhi.n	800a2ce <__hexnan+0x7e>
 800a29c:	9b02      	ldr	r3, [sp, #8]
 800a29e:	459b      	cmp	fp, r3
 800a2a0:	dd13      	ble.n	800a2ca <__hexnan+0x7a>
 800a2a2:	454c      	cmp	r4, r9
 800a2a4:	d206      	bcs.n	800a2b4 <__hexnan+0x64>
 800a2a6:	2d07      	cmp	r5, #7
 800a2a8:	dc04      	bgt.n	800a2b4 <__hexnan+0x64>
 800a2aa:	462a      	mov	r2, r5
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f7ff ffa8 	bl	800a204 <L_shift>
 800a2b4:	4544      	cmp	r4, r8
 800a2b6:	d950      	bls.n	800a35a <__hexnan+0x10a>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f1a4 0904 	sub.w	r9, r4, #4
 800a2be:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2c2:	f8cd b008 	str.w	fp, [sp, #8]
 800a2c6:	464c      	mov	r4, r9
 800a2c8:	461d      	mov	r5, r3
 800a2ca:	9903      	ldr	r1, [sp, #12]
 800a2cc:	e7d7      	b.n	800a27e <__hexnan+0x2e>
 800a2ce:	2a29      	cmp	r2, #41	; 0x29
 800a2d0:	d155      	bne.n	800a37e <__hexnan+0x12e>
 800a2d2:	3102      	adds	r1, #2
 800a2d4:	f8ca 1000 	str.w	r1, [sl]
 800a2d8:	f1bb 0f00 	cmp.w	fp, #0
 800a2dc:	d04f      	beq.n	800a37e <__hexnan+0x12e>
 800a2de:	454c      	cmp	r4, r9
 800a2e0:	d206      	bcs.n	800a2f0 <__hexnan+0xa0>
 800a2e2:	2d07      	cmp	r5, #7
 800a2e4:	dc04      	bgt.n	800a2f0 <__hexnan+0xa0>
 800a2e6:	462a      	mov	r2, r5
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f7ff ff8a 	bl	800a204 <L_shift>
 800a2f0:	4544      	cmp	r4, r8
 800a2f2:	d934      	bls.n	800a35e <__hexnan+0x10e>
 800a2f4:	f1a8 0204 	sub.w	r2, r8, #4
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a2fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800a302:	429f      	cmp	r7, r3
 800a304:	d2f9      	bcs.n	800a2fa <__hexnan+0xaa>
 800a306:	1b3b      	subs	r3, r7, r4
 800a308:	f023 0303 	bic.w	r3, r3, #3
 800a30c:	3304      	adds	r3, #4
 800a30e:	3e03      	subs	r6, #3
 800a310:	3401      	adds	r4, #1
 800a312:	42a6      	cmp	r6, r4
 800a314:	bf38      	it	cc
 800a316:	2304      	movcc	r3, #4
 800a318:	4443      	add	r3, r8
 800a31a:	2200      	movs	r2, #0
 800a31c:	f843 2b04 	str.w	r2, [r3], #4
 800a320:	429f      	cmp	r7, r3
 800a322:	d2fb      	bcs.n	800a31c <__hexnan+0xcc>
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	b91b      	cbnz	r3, 800a330 <__hexnan+0xe0>
 800a328:	4547      	cmp	r7, r8
 800a32a:	d126      	bne.n	800a37a <__hexnan+0x12a>
 800a32c:	2301      	movs	r3, #1
 800a32e:	603b      	str	r3, [r7, #0]
 800a330:	2005      	movs	r0, #5
 800a332:	e025      	b.n	800a380 <__hexnan+0x130>
 800a334:	3501      	adds	r5, #1
 800a336:	2d08      	cmp	r5, #8
 800a338:	f10b 0b01 	add.w	fp, fp, #1
 800a33c:	dd06      	ble.n	800a34c <__hexnan+0xfc>
 800a33e:	4544      	cmp	r4, r8
 800a340:	d9c3      	bls.n	800a2ca <__hexnan+0x7a>
 800a342:	2300      	movs	r3, #0
 800a344:	f844 3c04 	str.w	r3, [r4, #-4]
 800a348:	2501      	movs	r5, #1
 800a34a:	3c04      	subs	r4, #4
 800a34c:	6822      	ldr	r2, [r4, #0]
 800a34e:	f000 000f 	and.w	r0, r0, #15
 800a352:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a356:	6020      	str	r0, [r4, #0]
 800a358:	e7b7      	b.n	800a2ca <__hexnan+0x7a>
 800a35a:	2508      	movs	r5, #8
 800a35c:	e7b5      	b.n	800a2ca <__hexnan+0x7a>
 800a35e:	9b01      	ldr	r3, [sp, #4]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d0df      	beq.n	800a324 <__hexnan+0xd4>
 800a364:	f1c3 0320 	rsb	r3, r3, #32
 800a368:	f04f 32ff 	mov.w	r2, #4294967295
 800a36c:	40da      	lsrs	r2, r3
 800a36e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a372:	4013      	ands	r3, r2
 800a374:	f846 3c04 	str.w	r3, [r6, #-4]
 800a378:	e7d4      	b.n	800a324 <__hexnan+0xd4>
 800a37a:	3f04      	subs	r7, #4
 800a37c:	e7d2      	b.n	800a324 <__hexnan+0xd4>
 800a37e:	2004      	movs	r0, #4
 800a380:	b007      	add	sp, #28
 800a382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a388 <sbrk_aligned>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4e0e      	ldr	r6, [pc, #56]	; (800a3c4 <sbrk_aligned+0x3c>)
 800a38c:	460c      	mov	r4, r1
 800a38e:	6831      	ldr	r1, [r6, #0]
 800a390:	4605      	mov	r5, r0
 800a392:	b911      	cbnz	r1, 800a39a <sbrk_aligned+0x12>
 800a394:	f000 fe1e 	bl	800afd4 <_sbrk_r>
 800a398:	6030      	str	r0, [r6, #0]
 800a39a:	4621      	mov	r1, r4
 800a39c:	4628      	mov	r0, r5
 800a39e:	f000 fe19 	bl	800afd4 <_sbrk_r>
 800a3a2:	1c43      	adds	r3, r0, #1
 800a3a4:	d00a      	beq.n	800a3bc <sbrk_aligned+0x34>
 800a3a6:	1cc4      	adds	r4, r0, #3
 800a3a8:	f024 0403 	bic.w	r4, r4, #3
 800a3ac:	42a0      	cmp	r0, r4
 800a3ae:	d007      	beq.n	800a3c0 <sbrk_aligned+0x38>
 800a3b0:	1a21      	subs	r1, r4, r0
 800a3b2:	4628      	mov	r0, r5
 800a3b4:	f000 fe0e 	bl	800afd4 <_sbrk_r>
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d101      	bne.n	800a3c0 <sbrk_aligned+0x38>
 800a3bc:	f04f 34ff 	mov.w	r4, #4294967295
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	bd70      	pop	{r4, r5, r6, pc}
 800a3c4:	20000b14 	.word	0x20000b14

0800a3c8 <_malloc_r>:
 800a3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3cc:	1ccd      	adds	r5, r1, #3
 800a3ce:	f025 0503 	bic.w	r5, r5, #3
 800a3d2:	3508      	adds	r5, #8
 800a3d4:	2d0c      	cmp	r5, #12
 800a3d6:	bf38      	it	cc
 800a3d8:	250c      	movcc	r5, #12
 800a3da:	2d00      	cmp	r5, #0
 800a3dc:	4607      	mov	r7, r0
 800a3de:	db01      	blt.n	800a3e4 <_malloc_r+0x1c>
 800a3e0:	42a9      	cmp	r1, r5
 800a3e2:	d905      	bls.n	800a3f0 <_malloc_r+0x28>
 800a3e4:	230c      	movs	r3, #12
 800a3e6:	603b      	str	r3, [r7, #0]
 800a3e8:	2600      	movs	r6, #0
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4c4 <_malloc_r+0xfc>
 800a3f4:	f000 f87a 	bl	800a4ec <__malloc_lock>
 800a3f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3fc:	461c      	mov	r4, r3
 800a3fe:	bb5c      	cbnz	r4, 800a458 <_malloc_r+0x90>
 800a400:	4629      	mov	r1, r5
 800a402:	4638      	mov	r0, r7
 800a404:	f7ff ffc0 	bl	800a388 <sbrk_aligned>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	4604      	mov	r4, r0
 800a40c:	d155      	bne.n	800a4ba <_malloc_r+0xf2>
 800a40e:	f8d8 4000 	ldr.w	r4, [r8]
 800a412:	4626      	mov	r6, r4
 800a414:	2e00      	cmp	r6, #0
 800a416:	d145      	bne.n	800a4a4 <_malloc_r+0xdc>
 800a418:	2c00      	cmp	r4, #0
 800a41a:	d048      	beq.n	800a4ae <_malloc_r+0xe6>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	4631      	mov	r1, r6
 800a420:	4638      	mov	r0, r7
 800a422:	eb04 0903 	add.w	r9, r4, r3
 800a426:	f000 fdd5 	bl	800afd4 <_sbrk_r>
 800a42a:	4581      	cmp	r9, r0
 800a42c:	d13f      	bne.n	800a4ae <_malloc_r+0xe6>
 800a42e:	6821      	ldr	r1, [r4, #0]
 800a430:	1a6d      	subs	r5, r5, r1
 800a432:	4629      	mov	r1, r5
 800a434:	4638      	mov	r0, r7
 800a436:	f7ff ffa7 	bl	800a388 <sbrk_aligned>
 800a43a:	3001      	adds	r0, #1
 800a43c:	d037      	beq.n	800a4ae <_malloc_r+0xe6>
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	442b      	add	r3, r5
 800a442:	6023      	str	r3, [r4, #0]
 800a444:	f8d8 3000 	ldr.w	r3, [r8]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d038      	beq.n	800a4be <_malloc_r+0xf6>
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	42a2      	cmp	r2, r4
 800a450:	d12b      	bne.n	800a4aa <_malloc_r+0xe2>
 800a452:	2200      	movs	r2, #0
 800a454:	605a      	str	r2, [r3, #4]
 800a456:	e00f      	b.n	800a478 <_malloc_r+0xb0>
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	1b52      	subs	r2, r2, r5
 800a45c:	d41f      	bmi.n	800a49e <_malloc_r+0xd6>
 800a45e:	2a0b      	cmp	r2, #11
 800a460:	d917      	bls.n	800a492 <_malloc_r+0xca>
 800a462:	1961      	adds	r1, r4, r5
 800a464:	42a3      	cmp	r3, r4
 800a466:	6025      	str	r5, [r4, #0]
 800a468:	bf18      	it	ne
 800a46a:	6059      	strne	r1, [r3, #4]
 800a46c:	6863      	ldr	r3, [r4, #4]
 800a46e:	bf08      	it	eq
 800a470:	f8c8 1000 	streq.w	r1, [r8]
 800a474:	5162      	str	r2, [r4, r5]
 800a476:	604b      	str	r3, [r1, #4]
 800a478:	4638      	mov	r0, r7
 800a47a:	f104 060b 	add.w	r6, r4, #11
 800a47e:	f000 f83b 	bl	800a4f8 <__malloc_unlock>
 800a482:	f026 0607 	bic.w	r6, r6, #7
 800a486:	1d23      	adds	r3, r4, #4
 800a488:	1af2      	subs	r2, r6, r3
 800a48a:	d0ae      	beq.n	800a3ea <_malloc_r+0x22>
 800a48c:	1b9b      	subs	r3, r3, r6
 800a48e:	50a3      	str	r3, [r4, r2]
 800a490:	e7ab      	b.n	800a3ea <_malloc_r+0x22>
 800a492:	42a3      	cmp	r3, r4
 800a494:	6862      	ldr	r2, [r4, #4]
 800a496:	d1dd      	bne.n	800a454 <_malloc_r+0x8c>
 800a498:	f8c8 2000 	str.w	r2, [r8]
 800a49c:	e7ec      	b.n	800a478 <_malloc_r+0xb0>
 800a49e:	4623      	mov	r3, r4
 800a4a0:	6864      	ldr	r4, [r4, #4]
 800a4a2:	e7ac      	b.n	800a3fe <_malloc_r+0x36>
 800a4a4:	4634      	mov	r4, r6
 800a4a6:	6876      	ldr	r6, [r6, #4]
 800a4a8:	e7b4      	b.n	800a414 <_malloc_r+0x4c>
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	e7cc      	b.n	800a448 <_malloc_r+0x80>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	603b      	str	r3, [r7, #0]
 800a4b2:	4638      	mov	r0, r7
 800a4b4:	f000 f820 	bl	800a4f8 <__malloc_unlock>
 800a4b8:	e797      	b.n	800a3ea <_malloc_r+0x22>
 800a4ba:	6025      	str	r5, [r4, #0]
 800a4bc:	e7dc      	b.n	800a478 <_malloc_r+0xb0>
 800a4be:	605b      	str	r3, [r3, #4]
 800a4c0:	deff      	udf	#255	; 0xff
 800a4c2:	bf00      	nop
 800a4c4:	20000b10 	.word	0x20000b10

0800a4c8 <__ascii_mbtowc>:
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	b901      	cbnz	r1, 800a4ce <__ascii_mbtowc+0x6>
 800a4cc:	a901      	add	r1, sp, #4
 800a4ce:	b142      	cbz	r2, 800a4e2 <__ascii_mbtowc+0x1a>
 800a4d0:	b14b      	cbz	r3, 800a4e6 <__ascii_mbtowc+0x1e>
 800a4d2:	7813      	ldrb	r3, [r2, #0]
 800a4d4:	600b      	str	r3, [r1, #0]
 800a4d6:	7812      	ldrb	r2, [r2, #0]
 800a4d8:	1e10      	subs	r0, r2, #0
 800a4da:	bf18      	it	ne
 800a4dc:	2001      	movne	r0, #1
 800a4de:	b002      	add	sp, #8
 800a4e0:	4770      	bx	lr
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	e7fb      	b.n	800a4de <__ascii_mbtowc+0x16>
 800a4e6:	f06f 0001 	mvn.w	r0, #1
 800a4ea:	e7f8      	b.n	800a4de <__ascii_mbtowc+0x16>

0800a4ec <__malloc_lock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__malloc_lock+0x8>)
 800a4ee:	f7ff bb8c 	b.w	8009c0a <__retarget_lock_acquire_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20000b0c 	.word	0x20000b0c

0800a4f8 <__malloc_unlock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__malloc_unlock+0x8>)
 800a4fa:	f7ff bb87 	b.w	8009c0c <__retarget_lock_release_recursive>
 800a4fe:	bf00      	nop
 800a500:	20000b0c 	.word	0x20000b0c

0800a504 <_Balloc>:
 800a504:	b570      	push	{r4, r5, r6, lr}
 800a506:	69c6      	ldr	r6, [r0, #28]
 800a508:	4604      	mov	r4, r0
 800a50a:	460d      	mov	r5, r1
 800a50c:	b976      	cbnz	r6, 800a52c <_Balloc+0x28>
 800a50e:	2010      	movs	r0, #16
 800a510:	f000 fda4 	bl	800b05c <malloc>
 800a514:	4602      	mov	r2, r0
 800a516:	61e0      	str	r0, [r4, #28]
 800a518:	b920      	cbnz	r0, 800a524 <_Balloc+0x20>
 800a51a:	4b18      	ldr	r3, [pc, #96]	; (800a57c <_Balloc+0x78>)
 800a51c:	4818      	ldr	r0, [pc, #96]	; (800a580 <_Balloc+0x7c>)
 800a51e:	216b      	movs	r1, #107	; 0x6b
 800a520:	f000 fd68 	bl	800aff4 <__assert_func>
 800a524:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a528:	6006      	str	r6, [r0, #0]
 800a52a:	60c6      	str	r6, [r0, #12]
 800a52c:	69e6      	ldr	r6, [r4, #28]
 800a52e:	68f3      	ldr	r3, [r6, #12]
 800a530:	b183      	cbz	r3, 800a554 <_Balloc+0x50>
 800a532:	69e3      	ldr	r3, [r4, #28]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a53a:	b9b8      	cbnz	r0, 800a56c <_Balloc+0x68>
 800a53c:	2101      	movs	r1, #1
 800a53e:	fa01 f605 	lsl.w	r6, r1, r5
 800a542:	1d72      	adds	r2, r6, #5
 800a544:	0092      	lsls	r2, r2, #2
 800a546:	4620      	mov	r0, r4
 800a548:	f000 fd72 	bl	800b030 <_calloc_r>
 800a54c:	b160      	cbz	r0, 800a568 <_Balloc+0x64>
 800a54e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a552:	e00e      	b.n	800a572 <_Balloc+0x6e>
 800a554:	2221      	movs	r2, #33	; 0x21
 800a556:	2104      	movs	r1, #4
 800a558:	4620      	mov	r0, r4
 800a55a:	f000 fd69 	bl	800b030 <_calloc_r>
 800a55e:	69e3      	ldr	r3, [r4, #28]
 800a560:	60f0      	str	r0, [r6, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e4      	bne.n	800a532 <_Balloc+0x2e>
 800a568:	2000      	movs	r0, #0
 800a56a:	bd70      	pop	{r4, r5, r6, pc}
 800a56c:	6802      	ldr	r2, [r0, #0]
 800a56e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a572:	2300      	movs	r3, #0
 800a574:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a578:	e7f7      	b.n	800a56a <_Balloc+0x66>
 800a57a:	bf00      	nop
 800a57c:	0800ba11 	.word	0x0800ba11
 800a580:	0800ba28 	.word	0x0800ba28

0800a584 <_Bfree>:
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	69c6      	ldr	r6, [r0, #28]
 800a588:	4605      	mov	r5, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	b976      	cbnz	r6, 800a5ac <_Bfree+0x28>
 800a58e:	2010      	movs	r0, #16
 800a590:	f000 fd64 	bl	800b05c <malloc>
 800a594:	4602      	mov	r2, r0
 800a596:	61e8      	str	r0, [r5, #28]
 800a598:	b920      	cbnz	r0, 800a5a4 <_Bfree+0x20>
 800a59a:	4b09      	ldr	r3, [pc, #36]	; (800a5c0 <_Bfree+0x3c>)
 800a59c:	4809      	ldr	r0, [pc, #36]	; (800a5c4 <_Bfree+0x40>)
 800a59e:	218f      	movs	r1, #143	; 0x8f
 800a5a0:	f000 fd28 	bl	800aff4 <__assert_func>
 800a5a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5a8:	6006      	str	r6, [r0, #0]
 800a5aa:	60c6      	str	r6, [r0, #12]
 800a5ac:	b13c      	cbz	r4, 800a5be <_Bfree+0x3a>
 800a5ae:	69eb      	ldr	r3, [r5, #28]
 800a5b0:	6862      	ldr	r2, [r4, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5b8:	6021      	str	r1, [r4, #0]
 800a5ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5be:	bd70      	pop	{r4, r5, r6, pc}
 800a5c0:	0800ba11 	.word	0x0800ba11
 800a5c4:	0800ba28 	.word	0x0800ba28

0800a5c8 <__multadd>:
 800a5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	690d      	ldr	r5, [r1, #16]
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	461e      	mov	r6, r3
 800a5d4:	f101 0c14 	add.w	ip, r1, #20
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f8dc 3000 	ldr.w	r3, [ip]
 800a5de:	b299      	uxth	r1, r3
 800a5e0:	fb02 6101 	mla	r1, r2, r1, r6
 800a5e4:	0c1e      	lsrs	r6, r3, #16
 800a5e6:	0c0b      	lsrs	r3, r1, #16
 800a5e8:	fb02 3306 	mla	r3, r2, r6, r3
 800a5ec:	b289      	uxth	r1, r1
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5f4:	4285      	cmp	r5, r0
 800a5f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a5fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5fe:	dcec      	bgt.n	800a5da <__multadd+0x12>
 800a600:	b30e      	cbz	r6, 800a646 <__multadd+0x7e>
 800a602:	68a3      	ldr	r3, [r4, #8]
 800a604:	42ab      	cmp	r3, r5
 800a606:	dc19      	bgt.n	800a63c <__multadd+0x74>
 800a608:	6861      	ldr	r1, [r4, #4]
 800a60a:	4638      	mov	r0, r7
 800a60c:	3101      	adds	r1, #1
 800a60e:	f7ff ff79 	bl	800a504 <_Balloc>
 800a612:	4680      	mov	r8, r0
 800a614:	b928      	cbnz	r0, 800a622 <__multadd+0x5a>
 800a616:	4602      	mov	r2, r0
 800a618:	4b0c      	ldr	r3, [pc, #48]	; (800a64c <__multadd+0x84>)
 800a61a:	480d      	ldr	r0, [pc, #52]	; (800a650 <__multadd+0x88>)
 800a61c:	21ba      	movs	r1, #186	; 0xba
 800a61e:	f000 fce9 	bl	800aff4 <__assert_func>
 800a622:	6922      	ldr	r2, [r4, #16]
 800a624:	3202      	adds	r2, #2
 800a626:	f104 010c 	add.w	r1, r4, #12
 800a62a:	0092      	lsls	r2, r2, #2
 800a62c:	300c      	adds	r0, #12
 800a62e:	f7ff faee 	bl	8009c0e <memcpy>
 800a632:	4621      	mov	r1, r4
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff ffa5 	bl	800a584 <_Bfree>
 800a63a:	4644      	mov	r4, r8
 800a63c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a640:	3501      	adds	r5, #1
 800a642:	615e      	str	r6, [r3, #20]
 800a644:	6125      	str	r5, [r4, #16]
 800a646:	4620      	mov	r0, r4
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a64c:	0800b9a0 	.word	0x0800b9a0
 800a650:	0800ba28 	.word	0x0800ba28

0800a654 <__s2b>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	460c      	mov	r4, r1
 800a65a:	4615      	mov	r5, r2
 800a65c:	461f      	mov	r7, r3
 800a65e:	2209      	movs	r2, #9
 800a660:	3308      	adds	r3, #8
 800a662:	4606      	mov	r6, r0
 800a664:	fb93 f3f2 	sdiv	r3, r3, r2
 800a668:	2100      	movs	r1, #0
 800a66a:	2201      	movs	r2, #1
 800a66c:	429a      	cmp	r2, r3
 800a66e:	db09      	blt.n	800a684 <__s2b+0x30>
 800a670:	4630      	mov	r0, r6
 800a672:	f7ff ff47 	bl	800a504 <_Balloc>
 800a676:	b940      	cbnz	r0, 800a68a <__s2b+0x36>
 800a678:	4602      	mov	r2, r0
 800a67a:	4b19      	ldr	r3, [pc, #100]	; (800a6e0 <__s2b+0x8c>)
 800a67c:	4819      	ldr	r0, [pc, #100]	; (800a6e4 <__s2b+0x90>)
 800a67e:	21d3      	movs	r1, #211	; 0xd3
 800a680:	f000 fcb8 	bl	800aff4 <__assert_func>
 800a684:	0052      	lsls	r2, r2, #1
 800a686:	3101      	adds	r1, #1
 800a688:	e7f0      	b.n	800a66c <__s2b+0x18>
 800a68a:	9b08      	ldr	r3, [sp, #32]
 800a68c:	6143      	str	r3, [r0, #20]
 800a68e:	2d09      	cmp	r5, #9
 800a690:	f04f 0301 	mov.w	r3, #1
 800a694:	6103      	str	r3, [r0, #16]
 800a696:	dd16      	ble.n	800a6c6 <__s2b+0x72>
 800a698:	f104 0909 	add.w	r9, r4, #9
 800a69c:	46c8      	mov	r8, r9
 800a69e:	442c      	add	r4, r5
 800a6a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a6a4:	4601      	mov	r1, r0
 800a6a6:	3b30      	subs	r3, #48	; 0x30
 800a6a8:	220a      	movs	r2, #10
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ff8c 	bl	800a5c8 <__multadd>
 800a6b0:	45a0      	cmp	r8, r4
 800a6b2:	d1f5      	bne.n	800a6a0 <__s2b+0x4c>
 800a6b4:	f1a5 0408 	sub.w	r4, r5, #8
 800a6b8:	444c      	add	r4, r9
 800a6ba:	1b2d      	subs	r5, r5, r4
 800a6bc:	1963      	adds	r3, r4, r5
 800a6be:	42bb      	cmp	r3, r7
 800a6c0:	db04      	blt.n	800a6cc <__s2b+0x78>
 800a6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c6:	340a      	adds	r4, #10
 800a6c8:	2509      	movs	r5, #9
 800a6ca:	e7f6      	b.n	800a6ba <__s2b+0x66>
 800a6cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6d0:	4601      	mov	r1, r0
 800a6d2:	3b30      	subs	r3, #48	; 0x30
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7ff ff76 	bl	800a5c8 <__multadd>
 800a6dc:	e7ee      	b.n	800a6bc <__s2b+0x68>
 800a6de:	bf00      	nop
 800a6e0:	0800b9a0 	.word	0x0800b9a0
 800a6e4:	0800ba28 	.word	0x0800ba28

0800a6e8 <__hi0bits>:
 800a6e8:	0c03      	lsrs	r3, r0, #16
 800a6ea:	041b      	lsls	r3, r3, #16
 800a6ec:	b9d3      	cbnz	r3, 800a724 <__hi0bits+0x3c>
 800a6ee:	0400      	lsls	r0, r0, #16
 800a6f0:	2310      	movs	r3, #16
 800a6f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6f6:	bf04      	itt	eq
 800a6f8:	0200      	lsleq	r0, r0, #8
 800a6fa:	3308      	addeq	r3, #8
 800a6fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a700:	bf04      	itt	eq
 800a702:	0100      	lsleq	r0, r0, #4
 800a704:	3304      	addeq	r3, #4
 800a706:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a70a:	bf04      	itt	eq
 800a70c:	0080      	lsleq	r0, r0, #2
 800a70e:	3302      	addeq	r3, #2
 800a710:	2800      	cmp	r0, #0
 800a712:	db05      	blt.n	800a720 <__hi0bits+0x38>
 800a714:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a718:	f103 0301 	add.w	r3, r3, #1
 800a71c:	bf08      	it	eq
 800a71e:	2320      	moveq	r3, #32
 800a720:	4618      	mov	r0, r3
 800a722:	4770      	bx	lr
 800a724:	2300      	movs	r3, #0
 800a726:	e7e4      	b.n	800a6f2 <__hi0bits+0xa>

0800a728 <__lo0bits>:
 800a728:	6803      	ldr	r3, [r0, #0]
 800a72a:	f013 0207 	ands.w	r2, r3, #7
 800a72e:	d00c      	beq.n	800a74a <__lo0bits+0x22>
 800a730:	07d9      	lsls	r1, r3, #31
 800a732:	d422      	bmi.n	800a77a <__lo0bits+0x52>
 800a734:	079a      	lsls	r2, r3, #30
 800a736:	bf49      	itett	mi
 800a738:	085b      	lsrmi	r3, r3, #1
 800a73a:	089b      	lsrpl	r3, r3, #2
 800a73c:	6003      	strmi	r3, [r0, #0]
 800a73e:	2201      	movmi	r2, #1
 800a740:	bf5c      	itt	pl
 800a742:	6003      	strpl	r3, [r0, #0]
 800a744:	2202      	movpl	r2, #2
 800a746:	4610      	mov	r0, r2
 800a748:	4770      	bx	lr
 800a74a:	b299      	uxth	r1, r3
 800a74c:	b909      	cbnz	r1, 800a752 <__lo0bits+0x2a>
 800a74e:	0c1b      	lsrs	r3, r3, #16
 800a750:	2210      	movs	r2, #16
 800a752:	b2d9      	uxtb	r1, r3
 800a754:	b909      	cbnz	r1, 800a75a <__lo0bits+0x32>
 800a756:	3208      	adds	r2, #8
 800a758:	0a1b      	lsrs	r3, r3, #8
 800a75a:	0719      	lsls	r1, r3, #28
 800a75c:	bf04      	itt	eq
 800a75e:	091b      	lsreq	r3, r3, #4
 800a760:	3204      	addeq	r2, #4
 800a762:	0799      	lsls	r1, r3, #30
 800a764:	bf04      	itt	eq
 800a766:	089b      	lsreq	r3, r3, #2
 800a768:	3202      	addeq	r2, #2
 800a76a:	07d9      	lsls	r1, r3, #31
 800a76c:	d403      	bmi.n	800a776 <__lo0bits+0x4e>
 800a76e:	085b      	lsrs	r3, r3, #1
 800a770:	f102 0201 	add.w	r2, r2, #1
 800a774:	d003      	beq.n	800a77e <__lo0bits+0x56>
 800a776:	6003      	str	r3, [r0, #0]
 800a778:	e7e5      	b.n	800a746 <__lo0bits+0x1e>
 800a77a:	2200      	movs	r2, #0
 800a77c:	e7e3      	b.n	800a746 <__lo0bits+0x1e>
 800a77e:	2220      	movs	r2, #32
 800a780:	e7e1      	b.n	800a746 <__lo0bits+0x1e>
	...

0800a784 <__i2b>:
 800a784:	b510      	push	{r4, lr}
 800a786:	460c      	mov	r4, r1
 800a788:	2101      	movs	r1, #1
 800a78a:	f7ff febb 	bl	800a504 <_Balloc>
 800a78e:	4602      	mov	r2, r0
 800a790:	b928      	cbnz	r0, 800a79e <__i2b+0x1a>
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <__i2b+0x24>)
 800a794:	4805      	ldr	r0, [pc, #20]	; (800a7ac <__i2b+0x28>)
 800a796:	f240 1145 	movw	r1, #325	; 0x145
 800a79a:	f000 fc2b 	bl	800aff4 <__assert_func>
 800a79e:	2301      	movs	r3, #1
 800a7a0:	6144      	str	r4, [r0, #20]
 800a7a2:	6103      	str	r3, [r0, #16]
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	bf00      	nop
 800a7a8:	0800b9a0 	.word	0x0800b9a0
 800a7ac:	0800ba28 	.word	0x0800ba28

0800a7b0 <__multiply>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	4691      	mov	r9, r2
 800a7b6:	690a      	ldr	r2, [r1, #16]
 800a7b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	bfb8      	it	lt
 800a7c0:	460b      	movlt	r3, r1
 800a7c2:	460c      	mov	r4, r1
 800a7c4:	bfbc      	itt	lt
 800a7c6:	464c      	movlt	r4, r9
 800a7c8:	4699      	movlt	r9, r3
 800a7ca:	6927      	ldr	r7, [r4, #16]
 800a7cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7d0:	68a3      	ldr	r3, [r4, #8]
 800a7d2:	6861      	ldr	r1, [r4, #4]
 800a7d4:	eb07 060a 	add.w	r6, r7, sl
 800a7d8:	42b3      	cmp	r3, r6
 800a7da:	b085      	sub	sp, #20
 800a7dc:	bfb8      	it	lt
 800a7de:	3101      	addlt	r1, #1
 800a7e0:	f7ff fe90 	bl	800a504 <_Balloc>
 800a7e4:	b930      	cbnz	r0, 800a7f4 <__multiply+0x44>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	4b44      	ldr	r3, [pc, #272]	; (800a8fc <__multiply+0x14c>)
 800a7ea:	4845      	ldr	r0, [pc, #276]	; (800a900 <__multiply+0x150>)
 800a7ec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7f0:	f000 fc00 	bl	800aff4 <__assert_func>
 800a7f4:	f100 0514 	add.w	r5, r0, #20
 800a7f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7fc:	462b      	mov	r3, r5
 800a7fe:	2200      	movs	r2, #0
 800a800:	4543      	cmp	r3, r8
 800a802:	d321      	bcc.n	800a848 <__multiply+0x98>
 800a804:	f104 0314 	add.w	r3, r4, #20
 800a808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a80c:	f109 0314 	add.w	r3, r9, #20
 800a810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a814:	9202      	str	r2, [sp, #8]
 800a816:	1b3a      	subs	r2, r7, r4
 800a818:	3a15      	subs	r2, #21
 800a81a:	f022 0203 	bic.w	r2, r2, #3
 800a81e:	3204      	adds	r2, #4
 800a820:	f104 0115 	add.w	r1, r4, #21
 800a824:	428f      	cmp	r7, r1
 800a826:	bf38      	it	cc
 800a828:	2204      	movcc	r2, #4
 800a82a:	9201      	str	r2, [sp, #4]
 800a82c:	9a02      	ldr	r2, [sp, #8]
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	429a      	cmp	r2, r3
 800a832:	d80c      	bhi.n	800a84e <__multiply+0x9e>
 800a834:	2e00      	cmp	r6, #0
 800a836:	dd03      	ble.n	800a840 <__multiply+0x90>
 800a838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d05b      	beq.n	800a8f8 <__multiply+0x148>
 800a840:	6106      	str	r6, [r0, #16]
 800a842:	b005      	add	sp, #20
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	f843 2b04 	str.w	r2, [r3], #4
 800a84c:	e7d8      	b.n	800a800 <__multiply+0x50>
 800a84e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a852:	f1ba 0f00 	cmp.w	sl, #0
 800a856:	d024      	beq.n	800a8a2 <__multiply+0xf2>
 800a858:	f104 0e14 	add.w	lr, r4, #20
 800a85c:	46a9      	mov	r9, r5
 800a85e:	f04f 0c00 	mov.w	ip, #0
 800a862:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a866:	f8d9 1000 	ldr.w	r1, [r9]
 800a86a:	fa1f fb82 	uxth.w	fp, r2
 800a86e:	b289      	uxth	r1, r1
 800a870:	fb0a 110b 	mla	r1, sl, fp, r1
 800a874:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a878:	f8d9 2000 	ldr.w	r2, [r9]
 800a87c:	4461      	add	r1, ip
 800a87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a882:	fb0a c20b 	mla	r2, sl, fp, ip
 800a886:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a88a:	b289      	uxth	r1, r1
 800a88c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a890:	4577      	cmp	r7, lr
 800a892:	f849 1b04 	str.w	r1, [r9], #4
 800a896:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a89a:	d8e2      	bhi.n	800a862 <__multiply+0xb2>
 800a89c:	9a01      	ldr	r2, [sp, #4]
 800a89e:	f845 c002 	str.w	ip, [r5, r2]
 800a8a2:	9a03      	ldr	r2, [sp, #12]
 800a8a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	f1b9 0f00 	cmp.w	r9, #0
 800a8ae:	d021      	beq.n	800a8f4 <__multiply+0x144>
 800a8b0:	6829      	ldr	r1, [r5, #0]
 800a8b2:	f104 0c14 	add.w	ip, r4, #20
 800a8b6:	46ae      	mov	lr, r5
 800a8b8:	f04f 0a00 	mov.w	sl, #0
 800a8bc:	f8bc b000 	ldrh.w	fp, [ip]
 800a8c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8c4:	fb09 220b 	mla	r2, r9, fp, r2
 800a8c8:	4452      	add	r2, sl
 800a8ca:	b289      	uxth	r1, r1
 800a8cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8d0:	f84e 1b04 	str.w	r1, [lr], #4
 800a8d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a8d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8dc:	f8be 1000 	ldrh.w	r1, [lr]
 800a8e0:	fb09 110a 	mla	r1, r9, sl, r1
 800a8e4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8e8:	4567      	cmp	r7, ip
 800a8ea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8ee:	d8e5      	bhi.n	800a8bc <__multiply+0x10c>
 800a8f0:	9a01      	ldr	r2, [sp, #4]
 800a8f2:	50a9      	str	r1, [r5, r2]
 800a8f4:	3504      	adds	r5, #4
 800a8f6:	e799      	b.n	800a82c <__multiply+0x7c>
 800a8f8:	3e01      	subs	r6, #1
 800a8fa:	e79b      	b.n	800a834 <__multiply+0x84>
 800a8fc:	0800b9a0 	.word	0x0800b9a0
 800a900:	0800ba28 	.word	0x0800ba28

0800a904 <__pow5mult>:
 800a904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a908:	4615      	mov	r5, r2
 800a90a:	f012 0203 	ands.w	r2, r2, #3
 800a90e:	4606      	mov	r6, r0
 800a910:	460f      	mov	r7, r1
 800a912:	d007      	beq.n	800a924 <__pow5mult+0x20>
 800a914:	4c25      	ldr	r4, [pc, #148]	; (800a9ac <__pow5mult+0xa8>)
 800a916:	3a01      	subs	r2, #1
 800a918:	2300      	movs	r3, #0
 800a91a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a91e:	f7ff fe53 	bl	800a5c8 <__multadd>
 800a922:	4607      	mov	r7, r0
 800a924:	10ad      	asrs	r5, r5, #2
 800a926:	d03d      	beq.n	800a9a4 <__pow5mult+0xa0>
 800a928:	69f4      	ldr	r4, [r6, #28]
 800a92a:	b97c      	cbnz	r4, 800a94c <__pow5mult+0x48>
 800a92c:	2010      	movs	r0, #16
 800a92e:	f000 fb95 	bl	800b05c <malloc>
 800a932:	4602      	mov	r2, r0
 800a934:	61f0      	str	r0, [r6, #28]
 800a936:	b928      	cbnz	r0, 800a944 <__pow5mult+0x40>
 800a938:	4b1d      	ldr	r3, [pc, #116]	; (800a9b0 <__pow5mult+0xac>)
 800a93a:	481e      	ldr	r0, [pc, #120]	; (800a9b4 <__pow5mult+0xb0>)
 800a93c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a940:	f000 fb58 	bl	800aff4 <__assert_func>
 800a944:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a948:	6004      	str	r4, [r0, #0]
 800a94a:	60c4      	str	r4, [r0, #12]
 800a94c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a950:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a954:	b94c      	cbnz	r4, 800a96a <__pow5mult+0x66>
 800a956:	f240 2171 	movw	r1, #625	; 0x271
 800a95a:	4630      	mov	r0, r6
 800a95c:	f7ff ff12 	bl	800a784 <__i2b>
 800a960:	2300      	movs	r3, #0
 800a962:	f8c8 0008 	str.w	r0, [r8, #8]
 800a966:	4604      	mov	r4, r0
 800a968:	6003      	str	r3, [r0, #0]
 800a96a:	f04f 0900 	mov.w	r9, #0
 800a96e:	07eb      	lsls	r3, r5, #31
 800a970:	d50a      	bpl.n	800a988 <__pow5mult+0x84>
 800a972:	4639      	mov	r1, r7
 800a974:	4622      	mov	r2, r4
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ff1a 	bl	800a7b0 <__multiply>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4680      	mov	r8, r0
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff fdff 	bl	800a584 <_Bfree>
 800a986:	4647      	mov	r7, r8
 800a988:	106d      	asrs	r5, r5, #1
 800a98a:	d00b      	beq.n	800a9a4 <__pow5mult+0xa0>
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	b938      	cbnz	r0, 800a9a0 <__pow5mult+0x9c>
 800a990:	4622      	mov	r2, r4
 800a992:	4621      	mov	r1, r4
 800a994:	4630      	mov	r0, r6
 800a996:	f7ff ff0b 	bl	800a7b0 <__multiply>
 800a99a:	6020      	str	r0, [r4, #0]
 800a99c:	f8c0 9000 	str.w	r9, [r0]
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	e7e4      	b.n	800a96e <__pow5mult+0x6a>
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800bb78 	.word	0x0800bb78
 800a9b0:	0800ba11 	.word	0x0800ba11
 800a9b4:	0800ba28 	.word	0x0800ba28

0800a9b8 <__lshift>:
 800a9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9bc:	460c      	mov	r4, r1
 800a9be:	6849      	ldr	r1, [r1, #4]
 800a9c0:	6923      	ldr	r3, [r4, #16]
 800a9c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9c6:	68a3      	ldr	r3, [r4, #8]
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	4691      	mov	r9, r2
 800a9cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9d0:	f108 0601 	add.w	r6, r8, #1
 800a9d4:	42b3      	cmp	r3, r6
 800a9d6:	db0b      	blt.n	800a9f0 <__lshift+0x38>
 800a9d8:	4638      	mov	r0, r7
 800a9da:	f7ff fd93 	bl	800a504 <_Balloc>
 800a9de:	4605      	mov	r5, r0
 800a9e0:	b948      	cbnz	r0, 800a9f6 <__lshift+0x3e>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	4b28      	ldr	r3, [pc, #160]	; (800aa88 <__lshift+0xd0>)
 800a9e6:	4829      	ldr	r0, [pc, #164]	; (800aa8c <__lshift+0xd4>)
 800a9e8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9ec:	f000 fb02 	bl	800aff4 <__assert_func>
 800a9f0:	3101      	adds	r1, #1
 800a9f2:	005b      	lsls	r3, r3, #1
 800a9f4:	e7ee      	b.n	800a9d4 <__lshift+0x1c>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	f100 0114 	add.w	r1, r0, #20
 800a9fc:	f100 0210 	add.w	r2, r0, #16
 800aa00:	4618      	mov	r0, r3
 800aa02:	4553      	cmp	r3, sl
 800aa04:	db33      	blt.n	800aa6e <__lshift+0xb6>
 800aa06:	6920      	ldr	r0, [r4, #16]
 800aa08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa0c:	f104 0314 	add.w	r3, r4, #20
 800aa10:	f019 091f 	ands.w	r9, r9, #31
 800aa14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa1c:	d02b      	beq.n	800aa76 <__lshift+0xbe>
 800aa1e:	f1c9 0e20 	rsb	lr, r9, #32
 800aa22:	468a      	mov	sl, r1
 800aa24:	2200      	movs	r2, #0
 800aa26:	6818      	ldr	r0, [r3, #0]
 800aa28:	fa00 f009 	lsl.w	r0, r0, r9
 800aa2c:	4310      	orrs	r0, r2
 800aa2e:	f84a 0b04 	str.w	r0, [sl], #4
 800aa32:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa36:	459c      	cmp	ip, r3
 800aa38:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa3c:	d8f3      	bhi.n	800aa26 <__lshift+0x6e>
 800aa3e:	ebac 0304 	sub.w	r3, ip, r4
 800aa42:	3b15      	subs	r3, #21
 800aa44:	f023 0303 	bic.w	r3, r3, #3
 800aa48:	3304      	adds	r3, #4
 800aa4a:	f104 0015 	add.w	r0, r4, #21
 800aa4e:	4584      	cmp	ip, r0
 800aa50:	bf38      	it	cc
 800aa52:	2304      	movcc	r3, #4
 800aa54:	50ca      	str	r2, [r1, r3]
 800aa56:	b10a      	cbz	r2, 800aa5c <__lshift+0xa4>
 800aa58:	f108 0602 	add.w	r6, r8, #2
 800aa5c:	3e01      	subs	r6, #1
 800aa5e:	4638      	mov	r0, r7
 800aa60:	612e      	str	r6, [r5, #16]
 800aa62:	4621      	mov	r1, r4
 800aa64:	f7ff fd8e 	bl	800a584 <_Bfree>
 800aa68:	4628      	mov	r0, r5
 800aa6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa72:	3301      	adds	r3, #1
 800aa74:	e7c5      	b.n	800aa02 <__lshift+0x4a>
 800aa76:	3904      	subs	r1, #4
 800aa78:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa80:	459c      	cmp	ip, r3
 800aa82:	d8f9      	bhi.n	800aa78 <__lshift+0xc0>
 800aa84:	e7ea      	b.n	800aa5c <__lshift+0xa4>
 800aa86:	bf00      	nop
 800aa88:	0800b9a0 	.word	0x0800b9a0
 800aa8c:	0800ba28 	.word	0x0800ba28

0800aa90 <__mcmp>:
 800aa90:	b530      	push	{r4, r5, lr}
 800aa92:	6902      	ldr	r2, [r0, #16]
 800aa94:	690c      	ldr	r4, [r1, #16]
 800aa96:	1b12      	subs	r2, r2, r4
 800aa98:	d10e      	bne.n	800aab8 <__mcmp+0x28>
 800aa9a:	f100 0314 	add.w	r3, r0, #20
 800aa9e:	3114      	adds	r1, #20
 800aaa0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aaa4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aaa8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aaac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aab0:	42a5      	cmp	r5, r4
 800aab2:	d003      	beq.n	800aabc <__mcmp+0x2c>
 800aab4:	d305      	bcc.n	800aac2 <__mcmp+0x32>
 800aab6:	2201      	movs	r2, #1
 800aab8:	4610      	mov	r0, r2
 800aaba:	bd30      	pop	{r4, r5, pc}
 800aabc:	4283      	cmp	r3, r0
 800aabe:	d3f3      	bcc.n	800aaa8 <__mcmp+0x18>
 800aac0:	e7fa      	b.n	800aab8 <__mcmp+0x28>
 800aac2:	f04f 32ff 	mov.w	r2, #4294967295
 800aac6:	e7f7      	b.n	800aab8 <__mcmp+0x28>

0800aac8 <__mdiff>:
 800aac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	460c      	mov	r4, r1
 800aace:	4606      	mov	r6, r0
 800aad0:	4611      	mov	r1, r2
 800aad2:	4620      	mov	r0, r4
 800aad4:	4690      	mov	r8, r2
 800aad6:	f7ff ffdb 	bl	800aa90 <__mcmp>
 800aada:	1e05      	subs	r5, r0, #0
 800aadc:	d110      	bne.n	800ab00 <__mdiff+0x38>
 800aade:	4629      	mov	r1, r5
 800aae0:	4630      	mov	r0, r6
 800aae2:	f7ff fd0f 	bl	800a504 <_Balloc>
 800aae6:	b930      	cbnz	r0, 800aaf6 <__mdiff+0x2e>
 800aae8:	4b3a      	ldr	r3, [pc, #232]	; (800abd4 <__mdiff+0x10c>)
 800aaea:	4602      	mov	r2, r0
 800aaec:	f240 2137 	movw	r1, #567	; 0x237
 800aaf0:	4839      	ldr	r0, [pc, #228]	; (800abd8 <__mdiff+0x110>)
 800aaf2:	f000 fa7f 	bl	800aff4 <__assert_func>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aafc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab00:	bfa4      	itt	ge
 800ab02:	4643      	movge	r3, r8
 800ab04:	46a0      	movge	r8, r4
 800ab06:	4630      	mov	r0, r6
 800ab08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab0c:	bfa6      	itte	ge
 800ab0e:	461c      	movge	r4, r3
 800ab10:	2500      	movge	r5, #0
 800ab12:	2501      	movlt	r5, #1
 800ab14:	f7ff fcf6 	bl	800a504 <_Balloc>
 800ab18:	b920      	cbnz	r0, 800ab24 <__mdiff+0x5c>
 800ab1a:	4b2e      	ldr	r3, [pc, #184]	; (800abd4 <__mdiff+0x10c>)
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	f240 2145 	movw	r1, #581	; 0x245
 800ab22:	e7e5      	b.n	800aaf0 <__mdiff+0x28>
 800ab24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab28:	6926      	ldr	r6, [r4, #16]
 800ab2a:	60c5      	str	r5, [r0, #12]
 800ab2c:	f104 0914 	add.w	r9, r4, #20
 800ab30:	f108 0514 	add.w	r5, r8, #20
 800ab34:	f100 0e14 	add.w	lr, r0, #20
 800ab38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab40:	f108 0210 	add.w	r2, r8, #16
 800ab44:	46f2      	mov	sl, lr
 800ab46:	2100      	movs	r1, #0
 800ab48:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab50:	fa11 f88b 	uxtah	r8, r1, fp
 800ab54:	b299      	uxth	r1, r3
 800ab56:	0c1b      	lsrs	r3, r3, #16
 800ab58:	eba8 0801 	sub.w	r8, r8, r1
 800ab5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab64:	fa1f f888 	uxth.w	r8, r8
 800ab68:	1419      	asrs	r1, r3, #16
 800ab6a:	454e      	cmp	r6, r9
 800ab6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab70:	f84a 3b04 	str.w	r3, [sl], #4
 800ab74:	d8e8      	bhi.n	800ab48 <__mdiff+0x80>
 800ab76:	1b33      	subs	r3, r6, r4
 800ab78:	3b15      	subs	r3, #21
 800ab7a:	f023 0303 	bic.w	r3, r3, #3
 800ab7e:	3304      	adds	r3, #4
 800ab80:	3415      	adds	r4, #21
 800ab82:	42a6      	cmp	r6, r4
 800ab84:	bf38      	it	cc
 800ab86:	2304      	movcc	r3, #4
 800ab88:	441d      	add	r5, r3
 800ab8a:	4473      	add	r3, lr
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	462e      	mov	r6, r5
 800ab90:	4566      	cmp	r6, ip
 800ab92:	d30e      	bcc.n	800abb2 <__mdiff+0xea>
 800ab94:	f10c 0203 	add.w	r2, ip, #3
 800ab98:	1b52      	subs	r2, r2, r5
 800ab9a:	f022 0203 	bic.w	r2, r2, #3
 800ab9e:	3d03      	subs	r5, #3
 800aba0:	45ac      	cmp	ip, r5
 800aba2:	bf38      	it	cc
 800aba4:	2200      	movcc	r2, #0
 800aba6:	4413      	add	r3, r2
 800aba8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800abac:	b17a      	cbz	r2, 800abce <__mdiff+0x106>
 800abae:	6107      	str	r7, [r0, #16]
 800abb0:	e7a4      	b.n	800aafc <__mdiff+0x34>
 800abb2:	f856 8b04 	ldr.w	r8, [r6], #4
 800abb6:	fa11 f288 	uxtah	r2, r1, r8
 800abba:	1414      	asrs	r4, r2, #16
 800abbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abc0:	b292      	uxth	r2, r2
 800abc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abc6:	f84e 2b04 	str.w	r2, [lr], #4
 800abca:	1421      	asrs	r1, r4, #16
 800abcc:	e7e0      	b.n	800ab90 <__mdiff+0xc8>
 800abce:	3f01      	subs	r7, #1
 800abd0:	e7ea      	b.n	800aba8 <__mdiff+0xe0>
 800abd2:	bf00      	nop
 800abd4:	0800b9a0 	.word	0x0800b9a0
 800abd8:	0800ba28 	.word	0x0800ba28

0800abdc <__ulp>:
 800abdc:	b082      	sub	sp, #8
 800abde:	ed8d 0b00 	vstr	d0, [sp]
 800abe2:	9a01      	ldr	r2, [sp, #4]
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <__ulp+0x48>)
 800abe6:	4013      	ands	r3, r2
 800abe8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800abec:	2b00      	cmp	r3, #0
 800abee:	dc08      	bgt.n	800ac02 <__ulp+0x26>
 800abf0:	425b      	negs	r3, r3
 800abf2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800abf6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abfa:	da04      	bge.n	800ac06 <__ulp+0x2a>
 800abfc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ac00:	4113      	asrs	r3, r2
 800ac02:	2200      	movs	r2, #0
 800ac04:	e008      	b.n	800ac18 <__ulp+0x3c>
 800ac06:	f1a2 0314 	sub.w	r3, r2, #20
 800ac0a:	2b1e      	cmp	r3, #30
 800ac0c:	bfda      	itte	le
 800ac0e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ac12:	40da      	lsrle	r2, r3
 800ac14:	2201      	movgt	r2, #1
 800ac16:	2300      	movs	r3, #0
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	ec41 0b10 	vmov	d0, r0, r1
 800ac20:	b002      	add	sp, #8
 800ac22:	4770      	bx	lr
 800ac24:	7ff00000 	.word	0x7ff00000

0800ac28 <__b2d>:
 800ac28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2c:	6906      	ldr	r6, [r0, #16]
 800ac2e:	f100 0814 	add.w	r8, r0, #20
 800ac32:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac36:	1f37      	subs	r7, r6, #4
 800ac38:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	f7ff fd53 	bl	800a6e8 <__hi0bits>
 800ac42:	f1c0 0320 	rsb	r3, r0, #32
 800ac46:	280a      	cmp	r0, #10
 800ac48:	600b      	str	r3, [r1, #0]
 800ac4a:	491b      	ldr	r1, [pc, #108]	; (800acb8 <__b2d+0x90>)
 800ac4c:	dc15      	bgt.n	800ac7a <__b2d+0x52>
 800ac4e:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac52:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac56:	45b8      	cmp	r8, r7
 800ac58:	ea43 0501 	orr.w	r5, r3, r1
 800ac5c:	bf34      	ite	cc
 800ac5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac62:	2300      	movcs	r3, #0
 800ac64:	3015      	adds	r0, #21
 800ac66:	fa02 f000 	lsl.w	r0, r2, r0
 800ac6a:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	461c      	mov	r4, r3
 800ac72:	ec45 4b10 	vmov	d0, r4, r5
 800ac76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac7a:	45b8      	cmp	r8, r7
 800ac7c:	bf3a      	itte	cc
 800ac7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac82:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac86:	2300      	movcs	r3, #0
 800ac88:	380b      	subs	r0, #11
 800ac8a:	d012      	beq.n	800acb2 <__b2d+0x8a>
 800ac8c:	f1c0 0120 	rsb	r1, r0, #32
 800ac90:	fa23 f401 	lsr.w	r4, r3, r1
 800ac94:	4082      	lsls	r2, r0
 800ac96:	4322      	orrs	r2, r4
 800ac98:	4547      	cmp	r7, r8
 800ac9a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ac9e:	bf8c      	ite	hi
 800aca0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aca4:	2200      	movls	r2, #0
 800aca6:	4083      	lsls	r3, r0
 800aca8:	40ca      	lsrs	r2, r1
 800acaa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800acae:	4313      	orrs	r3, r2
 800acb0:	e7de      	b.n	800ac70 <__b2d+0x48>
 800acb2:	ea42 0501 	orr.w	r5, r2, r1
 800acb6:	e7db      	b.n	800ac70 <__b2d+0x48>
 800acb8:	3ff00000 	.word	0x3ff00000

0800acbc <__d2b>:
 800acbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	460f      	mov	r7, r1
 800acc2:	2101      	movs	r1, #1
 800acc4:	ec59 8b10 	vmov	r8, r9, d0
 800acc8:	4616      	mov	r6, r2
 800acca:	f7ff fc1b 	bl	800a504 <_Balloc>
 800acce:	4604      	mov	r4, r0
 800acd0:	b930      	cbnz	r0, 800ace0 <__d2b+0x24>
 800acd2:	4602      	mov	r2, r0
 800acd4:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <__d2b+0xac>)
 800acd6:	4825      	ldr	r0, [pc, #148]	; (800ad6c <__d2b+0xb0>)
 800acd8:	f240 310f 	movw	r1, #783	; 0x30f
 800acdc:	f000 f98a 	bl	800aff4 <__assert_func>
 800ace0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ace4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ace8:	bb2d      	cbnz	r5, 800ad36 <__d2b+0x7a>
 800acea:	9301      	str	r3, [sp, #4]
 800acec:	f1b8 0300 	subs.w	r3, r8, #0
 800acf0:	d026      	beq.n	800ad40 <__d2b+0x84>
 800acf2:	4668      	mov	r0, sp
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	f7ff fd17 	bl	800a728 <__lo0bits>
 800acfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acfe:	b1e8      	cbz	r0, 800ad3c <__d2b+0x80>
 800ad00:	f1c0 0320 	rsb	r3, r0, #32
 800ad04:	fa02 f303 	lsl.w	r3, r2, r3
 800ad08:	430b      	orrs	r3, r1
 800ad0a:	40c2      	lsrs	r2, r0
 800ad0c:	6163      	str	r3, [r4, #20]
 800ad0e:	9201      	str	r2, [sp, #4]
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	61a3      	str	r3, [r4, #24]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	bf14      	ite	ne
 800ad18:	2202      	movne	r2, #2
 800ad1a:	2201      	moveq	r2, #1
 800ad1c:	6122      	str	r2, [r4, #16]
 800ad1e:	b1bd      	cbz	r5, 800ad50 <__d2b+0x94>
 800ad20:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad24:	4405      	add	r5, r0
 800ad26:	603d      	str	r5, [r7, #0]
 800ad28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad2c:	6030      	str	r0, [r6, #0]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	b003      	add	sp, #12
 800ad32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad3a:	e7d6      	b.n	800acea <__d2b+0x2e>
 800ad3c:	6161      	str	r1, [r4, #20]
 800ad3e:	e7e7      	b.n	800ad10 <__d2b+0x54>
 800ad40:	a801      	add	r0, sp, #4
 800ad42:	f7ff fcf1 	bl	800a728 <__lo0bits>
 800ad46:	9b01      	ldr	r3, [sp, #4]
 800ad48:	6163      	str	r3, [r4, #20]
 800ad4a:	3020      	adds	r0, #32
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	e7e5      	b.n	800ad1c <__d2b+0x60>
 800ad50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad58:	6038      	str	r0, [r7, #0]
 800ad5a:	6918      	ldr	r0, [r3, #16]
 800ad5c:	f7ff fcc4 	bl	800a6e8 <__hi0bits>
 800ad60:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad64:	e7e2      	b.n	800ad2c <__d2b+0x70>
 800ad66:	bf00      	nop
 800ad68:	0800b9a0 	.word	0x0800b9a0
 800ad6c:	0800ba28 	.word	0x0800ba28

0800ad70 <__ratio>:
 800ad70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	4688      	mov	r8, r1
 800ad76:	4669      	mov	r1, sp
 800ad78:	4681      	mov	r9, r0
 800ad7a:	f7ff ff55 	bl	800ac28 <__b2d>
 800ad7e:	a901      	add	r1, sp, #4
 800ad80:	4640      	mov	r0, r8
 800ad82:	ec55 4b10 	vmov	r4, r5, d0
 800ad86:	f7ff ff4f 	bl	800ac28 <__b2d>
 800ad8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad92:	eba3 0c02 	sub.w	ip, r3, r2
 800ad96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ada0:	ec51 0b10 	vmov	r0, r1, d0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	bfd6      	itet	le
 800ada8:	460a      	movle	r2, r1
 800adaa:	462a      	movgt	r2, r5
 800adac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800adb0:	468b      	mov	fp, r1
 800adb2:	462f      	mov	r7, r5
 800adb4:	bfd4      	ite	le
 800adb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800adba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800adbe:	4620      	mov	r0, r4
 800adc0:	ee10 2a10 	vmov	r2, s0
 800adc4:	465b      	mov	r3, fp
 800adc6:	4639      	mov	r1, r7
 800adc8:	f7f5 fd38 	bl	800083c <__aeabi_ddiv>
 800adcc:	ec41 0b10 	vmov	d0, r0, r1
 800add0:	b003      	add	sp, #12
 800add2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800add6 <__copybits>:
 800add6:	3901      	subs	r1, #1
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	1149      	asrs	r1, r1, #5
 800addc:	6914      	ldr	r4, [r2, #16]
 800adde:	3101      	adds	r1, #1
 800ade0:	f102 0314 	add.w	r3, r2, #20
 800ade4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ade8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adec:	1f05      	subs	r5, r0, #4
 800adee:	42a3      	cmp	r3, r4
 800adf0:	d30c      	bcc.n	800ae0c <__copybits+0x36>
 800adf2:	1aa3      	subs	r3, r4, r2
 800adf4:	3b11      	subs	r3, #17
 800adf6:	f023 0303 	bic.w	r3, r3, #3
 800adfa:	3211      	adds	r2, #17
 800adfc:	42a2      	cmp	r2, r4
 800adfe:	bf88      	it	hi
 800ae00:	2300      	movhi	r3, #0
 800ae02:	4418      	add	r0, r3
 800ae04:	2300      	movs	r3, #0
 800ae06:	4288      	cmp	r0, r1
 800ae08:	d305      	bcc.n	800ae16 <__copybits+0x40>
 800ae0a:	bd70      	pop	{r4, r5, r6, pc}
 800ae0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ae10:	f845 6f04 	str.w	r6, [r5, #4]!
 800ae14:	e7eb      	b.n	800adee <__copybits+0x18>
 800ae16:	f840 3b04 	str.w	r3, [r0], #4
 800ae1a:	e7f4      	b.n	800ae06 <__copybits+0x30>

0800ae1c <__any_on>:
 800ae1c:	f100 0214 	add.w	r2, r0, #20
 800ae20:	6900      	ldr	r0, [r0, #16]
 800ae22:	114b      	asrs	r3, r1, #5
 800ae24:	4298      	cmp	r0, r3
 800ae26:	b510      	push	{r4, lr}
 800ae28:	db11      	blt.n	800ae4e <__any_on+0x32>
 800ae2a:	dd0a      	ble.n	800ae42 <__any_on+0x26>
 800ae2c:	f011 011f 	ands.w	r1, r1, #31
 800ae30:	d007      	beq.n	800ae42 <__any_on+0x26>
 800ae32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae36:	fa24 f001 	lsr.w	r0, r4, r1
 800ae3a:	fa00 f101 	lsl.w	r1, r0, r1
 800ae3e:	428c      	cmp	r4, r1
 800ae40:	d10b      	bne.n	800ae5a <__any_on+0x3e>
 800ae42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d803      	bhi.n	800ae52 <__any_on+0x36>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	bd10      	pop	{r4, pc}
 800ae4e:	4603      	mov	r3, r0
 800ae50:	e7f7      	b.n	800ae42 <__any_on+0x26>
 800ae52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae56:	2900      	cmp	r1, #0
 800ae58:	d0f5      	beq.n	800ae46 <__any_on+0x2a>
 800ae5a:	2001      	movs	r0, #1
 800ae5c:	e7f6      	b.n	800ae4c <__any_on+0x30>

0800ae5e <__ascii_wctomb>:
 800ae5e:	b149      	cbz	r1, 800ae74 <__ascii_wctomb+0x16>
 800ae60:	2aff      	cmp	r2, #255	; 0xff
 800ae62:	bf85      	ittet	hi
 800ae64:	238a      	movhi	r3, #138	; 0x8a
 800ae66:	6003      	strhi	r3, [r0, #0]
 800ae68:	700a      	strbls	r2, [r1, #0]
 800ae6a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ae6e:	bf98      	it	ls
 800ae70:	2001      	movls	r0, #1
 800ae72:	4770      	bx	lr
 800ae74:	4608      	mov	r0, r1
 800ae76:	4770      	bx	lr

0800ae78 <__sflush_r>:
 800ae78:	898a      	ldrh	r2, [r1, #12]
 800ae7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae7e:	4605      	mov	r5, r0
 800ae80:	0710      	lsls	r0, r2, #28
 800ae82:	460c      	mov	r4, r1
 800ae84:	d458      	bmi.n	800af38 <__sflush_r+0xc0>
 800ae86:	684b      	ldr	r3, [r1, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	dc05      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	dc02      	bgt.n	800ae98 <__sflush_r+0x20>
 800ae92:	2000      	movs	r0, #0
 800ae94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	d0f9      	beq.n	800ae92 <__sflush_r+0x1a>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aea4:	682f      	ldr	r7, [r5, #0]
 800aea6:	6a21      	ldr	r1, [r4, #32]
 800aea8:	602b      	str	r3, [r5, #0]
 800aeaa:	d032      	beq.n	800af12 <__sflush_r+0x9a>
 800aeac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aeae:	89a3      	ldrh	r3, [r4, #12]
 800aeb0:	075a      	lsls	r2, r3, #29
 800aeb2:	d505      	bpl.n	800aec0 <__sflush_r+0x48>
 800aeb4:	6863      	ldr	r3, [r4, #4]
 800aeb6:	1ac0      	subs	r0, r0, r3
 800aeb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeba:	b10b      	cbz	r3, 800aec0 <__sflush_r+0x48>
 800aebc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aebe:	1ac0      	subs	r0, r0, r3
 800aec0:	2300      	movs	r3, #0
 800aec2:	4602      	mov	r2, r0
 800aec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aec6:	6a21      	ldr	r1, [r4, #32]
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	89a3      	ldrh	r3, [r4, #12]
 800aed0:	d106      	bne.n	800aee0 <__sflush_r+0x68>
 800aed2:	6829      	ldr	r1, [r5, #0]
 800aed4:	291d      	cmp	r1, #29
 800aed6:	d82b      	bhi.n	800af30 <__sflush_r+0xb8>
 800aed8:	4a29      	ldr	r2, [pc, #164]	; (800af80 <__sflush_r+0x108>)
 800aeda:	410a      	asrs	r2, r1
 800aedc:	07d6      	lsls	r6, r2, #31
 800aede:	d427      	bmi.n	800af30 <__sflush_r+0xb8>
 800aee0:	2200      	movs	r2, #0
 800aee2:	6062      	str	r2, [r4, #4]
 800aee4:	04d9      	lsls	r1, r3, #19
 800aee6:	6922      	ldr	r2, [r4, #16]
 800aee8:	6022      	str	r2, [r4, #0]
 800aeea:	d504      	bpl.n	800aef6 <__sflush_r+0x7e>
 800aeec:	1c42      	adds	r2, r0, #1
 800aeee:	d101      	bne.n	800aef4 <__sflush_r+0x7c>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b903      	cbnz	r3, 800aef6 <__sflush_r+0x7e>
 800aef4:	6560      	str	r0, [r4, #84]	; 0x54
 800aef6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aef8:	602f      	str	r7, [r5, #0]
 800aefa:	2900      	cmp	r1, #0
 800aefc:	d0c9      	beq.n	800ae92 <__sflush_r+0x1a>
 800aefe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af02:	4299      	cmp	r1, r3
 800af04:	d002      	beq.n	800af0c <__sflush_r+0x94>
 800af06:	4628      	mov	r0, r5
 800af08:	f7fe fe9a 	bl	8009c40 <_free_r>
 800af0c:	2000      	movs	r0, #0
 800af0e:	6360      	str	r0, [r4, #52]	; 0x34
 800af10:	e7c0      	b.n	800ae94 <__sflush_r+0x1c>
 800af12:	2301      	movs	r3, #1
 800af14:	4628      	mov	r0, r5
 800af16:	47b0      	blx	r6
 800af18:	1c41      	adds	r1, r0, #1
 800af1a:	d1c8      	bne.n	800aeae <__sflush_r+0x36>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0c5      	beq.n	800aeae <__sflush_r+0x36>
 800af22:	2b1d      	cmp	r3, #29
 800af24:	d001      	beq.n	800af2a <__sflush_r+0xb2>
 800af26:	2b16      	cmp	r3, #22
 800af28:	d101      	bne.n	800af2e <__sflush_r+0xb6>
 800af2a:	602f      	str	r7, [r5, #0]
 800af2c:	e7b1      	b.n	800ae92 <__sflush_r+0x1a>
 800af2e:	89a3      	ldrh	r3, [r4, #12]
 800af30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	e7ad      	b.n	800ae94 <__sflush_r+0x1c>
 800af38:	690f      	ldr	r7, [r1, #16]
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	d0a9      	beq.n	800ae92 <__sflush_r+0x1a>
 800af3e:	0793      	lsls	r3, r2, #30
 800af40:	680e      	ldr	r6, [r1, #0]
 800af42:	bf08      	it	eq
 800af44:	694b      	ldreq	r3, [r1, #20]
 800af46:	600f      	str	r7, [r1, #0]
 800af48:	bf18      	it	ne
 800af4a:	2300      	movne	r3, #0
 800af4c:	eba6 0807 	sub.w	r8, r6, r7
 800af50:	608b      	str	r3, [r1, #8]
 800af52:	f1b8 0f00 	cmp.w	r8, #0
 800af56:	dd9c      	ble.n	800ae92 <__sflush_r+0x1a>
 800af58:	6a21      	ldr	r1, [r4, #32]
 800af5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af5c:	4643      	mov	r3, r8
 800af5e:	463a      	mov	r2, r7
 800af60:	4628      	mov	r0, r5
 800af62:	47b0      	blx	r6
 800af64:	2800      	cmp	r0, #0
 800af66:	dc06      	bgt.n	800af76 <__sflush_r+0xfe>
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af6e:	81a3      	strh	r3, [r4, #12]
 800af70:	f04f 30ff 	mov.w	r0, #4294967295
 800af74:	e78e      	b.n	800ae94 <__sflush_r+0x1c>
 800af76:	4407      	add	r7, r0
 800af78:	eba8 0800 	sub.w	r8, r8, r0
 800af7c:	e7e9      	b.n	800af52 <__sflush_r+0xda>
 800af7e:	bf00      	nop
 800af80:	dfbffffe 	.word	0xdfbffffe

0800af84 <_fflush_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	690b      	ldr	r3, [r1, #16]
 800af88:	4605      	mov	r5, r0
 800af8a:	460c      	mov	r4, r1
 800af8c:	b913      	cbnz	r3, 800af94 <_fflush_r+0x10>
 800af8e:	2500      	movs	r5, #0
 800af90:	4628      	mov	r0, r5
 800af92:	bd38      	pop	{r3, r4, r5, pc}
 800af94:	b118      	cbz	r0, 800af9e <_fflush_r+0x1a>
 800af96:	6a03      	ldr	r3, [r0, #32]
 800af98:	b90b      	cbnz	r3, 800af9e <_fflush_r+0x1a>
 800af9a:	f7fe fd31 	bl	8009a00 <__sinit>
 800af9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d0f3      	beq.n	800af8e <_fflush_r+0xa>
 800afa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afa8:	07d0      	lsls	r0, r2, #31
 800afaa:	d404      	bmi.n	800afb6 <_fflush_r+0x32>
 800afac:	0599      	lsls	r1, r3, #22
 800afae:	d402      	bmi.n	800afb6 <_fflush_r+0x32>
 800afb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afb2:	f7fe fe2a 	bl	8009c0a <__retarget_lock_acquire_recursive>
 800afb6:	4628      	mov	r0, r5
 800afb8:	4621      	mov	r1, r4
 800afba:	f7ff ff5d 	bl	800ae78 <__sflush_r>
 800afbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afc0:	07da      	lsls	r2, r3, #31
 800afc2:	4605      	mov	r5, r0
 800afc4:	d4e4      	bmi.n	800af90 <_fflush_r+0xc>
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	059b      	lsls	r3, r3, #22
 800afca:	d4e1      	bmi.n	800af90 <_fflush_r+0xc>
 800afcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afce:	f7fe fe1d 	bl	8009c0c <__retarget_lock_release_recursive>
 800afd2:	e7dd      	b.n	800af90 <_fflush_r+0xc>

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	; (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f8 fe8a 	bl	8003cf8 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	20000b08 	.word	0x20000b08

0800aff4 <__assert_func>:
 800aff4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff6:	4614      	mov	r4, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4b09      	ldr	r3, [pc, #36]	; (800b020 <__assert_func+0x2c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4605      	mov	r5, r0
 800b000:	68d8      	ldr	r0, [r3, #12]
 800b002:	b14c      	cbz	r4, 800b018 <__assert_func+0x24>
 800b004:	4b07      	ldr	r3, [pc, #28]	; (800b024 <__assert_func+0x30>)
 800b006:	9100      	str	r1, [sp, #0]
 800b008:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b00c:	4906      	ldr	r1, [pc, #24]	; (800b028 <__assert_func+0x34>)
 800b00e:	462b      	mov	r3, r5
 800b010:	f000 f82c 	bl	800b06c <fiprintf>
 800b014:	f000 f83c 	bl	800b090 <abort>
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <__assert_func+0x38>)
 800b01a:	461c      	mov	r4, r3
 800b01c:	e7f3      	b.n	800b006 <__assert_func+0x12>
 800b01e:	bf00      	nop
 800b020:	200001d0 	.word	0x200001d0
 800b024:	0800bc85 	.word	0x0800bc85
 800b028:	0800bc92 	.word	0x0800bc92
 800b02c:	0800bcc0 	.word	0x0800bcc0

0800b030 <_calloc_r>:
 800b030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b032:	fba1 2402 	umull	r2, r4, r1, r2
 800b036:	b94c      	cbnz	r4, 800b04c <_calloc_r+0x1c>
 800b038:	4611      	mov	r1, r2
 800b03a:	9201      	str	r2, [sp, #4]
 800b03c:	f7ff f9c4 	bl	800a3c8 <_malloc_r>
 800b040:	9a01      	ldr	r2, [sp, #4]
 800b042:	4605      	mov	r5, r0
 800b044:	b930      	cbnz	r0, 800b054 <_calloc_r+0x24>
 800b046:	4628      	mov	r0, r5
 800b048:	b003      	add	sp, #12
 800b04a:	bd30      	pop	{r4, r5, pc}
 800b04c:	220c      	movs	r2, #12
 800b04e:	6002      	str	r2, [r0, #0]
 800b050:	2500      	movs	r5, #0
 800b052:	e7f8      	b.n	800b046 <_calloc_r+0x16>
 800b054:	4621      	mov	r1, r4
 800b056:	f7fe fd4c 	bl	8009af2 <memset>
 800b05a:	e7f4      	b.n	800b046 <_calloc_r+0x16>

0800b05c <malloc>:
 800b05c:	4b02      	ldr	r3, [pc, #8]	; (800b068 <malloc+0xc>)
 800b05e:	4601      	mov	r1, r0
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	f7ff b9b1 	b.w	800a3c8 <_malloc_r>
 800b066:	bf00      	nop
 800b068:	200001d0 	.word	0x200001d0

0800b06c <fiprintf>:
 800b06c:	b40e      	push	{r1, r2, r3}
 800b06e:	b503      	push	{r0, r1, lr}
 800b070:	4601      	mov	r1, r0
 800b072:	ab03      	add	r3, sp, #12
 800b074:	4805      	ldr	r0, [pc, #20]	; (800b08c <fiprintf+0x20>)
 800b076:	f853 2b04 	ldr.w	r2, [r3], #4
 800b07a:	6800      	ldr	r0, [r0, #0]
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	f000 f837 	bl	800b0f0 <_vfiprintf_r>
 800b082:	b002      	add	sp, #8
 800b084:	f85d eb04 	ldr.w	lr, [sp], #4
 800b088:	b003      	add	sp, #12
 800b08a:	4770      	bx	lr
 800b08c:	200001d0 	.word	0x200001d0

0800b090 <abort>:
 800b090:	b508      	push	{r3, lr}
 800b092:	2006      	movs	r0, #6
 800b094:	f000 fb94 	bl	800b7c0 <raise>
 800b098:	2001      	movs	r0, #1
 800b09a:	f7f8 fdb5 	bl	8003c08 <_exit>

0800b09e <__sfputc_r>:
 800b09e:	6893      	ldr	r3, [r2, #8]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	b410      	push	{r4}
 800b0a6:	6093      	str	r3, [r2, #8]
 800b0a8:	da08      	bge.n	800b0bc <__sfputc_r+0x1e>
 800b0aa:	6994      	ldr	r4, [r2, #24]
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	db01      	blt.n	800b0b4 <__sfputc_r+0x16>
 800b0b0:	290a      	cmp	r1, #10
 800b0b2:	d103      	bne.n	800b0bc <__sfputc_r+0x1e>
 800b0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b8:	f000 bac4 	b.w	800b644 <__swbuf_r>
 800b0bc:	6813      	ldr	r3, [r2, #0]
 800b0be:	1c58      	adds	r0, r3, #1
 800b0c0:	6010      	str	r0, [r2, #0]
 800b0c2:	7019      	strb	r1, [r3, #0]
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <__sfputs_r>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	4614      	mov	r4, r2
 800b0d4:	18d5      	adds	r5, r2, r3
 800b0d6:	42ac      	cmp	r4, r5
 800b0d8:	d101      	bne.n	800b0de <__sfputs_r+0x12>
 800b0da:	2000      	movs	r0, #0
 800b0dc:	e007      	b.n	800b0ee <__sfputs_r+0x22>
 800b0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e2:	463a      	mov	r2, r7
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ffda 	bl	800b09e <__sfputc_r>
 800b0ea:	1c43      	adds	r3, r0, #1
 800b0ec:	d1f3      	bne.n	800b0d6 <__sfputs_r+0xa>
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0f0 <_vfiprintf_r>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	b09d      	sub	sp, #116	; 0x74
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4698      	mov	r8, r3
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	b118      	cbz	r0, 800b108 <_vfiprintf_r+0x18>
 800b100:	6a03      	ldr	r3, [r0, #32]
 800b102:	b90b      	cbnz	r3, 800b108 <_vfiprintf_r+0x18>
 800b104:	f7fe fc7c 	bl	8009a00 <__sinit>
 800b108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b10a:	07d9      	lsls	r1, r3, #31
 800b10c:	d405      	bmi.n	800b11a <_vfiprintf_r+0x2a>
 800b10e:	89ab      	ldrh	r3, [r5, #12]
 800b110:	059a      	lsls	r2, r3, #22
 800b112:	d402      	bmi.n	800b11a <_vfiprintf_r+0x2a>
 800b114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b116:	f7fe fd78 	bl	8009c0a <__retarget_lock_acquire_recursive>
 800b11a:	89ab      	ldrh	r3, [r5, #12]
 800b11c:	071b      	lsls	r3, r3, #28
 800b11e:	d501      	bpl.n	800b124 <_vfiprintf_r+0x34>
 800b120:	692b      	ldr	r3, [r5, #16]
 800b122:	b99b      	cbnz	r3, 800b14c <_vfiprintf_r+0x5c>
 800b124:	4629      	mov	r1, r5
 800b126:	4630      	mov	r0, r6
 800b128:	f000 faca 	bl	800b6c0 <__swsetup_r>
 800b12c:	b170      	cbz	r0, 800b14c <_vfiprintf_r+0x5c>
 800b12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b130:	07dc      	lsls	r4, r3, #31
 800b132:	d504      	bpl.n	800b13e <_vfiprintf_r+0x4e>
 800b134:	f04f 30ff 	mov.w	r0, #4294967295
 800b138:	b01d      	add	sp, #116	; 0x74
 800b13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13e:	89ab      	ldrh	r3, [r5, #12]
 800b140:	0598      	lsls	r0, r3, #22
 800b142:	d4f7      	bmi.n	800b134 <_vfiprintf_r+0x44>
 800b144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b146:	f7fe fd61 	bl	8009c0c <__retarget_lock_release_recursive>
 800b14a:	e7f3      	b.n	800b134 <_vfiprintf_r+0x44>
 800b14c:	2300      	movs	r3, #0
 800b14e:	9309      	str	r3, [sp, #36]	; 0x24
 800b150:	2320      	movs	r3, #32
 800b152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b156:	f8cd 800c 	str.w	r8, [sp, #12]
 800b15a:	2330      	movs	r3, #48	; 0x30
 800b15c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b310 <_vfiprintf_r+0x220>
 800b160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b164:	f04f 0901 	mov.w	r9, #1
 800b168:	4623      	mov	r3, r4
 800b16a:	469a      	mov	sl, r3
 800b16c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b170:	b10a      	cbz	r2, 800b176 <_vfiprintf_r+0x86>
 800b172:	2a25      	cmp	r2, #37	; 0x25
 800b174:	d1f9      	bne.n	800b16a <_vfiprintf_r+0x7a>
 800b176:	ebba 0b04 	subs.w	fp, sl, r4
 800b17a:	d00b      	beq.n	800b194 <_vfiprintf_r+0xa4>
 800b17c:	465b      	mov	r3, fp
 800b17e:	4622      	mov	r2, r4
 800b180:	4629      	mov	r1, r5
 800b182:	4630      	mov	r0, r6
 800b184:	f7ff ffa2 	bl	800b0cc <__sfputs_r>
 800b188:	3001      	adds	r0, #1
 800b18a:	f000 80a9 	beq.w	800b2e0 <_vfiprintf_r+0x1f0>
 800b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b190:	445a      	add	r2, fp
 800b192:	9209      	str	r2, [sp, #36]	; 0x24
 800b194:	f89a 3000 	ldrb.w	r3, [sl]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	f000 80a1 	beq.w	800b2e0 <_vfiprintf_r+0x1f0>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1a8:	f10a 0a01 	add.w	sl, sl, #1
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b1b6:	4654      	mov	r4, sl
 800b1b8:	2205      	movs	r2, #5
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	4854      	ldr	r0, [pc, #336]	; (800b310 <_vfiprintf_r+0x220>)
 800b1c0:	f7f5 f806 	bl	80001d0 <memchr>
 800b1c4:	9a04      	ldr	r2, [sp, #16]
 800b1c6:	b9d8      	cbnz	r0, 800b200 <_vfiprintf_r+0x110>
 800b1c8:	06d1      	lsls	r1, r2, #27
 800b1ca:	bf44      	itt	mi
 800b1cc:	2320      	movmi	r3, #32
 800b1ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1d2:	0713      	lsls	r3, r2, #28
 800b1d4:	bf44      	itt	mi
 800b1d6:	232b      	movmi	r3, #43	; 0x2b
 800b1d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b1e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1e2:	d015      	beq.n	800b210 <_vfiprintf_r+0x120>
 800b1e4:	9a07      	ldr	r2, [sp, #28]
 800b1e6:	4654      	mov	r4, sl
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f04f 0c0a 	mov.w	ip, #10
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f4:	3b30      	subs	r3, #48	; 0x30
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d94d      	bls.n	800b296 <_vfiprintf_r+0x1a6>
 800b1fa:	b1b0      	cbz	r0, 800b22a <_vfiprintf_r+0x13a>
 800b1fc:	9207      	str	r2, [sp, #28]
 800b1fe:	e014      	b.n	800b22a <_vfiprintf_r+0x13a>
 800b200:	eba0 0308 	sub.w	r3, r0, r8
 800b204:	fa09 f303 	lsl.w	r3, r9, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	46a2      	mov	sl, r4
 800b20e:	e7d2      	b.n	800b1b6 <_vfiprintf_r+0xc6>
 800b210:	9b03      	ldr	r3, [sp, #12]
 800b212:	1d19      	adds	r1, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	bfbb      	ittet	lt
 800b21c:	425b      	neglt	r3, r3
 800b21e:	f042 0202 	orrlt.w	r2, r2, #2
 800b222:	9307      	strge	r3, [sp, #28]
 800b224:	9307      	strlt	r3, [sp, #28]
 800b226:	bfb8      	it	lt
 800b228:	9204      	strlt	r2, [sp, #16]
 800b22a:	7823      	ldrb	r3, [r4, #0]
 800b22c:	2b2e      	cmp	r3, #46	; 0x2e
 800b22e:	d10c      	bne.n	800b24a <_vfiprintf_r+0x15a>
 800b230:	7863      	ldrb	r3, [r4, #1]
 800b232:	2b2a      	cmp	r3, #42	; 0x2a
 800b234:	d134      	bne.n	800b2a0 <_vfiprintf_r+0x1b0>
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	9203      	str	r2, [sp, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	bfb8      	it	lt
 800b242:	f04f 33ff 	movlt.w	r3, #4294967295
 800b246:	3402      	adds	r4, #2
 800b248:	9305      	str	r3, [sp, #20]
 800b24a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b320 <_vfiprintf_r+0x230>
 800b24e:	7821      	ldrb	r1, [r4, #0]
 800b250:	2203      	movs	r2, #3
 800b252:	4650      	mov	r0, sl
 800b254:	f7f4 ffbc 	bl	80001d0 <memchr>
 800b258:	b138      	cbz	r0, 800b26a <_vfiprintf_r+0x17a>
 800b25a:	9b04      	ldr	r3, [sp, #16]
 800b25c:	eba0 000a 	sub.w	r0, r0, sl
 800b260:	2240      	movs	r2, #64	; 0x40
 800b262:	4082      	lsls	r2, r0
 800b264:	4313      	orrs	r3, r2
 800b266:	3401      	adds	r4, #1
 800b268:	9304      	str	r3, [sp, #16]
 800b26a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26e:	4829      	ldr	r0, [pc, #164]	; (800b314 <_vfiprintf_r+0x224>)
 800b270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b274:	2206      	movs	r2, #6
 800b276:	f7f4 ffab 	bl	80001d0 <memchr>
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d03f      	beq.n	800b2fe <_vfiprintf_r+0x20e>
 800b27e:	4b26      	ldr	r3, [pc, #152]	; (800b318 <_vfiprintf_r+0x228>)
 800b280:	bb1b      	cbnz	r3, 800b2ca <_vfiprintf_r+0x1da>
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	3307      	adds	r3, #7
 800b286:	f023 0307 	bic.w	r3, r3, #7
 800b28a:	3308      	adds	r3, #8
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b290:	443b      	add	r3, r7
 800b292:	9309      	str	r3, [sp, #36]	; 0x24
 800b294:	e768      	b.n	800b168 <_vfiprintf_r+0x78>
 800b296:	fb0c 3202 	mla	r2, ip, r2, r3
 800b29a:	460c      	mov	r4, r1
 800b29c:	2001      	movs	r0, #1
 800b29e:	e7a6      	b.n	800b1ee <_vfiprintf_r+0xfe>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	3401      	adds	r4, #1
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	f04f 0c0a 	mov.w	ip, #10
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2b2:	3a30      	subs	r2, #48	; 0x30
 800b2b4:	2a09      	cmp	r2, #9
 800b2b6:	d903      	bls.n	800b2c0 <_vfiprintf_r+0x1d0>
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0c6      	beq.n	800b24a <_vfiprintf_r+0x15a>
 800b2bc:	9105      	str	r1, [sp, #20]
 800b2be:	e7c4      	b.n	800b24a <_vfiprintf_r+0x15a>
 800b2c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e7f0      	b.n	800b2ac <_vfiprintf_r+0x1bc>
 800b2ca:	ab03      	add	r3, sp, #12
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	462a      	mov	r2, r5
 800b2d0:	4b12      	ldr	r3, [pc, #72]	; (800b31c <_vfiprintf_r+0x22c>)
 800b2d2:	a904      	add	r1, sp, #16
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f3af 8000 	nop.w
 800b2da:	4607      	mov	r7, r0
 800b2dc:	1c78      	adds	r0, r7, #1
 800b2de:	d1d6      	bne.n	800b28e <_vfiprintf_r+0x19e>
 800b2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2e2:	07d9      	lsls	r1, r3, #31
 800b2e4:	d405      	bmi.n	800b2f2 <_vfiprintf_r+0x202>
 800b2e6:	89ab      	ldrh	r3, [r5, #12]
 800b2e8:	059a      	lsls	r2, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_vfiprintf_r+0x202>
 800b2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ee:	f7fe fc8d 	bl	8009c0c <__retarget_lock_release_recursive>
 800b2f2:	89ab      	ldrh	r3, [r5, #12]
 800b2f4:	065b      	lsls	r3, r3, #25
 800b2f6:	f53f af1d 	bmi.w	800b134 <_vfiprintf_r+0x44>
 800b2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2fc:	e71c      	b.n	800b138 <_vfiprintf_r+0x48>
 800b2fe:	ab03      	add	r3, sp, #12
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	462a      	mov	r2, r5
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <_vfiprintf_r+0x22c>)
 800b306:	a904      	add	r1, sp, #16
 800b308:	4630      	mov	r0, r6
 800b30a:	f000 f879 	bl	800b400 <_printf_i>
 800b30e:	e7e4      	b.n	800b2da <_vfiprintf_r+0x1ea>
 800b310:	0800bcc1 	.word	0x0800bcc1
 800b314:	0800bccb 	.word	0x0800bccb
 800b318:	00000000 	.word	0x00000000
 800b31c:	0800b0cd 	.word	0x0800b0cd
 800b320:	0800bcc7 	.word	0x0800bcc7

0800b324 <_printf_common>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	4616      	mov	r6, r2
 800b32a:	4699      	mov	r9, r3
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	690b      	ldr	r3, [r1, #16]
 800b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b334:	4293      	cmp	r3, r2
 800b336:	bfb8      	it	lt
 800b338:	4613      	movlt	r3, r2
 800b33a:	6033      	str	r3, [r6, #0]
 800b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b340:	4607      	mov	r7, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b10a      	cbz	r2, 800b34a <_printf_common+0x26>
 800b346:	3301      	adds	r3, #1
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	0699      	lsls	r1, r3, #26
 800b34e:	bf42      	ittt	mi
 800b350:	6833      	ldrmi	r3, [r6, #0]
 800b352:	3302      	addmi	r3, #2
 800b354:	6033      	strmi	r3, [r6, #0]
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	f015 0506 	ands.w	r5, r5, #6
 800b35c:	d106      	bne.n	800b36c <_printf_common+0x48>
 800b35e:	f104 0a19 	add.w	sl, r4, #25
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	6832      	ldr	r2, [r6, #0]
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dc26      	bgt.n	800b3ba <_printf_common+0x96>
 800b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b370:	1e13      	subs	r3, r2, #0
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	bf18      	it	ne
 800b376:	2301      	movne	r3, #1
 800b378:	0692      	lsls	r2, r2, #26
 800b37a:	d42b      	bmi.n	800b3d4 <_printf_common+0xb0>
 800b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b380:	4649      	mov	r1, r9
 800b382:	4638      	mov	r0, r7
 800b384:	47c0      	blx	r8
 800b386:	3001      	adds	r0, #1
 800b388:	d01e      	beq.n	800b3c8 <_printf_common+0xa4>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	6922      	ldr	r2, [r4, #16]
 800b38e:	f003 0306 	and.w	r3, r3, #6
 800b392:	2b04      	cmp	r3, #4
 800b394:	bf02      	ittt	eq
 800b396:	68e5      	ldreq	r5, [r4, #12]
 800b398:	6833      	ldreq	r3, [r6, #0]
 800b39a:	1aed      	subeq	r5, r5, r3
 800b39c:	68a3      	ldr	r3, [r4, #8]
 800b39e:	bf0c      	ite	eq
 800b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a4:	2500      	movne	r5, #0
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bfc4      	itt	gt
 800b3aa:	1a9b      	subgt	r3, r3, r2
 800b3ac:	18ed      	addgt	r5, r5, r3
 800b3ae:	2600      	movs	r6, #0
 800b3b0:	341a      	adds	r4, #26
 800b3b2:	42b5      	cmp	r5, r6
 800b3b4:	d11a      	bne.n	800b3ec <_printf_common+0xc8>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e008      	b.n	800b3cc <_printf_common+0xa8>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	47c0      	blx	r8
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d103      	bne.n	800b3d0 <_printf_common+0xac>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	e7c6      	b.n	800b362 <_printf_common+0x3e>
 800b3d4:	18e1      	adds	r1, r4, r3
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	2030      	movs	r0, #48	; 0x30
 800b3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3de:	4422      	add	r2, r4
 800b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	e7c7      	b.n	800b37c <_printf_common+0x58>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	47c0      	blx	r8
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d0e6      	beq.n	800b3c8 <_printf_common+0xa4>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_common+0x8e>
	...

0800b400 <_printf_i>:
 800b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	7e0f      	ldrb	r7, [r1, #24]
 800b406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b408:	2f78      	cmp	r7, #120	; 0x78
 800b40a:	4691      	mov	r9, r2
 800b40c:	4680      	mov	r8, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	469a      	mov	sl, r3
 800b412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b416:	d807      	bhi.n	800b428 <_printf_i+0x28>
 800b418:	2f62      	cmp	r7, #98	; 0x62
 800b41a:	d80a      	bhi.n	800b432 <_printf_i+0x32>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	f000 80d4 	beq.w	800b5ca <_printf_i+0x1ca>
 800b422:	2f58      	cmp	r7, #88	; 0x58
 800b424:	f000 80c0 	beq.w	800b5a8 <_printf_i+0x1a8>
 800b428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b430:	e03a      	b.n	800b4a8 <_printf_i+0xa8>
 800b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b436:	2b15      	cmp	r3, #21
 800b438:	d8f6      	bhi.n	800b428 <_printf_i+0x28>
 800b43a:	a101      	add	r1, pc, #4	; (adr r1, 800b440 <_printf_i+0x40>)
 800b43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b4ad 	.word	0x0800b4ad
 800b448:	0800b429 	.word	0x0800b429
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b429 	.word	0x0800b429
 800b454:	0800b429 	.word	0x0800b429
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b429 	.word	0x0800b429
 800b460:	0800b429 	.word	0x0800b429
 800b464:	0800b429 	.word	0x0800b429
 800b468:	0800b429 	.word	0x0800b429
 800b46c:	0800b5b1 	.word	0x0800b5b1
 800b470:	0800b4d9 	.word	0x0800b4d9
 800b474:	0800b56b 	.word	0x0800b56b
 800b478:	0800b429 	.word	0x0800b429
 800b47c:	0800b429 	.word	0x0800b429
 800b480:	0800b5d3 	.word	0x0800b5d3
 800b484:	0800b429 	.word	0x0800b429
 800b488:	0800b4d9 	.word	0x0800b4d9
 800b48c:	0800b429 	.word	0x0800b429
 800b490:	0800b429 	.word	0x0800b429
 800b494:	0800b573 	.word	0x0800b573
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	1d1a      	adds	r2, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	602a      	str	r2, [r5, #0]
 800b4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e09f      	b.n	800b5ec <_printf_i+0x1ec>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	682b      	ldr	r3, [r5, #0]
 800b4b0:	0607      	lsls	r7, r0, #24
 800b4b2:	f103 0104 	add.w	r1, r3, #4
 800b4b6:	6029      	str	r1, [r5, #0]
 800b4b8:	d501      	bpl.n	800b4be <_printf_i+0xbe>
 800b4ba:	681e      	ldr	r6, [r3, #0]
 800b4bc:	e003      	b.n	800b4c6 <_printf_i+0xc6>
 800b4be:	0646      	lsls	r6, r0, #25
 800b4c0:	d5fb      	bpl.n	800b4ba <_printf_i+0xba>
 800b4c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	da03      	bge.n	800b4d2 <_printf_i+0xd2>
 800b4ca:	232d      	movs	r3, #45	; 0x2d
 800b4cc:	4276      	negs	r6, r6
 800b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d2:	485a      	ldr	r0, [pc, #360]	; (800b63c <_printf_i+0x23c>)
 800b4d4:	230a      	movs	r3, #10
 800b4d6:	e012      	b.n	800b4fe <_printf_i+0xfe>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	1d19      	adds	r1, r3, #4
 800b4de:	6029      	str	r1, [r5, #0]
 800b4e0:	0605      	lsls	r5, r0, #24
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_i+0xe8>
 800b4e4:	681e      	ldr	r6, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <_printf_i+0xee>
 800b4e8:	0641      	lsls	r1, r0, #25
 800b4ea:	d5fb      	bpl.n	800b4e4 <_printf_i+0xe4>
 800b4ec:	881e      	ldrh	r6, [r3, #0]
 800b4ee:	4853      	ldr	r0, [pc, #332]	; (800b63c <_printf_i+0x23c>)
 800b4f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f2:	bf0c      	ite	eq
 800b4f4:	2308      	moveq	r3, #8
 800b4f6:	230a      	movne	r3, #10
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4fe:	6865      	ldr	r5, [r4, #4]
 800b500:	60a5      	str	r5, [r4, #8]
 800b502:	2d00      	cmp	r5, #0
 800b504:	bfa2      	ittt	ge
 800b506:	6821      	ldrge	r1, [r4, #0]
 800b508:	f021 0104 	bicge.w	r1, r1, #4
 800b50c:	6021      	strge	r1, [r4, #0]
 800b50e:	b90e      	cbnz	r6, 800b514 <_printf_i+0x114>
 800b510:	2d00      	cmp	r5, #0
 800b512:	d04b      	beq.n	800b5ac <_printf_i+0x1ac>
 800b514:	4615      	mov	r5, r2
 800b516:	fbb6 f1f3 	udiv	r1, r6, r3
 800b51a:	fb03 6711 	mls	r7, r3, r1, r6
 800b51e:	5dc7      	ldrb	r7, [r0, r7]
 800b520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b524:	4637      	mov	r7, r6
 800b526:	42bb      	cmp	r3, r7
 800b528:	460e      	mov	r6, r1
 800b52a:	d9f4      	bls.n	800b516 <_printf_i+0x116>
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d10b      	bne.n	800b548 <_printf_i+0x148>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	07de      	lsls	r6, r3, #31
 800b534:	d508      	bpl.n	800b548 <_printf_i+0x148>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6861      	ldr	r1, [r4, #4]
 800b53a:	4299      	cmp	r1, r3
 800b53c:	bfde      	ittt	le
 800b53e:	2330      	movle	r3, #48	; 0x30
 800b540:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b544:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b548:	1b52      	subs	r2, r2, r5
 800b54a:	6122      	str	r2, [r4, #16]
 800b54c:	f8cd a000 	str.w	sl, [sp]
 800b550:	464b      	mov	r3, r9
 800b552:	aa03      	add	r2, sp, #12
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff fee4 	bl	800b324 <_printf_common>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d14a      	bne.n	800b5f6 <_printf_i+0x1f6>
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	b004      	add	sp, #16
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	f043 0320 	orr.w	r3, r3, #32
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	4833      	ldr	r0, [pc, #204]	; (800b640 <_printf_i+0x240>)
 800b574:	2778      	movs	r7, #120	; 0x78
 800b576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	6829      	ldr	r1, [r5, #0]
 800b57e:	061f      	lsls	r7, r3, #24
 800b580:	f851 6b04 	ldr.w	r6, [r1], #4
 800b584:	d402      	bmi.n	800b58c <_printf_i+0x18c>
 800b586:	065f      	lsls	r7, r3, #25
 800b588:	bf48      	it	mi
 800b58a:	b2b6      	uxthmi	r6, r6
 800b58c:	07df      	lsls	r7, r3, #31
 800b58e:	bf48      	it	mi
 800b590:	f043 0320 	orrmi.w	r3, r3, #32
 800b594:	6029      	str	r1, [r5, #0]
 800b596:	bf48      	it	mi
 800b598:	6023      	strmi	r3, [r4, #0]
 800b59a:	b91e      	cbnz	r6, 800b5a4 <_printf_i+0x1a4>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	f023 0320 	bic.w	r3, r3, #32
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	e7a7      	b.n	800b4f8 <_printf_i+0xf8>
 800b5a8:	4824      	ldr	r0, [pc, #144]	; (800b63c <_printf_i+0x23c>)
 800b5aa:	e7e4      	b.n	800b576 <_printf_i+0x176>
 800b5ac:	4615      	mov	r5, r2
 800b5ae:	e7bd      	b.n	800b52c <_printf_i+0x12c>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	6826      	ldr	r6, [r4, #0]
 800b5b4:	6961      	ldr	r1, [r4, #20]
 800b5b6:	1d18      	adds	r0, r3, #4
 800b5b8:	6028      	str	r0, [r5, #0]
 800b5ba:	0635      	lsls	r5, r6, #24
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	d501      	bpl.n	800b5c4 <_printf_i+0x1c4>
 800b5c0:	6019      	str	r1, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <_printf_i+0x1ca>
 800b5c4:	0670      	lsls	r0, r6, #25
 800b5c6:	d5fb      	bpl.n	800b5c0 <_printf_i+0x1c0>
 800b5c8:	8019      	strh	r1, [r3, #0]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6123      	str	r3, [r4, #16]
 800b5ce:	4615      	mov	r5, r2
 800b5d0:	e7bc      	b.n	800b54c <_printf_i+0x14c>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	1d1a      	adds	r2, r3, #4
 800b5d6:	602a      	str	r2, [r5, #0]
 800b5d8:	681d      	ldr	r5, [r3, #0]
 800b5da:	6862      	ldr	r2, [r4, #4]
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f7f4 fdf6 	bl	80001d0 <memchr>
 800b5e4:	b108      	cbz	r0, 800b5ea <_printf_i+0x1ea>
 800b5e6:	1b40      	subs	r0, r0, r5
 800b5e8:	6060      	str	r0, [r4, #4]
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	6123      	str	r3, [r4, #16]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f4:	e7aa      	b.n	800b54c <_printf_i+0x14c>
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	47d0      	blx	sl
 800b600:	3001      	adds	r0, #1
 800b602:	d0ad      	beq.n	800b560 <_printf_i+0x160>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	079b      	lsls	r3, r3, #30
 800b608:	d413      	bmi.n	800b632 <_printf_i+0x232>
 800b60a:	68e0      	ldr	r0, [r4, #12]
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	4298      	cmp	r0, r3
 800b610:	bfb8      	it	lt
 800b612:	4618      	movlt	r0, r3
 800b614:	e7a6      	b.n	800b564 <_printf_i+0x164>
 800b616:	2301      	movs	r3, #1
 800b618:	4632      	mov	r2, r6
 800b61a:	4649      	mov	r1, r9
 800b61c:	4640      	mov	r0, r8
 800b61e:	47d0      	blx	sl
 800b620:	3001      	adds	r0, #1
 800b622:	d09d      	beq.n	800b560 <_printf_i+0x160>
 800b624:	3501      	adds	r5, #1
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	9903      	ldr	r1, [sp, #12]
 800b62a:	1a5b      	subs	r3, r3, r1
 800b62c:	42ab      	cmp	r3, r5
 800b62e:	dcf2      	bgt.n	800b616 <_printf_i+0x216>
 800b630:	e7eb      	b.n	800b60a <_printf_i+0x20a>
 800b632:	2500      	movs	r5, #0
 800b634:	f104 0619 	add.w	r6, r4, #25
 800b638:	e7f5      	b.n	800b626 <_printf_i+0x226>
 800b63a:	bf00      	nop
 800b63c:	0800bcd2 	.word	0x0800bcd2
 800b640:	0800bce3 	.word	0x0800bce3

0800b644 <__swbuf_r>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	460e      	mov	r6, r1
 800b648:	4614      	mov	r4, r2
 800b64a:	4605      	mov	r5, r0
 800b64c:	b118      	cbz	r0, 800b656 <__swbuf_r+0x12>
 800b64e:	6a03      	ldr	r3, [r0, #32]
 800b650:	b90b      	cbnz	r3, 800b656 <__swbuf_r+0x12>
 800b652:	f7fe f9d5 	bl	8009a00 <__sinit>
 800b656:	69a3      	ldr	r3, [r4, #24]
 800b658:	60a3      	str	r3, [r4, #8]
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	071a      	lsls	r2, r3, #28
 800b65e:	d525      	bpl.n	800b6ac <__swbuf_r+0x68>
 800b660:	6923      	ldr	r3, [r4, #16]
 800b662:	b31b      	cbz	r3, 800b6ac <__swbuf_r+0x68>
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	6922      	ldr	r2, [r4, #16]
 800b668:	1a98      	subs	r0, r3, r2
 800b66a:	6963      	ldr	r3, [r4, #20]
 800b66c:	b2f6      	uxtb	r6, r6
 800b66e:	4283      	cmp	r3, r0
 800b670:	4637      	mov	r7, r6
 800b672:	dc04      	bgt.n	800b67e <__swbuf_r+0x3a>
 800b674:	4621      	mov	r1, r4
 800b676:	4628      	mov	r0, r5
 800b678:	f7ff fc84 	bl	800af84 <_fflush_r>
 800b67c:	b9e0      	cbnz	r0, 800b6b8 <__swbuf_r+0x74>
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	3b01      	subs	r3, #1
 800b682:	60a3      	str	r3, [r4, #8]
 800b684:	6823      	ldr	r3, [r4, #0]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	6022      	str	r2, [r4, #0]
 800b68a:	701e      	strb	r6, [r3, #0]
 800b68c:	6962      	ldr	r2, [r4, #20]
 800b68e:	1c43      	adds	r3, r0, #1
 800b690:	429a      	cmp	r2, r3
 800b692:	d004      	beq.n	800b69e <__swbuf_r+0x5a>
 800b694:	89a3      	ldrh	r3, [r4, #12]
 800b696:	07db      	lsls	r3, r3, #31
 800b698:	d506      	bpl.n	800b6a8 <__swbuf_r+0x64>
 800b69a:	2e0a      	cmp	r6, #10
 800b69c:	d104      	bne.n	800b6a8 <__swbuf_r+0x64>
 800b69e:	4621      	mov	r1, r4
 800b6a0:	4628      	mov	r0, r5
 800b6a2:	f7ff fc6f 	bl	800af84 <_fflush_r>
 800b6a6:	b938      	cbnz	r0, 800b6b8 <__swbuf_r+0x74>
 800b6a8:	4638      	mov	r0, r7
 800b6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ac:	4621      	mov	r1, r4
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f000 f806 	bl	800b6c0 <__swsetup_r>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d0d5      	beq.n	800b664 <__swbuf_r+0x20>
 800b6b8:	f04f 37ff 	mov.w	r7, #4294967295
 800b6bc:	e7f4      	b.n	800b6a8 <__swbuf_r+0x64>
	...

0800b6c0 <__swsetup_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4b2a      	ldr	r3, [pc, #168]	; (800b76c <__swsetup_r+0xac>)
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	6818      	ldr	r0, [r3, #0]
 800b6c8:	460c      	mov	r4, r1
 800b6ca:	b118      	cbz	r0, 800b6d4 <__swsetup_r+0x14>
 800b6cc:	6a03      	ldr	r3, [r0, #32]
 800b6ce:	b90b      	cbnz	r3, 800b6d4 <__swsetup_r+0x14>
 800b6d0:	f7fe f996 	bl	8009a00 <__sinit>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6da:	0718      	lsls	r0, r3, #28
 800b6dc:	d422      	bmi.n	800b724 <__swsetup_r+0x64>
 800b6de:	06d9      	lsls	r1, r3, #27
 800b6e0:	d407      	bmi.n	800b6f2 <__swsetup_r+0x32>
 800b6e2:	2309      	movs	r3, #9
 800b6e4:	602b      	str	r3, [r5, #0]
 800b6e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b6f0:	e034      	b.n	800b75c <__swsetup_r+0x9c>
 800b6f2:	0758      	lsls	r0, r3, #29
 800b6f4:	d512      	bpl.n	800b71c <__swsetup_r+0x5c>
 800b6f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6f8:	b141      	cbz	r1, 800b70c <__swsetup_r+0x4c>
 800b6fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6fe:	4299      	cmp	r1, r3
 800b700:	d002      	beq.n	800b708 <__swsetup_r+0x48>
 800b702:	4628      	mov	r0, r5
 800b704:	f7fe fa9c 	bl	8009c40 <_free_r>
 800b708:	2300      	movs	r3, #0
 800b70a:	6363      	str	r3, [r4, #52]	; 0x34
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b712:	81a3      	strh	r3, [r4, #12]
 800b714:	2300      	movs	r3, #0
 800b716:	6063      	str	r3, [r4, #4]
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f043 0308 	orr.w	r3, r3, #8
 800b722:	81a3      	strh	r3, [r4, #12]
 800b724:	6923      	ldr	r3, [r4, #16]
 800b726:	b94b      	cbnz	r3, 800b73c <__swsetup_r+0x7c>
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b72e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b732:	d003      	beq.n	800b73c <__swsetup_r+0x7c>
 800b734:	4621      	mov	r1, r4
 800b736:	4628      	mov	r0, r5
 800b738:	f000 f884 	bl	800b844 <__smakebuf_r>
 800b73c:	89a0      	ldrh	r0, [r4, #12]
 800b73e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b742:	f010 0301 	ands.w	r3, r0, #1
 800b746:	d00a      	beq.n	800b75e <__swsetup_r+0x9e>
 800b748:	2300      	movs	r3, #0
 800b74a:	60a3      	str	r3, [r4, #8]
 800b74c:	6963      	ldr	r3, [r4, #20]
 800b74e:	425b      	negs	r3, r3
 800b750:	61a3      	str	r3, [r4, #24]
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	b943      	cbnz	r3, 800b768 <__swsetup_r+0xa8>
 800b756:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b75a:	d1c4      	bne.n	800b6e6 <__swsetup_r+0x26>
 800b75c:	bd38      	pop	{r3, r4, r5, pc}
 800b75e:	0781      	lsls	r1, r0, #30
 800b760:	bf58      	it	pl
 800b762:	6963      	ldrpl	r3, [r4, #20]
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	e7f4      	b.n	800b752 <__swsetup_r+0x92>
 800b768:	2000      	movs	r0, #0
 800b76a:	e7f7      	b.n	800b75c <__swsetup_r+0x9c>
 800b76c:	200001d0 	.word	0x200001d0

0800b770 <_raise_r>:
 800b770:	291f      	cmp	r1, #31
 800b772:	b538      	push	{r3, r4, r5, lr}
 800b774:	4604      	mov	r4, r0
 800b776:	460d      	mov	r5, r1
 800b778:	d904      	bls.n	800b784 <_raise_r+0x14>
 800b77a:	2316      	movs	r3, #22
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	f04f 30ff 	mov.w	r0, #4294967295
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b786:	b112      	cbz	r2, 800b78e <_raise_r+0x1e>
 800b788:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b78c:	b94b      	cbnz	r3, 800b7a2 <_raise_r+0x32>
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 f830 	bl	800b7f4 <_getpid_r>
 800b794:	462a      	mov	r2, r5
 800b796:	4601      	mov	r1, r0
 800b798:	4620      	mov	r0, r4
 800b79a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b79e:	f000 b817 	b.w	800b7d0 <_kill_r>
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d00a      	beq.n	800b7bc <_raise_r+0x4c>
 800b7a6:	1c59      	adds	r1, r3, #1
 800b7a8:	d103      	bne.n	800b7b2 <_raise_r+0x42>
 800b7aa:	2316      	movs	r3, #22
 800b7ac:	6003      	str	r3, [r0, #0]
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	e7e7      	b.n	800b782 <_raise_r+0x12>
 800b7b2:	2400      	movs	r4, #0
 800b7b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b7b8:	4628      	mov	r0, r5
 800b7ba:	4798      	blx	r3
 800b7bc:	2000      	movs	r0, #0
 800b7be:	e7e0      	b.n	800b782 <_raise_r+0x12>

0800b7c0 <raise>:
 800b7c0:	4b02      	ldr	r3, [pc, #8]	; (800b7cc <raise+0xc>)
 800b7c2:	4601      	mov	r1, r0
 800b7c4:	6818      	ldr	r0, [r3, #0]
 800b7c6:	f7ff bfd3 	b.w	800b770 <_raise_r>
 800b7ca:	bf00      	nop
 800b7cc:	200001d0 	.word	0x200001d0

0800b7d0 <_kill_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d07      	ldr	r5, [pc, #28]	; (800b7f0 <_kill_r+0x20>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4604      	mov	r4, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	4611      	mov	r1, r2
 800b7dc:	602b      	str	r3, [r5, #0]
 800b7de:	f7f8 fa03 	bl	8003be8 <_kill>
 800b7e2:	1c43      	adds	r3, r0, #1
 800b7e4:	d102      	bne.n	800b7ec <_kill_r+0x1c>
 800b7e6:	682b      	ldr	r3, [r5, #0]
 800b7e8:	b103      	cbz	r3, 800b7ec <_kill_r+0x1c>
 800b7ea:	6023      	str	r3, [r4, #0]
 800b7ec:	bd38      	pop	{r3, r4, r5, pc}
 800b7ee:	bf00      	nop
 800b7f0:	20000b08 	.word	0x20000b08

0800b7f4 <_getpid_r>:
 800b7f4:	f7f8 b9f0 	b.w	8003bd8 <_getpid>

0800b7f8 <__swhatbuf_r>:
 800b7f8:	b570      	push	{r4, r5, r6, lr}
 800b7fa:	460c      	mov	r4, r1
 800b7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b800:	2900      	cmp	r1, #0
 800b802:	b096      	sub	sp, #88	; 0x58
 800b804:	4615      	mov	r5, r2
 800b806:	461e      	mov	r6, r3
 800b808:	da0d      	bge.n	800b826 <__swhatbuf_r+0x2e>
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b810:	f04f 0100 	mov.w	r1, #0
 800b814:	bf0c      	ite	eq
 800b816:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b81a:	2340      	movne	r3, #64	; 0x40
 800b81c:	2000      	movs	r0, #0
 800b81e:	6031      	str	r1, [r6, #0]
 800b820:	602b      	str	r3, [r5, #0]
 800b822:	b016      	add	sp, #88	; 0x58
 800b824:	bd70      	pop	{r4, r5, r6, pc}
 800b826:	466a      	mov	r2, sp
 800b828:	f000 f848 	bl	800b8bc <_fstat_r>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	dbec      	blt.n	800b80a <__swhatbuf_r+0x12>
 800b830:	9901      	ldr	r1, [sp, #4]
 800b832:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b836:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b83a:	4259      	negs	r1, r3
 800b83c:	4159      	adcs	r1, r3
 800b83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b842:	e7eb      	b.n	800b81c <__swhatbuf_r+0x24>

0800b844 <__smakebuf_r>:
 800b844:	898b      	ldrh	r3, [r1, #12]
 800b846:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b848:	079d      	lsls	r5, r3, #30
 800b84a:	4606      	mov	r6, r0
 800b84c:	460c      	mov	r4, r1
 800b84e:	d507      	bpl.n	800b860 <__smakebuf_r+0x1c>
 800b850:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b854:	6023      	str	r3, [r4, #0]
 800b856:	6123      	str	r3, [r4, #16]
 800b858:	2301      	movs	r3, #1
 800b85a:	6163      	str	r3, [r4, #20]
 800b85c:	b002      	add	sp, #8
 800b85e:	bd70      	pop	{r4, r5, r6, pc}
 800b860:	ab01      	add	r3, sp, #4
 800b862:	466a      	mov	r2, sp
 800b864:	f7ff ffc8 	bl	800b7f8 <__swhatbuf_r>
 800b868:	9900      	ldr	r1, [sp, #0]
 800b86a:	4605      	mov	r5, r0
 800b86c:	4630      	mov	r0, r6
 800b86e:	f7fe fdab 	bl	800a3c8 <_malloc_r>
 800b872:	b948      	cbnz	r0, 800b888 <__smakebuf_r+0x44>
 800b874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b878:	059a      	lsls	r2, r3, #22
 800b87a:	d4ef      	bmi.n	800b85c <__smakebuf_r+0x18>
 800b87c:	f023 0303 	bic.w	r3, r3, #3
 800b880:	f043 0302 	orr.w	r3, r3, #2
 800b884:	81a3      	strh	r3, [r4, #12]
 800b886:	e7e3      	b.n	800b850 <__smakebuf_r+0xc>
 800b888:	89a3      	ldrh	r3, [r4, #12]
 800b88a:	6020      	str	r0, [r4, #0]
 800b88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	9b00      	ldr	r3, [sp, #0]
 800b894:	6163      	str	r3, [r4, #20]
 800b896:	9b01      	ldr	r3, [sp, #4]
 800b898:	6120      	str	r0, [r4, #16]
 800b89a:	b15b      	cbz	r3, 800b8b4 <__smakebuf_r+0x70>
 800b89c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f000 f81d 	bl	800b8e0 <_isatty_r>
 800b8a6:	b128      	cbz	r0, 800b8b4 <__smakebuf_r+0x70>
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	f043 0301 	orr.w	r3, r3, #1
 800b8b2:	81a3      	strh	r3, [r4, #12]
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	431d      	orrs	r5, r3
 800b8b8:	81a5      	strh	r5, [r4, #12]
 800b8ba:	e7cf      	b.n	800b85c <__smakebuf_r+0x18>

0800b8bc <_fstat_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	4d07      	ldr	r5, [pc, #28]	; (800b8dc <_fstat_r+0x20>)
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	602b      	str	r3, [r5, #0]
 800b8ca:	f7f8 f9ec 	bl	8003ca6 <_fstat>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	d102      	bne.n	800b8d8 <_fstat_r+0x1c>
 800b8d2:	682b      	ldr	r3, [r5, #0]
 800b8d4:	b103      	cbz	r3, 800b8d8 <_fstat_r+0x1c>
 800b8d6:	6023      	str	r3, [r4, #0]
 800b8d8:	bd38      	pop	{r3, r4, r5, pc}
 800b8da:	bf00      	nop
 800b8dc:	20000b08 	.word	0x20000b08

0800b8e0 <_isatty_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	4d06      	ldr	r5, [pc, #24]	; (800b8fc <_isatty_r+0x1c>)
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	602b      	str	r3, [r5, #0]
 800b8ec:	f7f8 f9eb 	bl	8003cc6 <_isatty>
 800b8f0:	1c43      	adds	r3, r0, #1
 800b8f2:	d102      	bne.n	800b8fa <_isatty_r+0x1a>
 800b8f4:	682b      	ldr	r3, [r5, #0]
 800b8f6:	b103      	cbz	r3, 800b8fa <_isatty_r+0x1a>
 800b8f8:	6023      	str	r3, [r4, #0]
 800b8fa:	bd38      	pop	{r3, r4, r5, pc}
 800b8fc:	20000b08 	.word	0x20000b08

0800b900 <_init>:
 800b900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b902:	bf00      	nop
 800b904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b906:	bc08      	pop	{r3}
 800b908:	469e      	mov	lr, r3
 800b90a:	4770      	bx	lr

0800b90c <_fini>:
 800b90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90e:	bf00      	nop
 800b910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b912:	bc08      	pop	{r3}
 800b914:	469e      	mov	lr, r3
 800b916:	4770      	bx	lr

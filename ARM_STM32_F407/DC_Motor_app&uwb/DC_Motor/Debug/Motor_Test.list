
Motor_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c330  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  0800c4c0  0800c4c0  0001c4c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c924  0800c924  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c924  0800c924  0001c924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c92c  0800c92c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c930  0800c930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d4  2**0
                  CONTENTS
 10 .bss          0000086c  200001d8  200001d8  000201d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000a44  20000a44  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001287f  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026bb  00000000  00000000  00032ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010c0  00000000  00000000  00035188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d16  00000000  00000000  00036248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023d93  00000000  00000000  00036f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013347  00000000  00000000  0005acf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ddae6  00000000  00000000  0006e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b7c  00000000  00000000  0014bb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0015169c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c4a8 	.word	0x0800c4a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800c4a8 	.word	0x0800c4a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <HAL_TIM_PeriodElapsedCallback>:
   }
}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b090      	sub	sp, #64	; 0x40
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM7)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a47      	ldr	r2, [pc, #284]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	f040 85ab 	bne.w	8001b5a <HAL_TIM_PeriodElapsedCallback+0xb6a>
   {
	   	  start_flag = 1;
 8001004:	4b46      	ldr	r3, [pc, #280]	; (8001120 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
		  motor1_enc_counter = TIM3->CNT;
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100e:	461a      	mov	r2, r3
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001012:	601a      	str	r2, [r3, #0]
		  TIM3->CNT = 0;
 8001014:	4b43      	ldr	r3, [pc, #268]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

		  if(yaw_angle == 0.0)
 800101a:	4b44      	ldr	r3, [pc, #272]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800101c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001020:	f04f 0200 	mov.w	r2, #0
 8001024:	f04f 0300 	mov.w	r3, #0
 8001028:	f7ff fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d005      	beq.n	800103e <HAL_TIM_PeriodElapsedCallback+0x4e>
		  {
			  yaw_angle = yaw_angle_pri;
 8001032:	4b3f      	ldr	r3, [pc, #252]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	493c      	ldr	r1, [pc, #240]	; (800112c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800103a:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  start_flag_1 ++;
 800103e:	4b3d      	ldr	r3, [pc, #244]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a3b      	ldr	r2, [pc, #236]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001046:	6013      	str	r3, [r2, #0]

		  if(start_flag_1 >= 5)
 8001048:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b04      	cmp	r3, #4
 800104e:	dd05      	ble.n	800105c <HAL_TIM_PeriodElapsedCallback+0x6c>
		  {
			  start_flag_2 = 1;
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
			  start_flag_1 = 5;
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001058:	2205      	movs	r2, #5
 800105a:	601a      	str	r2, [r3, #0]
		  }

		  if(motor1_enc_counter >= 0 && motor1_enc_counter <= 30000)
 800105c:	4b32      	ldr	r3, [pc, #200]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	db09      	blt.n	8001078 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001064:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f247 5230 	movw	r2, #30000	; 0x7530
 800106c:	4293      	cmp	r3, r2
 800106e:	dc03      	bgt.n	8001078 <HAL_TIM_PeriodElapsedCallback+0x88>
		  {
			  direction_m1_check  = 1;
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	e014      	b.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0xb2>
		  }
		  else if(motor1_enc_counter <= 65535 && motor1_enc_counter >= 35535)
 8001078:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001080:	da0f      	bge.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f648 22ce 	movw	r2, #35534	; 0x8ace
 800108a:	4293      	cmp	r3, r2
 800108c:	dd09      	ble.n	80010a2 <HAL_TIM_PeriodElapsedCallback+0xb2>
		  {
			  motor1_enc_counter = motor1_enc_counter - 65535;
 800108e:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001096:	3bff      	subs	r3, #255	; 0xff
 8001098:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800109a:	6013      	str	r3, [r2, #0]
			  direction_m1_check = 0;
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
		  }

		  motor2_enc_counter = TIM1->CNT;
 80010a2:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010aa:	601a      	str	r2, [r3, #0]
		  TIM1->CNT = 0;
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	625a      	str	r2, [r3, #36]	; 0x24

		  if(motor2_enc_counter >= 0 && motor2_enc_counter <= 30000)
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db09      	blt.n	80010ce <HAL_TIM_PeriodElapsedCallback+0xde>
 80010ba:	4b22      	ldr	r3, [pc, #136]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f247 5230 	movw	r2, #30000	; 0x7530
 80010c2:	4293      	cmp	r3, r2
 80010c4:	dc03      	bgt.n	80010ce <HAL_TIM_PeriodElapsedCallback+0xde>
		  {
			  direction_m2_check  = 1;
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	701a      	strb	r2, [r3, #0]
 80010cc:	e014      	b.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x108>
		  }
		  else if(motor2_enc_counter <= 65535 && motor2_enc_counter >= 35535)
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d6:	da0f      	bge.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x108>
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f648 22ce 	movw	r2, #35534	; 0x8ace
 80010e0:	4293      	cmp	r3, r2
 80010e2:	dd09      	ble.n	80010f8 <HAL_TIM_PeriodElapsedCallback+0x108>
		  {
			  motor2_enc_counter = motor2_enc_counter - 65535;
 80010e4:	4b17      	ldr	r3, [pc, #92]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80010ec:	3bff      	subs	r3, #255	; 0xff
 80010ee:	4a15      	ldr	r2, [pc, #84]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80010f0:	6013      	str	r3, [r2, #0]
			  direction_m2_check = 0;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
		  }

		  if(test_linear_data > 3.0)
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80010fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001104:	f7ff fd08 	bl	8000b18 <__aeabi_dcmpgt>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d022      	beq.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x164>
		  {
			  test_linear_data = 3.0;
 800110e:	490f      	ldr	r1, [pc, #60]	; (800114c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001116:	e9c1 2300 	strd	r2, r3, [r1]
 800111a:	e02c      	b.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x186>
 800111c:	40001400 	.word	0x40001400
 8001120:	20000724 	.word	0x20000724
 8001124:	40000400 	.word	0x40000400
 8001128:	200006bc 	.word	0x200006bc
 800112c:	20000830 	.word	0x20000830
 8001130:	20000848 	.word	0x20000848
 8001134:	20000728 	.word	0x20000728
 8001138:	2000072c 	.word	0x2000072c
 800113c:	2000068a 	.word	0x2000068a
 8001140:	40010000 	.word	0x40010000
 8001144:	200006d0 	.word	0x200006d0
 8001148:	2000068b 	.word	0x2000068b
 800114c:	200007f8 	.word	0x200007f8
 8001150:	40080000 	.word	0x40080000
		  }
		  else if(test_linear_data < -3.0)
 8001154:	4bac      	ldr	r3, [pc, #688]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	4bab      	ldr	r3, [pc, #684]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001160:	f7ff fcbc 	bl	8000adc <__aeabi_dcmplt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d005      	beq.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x186>
		  {
			  test_linear_data = -3.0;
 800116a:	49a7      	ldr	r1, [pc, #668]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4ba6      	ldr	r3, [pc, #664]	; (800140c <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001172:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  linear_data = test_linear_data;
 8001176:	4ba4      	ldr	r3, [pc, #656]	; (8001408 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	49a4      	ldr	r1, [pc, #656]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]

		  if(linear_data == 0)
 8001182:	4ba3      	ldr	r3, [pc, #652]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	f7ff fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d021      	beq.n	80011de <HAL_TIM_PeriodElapsedCallback+0x1ee>
		  {
			  motor1_goal_count = 0;
 800119a:	499e      	ldr	r1, [pc, #632]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x424>)
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	f04f 0300 	mov.w	r3, #0
 80011a4:	e9c1 2300 	strd	r2, r3, [r1]
			  motor2_goal_count = 0;
 80011a8:	499b      	ldr	r1, [pc, #620]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	e9c1 2300 	strd	r2, r3, [r1]

			  pwm_m1 = 0;
 80011b6:	4b99      	ldr	r3, [pc, #612]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
			  pwm_m2 = 0;
 80011bc:	4b98      	ldr	r3, [pc, #608]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
			  goal_rpm_motor1 = 0;
 80011c2:	4998      	ldr	r1, [pc, #608]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x434>)
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	f04f 0300 	mov.w	r3, #0
 80011cc:	e9c1 2300 	strd	r2, r3, [r1]
			  goal_rpm_motor2 = 0;
 80011d0:	4995      	ldr	r1, [pc, #596]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  if(flag_1 == 1)
 80011de:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d108      	bne.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x208>
		  {
			  flag_1 = 0;
 80011e6:	4b91      	ldr	r3, [pc, #580]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]

			  pwm_m1_final = 0;
 80011ec:	4b90      	ldr	r3, [pc, #576]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x440>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
			  pwm_m2_final = 0;
 80011f2:	4b90      	ldr	r3, [pc, #576]	; (8001434 <HAL_TIM_PeriodElapsedCallback+0x444>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		  }

		  P_gain_1 = P_GAIN_1;
 80011f8:	498f      	ldr	r1, [pc, #572]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b8f      	ldr	r3, [pc, #572]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001200:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_1 = I_GAIN_1;
 8001204:	498e      	ldr	r1, [pc, #568]	; (8001440 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_1 = D_GAIN_1;
 8001210:	498c      	ldr	r1, [pc, #560]	; (8001444 <HAL_TIM_PeriodElapsedCallback+0x454>)
 8001212:	a377      	add	r3, pc, #476	; (adr r3, 80013f0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
		  P_gain_2 = P_GAIN_2;
 800121c:	498a      	ldr	r1, [pc, #552]	; (8001448 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b86      	ldr	r3, [pc, #536]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001224:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_2 = I_GAIN_2;
 8001228:	4988      	ldr	r1, [pc, #544]	; (800144c <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800122a:	a36f      	add	r3, pc, #444	; (adr r3, 80013e8 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_2 = D_GAIN_2;
 8001234:	4986      	ldr	r1, [pc, #536]	; (8001450 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001236:	a36e      	add	r3, pc, #440	; (adr r3, 80013f0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	e9c1 2300 	strd	r2, r3, [r1]

		  P_gain_YAW = P_GAIN_YAW;
 8001240:	4984      	ldr	r1, [pc, #528]	; (8001454 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	4b84      	ldr	r3, [pc, #528]	; (8001458 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001248:	e9c1 2300 	strd	r2, r3, [r1]
		  I_gain_YAW = I_GAIN_YAW;
 800124c:	4983      	ldr	r1, [pc, #524]	; (800145c <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800124e:	a36a      	add	r3, pc, #424	; (adr r3, 80013f8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	e9c1 2300 	strd	r2, r3, [r1]
		  D_gain_YAW = D_GAIN_YAW;
 8001258:	4981      	ldr	r1, [pc, #516]	; (8001460 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	e9c1 2300 	strd	r2, r3, [r1]

		  //linear_data = test_linear_data;

		  //MOTOR1 GOAL RPM
		  goal_rpm_motor1 =((linear_data * 60.0) / (PI * WHEEL_DIAMETER));
 8001266:	4b6a      	ldr	r3, [pc, #424]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001268:	e9d3 0100 	ldrd	r0, r1, [r3]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001272:	f7ff f9c1 	bl	80005f8 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a360      	add	r3, pc, #384	; (adr r3, 8001400 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fae2 	bl	800084c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4965      	ldr	r1, [pc, #404]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x434>)
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
		  motor1_goal_count = ((0.02 * PPR_MOTOR1 * goal_rpm_motor1 * MOTOR_REDUCER) / 60.0); //motor1
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b72      	ldr	r3, [pc, #456]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800129e:	f7ff f9ab 	bl	80005f8 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	4b6f      	ldr	r3, [pc, #444]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 80012b0:	f7ff f9a2 	bl	80005f8 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80012c2:	f7ff fac3 	bl	800084c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4952      	ldr	r1, [pc, #328]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80012cc:	e9c1 2300 	strd	r2, r3, [r1]
		  //MOTOR2 GOAL RPM
		  goal_rpm_motor2 =((linear_data * 60.0) / (PI * WHEEL_DIAMETER));
 80012d0:	4b4f      	ldr	r3, [pc, #316]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80012d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b62      	ldr	r3, [pc, #392]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x474>)
 80012dc:	f7ff f98c 	bl	80005f8 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	a345      	add	r3, pc, #276	; (adr r3, 8001400 <HAL_TIM_PeriodElapsedCallback+0x410>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff faad 	bl	800084c <__aeabi_ddiv>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	494c      	ldr	r1, [pc, #304]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80012f8:	e9c1 2300 	strd	r2, r3, [r1]
		  motor2_goal_count = ((0.02 * PPR_MOTOR2 * goal_rpm_motor2 * MOTOR_REDUCER) / 60.0); //motor2
 80012fc:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x438>)
 80012fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b58      	ldr	r3, [pc, #352]	; (8001468 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001308:	f7ff f976 	bl	80005f8 <__aeabi_dmul>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800131a:	f7ff f96d 	bl	80005f8 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	4b4e      	ldr	r3, [pc, #312]	; (8001464 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800132c:	f7ff fa8e 	bl	800084c <__aeabi_ddiv>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4938      	ldr	r1, [pc, #224]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001336:	e9c1 2300 	strd	r2, r3, [r1]
		  prev_linear_data = linear_data;
 800133a:	4b35      	ldr	r3, [pc, #212]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	494b      	ldr	r1, [pc, #300]	; (8001470 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001342:	e9c1 2300 	strd	r2, r3, [r1]

		  realError_m1 = (motor1_goal_count - motor1_enc_counter);
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001348:	e9d3 4500 	ldrd	r4, r5, [r3]
 800134c:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8e7 	bl	8000524 <__aeabi_i2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7fe ff93 	bl	8000288 <__aeabi_dsub>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4944      	ldr	r1, [pc, #272]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001368:	e9c1 2300 	strd	r2, r3, [r1]
		  realError_m2 = (motor2_goal_count - motor2_enc_counter);
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800136e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8d4 	bl	8000524 <__aeabi_i2d>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4620      	mov	r0, r4
 8001382:	4629      	mov	r1, r5
 8001384:	f7fe ff80 	bl	8000288 <__aeabi_dsub>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	493c      	ldr	r1, [pc, #240]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x490>)
 800138e:	e9c1 2300 	strd	r2, r3, [r1]


		  if(icontrol_cnt >= 50)
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x494>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2b31      	cmp	r3, #49	; 0x31
 8001398:	dd0e      	ble.n	80013b8 <HAL_TIM_PeriodElapsedCallback+0x3c8>
		  {
			 icontrol_m1 = 0;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x498>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
			 icontrol_m2 = 0;
 80013a2:	4b3a      	ldr	r3, [pc, #232]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
			 icontrol_yaw = 0;
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
			 icontrol_cnt = 0;
 80013b2:	4b34      	ldr	r3, [pc, #208]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x494>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
		  }

		  //MOTOR1 PID
		  pcontrol_m1 = P_gain_1  * realError_m1;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80013ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f918 	bl	80005f8 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fc0a 	bl	8000be8 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a2f      	ldr	r2, [pc, #188]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x4a4>)
 80013d8:	6013      	str	r3, [r2, #0]
		  //icontrol_m1 = icontrol_m1 + I_gain_1  * realError_m1 * TIME;
		  dcontrol_m1 = D_gain_1 * (realError_m1 - prev_realError_m1) / TIME;
 80013da:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80013dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80013e0:	e05a      	b.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x4a8>
 80013e2:	bf00      	nop
 80013e4:	f3af 8000 	nop.w
 80013e8:	47ae147b 	.word	0x47ae147b
 80013ec:	3f847ae1 	.word	0x3f847ae1
 80013f0:	47ae147b 	.word	0x47ae147b
 80013f4:	3f747ae1 	.word	0x3f747ae1
 80013f8:	9999999a 	.word	0x9999999a
 80013fc:	3fb99999 	.word	0x3fb99999
 8001400:	4f91b8a5 	.word	0x4f91b8a5
 8001404:	3ff1171b 	.word	0x3ff1171b
 8001408:	200007f8 	.word	0x200007f8
 800140c:	c0080000 	.word	0xc0080000
 8001410:	20000658 	.word	0x20000658
 8001414:	20000668 	.word	0x20000668
 8001418:	20000670 	.word	0x20000670
 800141c:	200006ec 	.word	0x200006ec
 8001420:	200006f0 	.word	0x200006f0
 8001424:	20000700 	.word	0x20000700
 8001428:	20000708 	.word	0x20000708
 800142c:	200006e8 	.word	0x200006e8
 8001430:	200006f4 	.word	0x200006f4
 8001434:	200006f8 	.word	0x200006f8
 8001438:	20000858 	.word	0x20000858
 800143c:	3fe00000 	.word	0x3fe00000
 8001440:	20000860 	.word	0x20000860
 8001444:	20000868 	.word	0x20000868
 8001448:	20000870 	.word	0x20000870
 800144c:	20000878 	.word	0x20000878
 8001450:	20000880 	.word	0x20000880
 8001454:	20000888 	.word	0x20000888
 8001458:	402b0000 	.word	0x402b0000
 800145c:	20000890 	.word	0x20000890
 8001460:	20000898 	.word	0x20000898
 8001464:	404e0000 	.word	0x404e0000
 8001468:	40720000 	.word	0x40720000
 800146c:	40350000 	.word	0x40350000
 8001470:	20000660 	.word	0x20000660
 8001474:	200006bc 	.word	0x200006bc
 8001478:	20000740 	.word	0x20000740
 800147c:	200006d0 	.word	0x200006d0
 8001480:	20000758 	.word	0x20000758
 8001484:	200008dc 	.word	0x200008dc
 8001488:	20000734 	.word	0x20000734
 800148c:	2000074c 	.word	0x2000074c
 8001490:	20000764 	.word	0x20000764
 8001494:	20000730 	.word	0x20000730
 8001498:	4b91      	ldr	r3, [pc, #580]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f853 	bl	8000548 <__aeabi_f2d>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4620      	mov	r0, r4
 80014a8:	4629      	mov	r1, r5
 80014aa:	f7fe feed 	bl	8000288 <__aeabi_dsub>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7ff f89c 	bl	80005f8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	a381      	add	r3, pc, #516	; (adr r3, 80016d0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f9bd 	bl	800084c <__aeabi_ddiv>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb85 	bl	8000be8 <__aeabi_d2f>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a81      	ldr	r2, [pc, #516]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 80014e2:	6013      	str	r3, [r2, #0]
		  prev_realError_m1 = realError_m1;
 80014e4:	4b81      	ldr	r3, [pc, #516]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb7b 	bl	8000be8 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a7a      	ldr	r2, [pc, #488]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 80014f6:	6013      	str	r3, [r2, #0]

		  //MOTOR2 PID
		  pcontrol_m2 = P_gain_2  * realError_m2;
 80014f8:	4b7d      	ldr	r3, [pc, #500]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0x700>)
 80014fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014fe:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f878 	bl	80005f8 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb6a 	bl	8000be8 <__aeabi_d2f>
 8001514:	4603      	mov	r3, r0
 8001516:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x708>)
 8001518:	6013      	str	r3, [r2, #0]
		  //icontrol_m2 = icontrol_m2 + I_gain_2  * realError_m2 * TIME;
		  dcontrol_m2 = D_gain_2 * (realError_m2 - prev_realError_m2) / TIME;
 800151a:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 800151c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001520:	4b76      	ldr	r3, [pc, #472]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7fe fea9 	bl	8000288 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	4b70      	ldr	r3, [pc, #448]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x710>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f858 	bl	80005f8 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	a35f      	add	r3, pc, #380	; (adr r3, 80016d0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7ff f979 	bl	800084c <__aeabi_ddiv>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff fb41 	bl	8000be8 <__aeabi_d2f>
 8001566:	4603      	mov	r3, r0
 8001568:	4a66      	ldr	r2, [pc, #408]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x714>)
 800156a:	6013      	str	r3, [r2, #0]
		  prev_realError_m2 = realError_m2;
 800156c:	4b61      	ldr	r3, [pc, #388]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x704>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff fb37 	bl	8000be8 <__aeabi_d2f>
 800157a:	4603      	mov	r3, r0
 800157c:	4a5f      	ldr	r2, [pc, #380]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x70c>)
 800157e:	6013      	str	r3, [r2, #0]


		  //IMU PID
		  Gyro_yaw = Gyro_yaw*0.021;
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001582:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001586:	a354      	add	r3, pc, #336	; (adr r3, 80016d8 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f834 	bl	80005f8 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	495c      	ldr	r1, [pc, #368]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x718>)
 8001596:	e9c1 2300 	strd	r2, r3, [r1]
		  //gyro_test += Gyro_yaw;
		  realError_yaw = GYRO_YAW_GOAL_test - Gyro_yaw;
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x71c>)
 800159c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a0:	4b59      	ldr	r3, [pc, #356]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x718>)
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	f7fe fe6f 	bl	8000288 <__aeabi_dsub>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fb19 	bl	8000be8 <__aeabi_d2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4a55      	ldr	r2, [pc, #340]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80015ba:	6013      	str	r3, [r2, #0]

		  pcontrol_yaw = P_gain_YAW  * realError_yaw;
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc1 	bl	8000548 <__aeabi_f2d>
 80015c6:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x724>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f814 	bl	80005f8 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fb06 	bl	8000be8 <__aeabi_d2f>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a4e      	ldr	r2, [pc, #312]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x728>)
 80015e0:	6013      	str	r3, [r2, #0]

		  icontrol_yaw = icontrol_yaw + I_gain_YAW  * realError_yaw * TIME;
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffae 	bl	8000548 <__aeabi_f2d>
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x720>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffa7 	bl	8000548 <__aeabi_f2d>
 80015fa:	4b49      	ldr	r3, [pc, #292]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x730>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fffa 	bl	80005f8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	a330      	add	r3, pc, #192	; (adr r3, 80016d0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 800160e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001612:	f7fe fff1 	bl	80005f8 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7fe fe35 	bl	800028c <__adddf3>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fadd 	bl	8000be8 <__aeabi_d2f>
 800162e:	4603      	mov	r3, r0
 8001630:	4a3a      	ldr	r2, [pc, #232]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001632:	6013      	str	r3, [r2, #0]

		  dcontrol_yaw = D_gain_YAW  * (realError_yaw - prev_realError_yaw) / TIME;
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001636:	ed93 7a00 	vldr	s14, [r3]
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x734>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001644:	ee17 0a90 	vmov	r0, s15
 8001648:	f7fe ff7e 	bl	8000548 <__aeabi_f2d>
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4610      	mov	r0, r2
 800165c:	4619      	mov	r1, r3
 800165e:	a31c      	add	r3, pc, #112	; (adr r3, 80016d0 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7ff f8f2 	bl	800084c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faba 	bl	8000be8 <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4a2d      	ldr	r2, [pc, #180]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001678:	6013      	str	r3, [r2, #0]

		  prev_realError_yaw = realError_yaw;
 800167a:	4b25      	ldr	r3, [pc, #148]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x720>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a29      	ldr	r2, [pc, #164]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001680:	6013      	str	r3, [r2, #0]

		  yaw_angle_pid = pcontrol_yaw + dcontrol_yaw;//+ icontrol_yaw;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001684:	ed93 7a00 	vldr	s14, [r3]
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800168a:	edd3 7a00 	vldr	s15, [r3]
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	ee17 0a90 	vmov	r0, s15
 8001696:	f7fe ff57 	bl	8000548 <__aeabi_f2d>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4924      	ldr	r1, [pc, #144]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80016a0:	e9c1 2300 	strd	r2, r3, [r1]

		  if(yaw_angle_pid >= 500)
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80016a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	4b21      	ldr	r3, [pc, #132]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x744>)
 80016b0:	f7ff fa28 	bl	8000b04 <__aeabi_dcmpge>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d03e      	beq.n	8001738 <HAL_TIM_PeriodElapsedCallback+0x748>
		  {
			  yaw_angle_pid = 0;
 80016ba:	491d      	ldr	r1, [pc, #116]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x740>)
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	e9c1 2300 	strd	r2, r3, [r1]
 80016c8:	e048      	b.n	800175c <HAL_TIM_PeriodElapsedCallback+0x76c>
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	47ae147b 	.word	0x47ae147b
 80016d4:	3f947ae1 	.word	0x3f947ae1
 80016d8:	24dd2f1b 	.word	0x24dd2f1b
 80016dc:	3f958106 	.word	0x3f958106
 80016e0:	20000800 	.word	0x20000800
 80016e4:	20000868 	.word	0x20000868
 80016e8:	20000738 	.word	0x20000738
 80016ec:	20000740 	.word	0x20000740
 80016f0:	20000870 	.word	0x20000870
 80016f4:	20000758 	.word	0x20000758
 80016f8:	20000748 	.word	0x20000748
 80016fc:	20000804 	.word	0x20000804
 8001700:	20000880 	.word	0x20000880
 8001704:	20000750 	.word	0x20000750
 8001708:	20000818 	.word	0x20000818
 800170c:	20000680 	.word	0x20000680
 8001710:	2000076c 	.word	0x2000076c
 8001714:	20000888 	.word	0x20000888
 8001718:	20000760 	.word	0x20000760
 800171c:	20000764 	.word	0x20000764
 8001720:	20000890 	.word	0x20000890
 8001724:	20000770 	.word	0x20000770
 8001728:	20000898 	.word	0x20000898
 800172c:	20000768 	.word	0x20000768
 8001730:	20000838 	.word	0x20000838
 8001734:	407f4000 	.word	0x407f4000
		  }
		  else if(yaw_angle_pid <= -500)
 8001738:	4b63      	ldr	r3, [pc, #396]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 800173a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173e:	a360      	add	r3, pc, #384	; (adr r3, 80018c0 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7ff f9d4 	bl	8000af0 <__aeabi_dcmple>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d006      	beq.n	800175c <HAL_TIM_PeriodElapsedCallback+0x76c>
		  {
			  yaw_angle_pid = 0;
 800174e:	495e      	ldr	r1, [pc, #376]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9c1 2300 	strd	r2, r3, [r1]
		  }

		  motor1_pid = (pcontrol_m1) + (icontrol_m1) + (dcontrol_m1) - (yaw_angle_pid); //PID SUM
 800175c:	4b5b      	ldr	r3, [pc, #364]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 800175e:	ed93 7a00 	vldr	s14, [r3]
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8001764:	edd3 7a00 	vldr	s15, [r3]
 8001768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001776:	ee17 0a90 	vmov	r0, s15
 800177a:	f7fe fee5 	bl	8000548 <__aeabi_f2d>
 800177e:	4b52      	ldr	r3, [pc, #328]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fd80 	bl	8000288 <__aeabi_dsub>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4952      	ldr	r1, [pc, #328]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
		  motor1_pwm += motor1_pid;
 8001792:	4b52      	ldr	r3, [pc, #328]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8001794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001798:	4b4f      	ldr	r3, [pc, #316]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe fd75 	bl	800028c <__adddf3>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80017a8:	e9c1 2300 	strd	r2, r3, [r1]

		  motor2_pid = (pcontrol_m2) + (icontrol_m2) + (dcontrol_m2) + (yaw_angle_pid); //PID SUM
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 80017ae:	ed93 7a00 	vldr	s14, [r3]
 80017b2:	4b4c      	ldr	r3, [pc, #304]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017bc:	4b4a      	ldr	r3, [pc, #296]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c6:	ee17 0a90 	vmov	r0, s15
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80017d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d4:	f7fe fd5a 	bl	800028c <__adddf3>
 80017d8:	4602      	mov	r2, r0
 80017da:	460b      	mov	r3, r1
 80017dc:	4943      	ldr	r1, [pc, #268]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80017de:	e9c1 2300 	strd	r2, r3, [r1]
		  motor2_pwm += motor2_pid;
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80017e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e8:	4b40      	ldr	r3, [pc, #256]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fd4d 	bl	800028c <__adddf3>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	493e      	ldr	r1, [pc, #248]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 80017f8:	e9c1 2300 	strd	r2, r3, [r1]

		  pwm_m1 = (motor1_pwm * (3500.0 / 14000.0));
 80017fc:	4b37      	ldr	r3, [pc, #220]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80017fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 8001808:	f7fe fef6 	bl	80005f8 <__aeabi_dmul>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f7ff f9a0 	bl	8000b58 <__aeabi_d2iz>
 8001818:	4603      	mov	r3, r0
 800181a:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800181c:	6013      	str	r3, [r2, #0]
		  pwm_m2 = (motor2_pwm * (3500.0 / 14000.0));
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x900>)
 8001820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b32      	ldr	r3, [pc, #200]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x904>)
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f7ff f98f 	bl	8000b58 <__aeabi_d2iz>
 800183a:	4603      	mov	r3, r0
 800183c:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 800183e:	6013      	str	r3, [r2, #0]

		  if(pwm_m1 >= 0)
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db10      	blt.n	800186a <HAL_TIM_PeriodElapsedCallback+0x87a>
		  {
			  direction_motor1 = 1;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800184a:	2201      	movs	r2, #1
 800184c:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,direction_motor1); //dir_motor1 setting
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001858:	482a      	ldr	r0, [pc, #168]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x914>)
 800185a:	f003 fe79 	bl	8005550 <HAL_GPIO_WritePin>
			  pwm_m1_final = (unsigned int)(pwm_m1);
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e014      	b.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x8a4>
		  }
		  else if(pwm_m1 < 0)
 800186a:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da10      	bge.n	8001894 <HAL_TIM_PeriodElapsedCallback+0x8a4>
		  {
			  direction_motor1 = 0;
 8001872:	4b23      	ldr	r3, [pc, #140]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x910>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,direction_motor1); //dir_motor1 setting
 8001878:	4b21      	ldr	r3, [pc, #132]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x910>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001882:	4820      	ldr	r0, [pc, #128]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x914>)
 8001884:	f003 fe64 	bl	8005550 <HAL_GPIO_WritePin>
			  pwm_m1_final = (unsigned int)(-pwm_m1);
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0x908>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	425b      	negs	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	4b1d      	ldr	r3, [pc, #116]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x918>)
 8001892:	601a      	str	r2, [r3, #0]
		  }
		  if(pwm_m2 >= 0)
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db3b      	blt.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x924>
		  {
			  direction_motor2 = 1;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x91c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,direction_motor2); //dir_motor1 setting
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x91c>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ac:	4815      	ldr	r0, [pc, #84]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x914>)
 80018ae:	f003 fe4f 	bl	8005550 <HAL_GPIO_WritePin>
			  pwm_m2_final = (unsigned int)(pwm_m2);
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x90c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x920>)
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	e03f      	b.n	800193e <HAL_TIM_PeriodElapsedCallback+0x94e>
 80018be:	bf00      	nop
 80018c0:	00000000 	.word	0x00000000
 80018c4:	c07f4000 	.word	0xc07f4000
 80018c8:	20000838 	.word	0x20000838
 80018cc:	20000730 	.word	0x20000730
 80018d0:	20000734 	.word	0x20000734
 80018d4:	20000738 	.word	0x20000738
 80018d8:	200006c0 	.word	0x200006c0
 80018dc:	200006c8 	.word	0x200006c8
 80018e0:	20000748 	.word	0x20000748
 80018e4:	2000074c 	.word	0x2000074c
 80018e8:	20000750 	.word	0x20000750
 80018ec:	200006d8 	.word	0x200006d8
 80018f0:	200006e0 	.word	0x200006e0
 80018f4:	3fd00000 	.word	0x3fd00000
 80018f8:	200006ec 	.word	0x200006ec
 80018fc:	200006f0 	.word	0x200006f0
 8001900:	20000688 	.word	0x20000688
 8001904:	40020c00 	.word	0x40020c00
 8001908:	200006f4 	.word	0x200006f4
 800190c:	20000689 	.word	0x20000689
 8001910:	200006f8 	.word	0x200006f8
		  }
		  else if(pwm_m2 < 0)
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da10      	bge.n	800193e <HAL_TIM_PeriodElapsedCallback+0x94e>
		  {
			  direction_motor2 = 0;
 800191c:	4b9d      	ldr	r3, [pc, #628]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,direction_motor2); //dir_motor1 setting
 8001922:	4b9c      	ldr	r3, [pc, #624]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0xba4>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800192c:	489a      	ldr	r0, [pc, #616]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0xba8>)
 800192e:	f003 fe0f 	bl	8005550 <HAL_GPIO_WritePin>
			  pwm_m2_final = (unsigned int)(-pwm_m2);
 8001932:	4b97      	ldr	r3, [pc, #604]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0xba0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	425b      	negs	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xbac>)
 800193c:	601a      	str	r2, [r3, #0]
		  }

		  present_rpm_motor1 = (60.0 * motor1_enc_counter) / (0.02 * PPR_MOTOR1 * MOTOR_REDUCER);
 800193e:	4b98      	ldr	r3, [pc, #608]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdee 	bl	8000524 <__aeabi_i2d>
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	4b95      	ldr	r3, [pc, #596]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800194e:	f7fe fe53 	bl	80005f8 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	a383      	add	r3, pc, #524	; (adr r3, 8001b68 <HAL_TIM_PeriodElapsedCallback+0xb78>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe ff74 	bl	800084c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0xbb8>)
 800196a:	e9c1 2300 	strd	r2, r3, [r1]
		  present_rpm_motor2 = (60.0 * motor2_enc_counter) / (0.02 * PPR_MOTOR2 * MOTOR_REDUCER);
 800196e:	4b8f      	ldr	r3, [pc, #572]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fdd6 	bl	8000524 <__aeabi_i2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b89      	ldr	r3, [pc, #548]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0xbb4>)
 800197e:	f7fe fe3b 	bl	80005f8 <__aeabi_dmul>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	a377      	add	r3, pc, #476	; (adr r3, 8001b68 <HAL_TIM_PeriodElapsedCallback+0xb78>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7fe ff5c 	bl	800084c <__aeabi_ddiv>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4985      	ldr	r1, [pc, #532]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0xbc0>)
 800199a:	e9c1 2300 	strd	r2, r3, [r1]

		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, pwm_m1_final);
 800199e:	4b85      	ldr	r3, [pc, #532]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0xbc4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a85      	ldr	r2, [pc, #532]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0xbc8>)
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2, pwm_m2_final);
 80019a8:	4b84      	ldr	r3, [pc, #528]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0xbcc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a7b      	ldr	r2, [pc, #492]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0xbac>)
 80019ae:	6812      	ldr	r2, [r2, #0]
 80019b0:	639a      	str	r2, [r3, #56]	; 0x38


		  wheel_1 =  motor1_enc_counter*360.0/302400.0;
 80019b2:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fdb4 	bl	8000524 <__aeabi_i2d>
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 80019c2:	f7fe fe19 	bl	80005f8 <__aeabi_dmul>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	a368      	add	r3, pc, #416	; (adr r3, 8001b70 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe ff3a 	bl	800084c <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4979      	ldr	r1, [pc, #484]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 80019de:	e9c1 2300 	strd	r2, r3, [r1]
		  wheel_2 =  motor2_enc_counter*360.0/302400.0;
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd9c 	bl	8000524 <__aeabi_i2d>
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 80019f2:	f7fe fe01 	bl	80005f8 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	a35c      	add	r3, pc, #368	; (adr r3, 8001b70 <HAL_TIM_PeriodElapsedCallback+0xb80>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe ff22 	bl	800084c <__aeabi_ddiv>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	496e      	ldr	r1, [pc, #440]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8001a0e:	e9c1 2300 	strd	r2, r3, [r1]

		  wheel_1_distance = WHEEL_RADIUS*wheel_1*2*PI/360.0;
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xbd4>)
 8001a14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a18:	a357      	add	r3, pc, #348	; (adr r3, 8001b78 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fdeb 	bl	80005f8 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	f7fe fc2d 	bl	800028c <__adddf3>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	a351      	add	r3, pc, #324	; (adr r3, 8001b80 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fdda 	bl	80005f8 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	4b5b      	ldr	r3, [pc, #364]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8001a52:	f7fe fefb 	bl	800084c <__aeabi_ddiv>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	495c      	ldr	r1, [pc, #368]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8001a5c:	e9c1 2300 	strd	r2, r3, [r1]
		  wheel_2_distance = WHEEL_RADIUS*wheel_2*2*PI/360.0;
 8001a60:	4b59      	ldr	r3, [pc, #356]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xbd8>)
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	a344      	add	r3, pc, #272	; (adr r3, 8001b78 <HAL_TIM_PeriodElapsedCallback+0xb88>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fdc4 	bl	80005f8 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	f7fe fc06 	bl	800028c <__adddf3>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4610      	mov	r0, r2
 8001a86:	4619      	mov	r1, r3
 8001a88:	a33d      	add	r3, pc, #244	; (adr r3, 8001b80 <HAL_TIM_PeriodElapsedCallback+0xb90>)
 8001a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8e:	f7fe fdb3 	bl	80005f8 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xbd0>)
 8001aa0:	f7fe fed4 	bl	800084c <__aeabi_ddiv>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4949      	ldr	r1, [pc, #292]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8001aaa:	e9c1 2300 	strd	r2, r3, [r1]

		  delta_s = (wheel_1_distance+wheel_2_distance)/2*100000;
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xbdc>)
 8001ab0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ab4:	4b46      	ldr	r3, [pc, #280]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xbe0>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fbe7 	bl	800028c <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ace:	f7fe febd 	bl	800084c <__aeabi_ddiv>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4610      	mov	r0, r2
 8001ad8:	4619      	mov	r1, r3
 8001ada:	a32b      	add	r3, pc, #172	; (adr r3, 8001b88 <HAL_TIM_PeriodElapsedCallback+0xb98>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fd8a 	bl	80005f8 <__aeabi_dmul>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	493a      	ldr	r1, [pc, #232]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xbe4>)
 8001aea:	e9c1 2300 	strd	r2, r3, [r1]
		  //send_motor_data(0x02,0x06);
		  //sprintf(msg," %d %d \r\n", motor1_enc_counter, motor2_enc_counter);
		  //sprintf(msg," %.2f %.2f \r\n", wheel_1, wheel_1_distance);
		  //HAL_UART_Transmit_IT(&huart3, msg, sizeof(msg));
		  uint8_t tx_buffer[50];
		  sprintf((char*)tx_buffer, "Motor1: %d, Motor2: %d\r\n", motor1_enc_counter, motor2_enc_counter);
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f107 000c 	add.w	r0, r7, #12
 8001afa:	4937      	ldr	r1, [pc, #220]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xbe8>)
 8001afc:	f007 fed4 	bl	80098a8 <siprintf>
		  HAL_UART_Transmit(&huart3, tx_buffer, strlen((char*)tx_buffer), 100);
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fbb3 	bl	8000270 <strlen>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f107 010c 	add.w	r1, r7, #12
 8001b12:	2364      	movs	r3, #100	; 0x64
 8001b14:	4831      	ldr	r0, [pc, #196]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xbec>)
 8001b16:	f005 f9ef 	bl	8006ef8 <HAL_UART_Transmit>

		  motor1_enc_counter = 0;
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0xbb0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
		  motor2_enc_counter = 0;
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0xbbc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
		  receive_yaw_flag_1 = 0;
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0xbf0>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]
		  receive_yaw_flag = 0;
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0xbf4>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]

		  icontrol_cnt++;
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0xbf8>)
 8001b3a:	6013      	str	r3, [r2, #0]

		  yaw_angle_pri = yaw_angle;
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0xbfc>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	492b      	ldr	r1, [pc, #172]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0xc00>)
 8001b44:	e9c1 2300 	strd	r2, r3, [r1]
		  Gyro_yaw_pri = Gyro_yaw;
 8001b48:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0xc04>)
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	492a      	ldr	r1, [pc, #168]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0xc08>)
 8001b50:	e9c1 2300 	strd	r2, r3, [r1]

		  start_flag = 0;
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0xc0c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
   }
}
 8001b5a:	bf00      	nop
 8001b5c:	3740      	adds	r7, #64	; 0x40
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	bf00      	nop
 8001b64:	f3af 8000 	nop.w
 8001b68:	00000000 	.word	0x00000000
 8001b6c:	40b7a000 	.word	0x40b7a000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	41127500 	.word	0x41127500
 8001b78:	5c28f5c3 	.word	0x5c28f5c3
 8001b7c:	3fc5c28f 	.word	0x3fc5c28f
 8001b80:	fc8b007a 	.word	0xfc8b007a
 8001b84:	400921fa 	.word	0x400921fa
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40f86a00 	.word	0x40f86a00
 8001b90:	200006f0 	.word	0x200006f0
 8001b94:	20000689 	.word	0x20000689
 8001b98:	40020c00 	.word	0x40020c00
 8001b9c:	200006f8 	.word	0x200006f8
 8001ba0:	200006bc 	.word	0x200006bc
 8001ba4:	404e0000 	.word	0x404e0000
 8001ba8:	20000710 	.word	0x20000710
 8001bac:	200006d0 	.word	0x200006d0
 8001bb0:	20000718 	.word	0x20000718
 8001bb4:	2000039c 	.word	0x2000039c
 8001bb8:	200006f4 	.word	0x200006f4
 8001bbc:	20000474 	.word	0x20000474
 8001bc0:	40768000 	.word	0x40768000
 8001bc4:	20000690 	.word	0x20000690
 8001bc8:	20000698 	.word	0x20000698
 8001bcc:	200006a0 	.word	0x200006a0
 8001bd0:	200006a8 	.word	0x200006a8
 8001bd4:	200006b0 	.word	0x200006b0
 8001bd8:	0800c4c0 	.word	0x0800c4c0
 8001bdc:	2000054c 	.word	0x2000054c
 8001be0:	200007f6 	.word	0x200007f6
 8001be4:	200007f5 	.word	0x200007f5
 8001be8:	200008dc 	.word	0x200008dc
 8001bec:	20000830 	.word	0x20000830
 8001bf0:	20000848 	.word	0x20000848
 8001bf4:	20000818 	.word	0x20000818
 8001bf8:	20000840 	.word	0x20000840
 8001bfc:	20000724 	.word	0x20000724

08001c00 <calc_crc16>:

//CRC-16 function
unsigned short calc_crc16(unsigned char *data, int len) {
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
    unsigned short crc = 0xFFFF;
 8001c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0e:	82fb      	strh	r3, [r7, #22]
    int i, j;
    for (i = 0; i < len; i++) {
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	e022      	b.n	8001c5c <calc_crc16+0x5c>
        crc ^= data[i];
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	8afb      	ldrh	r3, [r7, #22]
 8001c22:	4053      	eors	r3, r2
 8001c24:	82fb      	strh	r3, [r7, #22]

        for (j = 0; j < 8; j++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	e011      	b.n	8001c50 <calc_crc16+0x50>
            if (crc & 0x0001) {
 8001c2c:	8afb      	ldrh	r3, [r7, #22]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d006      	beq.n	8001c44 <calc_crc16+0x44>
                crc = (crc >> 1) ^ 0xA001;
 8001c36:	8afb      	ldrh	r3, [r7, #22]
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <calc_crc16+0x74>)
 8001c3e:	4053      	eors	r3, r2
 8001c40:	82fb      	strh	r3, [r7, #22]
 8001c42:	e002      	b.n	8001c4a <calc_crc16+0x4a>
            } else {
                crc = crc >> 1;
 8001c44:	8afb      	ldrh	r3, [r7, #22]
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	82fb      	strh	r3, [r7, #22]
        for (j = 0; j < 8; j++) {
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	ddea      	ble.n	8001c2c <calc_crc16+0x2c>
    for (i = 0; i < len; i++) {
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbd8      	blt.n	8001c16 <calc_crc16+0x16>
            }
        }
    }
    return crc;
 8001c64:	8afb      	ldrh	r3, [r7, #22]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	ffffa001 	.word	0xffffa001

08001c78 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{	/*
 8001c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

			}
		}
	}
	*/
    if(huart->Instance == UART4)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a8e      	ldr	r2, [pc, #568]	; (8001ec0 <HAL_UART_RxCpltCallback+0x248>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f040 8105 	bne.w	8001e98 <HAL_UART_RxCpltCallback+0x220>
    {
	  if(error_flag == 0)
 8001c8e:	4b8d      	ldr	r3, [pc, #564]	; (8001ec4 <HAL_UART_RxCpltCallback+0x24c>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d114      	bne.n	8001cc0 <HAL_UART_RxCpltCallback+0x48>
	  {
		  cu_flag ++;
 8001c96:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_UART_RxCpltCallback+0x250>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	4a8a      	ldr	r2, [pc, #552]	; (8001ec8 <HAL_UART_RxCpltCallback+0x250>)
 8001c9e:	6013      	str	r3, [r2, #0]
		  cut_flag = 1;
 8001ca0:	4b8a      	ldr	r3, [pc, #552]	; (8001ecc <HAL_UART_RxCpltCallback+0x254>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
		  Rx_index++;
 8001ca6:	4b8a      	ldr	r3, [pc, #552]	; (8001ed0 <HAL_UART_RxCpltCallback+0x258>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_UART_RxCpltCallback+0x258>)
 8001cb0:	701a      	strb	r2, [r3, #0]
		  Rx_buf[Rx_index] = rx_dma_data4;
 8001cb2:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <HAL_UART_RxCpltCallback+0x258>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b86      	ldr	r3, [pc, #536]	; (8001ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8001cba:	7819      	ldrb	r1, [r3, #0]
 8001cbc:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <HAL_UART_RxCpltCallback+0x260>)
 8001cbe:	5499      	strb	r1, [r3, r2]
	  }

	  if(Rx_buf[Rx_index] == '\n')
 8001cc0:	4b83      	ldr	r3, [pc, #524]	; (8001ed0 <HAL_UART_RxCpltCallback+0x258>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b84      	ldr	r3, [pc, #528]	; (8001ed8 <HAL_UART_RxCpltCallback+0x260>)
 8001cc8:	5c9b      	ldrb	r3, [r3, r2]
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	d109      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0x6a>
	  {
		  if(start_flag == 0)
 8001cce:	4b83      	ldr	r3, [pc, #524]	; (8001edc <HAL_UART_RxCpltCallback+0x264>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_UART_RxCpltCallback+0x64>
		  {rx_flag = 1;}
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <HAL_UART_RxCpltCallback+0x268>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
		  Rx_index = 0;
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_UART_RxCpltCallback+0x258>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]

	  //  cut_flag = 1;
	  }

	  if(rx_flag == 1)
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	; (8001ee0 <HAL_UART_RxCpltCallback+0x268>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	f040 80d0 	bne.w	8001e8c <HAL_UART_RxCpltCallback+0x214>
	  {
		  char *dend;
		  uart_flag = 1;
 8001cec:	4b7d      	ldr	r3, [pc, #500]	; (8001ee4 <HAL_UART_RxCpltCallback+0x26c>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]


		  Gyro_roll = strtod(Rx_buf+1, &dend);
 8001cf2:	4a7d      	ldr	r2, [pc, #500]	; (8001ee8 <HAL_UART_RxCpltCallback+0x270>)
 8001cf4:	f107 0308 	add.w	r3, r7, #8
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f007 f8a0 	bl	8008e40 <strtod>
 8001d00:	eeb0 7a40 	vmov.f32	s14, s0
 8001d04:	eef0 7a60 	vmov.f32	s15, s1
 8001d08:	4b78      	ldr	r3, [pc, #480]	; (8001eec <HAL_UART_RxCpltCallback+0x274>)
 8001d0a:	ed83 7b00 	vstr	d7, [r3]
		  Gyro_pitch = strtod(dend+1, &dend);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	3301      	adds	r3, #1
 8001d12:	f107 0208 	add.w	r2, r7, #8
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f007 f891 	bl	8008e40 <strtod>
 8001d1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d22:	eef0 7a60 	vmov.f32	s15, s1
 8001d26:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <HAL_UART_RxCpltCallback+0x278>)
 8001d28:	ed83 7b00 	vstr	d7, [r3]
		  Gyro_yaw = strtod(dend+1, &dend);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	f107 0208 	add.w	r2, r7, #8
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f007 f882 	bl	8008e40 <strtod>
 8001d3c:	eeb0 7a40 	vmov.f32	s14, s0
 8001d40:	eef0 7a60 	vmov.f32	s15, s1
 8001d44:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_UART_RxCpltCallback+0x27c>)
 8001d46:	ed83 7b00 	vstr	d7, [r3]
		  roll_angle = strtod(dend+1, &dend);
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	f107 0208 	add.w	r2, r7, #8
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f007 f873 	bl	8008e40 <strtod>
 8001d5a:	eeb0 7a40 	vmov.f32	s14, s0
 8001d5e:	eef0 7a60 	vmov.f32	s15, s1
 8001d62:	4b65      	ldr	r3, [pc, #404]	; (8001ef8 <HAL_UART_RxCpltCallback+0x280>)
 8001d64:	ed83 7b00 	vstr	d7, [r3]
		  pitch_angle = strtod(dend+1, &dend);
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f107 0208 	add.w	r2, r7, #8
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f007 f864 	bl	8008e40 <strtod>
 8001d78:	eeb0 7a40 	vmov.f32	s14, s0
 8001d7c:	eef0 7a60 	vmov.f32	s15, s1
 8001d80:	4b5e      	ldr	r3, [pc, #376]	; (8001efc <HAL_UART_RxCpltCallback+0x284>)
 8001d82:	ed83 7b00 	vstr	d7, [r3]
		  yaw_angle = strtod(dend+1, NULL);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f007 f857 	bl	8008e40 <strtod>
 8001d92:	eeb0 7a40 	vmov.f32	s14, s0
 8001d96:	eef0 7a60 	vmov.f32	s15, s1
 8001d9a:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001d9c:	ed83 7b00 	vstr	d7, [r3]


		  if(((yaw_angle >= 177.0)&&(yaw_angle <= 180.0))||((yaw_angle <= -177.00))&&(yaw_angle >=-180.0))
 8001da0:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001da2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001da6:	a342      	add	r3, pc, #264	; (adr r3, 8001eb0 <HAL_UART_RxCpltCallback+0x238>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe feaa 	bl	8000b04 <__aeabi_dcmpge>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <HAL_UART_RxCpltCallback+0x154>
 8001db6:	4b52      	ldr	r3, [pc, #328]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_UART_RxCpltCallback+0x28c>)
 8001dc2:	f7fe fe95 	bl	8000af0 <__aeabi_dcmple>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d115      	bne.n	8001df8 <HAL_UART_RxCpltCallback+0x180>
 8001dcc:	4b4c      	ldr	r3, [pc, #304]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001dce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dd2:	a339      	add	r3, pc, #228	; (adr r3, 8001eb8 <HAL_UART_RxCpltCallback+0x240>)
 8001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd8:	f7fe fe8a 	bl	8000af0 <__aeabi_dcmple>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <HAL_UART_RxCpltCallback+0x188>
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001de4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_UART_RxCpltCallback+0x290>)
 8001dee:	f7fe fe89 	bl	8000b04 <__aeabi_dcmpge>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_UART_RxCpltCallback+0x188>
		  {
			  change_flag = 1;
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <HAL_UART_RxCpltCallback+0x294>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e002      	b.n	8001e06 <HAL_UART_RxCpltCallback+0x18e>
		  }
		  else
		  {
			  change_flag = 0;
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_UART_RxCpltCallback+0x294>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
		  }
		  if((fabs(yaw_angle-yaw_angle_pri)>5)&&(start_flag_2==1))
 8001e06:	4b3e      	ldr	r3, [pc, #248]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e0c:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <HAL_UART_RxCpltCallback+0x298>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f7fe fa39 	bl	8000288 <__aeabi_dsub>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4692      	mov	sl, r2
 8001e1c:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_UART_RxCpltCallback+0x29c>)
 8001e26:	4650      	mov	r0, sl
 8001e28:	4659      	mov	r1, fp
 8001e2a:	f7fe fe75 	bl	8000b18 <__aeabi_dcmpgt>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_UART_RxCpltCallback+0x1e4>
 8001e34:	4b38      	ldr	r3, [pc, #224]	; (8001f18 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d10f      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x1e4>
		  {
			  if(change_flag == 0)
 8001e3c:	4b33      	ldr	r3, [pc, #204]	; (8001f0c <HAL_UART_RxCpltCallback+0x294>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x1e4>
			  {	  yaw_angle = yaw_angle_pri;
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <HAL_UART_RxCpltCallback+0x298>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	492d      	ldr	r1, [pc, #180]	; (8001f00 <HAL_UART_RxCpltCallback+0x288>)
 8001e4c:	e9c1 2300 	strd	r2, r3, [r1]
				  Gyro_yaw = Gyro_yaw_pri;
 8001e50:	4b32      	ldr	r3, [pc, #200]	; (8001f1c <HAL_UART_RxCpltCallback+0x2a4>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	4927      	ldr	r1, [pc, #156]	; (8001ef4 <HAL_UART_RxCpltCallback+0x27c>)
 8001e58:	e9c1 2300 	strd	r2, r3, [r1]



//        test_yaw_angle = yaw_angle;

		  r_flag = 1;
 8001e5c:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_UART_RxCpltCallback+0x2a8>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]

		  memset(Rx_buf,0,sizeof(Rx_buf));
 8001e62:	2264      	movs	r2, #100	; 0x64
 8001e64:	2100      	movs	r1, #0
 8001e66:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <HAL_UART_RxCpltCallback+0x260>)
 8001e68:	f007 fd81 	bl	800996e <memset>
		  receive_yaw_flag = 1;
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_UART_RxCpltCallback+0x2ac>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		  receive_yaw_flag_1 = 1;
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_UART_RxCpltCallback+0x2b0>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
		  rx_flag = 0;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_UART_RxCpltCallback+0x268>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]

		  //cu_flag = 0;
		  if(cut_flag == 1)
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_UART_RxCpltCallback+0x254>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d102      	bne.n	8001e8c <HAL_UART_RxCpltCallback+0x214>
		  {
			  //HAL_NVIC_EnableIRQ(USART3_IRQn);
			  cut_flag = 0;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_UART_RxCpltCallback+0x254>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
		  }

	  }

	  HAL_UART_Receive_DMA(&huart4,&rx_dma_data4, 1);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4911      	ldr	r1, [pc, #68]	; (8001ed4 <HAL_UART_RxCpltCallback+0x25c>)
 8001e90:	4826      	ldr	r0, [pc, #152]	; (8001f2c <HAL_UART_RxCpltCallback+0x2b4>)
 8001e92:	f005 f8bc 	bl	800700e <HAL_UART_Receive_DMA>
        }

        HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
    }

}
 8001e96:	e1b9      	b.n	800220c <HAL_UART_RxCpltCallback+0x594>
    else if(huart->Instance == USART3)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a24      	ldr	r2, [pc, #144]	; (8001f30 <HAL_UART_RxCpltCallback+0x2b8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	f040 81b4 	bne.w	800220c <HAL_UART_RxCpltCallback+0x594>
        for(int i = 0; i < 12; i++)
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	e050      	b.n	8001f4c <HAL_UART_RxCpltCallback+0x2d4>
 8001eaa:	bf00      	nop
 8001eac:	f3af 8000 	nop.w
 8001eb0:	00000000 	.word	0x00000000
 8001eb4:	40662000 	.word	0x40662000
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	c0662000 	.word	0xc0662000
 8001ec0:	40004c00 	.word	0x40004c00
 8001ec4:	200006b9 	.word	0x200006b9
 8001ec8:	200008d8 	.word	0x200008d8
 8001ecc:	200006b8 	.word	0x200006b8
 8001ed0:	2000078c 	.word	0x2000078c
 8001ed4:	200008ec 	.word	0x200008ec
 8001ed8:	20000790 	.word	0x20000790
 8001edc:	20000724 	.word	0x20000724
 8001ee0:	200007f4 	.word	0x200007f4
 8001ee4:	20000720 	.word	0x20000720
 8001ee8:	20000791 	.word	0x20000791
 8001eec:	20000808 	.word	0x20000808
 8001ef0:	20000810 	.word	0x20000810
 8001ef4:	20000818 	.word	0x20000818
 8001ef8:	20000820 	.word	0x20000820
 8001efc:	20000828 	.word	0x20000828
 8001f00:	20000830 	.word	0x20000830
 8001f04:	40668000 	.word	0x40668000
 8001f08:	c0668000 	.word	0xc0668000
 8001f0c:	200006bb 	.word	0x200006bb
 8001f10:	20000848 	.word	0x20000848
 8001f14:	40140000 	.word	0x40140000
 8001f18:	2000072c 	.word	0x2000072c
 8001f1c:	20000840 	.word	0x20000840
 8001f20:	200007f7 	.word	0x200007f7
 8001f24:	200007f5 	.word	0x200007f5
 8001f28:	200007f6 	.word	0x200007f6
 8001f2c:	200004bc 	.word	0x200004bc
 8001f30:	40004800 	.word	0x40004800
        	ros_Rx_buf[i] = rx_dma_data3[i];
 8001f34:	4a96      	ldr	r2, [pc, #600]	; (8002190 <HAL_UART_RxCpltCallback+0x518>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	4413      	add	r3, r2
 8001f3a:	7819      	ldrb	r1, [r3, #0]
 8001f3c:	4a95      	ldr	r2, [pc, #596]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4413      	add	r3, r2
 8001f42:	460a      	mov	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 12; i++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b0b      	cmp	r3, #11
 8001f50:	ddf0      	ble.n	8001f34 <HAL_UART_RxCpltCallback+0x2bc>
        if(ros_Rx_buf[11] == 0xf0) //address check
 8001f52:	4b90      	ldr	r3, [pc, #576]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f54:	7adb      	ldrb	r3, [r3, #11]
 8001f56:	2bf0      	cmp	r3, #240	; 0xf0
 8001f58:	d102      	bne.n	8001f60 <HAL_UART_RxCpltCallback+0x2e8>
        	receive_flag = 1;
 8001f5a:	4b8f      	ldr	r3, [pc, #572]	; (8002198 <HAL_UART_RxCpltCallback+0x520>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
        if(receive_flag == 1)
 8001f60:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <HAL_UART_RxCpltCallback+0x520>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	f040 814c 	bne.w	8002202 <HAL_UART_RxCpltCallback+0x58a>
        	if(ros_Rx_buf[0] == 0x01)
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	f040 80f4 	bne.w	800215c <HAL_UART_RxCpltCallback+0x4e4>
        		if(ros_Rx_buf[1] == 0x02)
 8001f74:	4b87      	ldr	r3, [pc, #540]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f76:	785b      	ldrb	r3, [r3, #1]
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	f040 80dd 	bne.w	8002138 <HAL_UART_RxCpltCallback+0x4c0>
        			if(ros_Rx_buf[2] == 0x06)
 8001f7e:	4b85      	ldr	r3, [pc, #532]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f80:	789b      	ldrb	r3, [r3, #2]
 8001f82:	2b06      	cmp	r3, #6
 8001f84:	f040 80c6 	bne.w	8002114 <HAL_UART_RxCpltCallback+0x49c>
        				error_flag_1 = 1;
 8001f88:	4b84      	ldr	r3, [pc, #528]	; (800219c <HAL_UART_RxCpltCallback+0x524>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
                        resultcrc = calc_crc16(ros_Rx_buf,9);
 8001f8e:	2109      	movs	r1, #9
 8001f90:	4880      	ldr	r0, [pc, #512]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001f92:	f7ff fe35 	bl	8001c00 <calc_crc16>
 8001f96:	4603      	mov	r3, r0
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b81      	ldr	r3, [pc, #516]	; (80021a0 <HAL_UART_RxCpltCallback+0x528>)
 8001f9c:	801a      	strh	r2, [r3, #0]
                        resultcrc_L = resultcrc % 256;
 8001f9e:	4b80      	ldr	r3, [pc, #512]	; (80021a0 <HAL_UART_RxCpltCallback+0x528>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b7f      	ldr	r3, [pc, #508]	; (80021a4 <HAL_UART_RxCpltCallback+0x52c>)
 8001fa6:	701a      	strb	r2, [r3, #0]
                        resultcrc_H = resultcrc / 256;
 8001fa8:	4b7d      	ldr	r3, [pc, #500]	; (80021a0 <HAL_UART_RxCpltCallback+0x528>)
 8001faa:	881b      	ldrh	r3, [r3, #0]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <HAL_UART_RxCpltCallback+0x530>)
 8001fb4:	701a      	strb	r2, [r3, #0]
                        if((resultcrc_L == ros_Rx_buf[9])&&(resultcrc_H == ros_Rx_buf[10]))
 8001fb6:	4b77      	ldr	r3, [pc, #476]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001fb8:	7a5a      	ldrb	r2, [r3, #9]
 8001fba:	4b7a      	ldr	r3, [pc, #488]	; (80021a4 <HAL_UART_RxCpltCallback+0x52c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	f040 8096 	bne.w	80020f0 <HAL_UART_RxCpltCallback+0x478>
 8001fc4:	4b73      	ldr	r3, [pc, #460]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001fc6:	7a9a      	ldrb	r2, [r3, #10]
 8001fc8:	4b77      	ldr	r3, [pc, #476]	; (80021a8 <HAL_UART_RxCpltCallback+0x530>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 808f 	bne.w	80020f0 <HAL_UART_RxCpltCallback+0x478>
                        	for(int i = 0; i < 12; i++)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e00b      	b.n	8001ff0 <HAL_UART_RxCpltCallback+0x378>
                        		ros_Rx_buf_true[i] = ros_Rx_buf[i];
 8001fd8:	4a6e      	ldr	r2, [pc, #440]	; (8002194 <HAL_UART_RxCpltCallback+0x51c>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	7819      	ldrb	r1, [r3, #0]
 8001fe0:	4a72      	ldr	r2, [pc, #456]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	460a      	mov	r2, r1
 8001fe8:	701a      	strb	r2, [r3, #0]
                        	for(int i = 0; i < 12; i++)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	3301      	adds	r3, #1
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0b      	cmp	r3, #11
 8001ff4:	ddf0      	ble.n	8001fd8 <HAL_UART_RxCpltCallback+0x360>
                        	minority_linear = (double)(ros_Rx_buf_true[5] / 100.0);
 8001ff6:	4b6d      	ldr	r3, [pc, #436]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 8001ff8:	795b      	ldrb	r3, [r3, #5]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fa92 	bl	8000524 <__aeabi_i2d>
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	4b6a      	ldr	r3, [pc, #424]	; (80021b0 <HAL_UART_RxCpltCallback+0x538>)
 8002006:	f7fe fc21 	bl	800084c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4969      	ldr	r1, [pc, #420]	; (80021b4 <HAL_UART_RxCpltCallback+0x53c>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
                            integer_linear = ros_Rx_buf_true[4];
 8002014:	4b65      	ldr	r3, [pc, #404]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 8002016:	791b      	ldrb	r3, [r3, #4]
 8002018:	461a      	mov	r2, r3
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_UART_RxCpltCallback+0x540>)
 800201c:	601a      	str	r2, [r3, #0]
                            test_linear_data_receive = (double)(integer_linear + minority_linear);
 800201e:	4b66      	ldr	r3, [pc, #408]	; (80021b8 <HAL_UART_RxCpltCallback+0x540>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fa7e 	bl	8000524 <__aeabi_i2d>
 8002028:	4b62      	ldr	r3, [pc, #392]	; (80021b4 <HAL_UART_RxCpltCallback+0x53c>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f92d 	bl	800028c <__adddf3>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4961      	ldr	r1, [pc, #388]	; (80021bc <HAL_UART_RxCpltCallback+0x544>)
 8002038:	e9c1 2300 	strd	r2, r3, [r1]
                            if(ros_Rx_buf_true[3] == 0x02)
 800203c:	4b5b      	ldr	r3, [pc, #364]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 800203e:	78db      	ldrb	r3, [r3, #3]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d108      	bne.n	8002056 <HAL_UART_RxCpltCallback+0x3de>
                            {test_linear_data_receive = -test_linear_data_receive;}
 8002044:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <HAL_UART_RxCpltCallback+0x544>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	4690      	mov	r8, r2
 800204c:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002050:	4b5a      	ldr	r3, [pc, #360]	; (80021bc <HAL_UART_RxCpltCallback+0x544>)
 8002052:	e9c3 8900 	strd	r8, r9, [r3]
                            minority_gaksokdo = (double)(ros_Rx_buf_true[8] / 100.0);
 8002056:	4b55      	ldr	r3, [pc, #340]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 8002058:	7a1b      	ldrb	r3, [r3, #8]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa62 	bl	8000524 <__aeabi_i2d>
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	4b52      	ldr	r3, [pc, #328]	; (80021b0 <HAL_UART_RxCpltCallback+0x538>)
 8002066:	f7fe fbf1 	bl	800084c <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4954      	ldr	r1, [pc, #336]	; (80021c0 <HAL_UART_RxCpltCallback+0x548>)
 8002070:	e9c1 2300 	strd	r2, r3, [r1]
                            integer_gaksokdo = ros_Rx_buf_true[7];
 8002074:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 8002076:	79db      	ldrb	r3, [r3, #7]
 8002078:	461a      	mov	r2, r3
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <HAL_UART_RxCpltCallback+0x54c>)
 800207c:	601a      	str	r2, [r3, #0]
                            test_gaksokdo_data_receive = (double)(integer_gaksokdo + minority_gaksokdo);
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_UART_RxCpltCallback+0x54c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fa4e 	bl	8000524 <__aeabi_i2d>
 8002088:	4b4d      	ldr	r3, [pc, #308]	; (80021c0 <HAL_UART_RxCpltCallback+0x548>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	f7fe f8fd 	bl	800028c <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	494c      	ldr	r1, [pc, #304]	; (80021c8 <HAL_UART_RxCpltCallback+0x550>)
 8002098:	e9c1 2300 	strd	r2, r3, [r1]
                            if(ros_Rx_buf_true[6] == 0x02)
 800209c:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_UART_RxCpltCallback+0x534>)
 800209e:	799b      	ldrb	r3, [r3, #6]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d108      	bne.n	80020b6 <HAL_UART_RxCpltCallback+0x43e>
                            {test_gaksokdo_data_receive = -test_gaksokdo_data_receive;}
 80020a4:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HAL_UART_RxCpltCallback+0x550>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	4614      	mov	r4, r2
 80020ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80020b0:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <HAL_UART_RxCpltCallback+0x550>)
 80020b2:	e9c3 4500 	strd	r4, r5, [r3]
                            test_linear_data = test_linear_data_receive;
 80020b6:	4b41      	ldr	r3, [pc, #260]	; (80021bc <HAL_UART_RxCpltCallback+0x544>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	4943      	ldr	r1, [pc, #268]	; (80021cc <HAL_UART_RxCpltCallback+0x554>)
 80020be:	e9c1 2300 	strd	r2, r3, [r1]
                            GYRO_YAW_GOAL = test_gaksokdo_data_receive;
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_UART_RxCpltCallback+0x550>)
 80020c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c8:	4941      	ldr	r1, [pc, #260]	; (80021d0 <HAL_UART_RxCpltCallback+0x558>)
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
                            GYRO_YAW_GOAL_test = 57.29 * GYRO_YAW_GOAL;
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_UART_RxCpltCallback+0x558>)
 80020d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d4:	a32c      	add	r3, pc, #176	; (adr r3, 8002188 <HAL_UART_RxCpltCallback+0x510>)
 80020d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020da:	f7fe fa8d 	bl	80005f8 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	493c      	ldr	r1, [pc, #240]	; (80021d4 <HAL_UART_RxCpltCallback+0x55c>)
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]
                            flag_1 = 1;
 80020e8:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_UART_RxCpltCallback+0x560>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e046      	b.n	800217e <HAL_UART_RxCpltCallback+0x506>
                            GYRO_YAW_GOAL_test = 0;
 80020f0:	4938      	ldr	r1, [pc, #224]	; (80021d4 <HAL_UART_RxCpltCallback+0x55c>)
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9c1 2300 	strd	r2, r3, [r1]
                            test_linear_data = 0;
 80020fe:	4933      	ldr	r1, [pc, #204]	; (80021cc <HAL_UART_RxCpltCallback+0x554>)
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9c1 2300 	strd	r2, r3, [r1]
                            error_flag_1 = 1;
 800210c:	4b23      	ldr	r3, [pc, #140]	; (800219c <HAL_UART_RxCpltCallback+0x524>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e034      	b.n	800217e <HAL_UART_RxCpltCallback+0x506>
						GYRO_YAW_GOAL_test = 0;
 8002114:	492f      	ldr	r1, [pc, #188]	; (80021d4 <HAL_UART_RxCpltCallback+0x55c>)
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9c1 2300 	strd	r2, r3, [r1]
						test_linear_data = 0;
 8002122:	492a      	ldr	r1, [pc, #168]	; (80021cc <HAL_UART_RxCpltCallback+0x554>)
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	e9c1 2300 	strd	r2, r3, [r1]
						error_flag_1 = 1;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_UART_RxCpltCallback+0x524>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e022      	b.n	800217e <HAL_UART_RxCpltCallback+0x506>
                	GYRO_YAW_GOAL_test = 0;
 8002138:	4926      	ldr	r1, [pc, #152]	; (80021d4 <HAL_UART_RxCpltCallback+0x55c>)
 800213a:	f04f 0200 	mov.w	r2, #0
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	e9c1 2300 	strd	r2, r3, [r1]
                	test_linear_data = 0;
 8002146:	4921      	ldr	r1, [pc, #132]	; (80021cc <HAL_UART_RxCpltCallback+0x554>)
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
                	error_flag_1 = 1;
 8002154:	4b11      	ldr	r3, [pc, #68]	; (800219c <HAL_UART_RxCpltCallback+0x524>)
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e010      	b.n	800217e <HAL_UART_RxCpltCallback+0x506>
            	GYRO_YAW_GOAL_test = 0;
 800215c:	491d      	ldr	r1, [pc, #116]	; (80021d4 <HAL_UART_RxCpltCallback+0x55c>)
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	e9c1 2300 	strd	r2, r3, [r1]
            	test_linear_data = 0;
 800216a:	4918      	ldr	r1, [pc, #96]	; (80021cc <HAL_UART_RxCpltCallback+0x554>)
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9c1 2300 	strd	r2, r3, [r1]
            	error_flag_1 = 1;
 8002178:	4b08      	ldr	r3, [pc, #32]	; (800219c <HAL_UART_RxCpltCallback+0x524>)
 800217a:	2201      	movs	r2, #1
 800217c:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < 12; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e038      	b.n	80021f6 <HAL_UART_RxCpltCallback+0x57e>
 8002184:	f3af 8000 	nop.w
 8002188:	b851eb85 	.word	0xb851eb85
 800218c:	404ca51e 	.word	0x404ca51e
 8002190:	200008e0 	.word	0x200008e0
 8002194:	20000774 	.word	0x20000774
 8002198:	200008d0 	.word	0x200008d0
 800219c:	200006ba 	.word	0x200006ba
 80021a0:	200008d2 	.word	0x200008d2
 80021a4:	200008d4 	.word	0x200008d4
 80021a8:	200008d5 	.word	0x200008d5
 80021ac:	20000780 	.word	0x20000780
 80021b0:	40590000 	.word	0x40590000
 80021b4:	200008a0 	.word	0x200008a0
 80021b8:	200008a8 	.word	0x200008a8
 80021bc:	200008b0 	.word	0x200008b0
 80021c0:	200008b8 	.word	0x200008b8
 80021c4:	200008c0 	.word	0x200008c0
 80021c8:	200008c8 	.word	0x200008c8
 80021cc:	200007f8 	.word	0x200007f8
 80021d0:	20000678 	.word	0x20000678
 80021d4:	20000680 	.word	0x20000680
 80021d8:	200006e8 	.word	0x200006e8
            	ros_Rx_buf[i] = 0;
 80021dc:	4a0e      	ldr	r2, [pc, #56]	; (8002218 <HAL_UART_RxCpltCallback+0x5a0>)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4413      	add	r3, r2
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
                ros_Rx_buf_true[i] = 0;
 80021e6:	4a0d      	ldr	r2, [pc, #52]	; (800221c <HAL_UART_RxCpltCallback+0x5a4>)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < 12; i++)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3301      	adds	r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b0b      	cmp	r3, #11
 80021fa:	ddef      	ble.n	80021dc <HAL_UART_RxCpltCallback+0x564>
            receive_flag = 0;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <HAL_UART_RxCpltCallback+0x5a8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
 8002202:	220c      	movs	r2, #12
 8002204:	4907      	ldr	r1, [pc, #28]	; (8002224 <HAL_UART_RxCpltCallback+0x5ac>)
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <HAL_UART_RxCpltCallback+0x5b0>)
 8002208:	f004 ff01 	bl	800700e <HAL_UART_Receive_DMA>
}
 800220c:	bf00      	nop
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002216:	bf00      	nop
 8002218:	20000774 	.word	0x20000774
 800221c:	20000780 	.word	0x20000780
 8002220:	200008d0 	.word	0x200008d0
 8002224:	200008e0 	.word	0x200008e0
 8002228:	2000054c 	.word	0x2000054c

0800222c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002230:	f001 fb7a 	bl	8003928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002234:	f000 f8c4 	bl	80023c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002238:	f000 fc72 	bl	8002b20 <MX_GPIO_Init>
  MX_DMA_Init();
 800223c:	f000 fc3a 	bl	8002ab4 <MX_DMA_Init>
  MX_TIM3_Init();
 8002240:	f000 fa5a 	bl	80026f8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002244:	f000 faac 	bl	80027a0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002248:	f000 f9fe 	bl	8002648 <MX_TIM1_Init>
  MX_ADC1_Init();
 800224c:	f000 f922 	bl	8002494 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002250:	f000 f972 	bl	8002538 <MX_ADC2_Init>
  MX_UART5_Init();
 8002254:	f000 fbda 	bl	8002a0c <MX_UART5_Init>
  MX_TIM7_Init();
 8002258:	f000 fb32 	bl	80028c0 <MX_TIM7_Init>
  MX_TIM12_Init();
 800225c:	f000 fb66 	bl	800292c <MX_TIM12_Init>
  MX_UART4_Init();
 8002260:	f000 fbaa 	bl	80029b8 <MX_UART4_Init>
  MX_CAN1_Init();
 8002264:	f000 f9ba 	bl	80025dc <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002268:	f000 fbfa 	bl	8002a60 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800226c:	f000 faf2 	bl	8002854 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11,GPIO_PIN_SET); //mc_en set
 8002270:	2201      	movs	r2, #1
 8002272:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002276:	4844      	ldr	r0, [pc, #272]	; (8002388 <main+0x15c>)
 8002278:	f003 f96a 	bl	8005550 <HAL_GPIO_WritePin>

  //MOTOR1 Setting
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET); //nsleep set
 800227c:	2201      	movs	r2, #1
 800227e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002282:	4842      	ldr	r0, [pc, #264]	; (800238c <main+0x160>)
 8002284:	f003 f964 	bl	8005550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,GPIO_PIN_RESET); // brk control set
 8002288:	2200      	movs	r2, #0
 800228a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228e:	4840      	ldr	r0, [pc, #256]	; (8002390 <main+0x164>)
 8002290:	f003 f95e 	bl	8005550 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002294:	2108      	movs	r1, #8
 8002296:	483f      	ldr	r0, [pc, #252]	; (8002394 <main+0x168>)
 8002298:	f003 fef6 	bl	8006088 <HAL_TIM_PWM_Start>

  //MOTOR2 Setting
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET); //nsleep set
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022a2:	483d      	ldr	r0, [pc, #244]	; (8002398 <main+0x16c>)
 80022a4:	f003 f954 	bl	8005550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_8,GPIO_PIN_RESET); //dir set
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ae:	4837      	ldr	r0, [pc, #220]	; (800238c <main+0x160>)
 80022b0:	f003 f94e 	bl	8005550 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,GPIO_PIN_RESET); // brk control set
 80022b4:	2200      	movs	r2, #0
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	4835      	ldr	r0, [pc, #212]	; (8002390 <main+0x164>)
 80022ba:	f003 f949 	bl	8005550 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80022be:	2104      	movs	r1, #4
 80022c0:	4836      	ldr	r0, [pc, #216]	; (800239c <main+0x170>)
 80022c2:	f003 fee1 	bl	8006088 <HAL_TIM_PWM_Start>

  //UART Setting
  __HAL_UART_ENABLE_IT(&huart4,UART_IT_RXNE);
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <main+0x174>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	4b34      	ldr	r3, [pc, #208]	; (80023a0 <main+0x174>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_RXNE);
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <main+0x178>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <main+0x178>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f042 0220 	orr.w	r2, r2, #32
 80022e4:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3,UART_IT_TC);
 80022e6:	4b2f      	ldr	r3, [pc, #188]	; (80023a4 <main+0x178>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <main+0x178>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f4:	60da      	str	r2, [r3, #12]

  //-----------------
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2); //start encoder mode
 80022f6:	2104      	movs	r1, #4
 80022f8:	482b      	ldr	r0, [pc, #172]	; (80023a8 <main+0x17c>)
 80022fa:	f004 f833 	bl	8006364 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2); //start encoder mode
 80022fe:	2104      	movs	r1, #4
 8002300:	482a      	ldr	r0, [pc, #168]	; (80023ac <main+0x180>)
 8002302:	f004 f82f 	bl	8006364 <HAL_TIM_Encoder_Start>


  HAL_Delay(2000);
 8002306:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800230a:	f001 fb7f 	bl	8003a0c <HAL_Delay>
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3,0); // test motor1
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <main+0x168>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2,0); // test motor2
 8002316:	4b21      	ldr	r3, [pc, #132]	; (800239c <main+0x170>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	639a      	str	r2, [r3, #56]	; 0x38
  //MOTOR1, MOTOR2 50ms timer start
  HAL_TIM_Base_Start_IT(&htim7); //timer start
 800231e:	4824      	ldr	r0, [pc, #144]	; (80023b0 <main+0x184>)
 8002320:	f003 fdf2 	bl	8005f08 <HAL_TIM_Base_Start_IT>
  HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_14);
 8002324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002328:	4819      	ldr	r0, [pc, #100]	; (8002390 <main+0x164>)
 800232a:	f003 f92a 	bl	8005582 <HAL_GPIO_TogglePin>

  //HAL_UART_Transmit_IT(&huart3, TxData, sizeof(TxData));

  TxData[0] = 0x60;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <main+0x188>)
 8002330:	2260      	movs	r2, #96	; 0x60
 8002332:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x00;
 8002334:	4b1f      	ldr	r3, [pc, #124]	; (80023b4 <main+0x188>)
 8002336:	2200      	movs	r2, #0
 8002338:	705a      	strb	r2, [r3, #1]
  TxData[2] = 0x00;
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <main+0x188>)
 800233c:	2200      	movs	r2, #0
 800233e:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x00;
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <main+0x188>)
 8002342:	2200      	movs	r2, #0
 8002344:	70da      	strb	r2, [r3, #3]
  TxData[4] = 0x00;
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <main+0x188>)
 8002348:	2200      	movs	r2, #0
 800234a:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x00;
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <main+0x188>)
 800234e:	2200      	movs	r2, #0
 8002350:	715a      	strb	r2, [r3, #5]
  TxData[6] = 0x00;
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <main+0x188>)
 8002354:	2200      	movs	r2, #0
 8002356:	719a      	strb	r2, [r3, #6]
  TxData[7] = 0x00;
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <main+0x188>)
 800235a:	2200      	movs	r2, #0
 800235c:	71da      	strb	r2, [r3, #7]

  HAL_UART_Receive_DMA(&huart3, &rx_dma_data3, 12);
 800235e:	220c      	movs	r2, #12
 8002360:	4915      	ldr	r1, [pc, #84]	; (80023b8 <main+0x18c>)
 8002362:	4810      	ldr	r0, [pc, #64]	; (80023a4 <main+0x178>)
 8002364:	f004 fe53 	bl	800700e <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart4, &rx_dma_data4, 1);
 8002368:	2201      	movs	r2, #1
 800236a:	4914      	ldr	r1, [pc, #80]	; (80023bc <main+0x190>)
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <main+0x174>)
 800236e:	f004 fe4e 	bl	800700e <HAL_UART_Receive_DMA>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // resPacket(01, 02, 06, 01, 00, 01, 01, 00, 00);
	 // HAL_UART_Receive_DMA(&huart3, &rescBuff, 12);
	  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2000);
 8002372:	4b08      	ldr	r3, [pc, #32]	; (8002394 <main+0x168>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SetCompare(&htim12, TIM_CHANNEL_2, 2000);
 800237c:	4b07      	ldr	r3, [pc, #28]	; (800239c <main+0x170>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002384:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, 2000);
 8002386:	e7f4      	b.n	8002372 <main+0x146>
 8002388:	40020000 	.word	0x40020000
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40020800 	.word	0x40020800
 8002394:	2000039c 	.word	0x2000039c
 8002398:	40020400 	.word	0x40020400
 800239c:	20000474 	.word	0x20000474
 80023a0:	200004bc 	.word	0x200004bc
 80023a4:	2000054c 	.word	0x2000054c
 80023a8:	20000354 	.word	0x20000354
 80023ac:	2000030c 	.word	0x2000030c
 80023b0:	2000042c 	.word	0x2000042c
 80023b4:	20000850 	.word	0x20000850
 80023b8:	200008e0 	.word	0x200008e0
 80023bc:	200008ec 	.word	0x200008ec

080023c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b094      	sub	sp, #80	; 0x50
 80023c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	2230      	movs	r2, #48	; 0x30
 80023cc:	2100      	movs	r1, #0
 80023ce:	4618      	mov	r0, r3
 80023d0:	f007 facd 	bl	800996e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	2300      	movs	r3, #0
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <SystemClock_Config+0xcc>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ec:	4a27      	ldr	r2, [pc, #156]	; (800248c <SystemClock_Config+0xcc>)
 80023ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f2:	6413      	str	r3, [r2, #64]	; 0x40
 80023f4:	4b25      	ldr	r3, [pc, #148]	; (800248c <SystemClock_Config+0xcc>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002400:	2300      	movs	r3, #0
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	4b22      	ldr	r3, [pc, #136]	; (8002490 <SystemClock_Config+0xd0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <SystemClock_Config+0xd0>)
 800240a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <SystemClock_Config+0xd0>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002418:	607b      	str	r3, [r7, #4]
 800241a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800241c:	2302      	movs	r3, #2
 800241e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002420:	2301      	movs	r3, #1
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002424:	2310      	movs	r3, #16
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002428:	2302      	movs	r3, #2
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002430:	2308      	movs	r3, #8
 8002432:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002434:	23a8      	movs	r3, #168	; 0xa8
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002438:	2302      	movs	r3, #2
 800243a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800243c:	2304      	movs	r3, #4
 800243e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002440:	f107 0320 	add.w	r3, r7, #32
 8002444:	4618      	mov	r0, r3
 8002446:	f003 f8b7 	bl	80055b8 <HAL_RCC_OscConfig>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002450:	f000 fc70 	bl	8002d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002454:	230f      	movs	r3, #15
 8002456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002458:	2302      	movs	r3, #2
 800245a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002460:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	2105      	movs	r1, #5
 8002472:	4618      	mov	r0, r3
 8002474:	f003 fb18 	bl	8005aa8 <HAL_RCC_ClockConfig>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800247e:	f000 fc59 	bl	8002d34 <Error_Handler>
  }
}
 8002482:	bf00      	nop
 8002484:	3750      	adds	r7, #80	; 0x50
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000

08002494 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800249a:	463b      	mov	r3, r7
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <MX_ADC1_Init+0x98>)
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <MX_ADC1_Init+0x9c>)
 80024aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <MX_ADC1_Init+0x98>)
 80024ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <MX_ADC1_Init+0x98>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_ADC1_Init+0x98>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024c0:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_ADC1_Init+0x98>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <MX_ADC1_Init+0x98>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_ADC1_Init+0x98>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_ADC1_Init+0x98>)
 80024d6:	4a17      	ldr	r2, [pc, #92]	; (8002534 <MX_ADC1_Init+0xa0>)
 80024d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_ADC1_Init+0x98>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024e0:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_ADC1_Init+0x98>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024e6:	4b11      	ldr	r3, [pc, #68]	; (800252c <MX_ADC1_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_ADC1_Init+0x98>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80024f4:	480d      	ldr	r0, [pc, #52]	; (800252c <MX_ADC1_Init+0x98>)
 80024f6:	f001 faad 	bl	8003a54 <HAL_ADC_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002500:	f000 fc18 	bl	8002d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002504:	2304      	movs	r3, #4
 8002506:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002508:	2301      	movs	r3, #1
 800250a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4805      	ldr	r0, [pc, #20]	; (800252c <MX_ADC1_Init+0x98>)
 8002516:	f001 fc0f 	bl	8003d38 <HAL_ADC_ConfigChannel>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002520:	f000 fc08 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200001f4 	.word	0x200001f4
 8002530:	40012000 	.word	0x40012000
 8002534:	0f000001 	.word	0x0f000001

08002538 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800253e:	463b      	mov	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <MX_ADC2_Init+0x98>)
 800254c:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <MX_ADC2_Init+0x9c>)
 800254e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002550:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002552:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002556:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002558:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <MX_ADC2_Init+0x98>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800255e:	4b1c      	ldr	r3, [pc, #112]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002566:	2200      	movs	r2, #0
 8002568:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800256a:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <MX_ADC2_Init+0x98>)
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002574:	2200      	movs	r2, #0
 8002576:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002578:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <MX_ADC2_Init+0x98>)
 800257a:	4a17      	ldr	r2, [pc, #92]	; (80025d8 <MX_ADC2_Init+0xa0>)
 800257c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800257e:	4b14      	ldr	r3, [pc, #80]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002580:	2200      	movs	r2, #0
 8002582:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002584:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002586:	2201      	movs	r2, #1
 8002588:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800258a:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_ADC2_Init+0x98>)
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <MX_ADC2_Init+0x98>)
 8002594:	2201      	movs	r2, #1
 8002596:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <MX_ADC2_Init+0x98>)
 800259a:	f001 fa5b 	bl	8003a54 <HAL_ADC_Init>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80025a4:	f000 fbc6 	bl	8002d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025a8:	2305      	movs	r3, #5
 80025aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80025ac:	2301      	movs	r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80025b4:	463b      	mov	r3, r7
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_ADC2_Init+0x98>)
 80025ba:	f001 fbbd 	bl	8003d38 <HAL_ADC_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80025c4:	f000 fbb6 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	2000023c 	.word	0x2000023c
 80025d4:	40012100 	.word	0x40012100
 80025d8:	0f000001 	.word	0x0f000001

080025dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <MX_CAN1_Init+0x64>)
 80025e2:	4a18      	ldr	r2, [pc, #96]	; (8002644 <MX_CAN1_Init+0x68>)
 80025e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <MX_CAN1_Init+0x64>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <MX_CAN1_Init+0x64>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <MX_CAN1_Init+0x64>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <MX_CAN1_Init+0x64>)
 80025fa:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80025fe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <MX_CAN1_Init+0x64>)
 8002602:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 8002606:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <MX_CAN1_Init+0x64>)
 800260a:	2200      	movs	r2, #0
 800260c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800260e:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <MX_CAN1_Init+0x64>)
 8002610:	2200      	movs	r2, #0
 8002612:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <MX_CAN1_Init+0x64>)
 8002616:	2200      	movs	r2, #0
 8002618:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <MX_CAN1_Init+0x64>)
 800261c:	2200      	movs	r2, #0
 800261e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002620:	4b07      	ldr	r3, [pc, #28]	; (8002640 <MX_CAN1_Init+0x64>)
 8002622:	2200      	movs	r2, #0
 8002624:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <MX_CAN1_Init+0x64>)
 8002628:	2200      	movs	r2, #0
 800262a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800262c:	4804      	ldr	r0, [pc, #16]	; (8002640 <MX_CAN1_Init+0x64>)
 800262e:	f001 fdab 	bl	8004188 <HAL_CAN_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002638:	f000 fb7c 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800263c:	bf00      	nop
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200002e4 	.word	0x200002e4
 8002644:	40006400 	.word	0x40006400

08002648 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08c      	sub	sp, #48	; 0x30
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	2224      	movs	r2, #36	; 0x24
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f007 f989 	bl	800996e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800265c:	1d3b      	adds	r3, r7, #4
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <MX_TIM1_Init+0xa8>)
 8002666:	4a23      	ldr	r2, [pc, #140]	; (80026f4 <MX_TIM1_Init+0xac>)
 8002668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <MX_TIM1_Init+0xa8>)
 800266c:	2200      	movs	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002670:	4b1f      	ldr	r3, [pc, #124]	; (80026f0 <MX_TIM1_Init+0xa8>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <MX_TIM1_Init+0xa8>)
 8002678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800267c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <MX_TIM1_Init+0xa8>)
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002684:	4b1a      	ldr	r3, [pc, #104]	; (80026f0 <MX_TIM1_Init+0xa8>)
 8002686:	2200      	movs	r2, #0
 8002688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268a:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <MX_TIM1_Init+0xa8>)
 800268c:	2200      	movs	r2, #0
 800268e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002690:	2303      	movs	r3, #3
 8002692:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002694:	2300      	movs	r3, #0
 8002696:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002698:	2301      	movs	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800269c:	2300      	movs	r3, #0
 800269e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026a4:	2300      	movs	r3, #0
 80026a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026a8:	2301      	movs	r3, #1
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	480d      	ldr	r0, [pc, #52]	; (80026f0 <MX_TIM1_Init+0xa8>)
 80026bc:	f003 fdac 	bl	8006218 <HAL_TIM_Encoder_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80026c6:	f000 fb35 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	; (80026f0 <MX_TIM1_Init+0xa8>)
 80026d8:	f004 fb2e 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80026e2:	f000 fb27 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026e6:	bf00      	nop
 80026e8:	3730      	adds	r7, #48	; 0x30
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000030c 	.word	0x2000030c
 80026f4:	40010000 	.word	0x40010000

080026f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026fe:	f107 030c 	add.w	r3, r7, #12
 8002702:	2224      	movs	r2, #36	; 0x24
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f007 f931 	bl	800996e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002716:	4a21      	ldr	r2, [pc, #132]	; (800279c <MX_TIM3_Init+0xa4>)
 8002718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <MX_TIM3_Init+0xa0>)
 800271c:	2200      	movs	r2, #0
 800271e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002728:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002734:	4b18      	ldr	r3, [pc, #96]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002736:	2200      	movs	r2, #0
 8002738:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800273a:	2303      	movs	r3, #3
 800273c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002742:	2301      	movs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002752:	2301      	movs	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002756:	2300      	movs	r3, #0
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800275e:	f107 030c 	add.w	r3, r7, #12
 8002762:	4619      	mov	r1, r3
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002766:	f003 fd57 	bl	8006218 <HAL_TIM_Encoder_Init>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002770:	f000 fae0 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002778:	2300      	movs	r3, #0
 800277a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_TIM3_Init+0xa0>)
 8002782:	f004 fad9 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800278c:	f000 fad2 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002790:	bf00      	nop
 8002792:	3730      	adds	r7, #48	; 0x30
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20000354 	.word	0x20000354
 800279c:	40000400 	.word	0x40000400

080027a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	; 0x28
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a6:	f107 0320 	add.w	r3, r7, #32
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027c2:	4b22      	ldr	r3, [pc, #136]	; (800284c <MX_TIM4_Init+0xac>)
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <MX_TIM4_Init+0xb0>)
 80027c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027c8:	4b20      	ldr	r3, [pc, #128]	; (800284c <MX_TIM4_Init+0xac>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ce:	4b1f      	ldr	r3, [pc, #124]	; (800284c <MX_TIM4_Init+0xac>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3499;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <MX_TIM4_Init+0xac>)
 80027d6:	f640 52ab 	movw	r2, #3499	; 0xdab
 80027da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027dc:	4b1b      	ldr	r3, [pc, #108]	; (800284c <MX_TIM4_Init+0xac>)
 80027de:	2200      	movs	r2, #0
 80027e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <MX_TIM4_Init+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80027e8:	4818      	ldr	r0, [pc, #96]	; (800284c <MX_TIM4_Init+0xac>)
 80027ea:	f003 fbfd 	bl	8005fe8 <HAL_TIM_PWM_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80027f4:	f000 fa9e 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f8:	2300      	movs	r3, #0
 80027fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002800:	f107 0320 	add.w	r3, r7, #32
 8002804:	4619      	mov	r1, r3
 8002806:	4811      	ldr	r0, [pc, #68]	; (800284c <MX_TIM4_Init+0xac>)
 8002808:	f004 fa96 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002812:	f000 fa8f 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002816:	2360      	movs	r3, #96	; 0x60
 8002818:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	2208      	movs	r2, #8
 800282a:	4619      	mov	r1, r3
 800282c:	4807      	ldr	r0, [pc, #28]	; (800284c <MX_TIM4_Init+0xac>)
 800282e:	f003 ff17 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002838:	f000 fa7c 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800283c:	4803      	ldr	r0, [pc, #12]	; (800284c <MX_TIM4_Init+0xac>)
 800283e:	f000 fce3 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	; 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	2000039c 	.word	0x2000039c
 8002850:	40000800 	.word	0x40000800

08002854 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <MX_TIM6_Init+0x68>)
 8002866:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_TIM6_Init+0x64>)
 800286a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800286e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002878:	f242 720f 	movw	r2, #9999	; 0x270f
 800287c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002886:	f003 faef 	bl	8005e68 <HAL_TIM_Base_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002890:	f000 fa50 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800289c:	463b      	mov	r3, r7
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_TIM6_Init+0x64>)
 80028a2:	f004 fa49 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028ac:	f000 fa42 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	200003e4 	.word	0x200003e4
 80028bc:	40001000 	.word	0x40001000

080028c0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c6:	463b      	mov	r3, r7
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <MX_TIM7_Init+0x64>)
 80028d0:	4a15      	ldr	r2, [pc, #84]	; (8002928 <MX_TIM7_Init+0x68>)
 80028d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 840-1;
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <MX_TIM7_Init+0x64>)
 80028d6:	f240 3247 	movw	r2, #839	; 0x347
 80028da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <MX_TIM7_Init+0x64>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <MX_TIM7_Init+0x64>)
 80028e4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80028e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <MX_TIM7_Init+0x64>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80028f0:	480c      	ldr	r0, [pc, #48]	; (8002924 <MX_TIM7_Init+0x64>)
 80028f2:	f003 fab9 	bl	8005e68 <HAL_TIM_Base_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80028fc:	f000 fa1a 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002900:	2300      	movs	r3, #0
 8002902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002908:	463b      	mov	r3, r7
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	; (8002924 <MX_TIM7_Init+0x64>)
 800290e:	f004 fa13 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002918:	f000 fa0c 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	2000042c 	.word	0x2000042c
 8002928:	40001400 	.word	0x40001400

0800292c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b088      	sub	sp, #32
 8002930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002932:	1d3b      	adds	r3, r7, #4
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
 8002940:	615a      	str	r2, [r3, #20]
 8002942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <MX_TIM12_Init+0x88>)
 8002948:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <MX_TIM12_Init+0x84>)
 800294c:	2200      	movs	r2, #0
 800294e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002950:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 3499;
 8002956:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002958:	f640 52ab 	movw	r2, #3499	; 0xdab
 800295c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002960:	2200      	movs	r2, #0
 8002962:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800296a:	4811      	ldr	r0, [pc, #68]	; (80029b0 <MX_TIM12_Init+0x84>)
 800296c:	f003 fb3c 	bl	8005fe8 <HAL_TIM_PWM_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002976:	f000 f9dd 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800297a:	2360      	movs	r3, #96	; 0x60
 800297c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	2204      	movs	r2, #4
 800298e:	4619      	mov	r1, r3
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <MX_TIM12_Init+0x84>)
 8002992:	f003 fe65 	bl	8006660 <HAL_TIM_PWM_ConfigChannel>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 800299c:	f000 f9ca 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <MX_TIM12_Init+0x84>)
 80029a2:	f000 fc31 	bl	8003208 <HAL_TIM_MspPostInit>

}
 80029a6:	bf00      	nop
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000474 	.word	0x20000474
 80029b4:	40001800 	.word	0x40001800

080029b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80029bc:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029be:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_UART4_Init+0x50>)
 80029c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 460800;
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029c4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80029c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029de:	220c      	movs	r2, #12
 80029e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <MX_UART4_Init+0x4c>)
 80029f0:	f004 fa32 	bl	8006e58 <HAL_UART_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80029fa:	f000 f99b 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200004bc 	.word	0x200004bc
 8002a08:	40004c00 	.word	0x40004c00

08002a0c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a12:	4a12      	ldr	r2, [pc, #72]	; (8002a5c <MX_UART5_Init+0x50>)
 8002a14:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 921600;
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a18:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8002a1c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a32:	220c      	movs	r2, #12
 8002a34:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <MX_UART5_Init+0x4c>)
 8002a44:	f004 fa08 	bl	8006e58 <HAL_UART_Init>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002a4e:	f000 f971 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000504 	.word	0x20000504
 8002a5c:	40005000 	.word	0x40005000

08002a60 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a66:	4a12      	ldr	r2, [pc, #72]	; (8002ab0 <MX_USART3_UART_Init+0x50>)
 8002a68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a6c:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002a70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a7e:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a86:	220c      	movs	r2, #12
 8002a88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <MX_USART3_UART_Init+0x4c>)
 8002a98:	f004 f9de 	bl	8006e58 <HAL_UART_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002aa2:	f000 f947 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000054c 	.word	0x2000054c
 8002ab0:	40004800 	.word	0x40004800

08002ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <MX_DMA_Init+0x68>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a16      	ldr	r2, [pc, #88]	; (8002b1c <MX_DMA_Init+0x68>)
 8002ac4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <MX_DMA_Init+0x68>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad2:	607b      	str	r3, [r7, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <MX_DMA_Init+0x68>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	4a0f      	ldr	r2, [pc, #60]	; (8002b1c <MX_DMA_Init+0x68>)
 8002ae0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <MX_DMA_Init+0x68>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aee:	603b      	str	r3, [r7, #0]
 8002af0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002af2:	2200      	movs	r2, #0
 8002af4:	2100      	movs	r1, #0
 8002af6:	200c      	movs	r0, #12
 8002af8:	f001 ff55 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002afc:	200c      	movs	r0, #12
 8002afe:	f001 ff6e 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2100      	movs	r1, #0
 8002b06:	200d      	movs	r0, #13
 8002b08:	f001 ff4d 	bl	80049a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002b0c:	200d      	movs	r0, #13
 8002b0e:	f001 ff66 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
//  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}
 8002b12:	bf00      	nop
 8002b14:	3708      	adds	r7, #8
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b26:	f107 031c 	add.w	r3, r7, #28
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	4b78      	ldr	r3, [pc, #480]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a77      	ldr	r2, [pc, #476]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b40:	f043 0310 	orr.w	r3, r3, #16
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b75      	ldr	r3, [pc, #468]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	61bb      	str	r3, [r7, #24]
 8002b50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	4b71      	ldr	r3, [pc, #452]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a70      	ldr	r2, [pc, #448]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b6e      	ldr	r3, [pc, #440]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	4b6a      	ldr	r3, [pc, #424]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a69      	ldr	r2, [pc, #420]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b67      	ldr	r3, [pc, #412]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a62      	ldr	r2, [pc, #392]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a5b      	ldr	r2, [pc, #364]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b59      	ldr	r3, [pc, #356]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	4b55      	ldr	r3, [pc, #340]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a54      	ldr	r2, [pc, #336]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bcc:	f043 0308 	orr.w	r3, r3, #8
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b52      	ldr	r3, [pc, #328]	; (8002d1c <MX_GPIO_Init+0x1fc>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	607b      	str	r3, [r7, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin, GPIO_PIN_SET);
 8002bde:	2201      	movs	r2, #1
 8002be0:	f24c 1180 	movw	r1, #49536	; 0xc180
 8002be4:	484e      	ldr	r0, [pc, #312]	; (8002d20 <MX_GPIO_Init+0x200>)
 8002be6:	f002 fcb3 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M2_GPIO_Port, nSLEEP_M2_Pin, GPIO_PIN_RESET);
 8002bea:	2200      	movs	r2, #0
 8002bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf0:	484c      	ldr	r0, [pc, #304]	; (8002d24 <MX_GPIO_Init+0x204>)
 8002bf2:	f002 fcad 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DIR_DC_M2_Pin|DIR_DC_M1_Pin, GPIO_PIN_SET);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002bfc:	484a      	ldr	r0, [pc, #296]	; (8002d28 <MX_GPIO_Init+0x208>)
 8002bfe:	f002 fca7 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSLEEP_M1_GPIO_Port, nSLEEP_M1_Pin, GPIO_PIN_RESET);
 8002c02:	2200      	movs	r2, #0
 8002c04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c08:	4847      	ldr	r0, [pc, #284]	; (8002d28 <MX_GPIO_Init+0x208>)
 8002c0a:	f002 fca1 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MC_EN_GPIO_Port, MC_EN_Pin, GPIO_PIN_SET);
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c14:	4845      	ldr	r0, [pc, #276]	; (8002d2c <MX_GPIO_Init+0x20c>)
 8002c16:	f002 fc9b 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CHK_MC_EN_Pin CHK_MC_DIS_Pin */
  GPIO_InitStruct.Pin = CHK_MC_EN_Pin|CHK_MC_DIS_Pin;
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4840      	ldr	r0, [pc, #256]	; (8002d30 <MX_GPIO_Init+0x210>)
 8002c2e:	f002 faf3 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin BRK_CONTROL_2_Pin BRK_CONTORL_1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|BRK_CONTROL_2_Pin|BRK_CONTORL_1_Pin;
 8002c32:	f24c 1380 	movw	r3, #49536	; 0xc180
 8002c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4835      	ldr	r0, [pc, #212]	; (8002d20 <MX_GPIO_Init+0x200>)
 8002c4c:	f002 fae4 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : SWITCH1_Pin SWITCH2_Pin */
  GPIO_InitStruct.Pin = SWITCH1_Pin|SWITCH2_Pin;
 8002c50:	2306      	movs	r3, #6
 8002c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c54:	2300      	movs	r3, #0
 8002c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	f107 031c 	add.w	r3, r7, #28
 8002c60:	4619      	mov	r1, r3
 8002c62:	4832      	ldr	r0, [pc, #200]	; (8002d2c <MX_GPIO_Init+0x20c>)
 8002c64:	f002 fad8 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M2_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M2_Pin;
 8002c68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nSLEEP_M2_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	f107 031c 	add.w	r3, r7, #28
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4828      	ldr	r0, [pc, #160]	; (8002d24 <MX_GPIO_Init+0x204>)
 8002c82:	f002 fac9 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_DC_M2_Pin DIR_DC_M1_Pin */
  GPIO_InitStruct.Pin = DIR_DC_M2_Pin|DIR_DC_M1_Pin;
 8002c86:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c90:	2301      	movs	r3, #1
 8002c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 031c 	add.w	r3, r7, #28
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	4822      	ldr	r0, [pc, #136]	; (8002d28 <MX_GPIO_Init+0x208>)
 8002ca0:	f002 faba 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pins : FAULTn_M2_Pin SNSOUT_M2_Pin FAULTn_M1_Pin */
  GPIO_InitStruct.Pin = FAULTn_M2_Pin|SNSOUT_M2_Pin|FAULTn_M1_Pin;
 8002ca4:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 8002ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481b      	ldr	r0, [pc, #108]	; (8002d28 <MX_GPIO_Init+0x208>)
 8002cba:	f002 faad 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSLEEP_M1_Pin */
  GPIO_InitStruct.Pin = nSLEEP_M1_Pin;
 8002cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nSLEEP_M1_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4814      	ldr	r0, [pc, #80]	; (8002d28 <MX_GPIO_Init+0x208>)
 8002cd8:	f002 fa9e 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : SNSOUT__M1_Pin */
  GPIO_InitStruct.Pin = SNSOUT__M1_Pin;
 8002cdc:	2340      	movs	r3, #64	; 0x40
 8002cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SNSOUT__M1_GPIO_Port, &GPIO_InitStruct);
 8002ce8:	f107 031c 	add.w	r3, r7, #28
 8002cec:	4619      	mov	r1, r3
 8002cee:	480c      	ldr	r0, [pc, #48]	; (8002d20 <MX_GPIO_Init+0x200>)
 8002cf0:	f002 fa92 	bl	8005218 <HAL_GPIO_Init>

  /*Configure GPIO pin : MC_EN_Pin */
  GPIO_InitStruct.Pin = MC_EN_Pin;
 8002cf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(MC_EN_GPIO_Port, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4807      	ldr	r0, [pc, #28]	; (8002d2c <MX_GPIO_Init+0x20c>)
 8002d0e:	f002 fa83 	bl	8005218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d12:	bf00      	nop
 8002d14:	3730      	adds	r7, #48	; 0x30
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40021000 	.word	0x40021000

08002d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d82:	2007      	movs	r0, #7
 8002d84:	f001 fe04 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08c      	sub	sp, #48	; 0x30
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a4e      	ldr	r2, [pc, #312]	; (8002eec <HAL_ADC_MspInit+0x158>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d130      	bne.n	8002e18 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a4c      	ldr	r2, [pc, #304]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b43      	ldr	r3, [pc, #268]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002dee:	2310      	movs	r3, #16
 8002df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df2:	2303      	movs	r3, #3
 8002df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 031c 	add.w	r3, r7, #28
 8002dfe:	4619      	mov	r1, r3
 8002e00:	483c      	ldr	r0, [pc, #240]	; (8002ef4 <HAL_ADC_MspInit+0x160>)
 8002e02:	f002 fa09 	bl	8005218 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2012      	movs	r0, #18
 8002e0c:	f001 fdcb 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e10:	2012      	movs	r0, #18
 8002e12:	f001 fde4 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002e16:	e064      	b.n	8002ee2 <HAL_ADC_MspInit+0x14e>
  else if(hadc->Instance==ADC2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a36      	ldr	r2, [pc, #216]	; (8002ef8 <HAL_ADC_MspInit+0x164>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d15f      	bne.n	8002ee2 <HAL_ADC_MspInit+0x14e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
 8002e26:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a31      	ldr	r2, [pc, #196]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a2a      	ldr	r2, [pc, #168]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_ADC_MspInit+0x15c>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|A2_5_M_SO_M2_Pin;
 8002e5a:	2330      	movs	r3, #48	; 0x30
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e66:	f107 031c 	add.w	r3, r7, #28
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4821      	ldr	r0, [pc, #132]	; (8002ef4 <HAL_ADC_MspInit+0x160>)
 8002e6e:	f002 f9d3 	bl	8005218 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8002e72:	4b22      	ldr	r3, [pc, #136]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e74:	4a22      	ldr	r2, [pc, #136]	; (8002f00 <HAL_ADC_MspInit+0x16c>)
 8002e76:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8002e78:	4b20      	ldr	r3, [pc, #128]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e7e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e80:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e86:	4b1d      	ldr	r3, [pc, #116]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e92:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e94:	4b19      	ldr	r3, [pc, #100]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e9a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e9c:	4b17      	ldr	r3, [pc, #92]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8002ea4:	4b15      	ldr	r3, [pc, #84]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002eaa:	4b14      	ldr	r3, [pc, #80]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eb0:	4b12      	ldr	r3, [pc, #72]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002eb6:	4811      	ldr	r0, [pc, #68]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002eb8:	f001 fdac 	bl	8004a14 <HAL_DMA_Init>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_ADC_MspInit+0x132>
      Error_Handler();
 8002ec2:	f7ff ff37 	bl	8002d34 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a0c      	ldr	r2, [pc, #48]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <HAL_ADC_MspInit+0x168>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	2012      	movs	r0, #18
 8002ed8:	f001 fd65 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002edc:	2012      	movs	r0, #18
 8002ede:	f001 fd7e 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3730      	adds	r7, #48	; 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40012000 	.word	0x40012000
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40012100 	.word	0x40012100
 8002efc:	20000284 	.word	0x20000284
 8002f00:	40026440 	.word	0x40026440

08002f04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	; 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <HAL_CAN_MspInit+0xc4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d14c      	bne.n	8002fc0 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	4b28      	ldr	r3, [pc, #160]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b25      	ldr	r3, [pc, #148]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b21      	ldr	r3, [pc, #132]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a20      	ldr	r2, [pc, #128]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_CAN_MspInit+0xc8>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f64:	2302      	movs	r3, #2
 8002f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002f70:	2309      	movs	r3, #9
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f74:	f107 0314 	add.w	r3, r7, #20
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4815      	ldr	r0, [pc, #84]	; (8002fd0 <HAL_CAN_MspInit+0xcc>)
 8002f7c:	f002 f94c 	bl	8005218 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002f80:	2200      	movs	r2, #0
 8002f82:	2100      	movs	r1, #0
 8002f84:	2013      	movs	r0, #19
 8002f86:	f001 fd0e 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002f8a:	2013      	movs	r0, #19
 8002f8c:	f001 fd27 	bl	80049de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2100      	movs	r1, #0
 8002f94:	2014      	movs	r0, #20
 8002f96:	f001 fd06 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002f9a:	2014      	movs	r0, #20
 8002f9c:	f001 fd1f 	bl	80049de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	2015      	movs	r0, #21
 8002fa6:	f001 fcfe 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002faa:	2015      	movs	r0, #21
 8002fac:	f001 fd17 	bl	80049de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2016      	movs	r0, #22
 8002fb6:	f001 fcf6 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002fba:	2016      	movs	r0, #22
 8002fbc:	f001 fd0f 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002fc0:	bf00      	nop
 8002fc2:	3728      	adds	r7, #40	; 0x28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40006400 	.word	0x40006400
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020400 	.word	0x40020400

08002fd4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08c      	sub	sp, #48	; 0x30
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fdc:	f107 031c 	add.w	r3, r7, #28
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3a      	ldr	r2, [pc, #232]	; (80030dc <HAL_TIM_Encoder_MspInit+0x108>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d135      	bne.n	8003062 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a38      	ldr	r2, [pc, #224]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	4b32      	ldr	r3, [pc, #200]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800301c:	f043 0310 	orr.w	r3, r3, #16
 8003020:	6313      	str	r3, [r2, #48]	; 0x30
 8003022:	4b2f      	ldr	r3, [pc, #188]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = T1_1_ENC2_A_Pin|T1_2_ENC2_B_Pin;
 800302e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8003032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003040:	2301      	movs	r3, #1
 8003042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003044:	f107 031c 	add.w	r3, r7, #28
 8003048:	4619      	mov	r1, r3
 800304a:	4826      	ldr	r0, [pc, #152]	; (80030e4 <HAL_TIM_Encoder_MspInit+0x110>)
 800304c:	f002 f8e4 	bl	8005218 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003050:	2200      	movs	r2, #0
 8003052:	2100      	movs	r1, #0
 8003054:	2019      	movs	r0, #25
 8003056:	f001 fca6 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800305a:	2019      	movs	r0, #25
 800305c:	f001 fcbf 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003060:	e038      	b.n	80030d4 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a20      	ldr	r2, [pc, #128]	; (80030e8 <HAL_TIM_Encoder_MspInit+0x114>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d133      	bne.n	80030d4 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003074:	4a1a      	ldr	r2, [pc, #104]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003076:	f043 0302 	orr.w	r3, r3, #2
 800307a:	6413      	str	r3, [r2, #64]	; 0x40
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800308e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	6313      	str	r3, [r2, #48]	; 0x30
 8003098:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	f003 0301 	and.w	r3, r3, #1
 80030a0:	60fb      	str	r3, [r7, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T3_1_ENC1_A_Pin|T3_2_ENC1_B_Pin;
 80030a4:	23c0      	movs	r3, #192	; 0xc0
 80030a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a8:	2302      	movs	r3, #2
 80030aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030b0:	2303      	movs	r3, #3
 80030b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80030b4:	2302      	movs	r3, #2
 80030b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030b8:	f107 031c 	add.w	r3, r7, #28
 80030bc:	4619      	mov	r1, r3
 80030be:	480b      	ldr	r0, [pc, #44]	; (80030ec <HAL_TIM_Encoder_MspInit+0x118>)
 80030c0:	f002 f8aa 	bl	8005218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80030c4:	2200      	movs	r2, #0
 80030c6:	2100      	movs	r1, #0
 80030c8:	201d      	movs	r0, #29
 80030ca:	f001 fc6c 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80030ce:	201d      	movs	r0, #29
 80030d0:	f001 fc85 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 80030d4:	bf00      	nop
 80030d6:	3730      	adds	r7, #48	; 0x30
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40010000 	.word	0x40010000
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40020000 	.word	0x40020000

080030f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_TIM_PWM_MspInit+0x80>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d116      	bne.n	8003130 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2100      	movs	r1, #0
 8003122:	201e      	movs	r0, #30
 8003124:	f001 fc3f 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003128:	201e      	movs	r0, #30
 800312a:	f001 fc58 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800312e:	e01a      	b.n	8003166 <HAL_TIM_PWM_MspInit+0x76>
  else if(htim_pwm->Instance==TIM12)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a10      	ldr	r2, [pc, #64]	; (8003178 <HAL_TIM_PWM_MspInit+0x88>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d115      	bne.n	8003166 <HAL_TIM_PWM_MspInit+0x76>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 8003144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <HAL_TIM_PWM_MspInit+0x84>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003156:	2200      	movs	r2, #0
 8003158:	2100      	movs	r1, #0
 800315a:	202b      	movs	r0, #43	; 0x2b
 800315c:	f001 fc23 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003160:	202b      	movs	r0, #43	; 0x2b
 8003162:	f001 fc3c 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 8003166:	bf00      	nop
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	40000800 	.word	0x40000800
 8003174:	40023800 	.word	0x40023800
 8003178:	40001800 	.word	0x40001800

0800317c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_TIM_Base_MspInit+0x80>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d116      	bne.n	80031bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	4a1a      	ldr	r2, [pc, #104]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 8003198:	f043 0310 	orr.w	r3, r3, #16
 800319c:	6413      	str	r3, [r2, #64]	; 0x40
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80031aa:	2200      	movs	r2, #0
 80031ac:	2100      	movs	r1, #0
 80031ae:	2036      	movs	r0, #54	; 0x36
 80031b0:	f001 fbf9 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80031b4:	2036      	movs	r0, #54	; 0x36
 80031b6:	f001 fc12 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80031ba:	e01a      	b.n	80031f2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_TIM_Base_MspInit+0x88>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d115      	bne.n	80031f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	4b0d      	ldr	r3, [pc, #52]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a0c      	ldr	r2, [pc, #48]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 80031d0:	f043 0320 	orr.w	r3, r3, #32
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_TIM_Base_MspInit+0x84>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	2100      	movs	r1, #0
 80031e6:	2037      	movs	r0, #55	; 0x37
 80031e8:	f001 fbdd 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80031ec:	2037      	movs	r0, #55	; 0x37
 80031ee:	f001 fbf6 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40001000 	.word	0x40001000
 8003200:	40023800 	.word	0x40023800
 8003204:	40001400 	.word	0x40001400

08003208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08a      	sub	sp, #40	; 0x28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0314 	add.w	r3, r7, #20
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <HAL_TIM_MspPostInit+0xb4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d11f      	bne.n	800326a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	613b      	str	r3, [r7, #16]
 800322e:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a23      	ldr	r2, [pc, #140]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 8003234:	f043 0308 	orr.w	r3, r3, #8
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b21      	ldr	r3, [pc, #132]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = T4_3_PWM_DC_M1_Pin;
 8003246:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800324a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003258:	2302      	movs	r3, #2
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T4_3_PWM_DC_M1_GPIO_Port, &GPIO_InitStruct);
 800325c:	f107 0314 	add.w	r3, r7, #20
 8003260:	4619      	mov	r1, r3
 8003262:	4818      	ldr	r0, [pc, #96]	; (80032c4 <HAL_TIM_MspPostInit+0xbc>)
 8003264:	f001 ffd8 	bl	8005218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003268:	e023      	b.n	80032b2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM12)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a16      	ldr	r2, [pc, #88]	; (80032c8 <HAL_TIM_MspPostInit+0xc0>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d11e      	bne.n	80032b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a10      	ldr	r2, [pc, #64]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_TIM_MspPostInit+0xb8>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T12_2_PWM_DC_M2_Pin;
 8003290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80032a2:	2309      	movs	r3, #9
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(T12_2_PWM_DC_M2_GPIO_Port, &GPIO_InitStruct);
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	4807      	ldr	r0, [pc, #28]	; (80032cc <HAL_TIM_MspPostInit+0xc4>)
 80032ae:	f001 ffb3 	bl	8005218 <HAL_GPIO_Init>
}
 80032b2:	bf00      	nop
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40023800 	.word	0x40023800
 80032c4:	40020c00 	.word	0x40020c00
 80032c8:	40001800 	.word	0x40001800
 80032cc:	40020400 	.word	0x40020400

080032d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08e      	sub	sp, #56	; 0x38
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a96      	ldr	r2, [pc, #600]	; (8003548 <HAL_UART_MspInit+0x278>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d164      	bne.n	80033bc <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	623b      	str	r3, [r7, #32]
 80032f6:	4b95      	ldr	r3, [pc, #596]	; (800354c <HAL_UART_MspInit+0x27c>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a94      	ldr	r2, [pc, #592]	; (800354c <HAL_UART_MspInit+0x27c>)
 80032fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b92      	ldr	r3, [pc, #584]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800330a:	623b      	str	r3, [r7, #32]
 800330c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	4b8e      	ldr	r3, [pc, #568]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	4a8d      	ldr	r2, [pc, #564]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	6313      	str	r3, [r2, #48]	; 0x30
 800331e:	4b8b      	ldr	r3, [pc, #556]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	61fb      	str	r3, [r7, #28]
 8003328:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800332a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003338:	2303      	movs	r3, #3
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800333c:	2308      	movs	r3, #8
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003344:	4619      	mov	r1, r3
 8003346:	4882      	ldr	r0, [pc, #520]	; (8003550 <HAL_UART_MspInit+0x280>)
 8003348:	f001 ff66 	bl	8005218 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800334c:	4b81      	ldr	r3, [pc, #516]	; (8003554 <HAL_UART_MspInit+0x284>)
 800334e:	4a82      	ldr	r2, [pc, #520]	; (8003558 <HAL_UART_MspInit+0x288>)
 8003350:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003352:	4b80      	ldr	r3, [pc, #512]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003358:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800335a:	4b7e      	ldr	r3, [pc, #504]	; (8003554 <HAL_UART_MspInit+0x284>)
 800335c:	2200      	movs	r2, #0
 800335e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003360:	4b7c      	ldr	r3, [pc, #496]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003362:	2200      	movs	r2, #0
 8003364:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003366:	4b7b      	ldr	r3, [pc, #492]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800336c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800336e:	4b79      	ldr	r3, [pc, #484]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003374:	4b77      	ldr	r3, [pc, #476]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003376:	2200      	movs	r2, #0
 8003378:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800337a:	4b76      	ldr	r3, [pc, #472]	; (8003554 <HAL_UART_MspInit+0x284>)
 800337c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003380:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003382:	4b74      	ldr	r3, [pc, #464]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003384:	2200      	movs	r2, #0
 8003386:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003388:	4b72      	ldr	r3, [pc, #456]	; (8003554 <HAL_UART_MspInit+0x284>)
 800338a:	2200      	movs	r2, #0
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800338e:	4871      	ldr	r0, [pc, #452]	; (8003554 <HAL_UART_MspInit+0x284>)
 8003390:	f001 fb40 	bl	8004a14 <HAL_DMA_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800339a:	f7ff fccb 	bl	8002d34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a6c      	ldr	r2, [pc, #432]	; (8003554 <HAL_UART_MspInit+0x284>)
 80033a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033a4:	4a6b      	ldr	r2, [pc, #428]	; (8003554 <HAL_UART_MspInit+0x284>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2034      	movs	r0, #52	; 0x34
 80033b0:	f001 faf9 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033b4:	2034      	movs	r0, #52	; 0x34
 80033b6:	f001 fb12 	bl	80049de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033ba:	e0c1      	b.n	8003540 <HAL_UART_MspInit+0x270>
  else if(huart->Instance==UART5)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a66      	ldr	r2, [pc, #408]	; (800355c <HAL_UART_MspInit+0x28c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d153      	bne.n	800346e <HAL_UART_MspInit+0x19e>
    __HAL_RCC_UART5_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	4b60      	ldr	r3, [pc, #384]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	4a5f      	ldr	r2, [pc, #380]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033d4:	6413      	str	r3, [r2, #64]	; 0x40
 80033d6:	4b5d      	ldr	r3, [pc, #372]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	4b59      	ldr	r3, [pc, #356]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a58      	ldr	r2, [pc, #352]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b56      	ldr	r3, [pc, #344]	; (800354c <HAL_UART_MspInit+0x27c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	4b52      	ldr	r3, [pc, #328]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a51      	ldr	r2, [pc, #324]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800341a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800342c:	2308      	movs	r3, #8
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003434:	4619      	mov	r1, r3
 8003436:	4846      	ldr	r0, [pc, #280]	; (8003550 <HAL_UART_MspInit+0x280>)
 8003438:	f001 feee 	bl	8005218 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800343c:	2304      	movs	r3, #4
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800344c:	2308      	movs	r3, #8
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	4842      	ldr	r0, [pc, #264]	; (8003560 <HAL_UART_MspInit+0x290>)
 8003458:	f001 fede 	bl	8005218 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	2035      	movs	r0, #53	; 0x35
 8003462:	f001 faa0 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003466:	2035      	movs	r0, #53	; 0x35
 8003468:	f001 fab9 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 800346c:	e068      	b.n	8003540 <HAL_UART_MspInit+0x270>
  else if(huart->Instance==USART3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <HAL_UART_MspInit+0x294>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d163      	bne.n	8003540 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_UART_MspInit+0x27c>)
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	4a32      	ldr	r2, [pc, #200]	; (800354c <HAL_UART_MspInit+0x27c>)
 8003482:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003486:	6413      	str	r3, [r2, #64]	; 0x40
 8003488:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_UART_MspInit+0x27c>)
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	4b2c      	ldr	r3, [pc, #176]	; (800354c <HAL_UART_MspInit+0x27c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4a2b      	ldr	r2, [pc, #172]	; (800354c <HAL_UART_MspInit+0x27c>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	6313      	str	r3, [r2, #48]	; 0x30
 80034a4:	4b29      	ldr	r3, [pc, #164]	; (800354c <HAL_UART_MspInit+0x27c>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80034b0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80034b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034be:	2303      	movs	r3, #3
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80034c2:	2307      	movs	r3, #7
 80034c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ca:	4619      	mov	r1, r3
 80034cc:	4826      	ldr	r0, [pc, #152]	; (8003568 <HAL_UART_MspInit+0x298>)
 80034ce:	f001 fea3 	bl	8005218 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80034d2:	4b26      	ldr	r3, [pc, #152]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034d4:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_UART_MspInit+0x2a0>)
 80034d6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034de:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034e0:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e6:	4b21      	ldr	r3, [pc, #132]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034ec:	4b1f      	ldr	r3, [pc, #124]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034f4:	4b1d      	ldr	r3, [pc, #116]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <HAL_UART_MspInit+0x29c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003500:	4b1a      	ldr	r3, [pc, #104]	; (800356c <HAL_UART_MspInit+0x29c>)
 8003502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003506:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003508:	4b18      	ldr	r3, [pc, #96]	; (800356c <HAL_UART_MspInit+0x29c>)
 800350a:	2200      	movs	r2, #0
 800350c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350e:	4b17      	ldr	r3, [pc, #92]	; (800356c <HAL_UART_MspInit+0x29c>)
 8003510:	2200      	movs	r2, #0
 8003512:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003514:	4815      	ldr	r0, [pc, #84]	; (800356c <HAL_UART_MspInit+0x29c>)
 8003516:	f001 fa7d 	bl	8004a14 <HAL_DMA_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_UART_MspInit+0x254>
      Error_Handler();
 8003520:	f7ff fc08 	bl	8002d34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <HAL_UART_MspInit+0x29c>)
 8003528:	63da      	str	r2, [r3, #60]	; 0x3c
 800352a:	4a10      	ldr	r2, [pc, #64]	; (800356c <HAL_UART_MspInit+0x29c>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	2027      	movs	r0, #39	; 0x27
 8003536:	f001 fa36 	bl	80049a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800353a:	2027      	movs	r0, #39	; 0x27
 800353c:	f001 fa4f 	bl	80049de <HAL_NVIC_EnableIRQ>
}
 8003540:	bf00      	nop
 8003542:	3738      	adds	r7, #56	; 0x38
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40004c00 	.word	0x40004c00
 800354c:	40023800 	.word	0x40023800
 8003550:	40020800 	.word	0x40020800
 8003554:	20000594 	.word	0x20000594
 8003558:	40026040 	.word	0x40026040
 800355c:	40005000 	.word	0x40005000
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40004800 	.word	0x40004800
 8003568:	40020400 	.word	0x40020400
 800356c:	200005f4 	.word	0x200005f4
 8003570:	40026028 	.word	0x40026028

08003574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003578:	e7fe      	b.n	8003578 <NMI_Handler+0x4>

0800357a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357e:	e7fe      	b.n	800357e <HardFault_Handler+0x4>

08003580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003584:	e7fe      	b.n	8003584 <MemManage_Handler+0x4>

08003586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800358a:	e7fe      	b.n	800358a <BusFault_Handler+0x4>

0800358c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003590:	e7fe      	b.n	8003590 <UsageFault_Handler+0x4>

08003592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003592:	b480      	push	{r7}
 8003594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035c0:	f000 fa04 	bl	80039cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <DMA1_Stream1_IRQHandler+0x10>)
 80035ce:	f001 fbb9 	bl	8004d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	200005f4 	.word	0x200005f4

080035dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <DMA1_Stream2_IRQHandler+0x10>)
 80035e2:	f001 fbaf 	bl	8004d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000594 	.word	0x20000594

080035f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035f4:	4803      	ldr	r0, [pc, #12]	; (8003604 <ADC_IRQHandler+0x14>)
 80035f6:	f000 fa70 	bl	8003ada <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80035fa:	4803      	ldr	r0, [pc, #12]	; (8003608 <ADC_IRQHandler+0x18>)
 80035fc:	f000 fa6d 	bl	8003ada <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003600:	bf00      	nop
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200001f4 	.word	0x200001f4
 8003608:	2000023c 	.word	0x2000023c

0800360c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <CAN1_TX_IRQHandler+0x10>)
 8003612:	f000 feb4 	bl	800437e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200002e4 	.word	0x200002e4

08003620 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <CAN1_RX0_IRQHandler+0x10>)
 8003626:	f000 feaa 	bl	800437e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200002e4 	.word	0x200002e4

08003634 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <CAN1_RX1_IRQHandler+0x10>)
 800363a:	f000 fea0 	bl	800437e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200002e4 	.word	0x200002e4

08003648 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <CAN1_SCE_IRQHandler+0x10>)
 800364e:	f000 fe96 	bl	800437e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200002e4 	.word	0x200002e4

0800365c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003662:	f002 ff0d 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	2000030c 	.word	0x2000030c

08003670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM3_IRQHandler+0x10>)
 8003676:	f002 ff03 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000354 	.word	0x20000354

08003684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <TIM4_IRQHandler+0x10>)
 800368a:	f002 fef9 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000039c 	.word	0x2000039c

08003698 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <USART3_IRQHandler+0x10>)
 800369e:	f003 fcdb 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000054c 	.word	0x2000054c

080036ac <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80036b2:	f002 fee5 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000474 	.word	0x20000474

080036c0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <UART4_IRQHandler+0x10>)
 80036c6:	f003 fcc7 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	200004bc 	.word	0x200004bc

080036d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <UART5_IRQHandler+0x10>)
 80036da:	f003 fcbd 	bl	8007058 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000504 	.word	0x20000504

080036e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <TIM6_DAC_IRQHandler+0x10>)
 80036ee:	f002 fec7 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200003e4 	.word	0x200003e4

080036fc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <TIM7_IRQHandler+0x10>)
 8003702:	f002 febd 	bl	8006480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	2000042c 	.word	0x2000042c

08003710 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <DMA2_Stream2_IRQHandler+0x10>)
 8003716:	f001 fb15 	bl	8004d44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000284 	.word	0x20000284

08003724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return 1;
 8003728:	2301      	movs	r3, #1
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <_kill>:

int _kill(int pid, int sig)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800373e:	f006 f97b 	bl	8009a38 <__errno>
 8003742:	4603      	mov	r3, r0
 8003744:	2216      	movs	r2, #22
 8003746:	601a      	str	r2, [r3, #0]
  return -1;
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800374c:	4618      	mov	r0, r3
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <_exit>:

void _exit (int status)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800375c:	f04f 31ff 	mov.w	r1, #4294967295
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffe7 	bl	8003734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003766:	e7fe      	b.n	8003766 <_exit+0x12>

08003768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e00a      	b.n	8003790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800377a:	f3af 8000 	nop.w
 800377e:	4601      	mov	r1, r0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	1c5a      	adds	r2, r3, #1
 8003784:	60ba      	str	r2, [r7, #8]
 8003786:	b2ca      	uxtb	r2, r1
 8003788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	3301      	adds	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	dbf0      	blt.n	800377a <_read+0x12>
  }

  return len;
 8003798:	687b      	ldr	r3, [r7, #4]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b086      	sub	sp, #24
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	60f8      	str	r0, [r7, #12]
 80037aa:	60b9      	str	r1, [r7, #8]
 80037ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
 80037b2:	e009      	b.n	80037c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	60ba      	str	r2, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3301      	adds	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	dbf1      	blt.n	80037b4 <_write+0x12>
  }
  return len;
 80037d0:	687b      	ldr	r3, [r7, #4]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <_close>:

int _close(int file)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr

080037f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003802:	605a      	str	r2, [r3, #4]
  return 0;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <_isatty>:

int _isatty(int file)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800381a:	2301      	movs	r3, #1
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
	...

08003844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800384c:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <_sbrk+0x5c>)
 800384e:	4b15      	ldr	r3, [pc, #84]	; (80038a4 <_sbrk+0x60>)
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003858:	4b13      	ldr	r3, [pc, #76]	; (80038a8 <_sbrk+0x64>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d102      	bne.n	8003866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <_sbrk+0x64>)
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <_sbrk+0x68>)
 8003864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003866:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <_sbrk+0x64>)
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d207      	bcs.n	8003884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003874:	f006 f8e0 	bl	8009a38 <__errno>
 8003878:	4603      	mov	r3, r0
 800387a:	220c      	movs	r2, #12
 800387c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	e009      	b.n	8003898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <_sbrk+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4413      	add	r3, r2
 8003892:	4a05      	ldr	r2, [pc, #20]	; (80038a8 <_sbrk+0x64>)
 8003894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003896:	68fb      	ldr	r3, [r7, #12]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20020000 	.word	0x20020000
 80038a4:	00000400 	.word	0x00000400
 80038a8:	200008f0 	.word	0x200008f0
 80038ac:	20000a48 	.word	0x20000a48

080038b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <SystemInit+0x20>)
 80038b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ba:	4a05      	ldr	r2, [pc, #20]	; (80038d0 <SystemInit+0x20>)
 80038bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038c4:	bf00      	nop
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00

080038d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800390c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80038d8:	f7ff ffea 	bl	80038b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038dc:	480c      	ldr	r0, [pc, #48]	; (8003910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038de:	490d      	ldr	r1, [pc, #52]	; (8003914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038e0:	4a0d      	ldr	r2, [pc, #52]	; (8003918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e4:	e002      	b.n	80038ec <LoopCopyDataInit>

080038e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ea:	3304      	adds	r3, #4

080038ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f0:	d3f9      	bcc.n	80038e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038f4:	4c0a      	ldr	r4, [pc, #40]	; (8003920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f8:	e001      	b.n	80038fe <LoopFillZerobss>

080038fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038fc:	3204      	adds	r2, #4

080038fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003900:	d3fb      	bcc.n	80038fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003902:	f006 f89f 	bl	8009a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003906:	f7fe fc91 	bl	800222c <main>
  bx  lr    
 800390a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800390c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003914:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003918:	0800c934 	.word	0x0800c934
  ldr r2, =_sbss
 800391c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003920:	20000a44 	.word	0x20000a44

08003924 <CAN2_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003924:	e7fe      	b.n	8003924 <CAN2_RX0_IRQHandler>
	...

08003928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800392c:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <HAL_Init+0x40>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a0d      	ldr	r2, [pc, #52]	; (8003968 <HAL_Init+0x40>)
 8003932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_Init+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_Init+0x40>)
 800393e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <HAL_Init+0x40>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a07      	ldr	r2, [pc, #28]	; (8003968 <HAL_Init+0x40>)
 800394a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800394e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003950:	2003      	movs	r0, #3
 8003952:	f001 f81d 	bl	8004990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003956:	2000      	movs	r0, #0
 8003958:	f000 f808 	bl	800396c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800395c:	f7ff f9f2 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40023c00 	.word	0x40023c00

0800396c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_InitTick+0x54>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_InitTick+0x58>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4619      	mov	r1, r3
 800397e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003982:	fbb3 f3f1 	udiv	r3, r3, r1
 8003986:	fbb2 f3f3 	udiv	r3, r2, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f001 f835 	bl	80049fa <HAL_SYSTICK_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e00e      	b.n	80039b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d80a      	bhi.n	80039b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a0:	2200      	movs	r2, #0
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f000 fffd 	bl	80049a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039ac:	4a06      	ldr	r2, [pc, #24]	; (80039c8 <HAL_InitTick+0x5c>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000000 	.word	0x20000000
 80039c4:	20000008 	.word	0x20000008
 80039c8:	20000004 	.word	0x20000004

080039cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039d0:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x20>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_IncTick+0x24>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4413      	add	r3, r2
 80039dc:	4a04      	ldr	r2, [pc, #16]	; (80039f0 <HAL_IncTick+0x24>)
 80039de:	6013      	str	r3, [r2, #0]
}
 80039e0:	bf00      	nop
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000008 	.word	0x20000008
 80039f0:	200008f4 	.word	0x200008f4

080039f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return uwTick;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_GetTick+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	200008f4 	.word	0x200008f4

08003a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a14:	f7ff ffee 	bl	80039f4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a24:	d005      	beq.n	8003a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_Delay+0x44>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4413      	add	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a32:	bf00      	nop
 8003a34:	f7ff ffde 	bl	80039f4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8f7      	bhi.n	8003a34 <HAL_Delay+0x28>
  {
  }
}
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000008 	.word	0x20000008

08003a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e033      	b.n	8003ad2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7ff f98e 	bl	8002d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d118      	bne.n	8003ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a9a:	f023 0302 	bic.w	r3, r3, #2
 8003a9e:	f043 0202 	orr.w	r2, r3, #2
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa68 	bl	8003f7c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	f043 0201 	orr.w	r2, r3, #1
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ac2:	e001      	b.n	8003ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d049      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0xca>
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d046      	beq.n	8003ba4 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d105      	bne.n	8003b2e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d12b      	bne.n	8003b94 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d127      	bne.n	8003b94 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d119      	bne.n	8003b94 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0220 	bic.w	r2, r2, #32
 8003b6e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f8b0 	bl	8003cfa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f06f 0212 	mvn.w	r2, #18
 8003ba2:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 0304 	and.w	r3, r3, #4
 8003baa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d057      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x190>
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d054      	beq.n	8003c6a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d139      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d006      	beq.n	8003c02 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d12b      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d124      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11d      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d119      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c34:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d105      	bne.n	8003c5a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fa8a 	bl	8004174 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 020c 	mvn.w	r2, #12
 8003c68:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d017      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x1d6>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d014      	beq.n	8003cb0 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d10d      	bne.n	8003cb0 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f834 	bl	8003d0e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0201 	mvn.w	r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003cbe:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d015      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0x218>
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d012      	beq.n	8003cf2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f043 0202 	orr.w	r2, r3, #2
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0220 	mvn.w	r2, #32
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f81d 	bl	8003d22 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f06f 0220 	mvn.w	r2, #32
 8003cf0:	601a      	str	r2, [r3, #0]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b083      	sub	sp, #12
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d16:	bf00      	nop
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
	...

08003d38 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x1c>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e105      	b.n	8003f60 <HAL_ADC_ConfigChannel+0x228>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2b09      	cmp	r3, #9
 8003d62:	d925      	bls.n	8003db0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68d9      	ldr	r1, [r3, #12]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	461a      	mov	r2, r3
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	3b1e      	subs	r3, #30
 8003d7a:	2207      	movs	r2, #7
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43da      	mvns	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	400a      	ands	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68d9      	ldr	r1, [r3, #12]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4403      	add	r3, r0
 8003da2:	3b1e      	subs	r3, #30
 8003da4:	409a      	lsls	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	60da      	str	r2, [r3, #12]
 8003dae:	e022      	b.n	8003df6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6919      	ldr	r1, [r3, #16]
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	4413      	add	r3, r2
 8003dc4:	2207      	movs	r2, #7
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6919      	ldr	r1, [r3, #16]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4618      	mov	r0, r3
 8003de6:	4603      	mov	r3, r0
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	4403      	add	r3, r0
 8003dec:	409a      	lsls	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b06      	cmp	r3, #6
 8003dfc:	d824      	bhi.n	8003e48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3b05      	subs	r3, #5
 8003e10:	221f      	movs	r2, #31
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43da      	mvns	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	400a      	ands	r2, r1
 8003e1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685a      	ldr	r2, [r3, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	3b05      	subs	r3, #5
 8003e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	635a      	str	r2, [r3, #52]	; 0x34
 8003e46:	e04c      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d824      	bhi.n	8003e9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	3b23      	subs	r3, #35	; 0x23
 8003e62:	221f      	movs	r2, #31
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43da      	mvns	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	400a      	ands	r2, r1
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	4618      	mov	r0, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	3b23      	subs	r3, #35	; 0x23
 8003e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
 8003e98:	e023      	b.n	8003ee2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3b41      	subs	r3, #65	; 0x41
 8003eac:	221f      	movs	r2, #31
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	400a      	ands	r2, r1
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4618      	mov	r0, r3
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3b41      	subs	r3, #65	; 0x41
 8003ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_ADC_ConfigChannel+0x234>)
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a21      	ldr	r2, [pc, #132]	; (8003f70 <HAL_ADC_ConfigChannel+0x238>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d109      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1cc>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b12      	cmp	r3, #18
 8003ef6:	d105      	bne.n	8003f04 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <HAL_ADC_ConfigChannel+0x238>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d123      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b10      	cmp	r3, #16
 8003f14:	d003      	beq.n	8003f1e <HAL_ADC_ConfigChannel+0x1e6>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b11      	cmp	r3, #17
 8003f1c:	d11b      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b10      	cmp	r3, #16
 8003f30:	d111      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f32:	4b10      	ldr	r3, [pc, #64]	; (8003f74 <HAL_ADC_ConfigChannel+0x23c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <HAL_ADC_ConfigChannel+0x240>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	0c9a      	lsrs	r2, r3, #18
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f48:	e002      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f9      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40012300 	.word	0x40012300
 8003f70:	40012000 	.word	0x40012000
 8003f74:	20000000 	.word	0x20000000
 8003f78:	431bde83 	.word	0x431bde83

08003f7c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f84:	4b79      	ldr	r3, [pc, #484]	; (800416c <ADC_Init+0x1f0>)
 8003f86:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	431a      	orrs	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6859      	ldr	r1, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	430a      	orrs	r2, r1
 8004008:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400e:	4a58      	ldr	r2, [pc, #352]	; (8004170 <ADC_Init+0x1f4>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d022      	beq.n	800405a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004022:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6899      	ldr	r1, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004044:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	e00f      	b.n	800407a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004078:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0202 	bic.w	r2, r2, #2
 8004088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	6899      	ldr	r1, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	7e1b      	ldrb	r3, [r3, #24]
 8004094:	005a      	lsls	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01b      	beq.n	80040e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80040c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6859      	ldr	r1, [r3, #4]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	3b01      	subs	r3, #1
 80040d4:	035a      	lsls	r2, r3, #13
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	e007      	b.n	80040f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80040fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	3b01      	subs	r3, #1
 800410c:	051a      	lsls	r2, r3, #20
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004124:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004132:	025a      	lsls	r2, r3, #9
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800414a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	029a      	lsls	r2, r3, #10
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	609a      	str	r2, [r3, #8]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40012300 	.word	0x40012300
 8004170:	0f000001 	.word	0x0f000001

08004174 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e0ed      	b.n	8004376 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fe feac 	bl	8002f04 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041bc:	f7ff fc1a 	bl	80039f4 <HAL_GetTick>
 80041c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80041c2:	e012      	b.n	80041ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041c4:	f7ff fc16 	bl	80039f4 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d90b      	bls.n	80041ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2205      	movs	r2, #5
 80041e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e0c5      	b.n	8004376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0e5      	beq.n	80041c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0202 	bic.w	r2, r2, #2
 8004206:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004208:	f7ff fbf4 	bl	80039f4 <HAL_GetTick>
 800420c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800420e:	e012      	b.n	8004236 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004210:	f7ff fbf0 	bl	80039f4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b0a      	cmp	r3, #10
 800421c:	d90b      	bls.n	8004236 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2205      	movs	r2, #5
 800422e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e09f      	b.n	8004376 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7e1b      	ldrb	r3, [r3, #24]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d108      	bne.n	800425e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	e007      	b.n	800426e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	7e5b      	ldrb	r3, [r3, #25]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d108      	bne.n	8004288 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e007      	b.n	8004298 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	7e9b      	ldrb	r3, [r3, #26]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d108      	bne.n	80042b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	e007      	b.n	80042c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0220 	bic.w	r2, r2, #32
 80042c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7edb      	ldrb	r3, [r3, #27]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d108      	bne.n	80042dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0210 	bic.w	r2, r2, #16
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	e007      	b.n	80042ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0210 	orr.w	r2, r2, #16
 80042ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7f1b      	ldrb	r3, [r3, #28]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d108      	bne.n	8004306 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0208 	orr.w	r2, r2, #8
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e007      	b.n	8004316 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0208 	bic.w	r2, r2, #8
 8004314:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	7f5b      	ldrb	r3, [r3, #29]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0204 	orr.w	r2, r2, #4
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	e007      	b.n	8004340 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0204 	bic.w	r2, r2, #4
 800433e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	ea42 0103 	orr.w	r1, r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	1e5a      	subs	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08a      	sub	sp, #40	; 0x28
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004386:	2300      	movs	r3, #0
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691b      	ldr	r3, [r3, #16]
 80043b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d07c      	beq.n	80044be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d023      	beq.n	8004416 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2201      	movs	r2, #1
 80043d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f983 	bl	80046ec <HAL_CAN_TxMailbox0CompleteCallback>
 80043e6:	e016      	b.n	8004416 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e00c      	b.n	8004416 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0308 	and.w	r3, r3, #8
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004408:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
 800440e:	e002      	b.n	8004416 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f989 	bl	8004728 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441c:	2b00      	cmp	r3, #0
 800441e:	d024      	beq.n	800446a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004428:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f963 	bl	8004700 <HAL_CAN_TxMailbox1CompleteCallback>
 800443a:	e016      	b.n	800446a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004442:	2b00      	cmp	r3, #0
 8004444:	d004      	beq.n	8004450 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800444c:	627b      	str	r3, [r7, #36]	; 0x24
 800444e:	e00c      	b.n	800446a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
 8004462:	e002      	b.n	800446a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f969 	bl	800473c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d024      	beq.n	80044be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800447c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f943 	bl	8004714 <HAL_CAN_TxMailbox2CompleteCallback>
 800448e:	e016      	b.n	80044be <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d004      	beq.n	80044a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	e00c      	b.n	80044be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	e002      	b.n	80044be <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f949 	bl	8004750 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00c      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d007      	beq.n	80044e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2210      	movs	r2, #16
 80044e0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00b      	beq.n	8004504 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f93a 	bl	8004778 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d009      	beq.n	8004522 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0303 	and.w	r3, r3, #3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f921 	bl	8004764 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0310 	and.w	r3, r3, #16
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800453c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2210      	movs	r2, #16
 8004544:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00b      	beq.n	8004568 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2208      	movs	r2, #8
 8004560:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f91c 	bl	80047a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f903 	bl	800478c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00b      	beq.n	80045a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0310 	and.w	r3, r3, #16
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f906 	bl	80047b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d006      	beq.n	80045ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2208      	movs	r2, #8
 80045c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f8ff 	bl	80047c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80045ca:	6a3b      	ldr	r3, [r7, #32]
 80045cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d07b      	beq.n	80046cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d072      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004638:	2b00      	cmp	r3, #0
 800463a:	d043      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004642:	2b00      	cmp	r3, #0
 8004644:	d03e      	beq.n	80046c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800464c:	2b60      	cmp	r3, #96	; 0x60
 800464e:	d02b      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x32a>
 8004650:	2b60      	cmp	r3, #96	; 0x60
 8004652:	d82e      	bhi.n	80046b2 <HAL_CAN_IRQHandler+0x334>
 8004654:	2b50      	cmp	r3, #80	; 0x50
 8004656:	d022      	beq.n	800469e <HAL_CAN_IRQHandler+0x320>
 8004658:	2b50      	cmp	r3, #80	; 0x50
 800465a:	d82a      	bhi.n	80046b2 <HAL_CAN_IRQHandler+0x334>
 800465c:	2b40      	cmp	r3, #64	; 0x40
 800465e:	d019      	beq.n	8004694 <HAL_CAN_IRQHandler+0x316>
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d826      	bhi.n	80046b2 <HAL_CAN_IRQHandler+0x334>
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d010      	beq.n	800468a <HAL_CAN_IRQHandler+0x30c>
 8004668:	2b30      	cmp	r3, #48	; 0x30
 800466a:	d822      	bhi.n	80046b2 <HAL_CAN_IRQHandler+0x334>
 800466c:	2b10      	cmp	r3, #16
 800466e:	d002      	beq.n	8004676 <HAL_CAN_IRQHandler+0x2f8>
 8004670:	2b20      	cmp	r3, #32
 8004672:	d005      	beq.n	8004680 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004674:	e01d      	b.n	80046b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	f043 0308 	orr.w	r3, r3, #8
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800467e:	e019      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f043 0310 	orr.w	r3, r3, #16
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004688:	e014      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f043 0320 	orr.w	r3, r3, #32
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004692:	e00f      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800469c:	e00a      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046a6:	e005      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80046b0:	e000      	b.n	80046b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80046b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2204      	movs	r2, #4
 80046ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f87c 	bl	80047dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80046e4:	bf00      	nop
 80046e6:	3728      	adds	r7, #40	; 0x28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800480c:	4013      	ands	r3, r2
 800480e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800481c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004822:	4a04      	ldr	r2, [pc, #16]	; (8004834 <__NVIC_SetPriorityGrouping+0x44>)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	60d3      	str	r3, [r2, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800483c:	4b04      	ldr	r3, [pc, #16]	; (8004850 <__NVIC_GetPriorityGrouping+0x18>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	0a1b      	lsrs	r3, r3, #8
 8004842:	f003 0307 	and.w	r3, r3, #7
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	2b00      	cmp	r3, #0
 8004864:	db0b      	blt.n	800487e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4907      	ldr	r1, [pc, #28]	; (800488c <__NVIC_EnableIRQ+0x38>)
 800486e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004872:	095b      	lsrs	r3, r3, #5
 8004874:	2001      	movs	r0, #1
 8004876:	fa00 f202 	lsl.w	r2, r0, r2
 800487a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000e100 	.word	0xe000e100

08004890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	6039      	str	r1, [r7, #0]
 800489a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800489c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	db0a      	blt.n	80048ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	490c      	ldr	r1, [pc, #48]	; (80048dc <__NVIC_SetPriority+0x4c>)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	0112      	lsls	r2, r2, #4
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	440b      	add	r3, r1
 80048b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048b8:	e00a      	b.n	80048d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4908      	ldr	r1, [pc, #32]	; (80048e0 <__NVIC_SetPriority+0x50>)
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	3b04      	subs	r3, #4
 80048c8:	0112      	lsls	r2, r2, #4
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	440b      	add	r3, r1
 80048ce:	761a      	strb	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	e000e100 	.word	0xe000e100
 80048e0:	e000ed00 	.word	0xe000ed00

080048e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b089      	sub	sp, #36	; 0x24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f1c3 0307 	rsb	r3, r3, #7
 80048fe:	2b04      	cmp	r3, #4
 8004900:	bf28      	it	cs
 8004902:	2304      	movcs	r3, #4
 8004904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3304      	adds	r3, #4
 800490a:	2b06      	cmp	r3, #6
 800490c:	d902      	bls.n	8004914 <NVIC_EncodePriority+0x30>
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3b03      	subs	r3, #3
 8004912:	e000      	b.n	8004916 <NVIC_EncodePriority+0x32>
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004918:	f04f 32ff 	mov.w	r2, #4294967295
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	401a      	ands	r2, r3
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800492c:	f04f 31ff 	mov.w	r1, #4294967295
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	fa01 f303 	lsl.w	r3, r1, r3
 8004936:	43d9      	mvns	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800493c:	4313      	orrs	r3, r2
         );
}
 800493e:	4618      	mov	r0, r3
 8004940:	3724      	adds	r7, #36	; 0x24
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3b01      	subs	r3, #1
 8004958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800495c:	d301      	bcc.n	8004962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800495e:	2301      	movs	r3, #1
 8004960:	e00f      	b.n	8004982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004962:	4a0a      	ldr	r2, [pc, #40]	; (800498c <SysTick_Config+0x40>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3b01      	subs	r3, #1
 8004968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800496a:	210f      	movs	r1, #15
 800496c:	f04f 30ff 	mov.w	r0, #4294967295
 8004970:	f7ff ff8e 	bl	8004890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <SysTick_Config+0x40>)
 8004976:	2200      	movs	r2, #0
 8004978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <SysTick_Config+0x40>)
 800497c:	2207      	movs	r2, #7
 800497e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	e000e010 	.word	0xe000e010

08004990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff29 	bl	80047f0 <__NVIC_SetPriorityGrouping>
}
 800499e:	bf00      	nop
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b086      	sub	sp, #24
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	4603      	mov	r3, r0
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049b8:	f7ff ff3e 	bl	8004838 <__NVIC_GetPriorityGrouping>
 80049bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	6978      	ldr	r0, [r7, #20]
 80049c4:	f7ff ff8e 	bl	80048e4 <NVIC_EncodePriority>
 80049c8:	4602      	mov	r2, r0
 80049ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049ce:	4611      	mov	r1, r2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff ff5d 	bl	8004890 <__NVIC_SetPriority>
}
 80049d6:	bf00      	nop
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	4603      	mov	r3, r0
 80049e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7ff ff31 	bl	8004854 <__NVIC_EnableIRQ>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff ffa2 	bl	800494c <SysTick_Config>
 8004a08:	4603      	mov	r3, r0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a20:	f7fe ffe8 	bl	80039f4 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e099      	b.n	8004b64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a50:	e00f      	b.n	8004a72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a52:	f7fe ffcf 	bl	80039f4 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d908      	bls.n	8004a72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2220      	movs	r2, #32
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2203      	movs	r2, #3
 8004a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e078      	b.n	8004b64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e8      	bne.n	8004a52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4b38      	ldr	r3, [pc, #224]	; (8004b6c <HAL_DMA_Init+0x158>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d107      	bne.n	8004adc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d117      	bne.n	8004b36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00e      	beq.n	8004b36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb01 	bl	8005120 <DMA_CheckFifoParam>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2240      	movs	r2, #64	; 0x40
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b32:	2301      	movs	r3, #1
 8004b34:	e016      	b.n	8004b64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fab8 	bl	80050b4 <DMA_CalcBaseAndBitshift>
 8004b44:	4603      	mov	r3, r0
 8004b46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4c:	223f      	movs	r2, #63	; 0x3f
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3718      	adds	r7, #24
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	f010803f 	.word	0xf010803f

08004b70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
 8004b7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d101      	bne.n	8004b96 <HAL_DMA_Start_IT+0x26>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e040      	b.n	8004c18 <HAL_DMA_Start_IT+0xa8>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d12f      	bne.n	8004c0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	68b9      	ldr	r1, [r7, #8]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa4a 	bl	8005058 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	223f      	movs	r2, #63	; 0x3f
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0216 	orr.w	r2, r2, #22
 8004bde:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0208 	orr.w	r2, r2, #8
 8004bf6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e005      	b.n	8004c16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c12:	2302      	movs	r3, #2
 8004c14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c2e:	f7fe fee1 	bl	80039f4 <HAL_GetTick>
 8004c32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d008      	beq.n	8004c52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2280      	movs	r2, #128	; 0x80
 8004c44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e052      	b.n	8004cf8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0216 	bic.w	r2, r2, #22
 8004c60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_DMA_Abort+0x62>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0208 	bic.w	r2, r2, #8
 8004c90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0201 	bic.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca2:	e013      	b.n	8004ccc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ca4:	f7fe fea6 	bl	80039f4 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b05      	cmp	r3, #5
 8004cb0:	d90c      	bls.n	8004ccc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2203      	movs	r2, #3
 8004cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e015      	b.n	8004cf8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e4      	bne.n	8004ca4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cde:	223f      	movs	r2, #63	; 0x3f
 8004ce0:	409a      	lsls	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2280      	movs	r2, #128	; 0x80
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e00c      	b.n	8004d38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2205      	movs	r2, #5
 8004d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0201 	bic.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d50:	4b8e      	ldr	r3, [pc, #568]	; (8004f8c <HAL_DMA_IRQHandler+0x248>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a8e      	ldr	r2, [pc, #568]	; (8004f90 <HAL_DMA_IRQHandler+0x24c>)
 8004d56:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5a:	0a9b      	lsrs	r3, r3, #10
 8004d5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	2208      	movs	r2, #8
 8004d70:	409a      	lsls	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	4013      	ands	r3, r2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d01a      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0204 	bic.w	r2, r2, #4
 8004d96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d9c:	2208      	movs	r2, #8
 8004d9e:	409a      	lsls	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db4:	2201      	movs	r2, #1
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d012      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	f043 0202 	orr.w	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dea:	2204      	movs	r2, #4
 8004dec:	409a      	lsls	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d012      	beq.n	8004e1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e08:	2204      	movs	r2, #4
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	f043 0204 	orr.w	r2, r3, #4
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	2210      	movs	r2, #16
 8004e22:	409a      	lsls	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d043      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d03c      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e3e:	2210      	movs	r2, #16
 8004e40:	409a      	lsls	r2, r3
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d108      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d024      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	4798      	blx	r3
 8004e72:	e01f      	b.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
 8004e84:	e016      	b.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d107      	bne.n	8004ea4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0208 	bic.w	r2, r2, #8
 8004ea2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb8:	2220      	movs	r2, #32
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f000 808f 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0310 	and.w	r3, r3, #16
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 8087 	beq.w	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eda:	2220      	movs	r2, #32
 8004edc:	409a      	lsls	r2, r3
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b05      	cmp	r3, #5
 8004eec:	d136      	bne.n	8004f5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0216 	bic.w	r2, r2, #22
 8004efc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x1da>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0208 	bic.w	r2, r2, #8
 8004f2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f32:	223f      	movs	r2, #63	; 0x3f
 8004f34:	409a      	lsls	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d07e      	beq.n	8005050 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
        }
        return;
 8004f5a:	e079      	b.n	8005050 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d01d      	beq.n	8004fa6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10d      	bne.n	8004f94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d031      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4798      	blx	r3
 8004f88:	e02c      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
 8004f8a:	bf00      	nop
 8004f8c:	20000000 	.word	0x20000000
 8004f90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d023      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	4798      	blx	r3
 8004fa4:	e01e      	b.n	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0210 	bic.w	r2, r2, #16
 8004fc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d032      	beq.n	8005052 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d022      	beq.n	800503e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2205      	movs	r2, #5
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	3301      	adds	r3, #1
 8005014:	60bb      	str	r3, [r7, #8]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	429a      	cmp	r2, r3
 800501a:	d307      	bcc.n	800502c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f2      	bne.n	8005010 <HAL_DMA_IRQHandler+0x2cc>
 800502a:	e000      	b.n	800502e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800502c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d005      	beq.n	8005052 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
 800504e:	e000      	b.n	8005052 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005050:	bf00      	nop
    }
  }
}
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005074:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d108      	bne.n	8005098 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005096:	e007      	b.n	80050a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	60da      	str	r2, [r3, #12]
}
 80050a8:	bf00      	nop
 80050aa:	3714      	adds	r7, #20
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3b10      	subs	r3, #16
 80050c4:	4a14      	ldr	r2, [pc, #80]	; (8005118 <DMA_CalcBaseAndBitshift+0x64>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050ce:	4a13      	ldr	r2, [pc, #76]	; (800511c <DMA_CalcBaseAndBitshift+0x68>)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	461a      	mov	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d909      	bls.n	80050f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ea:	f023 0303 	bic.w	r3, r3, #3
 80050ee:	1d1a      	adds	r2, r3, #4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	659a      	str	r2, [r3, #88]	; 0x58
 80050f4:	e007      	b.n	8005106 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050fe:	f023 0303 	bic.w	r3, r3, #3
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	aaaaaaab 	.word	0xaaaaaaab
 800511c:	0800c4f4 	.word	0x0800c4f4

08005120 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005130:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d11f      	bne.n	800517a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b03      	cmp	r3, #3
 800513e:	d856      	bhi.n	80051ee <DMA_CheckFifoParam+0xce>
 8005140:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <DMA_CheckFifoParam+0x28>)
 8005142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005146:	bf00      	nop
 8005148:	08005159 	.word	0x08005159
 800514c:	0800516b 	.word	0x0800516b
 8005150:	08005159 	.word	0x08005159
 8005154:	080051ef 	.word	0x080051ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d046      	beq.n	80051f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005168:	e043      	b.n	80051f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005172:	d140      	bne.n	80051f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e03d      	b.n	80051f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005182:	d121      	bne.n	80051c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b03      	cmp	r3, #3
 8005188:	d837      	bhi.n	80051fa <DMA_CheckFifoParam+0xda>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <DMA_CheckFifoParam+0x70>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a1 	.word	0x080051a1
 8005194:	080051a7 	.word	0x080051a7
 8005198:	080051a1 	.word	0x080051a1
 800519c:	080051b9 	.word	0x080051b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      break;
 80051a4:	e030      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d025      	beq.n	80051fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051b6:	e022      	b.n	80051fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051c0:	d11f      	bne.n	8005202 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051c6:	e01c      	b.n	8005202 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d903      	bls.n	80051d6 <DMA_CheckFifoParam+0xb6>
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b03      	cmp	r3, #3
 80051d2:	d003      	beq.n	80051dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051d4:	e018      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      break;
 80051da:	e015      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00e      	beq.n	8005206 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	73fb      	strb	r3, [r7, #15]
      break;
 80051ec:	e00b      	b.n	8005206 <DMA_CheckFifoParam+0xe6>
      break;
 80051ee:	bf00      	nop
 80051f0:	e00a      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;
 80051f2:	bf00      	nop
 80051f4:	e008      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;
 80051f6:	bf00      	nop
 80051f8:	e006      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;
 80051fa:	bf00      	nop
 80051fc:	e004      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;
 80051fe:	bf00      	nop
 8005200:	e002      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;   
 8005202:	bf00      	nop
 8005204:	e000      	b.n	8005208 <DMA_CheckFifoParam+0xe8>
      break;
 8005206:	bf00      	nop
    }
  } 
  
  return status; 
 8005208:	7bfb      	ldrb	r3, [r7, #15]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop

08005218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005218:	b480      	push	{r7}
 800521a:	b089      	sub	sp, #36	; 0x24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005226:	2300      	movs	r3, #0
 8005228:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800522a:	2300      	movs	r3, #0
 800522c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800522e:	2300      	movs	r3, #0
 8005230:	61fb      	str	r3, [r7, #28]
 8005232:	e16b      	b.n	800550c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005234:	2201      	movs	r2, #1
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4013      	ands	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	f040 815a 	bne.w	8005506 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d005      	beq.n	800526a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005266:	2b02      	cmp	r3, #2
 8005268:	d130      	bne.n	80052cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	005b      	lsls	r3, r3, #1
 8005274:	2203      	movs	r2, #3
 8005276:	fa02 f303 	lsl.w	r3, r2, r3
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	fa02 f303 	lsl.w	r3, r2, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4313      	orrs	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052a0:	2201      	movs	r2, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	43db      	mvns	r3, r3
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	4013      	ands	r3, r2
 80052ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	f003 0201 	and.w	r2, r3, #1
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	fa02 f303 	lsl.w	r3, r2, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d017      	beq.n	8005308 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	2203      	movs	r2, #3
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43db      	mvns	r3, r3
 80052ea:	69ba      	ldr	r2, [r7, #24]
 80052ec:	4013      	ands	r3, r2
 80052ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	fa02 f303 	lsl.w	r3, r2, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f003 0303 	and.w	r3, r3, #3
 8005310:	2b02      	cmp	r3, #2
 8005312:	d123      	bne.n	800535c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	08da      	lsrs	r2, r3, #3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3208      	adds	r2, #8
 800531c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005320:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	220f      	movs	r2, #15
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43db      	mvns	r3, r3
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	4013      	ands	r3, r2
 8005336:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	691a      	ldr	r2, [r3, #16]
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	08da      	lsrs	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	3208      	adds	r2, #8
 8005356:	69b9      	ldr	r1, [r7, #24]
 8005358:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	2203      	movs	r2, #3
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	43db      	mvns	r3, r3
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4013      	ands	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f003 0203 	and.w	r2, r3, #3
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80b4 	beq.w	8005506 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	60fb      	str	r3, [r7, #12]
 80053a2:	4b60      	ldr	r3, [pc, #384]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	4a5f      	ldr	r2, [pc, #380]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053ac:	6453      	str	r3, [r2, #68]	; 0x44
 80053ae:	4b5d      	ldr	r3, [pc, #372]	; (8005524 <HAL_GPIO_Init+0x30c>)
 80053b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ba:	4a5b      	ldr	r2, [pc, #364]	; (8005528 <HAL_GPIO_Init+0x310>)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	089b      	lsrs	r3, r3, #2
 80053c0:	3302      	adds	r3, #2
 80053c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	220f      	movs	r2, #15
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	4013      	ands	r3, r2
 80053dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a52      	ldr	r2, [pc, #328]	; (800552c <HAL_GPIO_Init+0x314>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d02b      	beq.n	800543e <HAL_GPIO_Init+0x226>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a51      	ldr	r2, [pc, #324]	; (8005530 <HAL_GPIO_Init+0x318>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d025      	beq.n	800543a <HAL_GPIO_Init+0x222>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a50      	ldr	r2, [pc, #320]	; (8005534 <HAL_GPIO_Init+0x31c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01f      	beq.n	8005436 <HAL_GPIO_Init+0x21e>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	; (8005538 <HAL_GPIO_Init+0x320>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d019      	beq.n	8005432 <HAL_GPIO_Init+0x21a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a4e      	ldr	r2, [pc, #312]	; (800553c <HAL_GPIO_Init+0x324>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_GPIO_Init+0x216>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a4d      	ldr	r2, [pc, #308]	; (8005540 <HAL_GPIO_Init+0x328>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00d      	beq.n	800542a <HAL_GPIO_Init+0x212>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a4c      	ldr	r2, [pc, #304]	; (8005544 <HAL_GPIO_Init+0x32c>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d007      	beq.n	8005426 <HAL_GPIO_Init+0x20e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4b      	ldr	r2, [pc, #300]	; (8005548 <HAL_GPIO_Init+0x330>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_GPIO_Init+0x20a>
 800541e:	2307      	movs	r3, #7
 8005420:	e00e      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005422:	2308      	movs	r3, #8
 8005424:	e00c      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005426:	2306      	movs	r3, #6
 8005428:	e00a      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800542a:	2305      	movs	r3, #5
 800542c:	e008      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800542e:	2304      	movs	r3, #4
 8005430:	e006      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005432:	2303      	movs	r3, #3
 8005434:	e004      	b.n	8005440 <HAL_GPIO_Init+0x228>
 8005436:	2302      	movs	r3, #2
 8005438:	e002      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800543a:	2301      	movs	r3, #1
 800543c:	e000      	b.n	8005440 <HAL_GPIO_Init+0x228>
 800543e:	2300      	movs	r3, #0
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	f002 0203 	and.w	r2, r2, #3
 8005446:	0092      	lsls	r2, r2, #2
 8005448:	4093      	lsls	r3, r2
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005450:	4935      	ldr	r1, [pc, #212]	; (8005528 <HAL_GPIO_Init+0x310>)
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	3302      	adds	r3, #2
 8005458:	69ba      	ldr	r2, [r7, #24]
 800545a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545e:	4b3b      	ldr	r3, [pc, #236]	; (800554c <HAL_GPIO_Init+0x334>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	43db      	mvns	r3, r3
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	4013      	ands	r3, r2
 800546c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800547a:	69ba      	ldr	r2, [r7, #24]
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4313      	orrs	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005482:	4a32      	ldr	r2, [pc, #200]	; (800554c <HAL_GPIO_Init+0x334>)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005488:	4b30      	ldr	r3, [pc, #192]	; (800554c <HAL_GPIO_Init+0x334>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	43db      	mvns	r3, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054ac:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_GPIO_Init+0x334>)
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <HAL_GPIO_Init+0x334>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <HAL_GPIO_Init+0x334>)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054dc:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_GPIO_Init+0x334>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d003      	beq.n	8005500 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054f8:	69ba      	ldr	r2, [r7, #24]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005500:	4a12      	ldr	r2, [pc, #72]	; (800554c <HAL_GPIO_Init+0x334>)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	3301      	adds	r3, #1
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	2b0f      	cmp	r3, #15
 8005510:	f67f ae90 	bls.w	8005234 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop
 8005518:	3724      	adds	r7, #36	; 0x24
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800
 8005528:	40013800 	.word	0x40013800
 800552c:	40020000 	.word	0x40020000
 8005530:	40020400 	.word	0x40020400
 8005534:	40020800 	.word	0x40020800
 8005538:	40020c00 	.word	0x40020c00
 800553c:	40021000 	.word	0x40021000
 8005540:	40021400 	.word	0x40021400
 8005544:	40021800 	.word	0x40021800
 8005548:	40021c00 	.word	0x40021c00
 800554c:	40013c00 	.word	0x40013c00

08005550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
 800555c:	4613      	mov	r3, r2
 800555e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005560:	787b      	ldrb	r3, [r7, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005566:	887a      	ldrh	r2, [r7, #2]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800556c:	e003      	b.n	8005576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	041a      	lsls	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005594:	887a      	ldrh	r2, [r7, #2]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	041a      	lsls	r2, r3, #16
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	43d9      	mvns	r1, r3
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	400b      	ands	r3, r1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	619a      	str	r2, [r3, #24]
}
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e267      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d075      	beq.n	80056c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055d6:	4b88      	ldr	r3, [pc, #544]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 030c 	and.w	r3, r3, #12
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d00c      	beq.n	80055fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055e2:	4b85      	ldr	r3, [pc, #532]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d112      	bne.n	8005614 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ee:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fa:	d10b      	bne.n	8005614 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fc:	4b7e      	ldr	r3, [pc, #504]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05b      	beq.n	80056c0 <HAL_RCC_OscConfig+0x108>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d157      	bne.n	80056c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e242      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800561c:	d106      	bne.n	800562c <HAL_RCC_OscConfig+0x74>
 800561e:	4b76      	ldr	r3, [pc, #472]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a75      	ldr	r2, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e01d      	b.n	8005668 <HAL_RCC_OscConfig+0xb0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0x98>
 8005636:	4b70      	ldr	r3, [pc, #448]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a6f      	ldr	r2, [pc, #444]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800563c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b6d      	ldr	r3, [pc, #436]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a6c      	ldr	r2, [pc, #432]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0xb0>
 8005650:	4b69      	ldr	r3, [pc, #420]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a68      	ldr	r2, [pc, #416]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b66      	ldr	r3, [pc, #408]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a65      	ldr	r2, [pc, #404]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005670:	f7fe f9c0 	bl	80039f4 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005678:	f7fe f9bc 	bl	80039f4 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e207      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b5b      	ldr	r3, [pc, #364]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0xc0>
 8005696:	e014      	b.n	80056c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fe f9ac 	bl	80039f4 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fe f9a8 	bl	80039f4 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e1f3      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b2:	4b51      	ldr	r3, [pc, #324]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0xe8>
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d063      	beq.n	8005796 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056ce:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056da:	4b47      	ldr	r3, [pc, #284]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d11c      	bne.n	8005720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e6:	4b44      	ldr	r3, [pc, #272]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f2:	4b41      	ldr	r3, [pc, #260]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_RCC_OscConfig+0x152>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e1c7      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	4b3b      	ldr	r3, [pc, #236]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4937      	ldr	r1, [pc, #220]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571e:	e03a      	b.n	8005796 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005728:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCC_OscConfig+0x244>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fe f961 	bl	80039f4 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005736:	f7fe f95d 	bl	80039f4 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1a8      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005748:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005754:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4925      	ldr	r1, [pc, #148]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	e015      	b.n	8005796 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCC_OscConfig+0x244>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fe f940 	bl	80039f4 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005778:	f7fe f93c 	bl	80039f4 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e187      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578a:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d036      	beq.n	8005810 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d016      	beq.n	80057d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057aa:	4b15      	ldr	r3, [pc, #84]	; (8005800 <HAL_RCC_OscConfig+0x248>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fe f920 	bl	80039f4 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fe f91c 	bl	80039f4 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e167      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ca:	4b0b      	ldr	r3, [pc, #44]	; (80057f8 <HAL_RCC_OscConfig+0x240>)
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x200>
 80057d6:	e01b      	b.n	8005810 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d8:	4b09      	ldr	r3, [pc, #36]	; (8005800 <HAL_RCC_OscConfig+0x248>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057de:	f7fe f909 	bl	80039f4 <HAL_GetTick>
 80057e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e4:	e00e      	b.n	8005804 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e6:	f7fe f905 	bl	80039f4 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d907      	bls.n	8005804 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e150      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
 80057f8:	40023800 	.word	0x40023800
 80057fc:	42470000 	.word	0x42470000
 8005800:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005804:	4b88      	ldr	r3, [pc, #544]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005808:	f003 0302 	and.w	r3, r3, #2
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1ea      	bne.n	80057e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8097 	beq.w	800594c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005822:	4b81      	ldr	r3, [pc, #516]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10f      	bne.n	800584e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	4b7d      	ldr	r3, [pc, #500]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	4a7c      	ldr	r2, [pc, #496]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800583c:	6413      	str	r3, [r2, #64]	; 0x40
 800583e:	4b7a      	ldr	r3, [pc, #488]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584a:	2301      	movs	r3, #1
 800584c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584e:	4b77      	ldr	r3, [pc, #476]	; (8005a2c <HAL_RCC_OscConfig+0x474>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005856:	2b00      	cmp	r3, #0
 8005858:	d118      	bne.n	800588c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800585a:	4b74      	ldr	r3, [pc, #464]	; (8005a2c <HAL_RCC_OscConfig+0x474>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a73      	ldr	r2, [pc, #460]	; (8005a2c <HAL_RCC_OscConfig+0x474>)
 8005860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005866:	f7fe f8c5 	bl	80039f4 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586e:	f7fe f8c1 	bl	80039f4 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e10c      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005880:	4b6a      	ldr	r3, [pc, #424]	; (8005a2c <HAL_RCC_OscConfig+0x474>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d106      	bne.n	80058a2 <HAL_RCC_OscConfig+0x2ea>
 8005894:	4b64      	ldr	r3, [pc, #400]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4a63      	ldr	r2, [pc, #396]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 800589a:	f043 0301 	orr.w	r3, r3, #1
 800589e:	6713      	str	r3, [r2, #112]	; 0x70
 80058a0:	e01c      	b.n	80058dc <HAL_RCC_OscConfig+0x324>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	2b05      	cmp	r3, #5
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCC_OscConfig+0x30c>
 80058aa:	4b5f      	ldr	r3, [pc, #380]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ae:	4a5e      	ldr	r2, [pc, #376]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058b0:	f043 0304 	orr.w	r3, r3, #4
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
 80058b6:	4b5c      	ldr	r3, [pc, #368]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a5b      	ldr	r2, [pc, #364]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058bc:	f043 0301 	orr.w	r3, r3, #1
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	e00b      	b.n	80058dc <HAL_RCC_OscConfig+0x324>
 80058c4:	4b58      	ldr	r3, [pc, #352]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4a57      	ldr	r2, [pc, #348]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70
 80058d0:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a54      	ldr	r2, [pc, #336]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80058d6:	f023 0304 	bic.w	r3, r3, #4
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e4:	f7fe f886 	bl	80039f4 <HAL_GetTick>
 80058e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058ec:	f7fe f882 	bl	80039f4 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e0cb      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005902:	4b49      	ldr	r3, [pc, #292]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0ee      	beq.n	80058ec <HAL_RCC_OscConfig+0x334>
 800590e:	e014      	b.n	800593a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005910:	f7fe f870 	bl	80039f4 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005916:	e00a      	b.n	800592e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7fe f86c 	bl	80039f4 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	; 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e0b5      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592e:	4b3e      	ldr	r3, [pc, #248]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ee      	bne.n	8005918 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800593a:	7dfb      	ldrb	r3, [r7, #23]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d105      	bne.n	800594c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005940:	4b39      	ldr	r3, [pc, #228]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005944:	4a38      	ldr	r2, [pc, #224]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800594a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 80a1 	beq.w	8005a98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005956:	4b34      	ldr	r3, [pc, #208]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	f003 030c 	and.w	r3, r3, #12
 800595e:	2b08      	cmp	r3, #8
 8005960:	d05c      	beq.n	8005a1c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d141      	bne.n	80059ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <HAL_RCC_OscConfig+0x478>)
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005970:	f7fe f840 	bl	80039f4 <HAL_GetTick>
 8005974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005976:	e008      	b.n	800598a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005978:	f7fe f83c 	bl	80039f4 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e087      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598a:	4b27      	ldr	r3, [pc, #156]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1f0      	bne.n	8005978 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	431a      	orrs	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ac:	085b      	lsrs	r3, r3, #1
 80059ae:	3b01      	subs	r3, #1
 80059b0:	041b      	lsls	r3, r3, #16
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b8:	061b      	lsls	r3, r3, #24
 80059ba:	491b      	ldr	r1, [pc, #108]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059c0:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <HAL_RCC_OscConfig+0x478>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c6:	f7fe f815 	bl	80039f4 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ce:	f7fe f811 	bl	80039f4 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e05c      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059e0:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0f0      	beq.n	80059ce <HAL_RCC_OscConfig+0x416>
 80059ec:	e054      	b.n	8005a98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <HAL_RCC_OscConfig+0x478>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f4:	f7fd fffe 	bl	80039f4 <HAL_GetTick>
 80059f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059fa:	e008      	b.n	8005a0e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059fc:	f7fd fffa 	bl	80039f4 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e045      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <HAL_RCC_OscConfig+0x470>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1f0      	bne.n	80059fc <HAL_RCC_OscConfig+0x444>
 8005a1a:	e03d      	b.n	8005a98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d107      	bne.n	8005a34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e038      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
 8005a28:	40023800 	.word	0x40023800
 8005a2c:	40007000 	.word	0x40007000
 8005a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a34:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCC_OscConfig+0x4ec>)
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d028      	beq.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d121      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d11a      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005a64:	4013      	ands	r3, r2
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d111      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7a:	085b      	lsrs	r3, r3, #1
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d107      	bne.n	8005a94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d001      	beq.n	8005a98 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3718      	adds	r7, #24
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40023800 	.word	0x40023800

08005aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e0cc      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005abc:	4b68      	ldr	r3, [pc, #416]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d90c      	bls.n	8005ae4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b65      	ldr	r3, [pc, #404]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b63      	ldr	r3, [pc, #396]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0b8      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d020      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0304 	and.w	r3, r3, #4
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005afc:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a58      	ldr	r2, [pc, #352]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 0308 	and.w	r3, r3, #8
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d005      	beq.n	8005b20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b14:	4b53      	ldr	r3, [pc, #332]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	4a52      	ldr	r2, [pc, #328]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b20:	4b50      	ldr	r3, [pc, #320]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	494d      	ldr	r1, [pc, #308]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d044      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d119      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e07f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d003      	beq.n	8005b66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d107      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b66:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d109      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e06f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b76:	4b3b      	ldr	r3, [pc, #236]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0302 	and.w	r3, r3, #2
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d101      	bne.n	8005b86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e067      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f023 0203 	bic.w	r2, r3, #3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4934      	ldr	r1, [pc, #208]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b98:	f7fd ff2c 	bl	80039f4 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fd ff28 	bl	80039f4 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e04f      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb6:	4b2b      	ldr	r3, [pc, #172]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 020c 	and.w	r2, r3, #12
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d1eb      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d20c      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd6:	4b22      	ldr	r3, [pc, #136]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	683a      	ldr	r2, [r7, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bde:	4b20      	ldr	r3, [pc, #128]	; (8005c60 <HAL_RCC_ClockConfig+0x1b8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d001      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e032      	b.n	8005c56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bfc:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	4916      	ldr	r1, [pc, #88]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0308 	and.w	r3, r3, #8
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c1a:	4b12      	ldr	r3, [pc, #72]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	490e      	ldr	r1, [pc, #56]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c2e:	f000 f821 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005c32:	4602      	mov	r2, r0
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	091b      	lsrs	r3, r3, #4
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	490a      	ldr	r1, [pc, #40]	; (8005c68 <HAL_RCC_ClockConfig+0x1c0>)
 8005c40:	5ccb      	ldrb	r3, [r1, r3]
 8005c42:	fa22 f303 	lsr.w	r3, r2, r3
 8005c46:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c4a:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <HAL_RCC_ClockConfig+0x1c8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fd fe8c 	bl	800396c <HAL_InitTick>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023c00 	.word	0x40023c00
 8005c64:	40023800 	.word	0x40023800
 8005c68:	0800c4dc 	.word	0x0800c4dc
 8005c6c:	20000000 	.word	0x20000000
 8005c70:	20000004 	.word	0x20000004

08005c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c78:	b090      	sub	sp, #64	; 0x40
 8005c7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005c80:	2300      	movs	r3, #0
 8005c82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c84:	2300      	movs	r3, #0
 8005c86:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c8c:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f003 030c 	and.w	r3, r3, #12
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d00d      	beq.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x40>
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	f200 80a1 	bhi.w	8005de0 <HAL_RCC_GetSysClockFreq+0x16c>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	d003      	beq.n	8005cae <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca6:	e09b      	b.n	8005de0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca8:	4b53      	ldr	r3, [pc, #332]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005caa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005cac:	e09b      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005cae:	4b53      	ldr	r3, [pc, #332]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cb2:	e098      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb4:	4b4f      	ldr	r3, [pc, #316]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cbc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cbe:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d028      	beq.n	8005d1c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cca:	4b4a      	ldr	r3, [pc, #296]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	099b      	lsrs	r3, r3, #6
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	623b      	str	r3, [r7, #32]
 8005cd4:	627a      	str	r2, [r7, #36]	; 0x24
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005cdc:	2100      	movs	r1, #0
 8005cde:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005ce0:	fb03 f201 	mul.w	r2, r3, r1
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	fb00 f303 	mul.w	r3, r0, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	4a43      	ldr	r2, [pc, #268]	; (8005dfc <HAL_RCC_GetSysClockFreq+0x188>)
 8005cee:	fba0 1202 	umull	r1, r2, r0, r2
 8005cf2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cf4:	460a      	mov	r2, r1
 8005cf6:	62ba      	str	r2, [r7, #40]	; 0x28
 8005cf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	2200      	movs	r2, #0
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	61fa      	str	r2, [r7, #28]
 8005d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d0e:	f7fa ffbb 	bl	8000c88 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4613      	mov	r3, r2
 8005d18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d1a:	e053      	b.n	8005dc4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d1c:	4b35      	ldr	r3, [pc, #212]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	2200      	movs	r2, #0
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	617a      	str	r2, [r7, #20]
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005d2e:	f04f 0b00 	mov.w	fp, #0
 8005d32:	4652      	mov	r2, sl
 8005d34:	465b      	mov	r3, fp
 8005d36:	f04f 0000 	mov.w	r0, #0
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	0159      	lsls	r1, r3, #5
 8005d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d44:	0150      	lsls	r0, r2, #5
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	ebb2 080a 	subs.w	r8, r2, sl
 8005d4e:	eb63 090b 	sbc.w	r9, r3, fp
 8005d52:	f04f 0200 	mov.w	r2, #0
 8005d56:	f04f 0300 	mov.w	r3, #0
 8005d5a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005d5e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005d62:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005d66:	ebb2 0408 	subs.w	r4, r2, r8
 8005d6a:	eb63 0509 	sbc.w	r5, r3, r9
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	f04f 0300 	mov.w	r3, #0
 8005d76:	00eb      	lsls	r3, r5, #3
 8005d78:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d7c:	00e2      	lsls	r2, r4, #3
 8005d7e:	4614      	mov	r4, r2
 8005d80:	461d      	mov	r5, r3
 8005d82:	eb14 030a 	adds.w	r3, r4, sl
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	eb45 030b 	adc.w	r3, r5, fp
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	028b      	lsls	r3, r1, #10
 8005d9e:	4621      	mov	r1, r4
 8005da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005da4:	4621      	mov	r1, r4
 8005da6:	028a      	lsls	r2, r1, #10
 8005da8:	4610      	mov	r0, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	2200      	movs	r2, #0
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	60fa      	str	r2, [r7, #12]
 8005db4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005db8:	f7fa ff66 	bl	8000c88 <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005dc4:	4b0b      	ldr	r3, [pc, #44]	; (8005df4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	0c1b      	lsrs	r3, r3, #16
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	3301      	adds	r3, #1
 8005dd0:	005b      	lsls	r3, r3, #1
 8005dd2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005dd4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005dde:	e002      	b.n	8005de6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005de0:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005de2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3740      	adds	r7, #64	; 0x40
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	00f42400 	.word	0x00f42400
 8005dfc:	017d7840 	.word	0x017d7840

08005e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e00:	b480      	push	{r7}
 8005e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e06:	681b      	ldr	r3, [r3, #0]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20000000 	.word	0x20000000

08005e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e1c:	f7ff fff0 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e20:	4602      	mov	r2, r0
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	0a9b      	lsrs	r3, r3, #10
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	4903      	ldr	r1, [pc, #12]	; (8005e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e2e:	5ccb      	ldrb	r3, [r1, r3]
 8005e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	40023800 	.word	0x40023800
 8005e3c:	0800c4ec 	.word	0x0800c4ec

08005e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e44:	f7ff ffdc 	bl	8005e00 <HAL_RCC_GetHCLKFreq>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	0b5b      	lsrs	r3, r3, #13
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	4903      	ldr	r1, [pc, #12]	; (8005e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e56:	5ccb      	ldrb	r3, [r1, r3]
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	40023800 	.word	0x40023800
 8005e64:	0800c4ec 	.word	0x0800c4ec

08005e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e041      	b.n	8005efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fd f974 	bl	800317c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2202      	movs	r2, #2
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	f000 fcc4 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d001      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e04e      	b.n	8005fbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a23      	ldr	r2, [pc, #140]	; (8005fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d022      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d01d      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1f      	ldr	r2, [pc, #124]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d018      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1c      	ldr	r2, [pc, #112]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d00e      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a1b      	ldr	r2, [pc, #108]	; (8005fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d009      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a19      	ldr	r2, [pc, #100]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIM_Base_Start_IT+0x80>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a18      	ldr	r2, [pc, #96]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d111      	bne.n	8005fac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b06      	cmp	r3, #6
 8005f98:	d010      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005faa:	e007      	b.n	8005fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0201 	orr.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3714      	adds	r7, #20
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40010000 	.word	0x40010000
 8005fd0:	40000400 	.word	0x40000400
 8005fd4:	40000800 	.word	0x40000800
 8005fd8:	40000c00 	.word	0x40000c00
 8005fdc:	40010400 	.word	0x40010400
 8005fe0:	40014000 	.word	0x40014000
 8005fe4:	40001800 	.word	0x40001800

08005fe8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e041      	b.n	800607e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d106      	bne.n	8006014 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fd f86e 	bl	80030f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2202      	movs	r2, #2
 8006018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	4619      	mov	r1, r3
 8006026:	4610      	mov	r0, r2
 8006028:	f000 fc04 	bl	8006834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
	...

08006088 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d109      	bne.n	80060ac <HAL_TIM_PWM_Start+0x24>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	bf14      	ite	ne
 80060a4:	2301      	movne	r3, #1
 80060a6:	2300      	moveq	r3, #0
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	e022      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d109      	bne.n	80060c6 <HAL_TIM_PWM_Start+0x3e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	bf14      	ite	ne
 80060be:	2301      	movne	r3, #1
 80060c0:	2300      	moveq	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	e015      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d109      	bne.n	80060e0 <HAL_TIM_PWM_Start+0x58>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	bf14      	ite	ne
 80060d8:	2301      	movne	r3, #1
 80060da:	2300      	moveq	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	e008      	b.n	80060f2 <HAL_TIM_PWM_Start+0x6a>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e07c      	b.n	80061f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_TIM_PWM_Start+0x82>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006108:	e013      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b04      	cmp	r3, #4
 800610e:	d104      	bne.n	800611a <HAL_TIM_PWM_Start+0x92>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2202      	movs	r2, #2
 8006114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006118:	e00b      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2b08      	cmp	r3, #8
 800611e:	d104      	bne.n	800612a <HAL_TIM_PWM_Start+0xa2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006128:	e003      	b.n	8006132 <HAL_TIM_PWM_Start+0xaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2202      	movs	r2, #2
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2201      	movs	r2, #1
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 fdd6 	bl	8006cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a2d      	ldr	r2, [pc, #180]	; (80061fc <HAL_TIM_PWM_Start+0x174>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d004      	beq.n	8006154 <HAL_TIM_PWM_Start+0xcc>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a2c      	ldr	r2, [pc, #176]	; (8006200 <HAL_TIM_PWM_Start+0x178>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d101      	bne.n	8006158 <HAL_TIM_PWM_Start+0xd0>
 8006154:	2301      	movs	r3, #1
 8006156:	e000      	b.n	800615a <HAL_TIM_PWM_Start+0xd2>
 8006158:	2300      	movs	r3, #0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d007      	beq.n	800616e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800616c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a22      	ldr	r2, [pc, #136]	; (80061fc <HAL_TIM_PWM_Start+0x174>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d01d      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a1f      	ldr	r2, [pc, #124]	; (8006204 <HAL_TIM_PWM_Start+0x17c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1d      	ldr	r2, [pc, #116]	; (8006208 <HAL_TIM_PWM_Start+0x180>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1c      	ldr	r2, [pc, #112]	; (800620c <HAL_TIM_PWM_Start+0x184>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a16      	ldr	r2, [pc, #88]	; (8006200 <HAL_TIM_PWM_Start+0x178>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a18      	ldr	r2, [pc, #96]	; (8006210 <HAL_TIM_PWM_Start+0x188>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_PWM_Start+0x136>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a16      	ldr	r2, [pc, #88]	; (8006214 <HAL_TIM_PWM_Start+0x18c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d111      	bne.n	80061e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2b06      	cmp	r3, #6
 80061ce:	d010      	beq.n	80061f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f042 0201 	orr.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e0:	e007      	b.n	80061f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40010000 	.word	0x40010000
 8006200:	40010400 	.word	0x40010400
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40014000 	.word	0x40014000
 8006214:	40001800 	.word	0x40001800

08006218 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e097      	b.n	800635c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fc fec7 	bl	8002fd4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	6812      	ldr	r2, [r2, #0]
 8006258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800625c:	f023 0307 	bic.w	r3, r3, #7
 8006260:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f000 fae1 	bl	8006834 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	4313      	orrs	r3, r2
 8006292:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	021b      	lsls	r3, r3, #8
 80062aa:	4313      	orrs	r3, r2
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062b8:	f023 030c 	bic.w	r3, r3, #12
 80062bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	021b      	lsls	r3, r3, #8
 80062d4:	4313      	orrs	r3, r2
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	011a      	lsls	r2, r3, #4
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	031b      	lsls	r3, r3, #12
 80062e8:	4313      	orrs	r3, r2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80062f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80062fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	011b      	lsls	r3, r3, #4
 800630a:	4313      	orrs	r3, r2
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	4313      	orrs	r3, r2
 8006310:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	697a      	ldr	r2, [r7, #20]
 8006318:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006374:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800637c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006384:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800638c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d110      	bne.n	80063b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d102      	bne.n	80063a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800639a:	7b7b      	ldrb	r3, [r7, #13]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d001      	beq.n	80063a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e069      	b.n	8006478 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063b4:	e031      	b.n	800641a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b04      	cmp	r3, #4
 80063ba:	d110      	bne.n	80063de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063bc:	7bbb      	ldrb	r3, [r7, #14]
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d102      	bne.n	80063c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063c2:	7b3b      	ldrb	r3, [r7, #12]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d001      	beq.n	80063cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e055      	b.n	8006478 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2202      	movs	r2, #2
 80063d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063dc:	e01d      	b.n	800641a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d108      	bne.n	80063f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d105      	bne.n	80063f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ea:	7b7b      	ldrb	r3, [r7, #13]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d102      	bne.n	80063f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063f0:	7b3b      	ldrb	r3, [r7, #12]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d001      	beq.n	80063fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e03e      	b.n	8006478 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2202      	movs	r2, #2
 80063fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2202      	movs	r2, #2
 8006416:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <HAL_TIM_Encoder_Start+0xc4>
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	2b04      	cmp	r3, #4
 8006424:	d008      	beq.n	8006438 <HAL_TIM_Encoder_Start+0xd4>
 8006426:	e00f      	b.n	8006448 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2201      	movs	r2, #1
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fc5b 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8006436:	e016      	b.n	8006466 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2201      	movs	r2, #1
 800643e:	2104      	movs	r1, #4
 8006440:	4618      	mov	r0, r3
 8006442:	f000 fc53 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8006446:	e00e      	b.n	8006466 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2201      	movs	r2, #1
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f000 fc4b 	bl	8006cec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	2104      	movs	r1, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f000 fc44 	bl	8006cec <TIM_CCxChannelCmd>
      break;
 8006464:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0201 	orr.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3710      	adds	r7, #16
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d020      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d01b      	beq.n	80064e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0202 	mvn.w	r2, #2
 80064b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f994 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f986 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f997 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	f003 0304 	and.w	r3, r3, #4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d020      	beq.n	8006530 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d01b      	beq.n	8006530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0204 	mvn.w	r2, #4
 8006500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f96e 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 800651c:	e005      	b.n	800652a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f960 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f971 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d020      	beq.n	800657c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01b      	beq.n	800657c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f06f 0208 	mvn.w	r2, #8
 800654c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2204      	movs	r2, #4
 8006552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f948 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 8006568:	e005      	b.n	8006576 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f93a 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f94b 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b00      	cmp	r3, #0
 8006584:	d020      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	d01b      	beq.n	80065c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0210 	mvn.w	r2, #16
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2208      	movs	r2, #8
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f922 	bl	80067f8 <HAL_TIM_IC_CaptureCallback>
 80065b4:	e005      	b.n	80065c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f914 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 f925 	bl	800680c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00c      	beq.n	80065ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d007      	beq.n	80065ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0201 	mvn.w	r2, #1
 80065e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7fa fd02 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00c      	beq.n	8006610 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 fc1a 	bl	8006e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f8f6 	bl	8006820 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d007      	beq.n	8006658 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0220 	mvn.w	r2, #32
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fbec 	bl	8006e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006676:	2b01      	cmp	r3, #1
 8006678:	d101      	bne.n	800667e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667a:	2302      	movs	r3, #2
 800667c:	e0ae      	b.n	80067dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	f200 809f 	bhi.w	80067cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800668e:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080067cd 	.word	0x080067cd
 800669c:	080067cd 	.word	0x080067cd
 80066a0:	080067cd 	.word	0x080067cd
 80066a4:	08006709 	.word	0x08006709
 80066a8:	080067cd 	.word	0x080067cd
 80066ac:	080067cd 	.word	0x080067cd
 80066b0:	080067cd 	.word	0x080067cd
 80066b4:	0800674b 	.word	0x0800674b
 80066b8:	080067cd 	.word	0x080067cd
 80066bc:	080067cd 	.word	0x080067cd
 80066c0:	080067cd 	.word	0x080067cd
 80066c4:	0800678b 	.word	0x0800678b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68b9      	ldr	r1, [r7, #8]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f95c 	bl	800698c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0208 	orr.w	r2, r2, #8
 80066e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f022 0204 	bic.w	r2, r2, #4
 80066f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6999      	ldr	r1, [r3, #24]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	691a      	ldr	r2, [r3, #16]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	619a      	str	r2, [r3, #24]
      break;
 8006706:	e064      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68b9      	ldr	r1, [r7, #8]
 800670e:	4618      	mov	r0, r3
 8006710:	f000 f9ac 	bl	8006a6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699a      	ldr	r2, [r3, #24]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699a      	ldr	r2, [r3, #24]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6999      	ldr	r1, [r3, #24]
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	021a      	lsls	r2, r3, #8
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	619a      	str	r2, [r3, #24]
      break;
 8006748:	e043      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68b9      	ldr	r1, [r7, #8]
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fa01 	bl	8006b58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69da      	ldr	r2, [r3, #28]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0208 	orr.w	r2, r2, #8
 8006764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	69da      	ldr	r2, [r3, #28]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0204 	bic.w	r2, r2, #4
 8006774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	69d9      	ldr	r1, [r3, #28]
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	61da      	str	r2, [r3, #28]
      break;
 8006788:	e023      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68b9      	ldr	r1, [r7, #8]
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fa55 	bl	8006c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69da      	ldr	r2, [r3, #28]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69d9      	ldr	r1, [r3, #28]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	021a      	lsls	r2, r3, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	61da      	str	r2, [r3, #28]
      break;
 80067ca:	e002      	b.n	80067d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	75fb      	strb	r3, [r7, #23]
      break;
 80067d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006828:	bf00      	nop
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a46      	ldr	r2, [pc, #280]	; (8006960 <TIM_Base_SetConfig+0x12c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d013      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006852:	d00f      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a43      	ldr	r2, [pc, #268]	; (8006964 <TIM_Base_SetConfig+0x130>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00b      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a42      	ldr	r2, [pc, #264]	; (8006968 <TIM_Base_SetConfig+0x134>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d007      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a41      	ldr	r2, [pc, #260]	; (800696c <TIM_Base_SetConfig+0x138>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d003      	beq.n	8006874 <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a40      	ldr	r2, [pc, #256]	; (8006970 <TIM_Base_SetConfig+0x13c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d108      	bne.n	8006886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800687a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a35      	ldr	r2, [pc, #212]	; (8006960 <TIM_Base_SetConfig+0x12c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d02b      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006894:	d027      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a32      	ldr	r2, [pc, #200]	; (8006964 <TIM_Base_SetConfig+0x130>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d023      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a31      	ldr	r2, [pc, #196]	; (8006968 <TIM_Base_SetConfig+0x134>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01f      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a30      	ldr	r2, [pc, #192]	; (800696c <TIM_Base_SetConfig+0x138>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01b      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a2f      	ldr	r2, [pc, #188]	; (8006970 <TIM_Base_SetConfig+0x13c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d017      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2e      	ldr	r2, [pc, #184]	; (8006974 <TIM_Base_SetConfig+0x140>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2d      	ldr	r2, [pc, #180]	; (8006978 <TIM_Base_SetConfig+0x144>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00f      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2c      	ldr	r2, [pc, #176]	; (800697c <TIM_Base_SetConfig+0x148>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00b      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2b      	ldr	r2, [pc, #172]	; (8006980 <TIM_Base_SetConfig+0x14c>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d007      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2a      	ldr	r2, [pc, #168]	; (8006984 <TIM_Base_SetConfig+0x150>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d003      	beq.n	80068e6 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a29      	ldr	r2, [pc, #164]	; (8006988 <TIM_Base_SetConfig+0x154>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d108      	bne.n	80068f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a10      	ldr	r2, [pc, #64]	; (8006960 <TIM_Base_SetConfig+0x12c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d003      	beq.n	800692c <TIM_Base_SetConfig+0xf8>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a12      	ldr	r2, [pc, #72]	; (8006970 <TIM_Base_SetConfig+0x13c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d103      	bne.n	8006934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d105      	bne.n	8006952 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	611a      	str	r2, [r3, #16]
  }
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40010000 	.word	0x40010000
 8006964:	40000400 	.word	0x40000400
 8006968:	40000800 	.word	0x40000800
 800696c:	40000c00 	.word	0x40000c00
 8006970:	40010400 	.word	0x40010400
 8006974:	40014000 	.word	0x40014000
 8006978:	40014400 	.word	0x40014400
 800697c:	40014800 	.word	0x40014800
 8006980:	40001800 	.word	0x40001800
 8006984:	40001c00 	.word	0x40001c00
 8006988:	40002000 	.word	0x40002000

0800698c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 0201 	bic.w	r2, r3, #1
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 0302 	bic.w	r3, r3, #2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a20      	ldr	r2, [pc, #128]	; (8006a64 <TIM_OC1_SetConfig+0xd8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_OC1_SetConfig+0x64>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <TIM_OC1_SetConfig+0xdc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10c      	bne.n	8006a0a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0308 	bic.w	r3, r3, #8
 80069f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <TIM_OC1_SetConfig+0xd8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC1_SetConfig+0x8e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a14      	ldr	r2, [pc, #80]	; (8006a68 <TIM_OC1_SetConfig+0xdc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d111      	bne.n	8006a3e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	621a      	str	r2, [r3, #32]
}
 8006a58:	bf00      	nop
 8006a5a:	371c      	adds	r7, #28
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40010400 	.word	0x40010400

08006a6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f023 0210 	bic.w	r2, r3, #16
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 0320 	bic.w	r3, r3, #32
 8006ab6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a22      	ldr	r2, [pc, #136]	; (8006b50 <TIM_OC2_SetConfig+0xe4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d003      	beq.n	8006ad4 <TIM_OC2_SetConfig+0x68>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a21      	ldr	r2, [pc, #132]	; (8006b54 <TIM_OC2_SetConfig+0xe8>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10d      	bne.n	8006af0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ada:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <TIM_OC2_SetConfig+0xe4>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d003      	beq.n	8006b00 <TIM_OC2_SetConfig+0x94>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC2_SetConfig+0xe8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d113      	bne.n	8006b28 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	699b      	ldr	r3, [r3, #24]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	693a      	ldr	r2, [r7, #16]
 8006b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	40010000 	.word	0x40010000
 8006b54:	40010400 	.word	0x40010400

08006b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b087      	sub	sp, #28
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <TIM_OC3_SetConfig+0xe0>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d003      	beq.n	8006bbe <TIM_OC3_SetConfig+0x66>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <TIM_OC3_SetConfig+0xe4>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10d      	bne.n	8006bda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a16      	ldr	r2, [pc, #88]	; (8006c38 <TIM_OC3_SetConfig+0xe0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d003      	beq.n	8006bea <TIM_OC3_SetConfig+0x92>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a15      	ldr	r2, [pc, #84]	; (8006c3c <TIM_OC3_SetConfig+0xe4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d113      	bne.n	8006c12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	621a      	str	r2, [r3, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	031b      	lsls	r3, r3, #12
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a12      	ldr	r2, [pc, #72]	; (8006ce4 <TIM_OC4_SetConfig+0xa4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC4_SetConfig+0x68>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a11      	ldr	r2, [pc, #68]	; (8006ce8 <TIM_OC4_SetConfig+0xa8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d109      	bne.n	8006cbc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	019b      	lsls	r3, r3, #6
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	68fa      	ldr	r2, [r7, #12]
 8006cc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	621a      	str	r2, [r3, #32]
}
 8006cd6:	bf00      	nop
 8006cd8:	371c      	adds	r7, #28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	40010000 	.word	0x40010000
 8006ce8:	40010400 	.word	0x40010400

08006cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2201      	movs	r2, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	401a      	ands	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e05a      	b.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d01d      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	; (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	; (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	; (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	; (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a17      	ldr	r2, [pc, #92]	; (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10c      	bne.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800
 8006e20:	40000c00 	.word	0x40000c00
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40001800 	.word	0x40001800

08006e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e042      	b.n	8006ef0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fc fa26 	bl	80032d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2224      	movs	r2, #36	; 0x24
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 ff4f 	bl	8007d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ec0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ed0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2220      	movs	r2, #32
 8006edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08a      	sub	sp, #40	; 0x28
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d175      	bne.n	8007004 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_UART_Transmit+0x2c>
 8006f1e:	88fb      	ldrh	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e06e      	b.n	8007006 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f36:	f7fc fd5d 	bl	80039f4 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	88fa      	ldrh	r2, [r7, #6]
 8006f40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f50:	d108      	bne.n	8006f64 <HAL_UART_Transmit+0x6c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	e003      	b.n	8006f6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f6c:	e02e      	b.n	8006fcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fc27 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e03a      	b.n	8007006 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10b      	bne.n	8006fae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	3302      	adds	r3, #2
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	e007      	b.n	8006fbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	781a      	ldrb	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1cb      	bne.n	8006f6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2140      	movs	r1, #64	; 0x40
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fbf3 	bl	80077cc <UART_WaitOnFlagUntilTimeout>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e006      	b.n	8007006 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	e000      	b.n	8007006 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
  }
}
 8007006:	4618      	mov	r0, r3
 8007008:	3720      	adds	r7, #32
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	4613      	mov	r3, r2
 800701a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b20      	cmp	r3, #32
 8007026:	d112      	bne.n	800704e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d002      	beq.n	8007034 <HAL_UART_Receive_DMA+0x26>
 800702e:	88fb      	ldrh	r3, [r7, #6]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d101      	bne.n	8007038 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	e00b      	b.n	8007050 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	461a      	mov	r2, r3
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 fc1b 	bl	8007880 <UART_Start_Receive_DMA>
 800704a:	4603      	mov	r3, r0
 800704c:	e000      	b.n	8007050 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800704e:	2302      	movs	r3, #2
  }
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b0ba      	sub	sp, #232	; 0xe8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800707e:	2300      	movs	r3, #0
 8007080:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007084:	2300      	movs	r3, #0
 8007086:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800708a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800708e:	f003 030f 	and.w	r3, r3, #15
 8007092:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10f      	bne.n	80070be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800709e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a2:	f003 0320 	and.w	r3, r3, #32
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d009      	beq.n	80070be <HAL_UART_IRQHandler+0x66>
 80070aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fd83 	bl	8007bc2 <UART_Receive_IT>
      return;
 80070bc:	e25b      	b.n	8007576 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80070be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 80de 	beq.w	8007284 <HAL_UART_IRQHandler+0x22c>
 80070c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d106      	bne.n	80070e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80070d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80d1 	beq.w	8007284 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <HAL_UART_IRQHandler+0xae>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	f043 0201 	orr.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_UART_IRQHandler+0xd2>
 8007112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007122:	f043 0202 	orr.w	r2, r3, #2
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800712a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712e:	f003 0302 	and.w	r3, r3, #2
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_UART_IRQHandler+0xf6>
 8007136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	f043 0204 	orr.w	r2, r3, #4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800714e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007152:	f003 0308 	and.w	r3, r3, #8
 8007156:	2b00      	cmp	r3, #0
 8007158:	d011      	beq.n	800717e <HAL_UART_IRQHandler+0x126>
 800715a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d105      	bne.n	8007172 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f043 0208 	orr.w	r2, r3, #8
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 81f2 	beq.w	800756c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d008      	beq.n	80071a6 <HAL_UART_IRQHandler+0x14e>
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fd0e 	bl	8007bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b0:	2b40      	cmp	r3, #64	; 0x40
 80071b2:	bf0c      	ite	eq
 80071b4:	2301      	moveq	r3, #1
 80071b6:	2300      	movne	r3, #0
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d103      	bne.n	80071d2 <HAL_UART_IRQHandler+0x17a>
 80071ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d04f      	beq.n	8007272 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fc16 	bl	8007a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e2:	2b40      	cmp	r3, #64	; 0x40
 80071e4:	d141      	bne.n	800726a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3314      	adds	r3, #20
 80071ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80071fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007200:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007204:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007212:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007216:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800721e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800722a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1d9      	bne.n	80071e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d013      	beq.n	8007262 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	4a7e      	ldr	r2, [pc, #504]	; (8007438 <HAL_UART_IRQHandler+0x3e0>)
 8007240:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	4618      	mov	r0, r3
 8007248:	f7fd fd5a 	bl	8004d00 <HAL_DMA_Abort_IT>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d016      	beq.n	8007280 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800725c:	4610      	mov	r0, r2
 800725e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007260:	e00e      	b.n	8007280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f99e 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	e00a      	b.n	8007280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f99a 	bl	80075a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007270:	e006      	b.n	8007280 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f996 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800727e:	e175      	b.n	800756c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	bf00      	nop
    return;
 8007282:	e173      	b.n	800756c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	2b01      	cmp	r3, #1
 800728a:	f040 814f 	bne.w	800752c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800728e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007292:	f003 0310 	and.w	r3, r3, #16
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 8148 	beq.w	800752c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800729c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a0:	f003 0310 	and.w	r3, r3, #16
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8141 	beq.w	800752c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072aa:	2300      	movs	r3, #0
 80072ac:	60bb      	str	r3, [r7, #8]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	f040 80b6 	bne.w	800743c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f000 8145 	beq.w	8007570 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072ee:	429a      	cmp	r2, r3
 80072f0:	f080 813e 	bcs.w	8007570 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80072fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	f000 8088 	beq.w	800741a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	330c      	adds	r3, #12
 8007310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007328:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	330c      	adds	r3, #12
 8007332:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007336:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800733a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007342:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800734e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1d9      	bne.n	800730a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3314      	adds	r3, #20
 800735c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007360:	e853 3f00 	ldrex	r3, [r3]
 8007364:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007366:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3314      	adds	r3, #20
 8007376:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800737a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800737e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007380:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007382:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007386:	e841 2300 	strex	r3, r2, [r1]
 800738a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800738c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1e1      	bne.n	8007356 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	3314      	adds	r3, #20
 8007398:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739c:	e853 3f00 	ldrex	r3, [r3]
 80073a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3314      	adds	r3, #20
 80073b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e3      	bne.n	8007392 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	330c      	adds	r3, #12
 80073de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073e2:	e853 3f00 	ldrex	r3, [r3]
 80073e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80073e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073ea:	f023 0310 	bic.w	r3, r3, #16
 80073ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	330c      	adds	r3, #12
 80073f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80073fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007402:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800740a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e3      	bne.n	80073d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007414:	4618      	mov	r0, r3
 8007416:	f7fd fc03 	bl	8004c20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2202      	movs	r2, #2
 800741e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007428:	b29b      	uxth	r3, r3
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	b29b      	uxth	r3, r3
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f8c1 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007436:	e09b      	b.n	8007570 <HAL_UART_IRQHandler+0x518>
 8007438:	08007acb 	.word	0x08007acb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	f000 808e 	beq.w	8007574 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 8089 	beq.w	8007574 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	330c      	adds	r3, #12
 8007468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007486:	647a      	str	r2, [r7, #68]	; 0x44
 8007488:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800748c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e3      	bne.n	8007462 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3314      	adds	r3, #20
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	e853 3f00 	ldrex	r3, [r3]
 80074a8:	623b      	str	r3, [r7, #32]
   return(result);
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	f023 0301 	bic.w	r3, r3, #1
 80074b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3314      	adds	r3, #20
 80074ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074be:	633a      	str	r2, [r7, #48]	; 0x30
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1e3      	bne.n	800749a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2220      	movs	r2, #32
 80074d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0310 	bic.w	r3, r3, #16
 80074f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	330c      	adds	r3, #12
 8007500:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007504:	61fa      	str	r2, [r7, #28]
 8007506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	69b9      	ldr	r1, [r7, #24]
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	617b      	str	r3, [r7, #20]
   return(result);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e3      	bne.n	80074e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800751e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007522:	4619      	mov	r1, r3
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f847 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800752a:	e023      	b.n	8007574 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800752c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d009      	beq.n	800754c <HAL_UART_IRQHandler+0x4f4>
 8007538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007540:	2b00      	cmp	r3, #0
 8007542:	d003      	beq.n	800754c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fad4 	bl	8007af2 <UART_Transmit_IT>
    return;
 800754a:	e014      	b.n	8007576 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <HAL_UART_IRQHandler+0x51e>
 8007558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800755c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb14 	bl	8007b92 <UART_EndTransmit_IT>
    return;
 800756a:	e004      	b.n	8007576 <HAL_UART_IRQHandler+0x51e>
    return;
 800756c:	bf00      	nop
 800756e:	e002      	b.n	8007576 <HAL_UART_IRQHandler+0x51e>
      return;
 8007570:	bf00      	nop
 8007572:	e000      	b.n	8007576 <HAL_UART_IRQHandler+0x51e>
      return;
 8007574:	bf00      	nop
  }
}
 8007576:	37e8      	adds	r7, #232	; 0xe8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b09c      	sub	sp, #112	; 0x70
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d172      	bne.n	80076d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80075ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075ee:	2200      	movs	r2, #0
 80075f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	330c      	adds	r3, #12
 80075f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	e853 3f00 	ldrex	r3, [r3]
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007608:	66bb      	str	r3, [r7, #104]	; 0x68
 800760a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007612:	65ba      	str	r2, [r7, #88]	; 0x58
 8007614:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800761a:	e841 2300 	strex	r3, r2, [r1]
 800761e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1e5      	bne.n	80075f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	3314      	adds	r3, #20
 800762c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	e853 3f00 	ldrex	r3, [r3]
 8007634:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	f023 0301 	bic.w	r3, r3, #1
 800763c:	667b      	str	r3, [r7, #100]	; 0x64
 800763e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3314      	adds	r3, #20
 8007644:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007646:	647a      	str	r2, [r7, #68]	; 0x44
 8007648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800764c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800764e:	e841 2300 	strex	r3, r2, [r1]
 8007652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1e5      	bne.n	8007626 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3314      	adds	r3, #20
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	e853 3f00 	ldrex	r3, [r3]
 8007668:	623b      	str	r3, [r7, #32]
   return(result);
 800766a:	6a3b      	ldr	r3, [r7, #32]
 800766c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007670:	663b      	str	r3, [r7, #96]	; 0x60
 8007672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3314      	adds	r3, #20
 8007678:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800767a:	633a      	str	r2, [r7, #48]	; 0x30
 800767c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1e5      	bne.n	800765a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800768e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007690:	2220      	movs	r2, #32
 8007692:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	2b01      	cmp	r3, #1
 800769c:	d119      	bne.n	80076d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	e853 3f00 	ldrex	r3, [r3]
 80076ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f023 0310 	bic.w	r3, r3, #16
 80076b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	330c      	adds	r3, #12
 80076bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80076be:	61fa      	str	r2, [r7, #28]
 80076c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c2:	69b9      	ldr	r1, [r7, #24]
 80076c4:	69fa      	ldr	r2, [r7, #28]
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	617b      	str	r3, [r7, #20]
   return(result);
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d1e5      	bne.n	800769e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076d4:	2200      	movs	r2, #0
 80076d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d106      	bne.n	80076ee <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076e2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076e4:	4619      	mov	r1, r3
 80076e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076e8:	f7ff ff66 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076ec:	e002      	b.n	80076f4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80076ee:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80076f0:	f7fa fac2 	bl	8001c78 <HAL_UART_RxCpltCallback>
}
 80076f4:	bf00      	nop
 80076f6:	3770      	adds	r7, #112	; 0x70
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007708:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	2b01      	cmp	r3, #1
 8007716:	d108      	bne.n	800772a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	b29b      	uxth	r3, r3
 8007720:	4619      	mov	r1, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f7ff ff48 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007728:	e002      	b.n	8007730 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff ff30 	bl	8007590 <HAL_UART_RxHalfCpltCallback>
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007754:	2b80      	cmp	r3, #128	; 0x80
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b21      	cmp	r3, #33	; 0x21
 800776a:	d108      	bne.n	800777e <UART_DMAError+0x46>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d005      	beq.n	800777e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2200      	movs	r2, #0
 8007776:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007778:	68b8      	ldr	r0, [r7, #8]
 800777a:	f000 f91b 	bl	80079b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b40      	cmp	r3, #64	; 0x40
 800778a:	bf0c      	ite	eq
 800778c:	2301      	moveq	r3, #1
 800778e:	2300      	movne	r3, #0
 8007790:	b2db      	uxtb	r3, r3
 8007792:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b22      	cmp	r3, #34	; 0x22
 800779e:	d108      	bne.n	80077b2 <UART_DMAError+0x7a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d005      	beq.n	80077b2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80077ac:	68b8      	ldr	r0, [r7, #8]
 80077ae:	f000 f929 	bl	8007a04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b6:	f043 0210 	orr.w	r2, r3, #16
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	f7ff fef0 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	603b      	str	r3, [r7, #0]
 80077d8:	4613      	mov	r3, r2
 80077da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077dc:	e03b      	b.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d037      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077e6:	f7fc f905 	bl	80039f4 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6a3a      	ldr	r2, [r7, #32]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d302      	bcc.n	80077fc <UART_WaitOnFlagUntilTimeout+0x30>
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e03a      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	d023      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	2b80      	cmp	r3, #128	; 0x80
 8007812:	d020      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	2b40      	cmp	r3, #64	; 0x40
 8007818:	d01d      	beq.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d116      	bne.n	8007856 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	617b      	str	r3, [r7, #20]
 800783c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f8e0 	bl	8007a04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2208      	movs	r2, #8
 8007848:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e00f      	b.n	8007876 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	4013      	ands	r3, r2
 8007860:	68ba      	ldr	r2, [r7, #8]
 8007862:	429a      	cmp	r2, r3
 8007864:	bf0c      	ite	eq
 8007866:	2301      	moveq	r3, #1
 8007868:	2300      	movne	r3, #0
 800786a:	b2db      	uxtb	r3, r3
 800786c:	461a      	mov	r2, r3
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	429a      	cmp	r2, r3
 8007872:	d0b4      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b098      	sub	sp, #96	; 0x60
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4613      	mov	r3, r2
 800788c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2222      	movs	r2, #34	; 0x22
 80078a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ac:	4a3e      	ldr	r2, [pc, #248]	; (80079a8 <UART_Start_Receive_DMA+0x128>)
 80078ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078b4:	4a3d      	ldr	r2, [pc, #244]	; (80079ac <UART_Start_Receive_DMA+0x12c>)
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078bc:	4a3c      	ldr	r2, [pc, #240]	; (80079b0 <UART_Start_Receive_DMA+0x130>)
 80078be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c4:	2200      	movs	r2, #0
 80078c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80078c8:	f107 0308 	add.w	r3, r7, #8
 80078cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	88fb      	ldrh	r3, [r7, #6]
 80078e0:	f7fd f946 	bl	8004b70 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80078e4:	2300      	movs	r3, #0
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	613b      	str	r3, [r7, #16]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d019      	beq.n	8007936 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	330c      	adds	r3, #12
 8007908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007918:	65bb      	str	r3, [r7, #88]	; 0x58
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	330c      	adds	r3, #12
 8007920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007922:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007924:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e5      	bne.n	8007902 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3314      	adds	r3, #20
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	f043 0301 	orr.w	r3, r3, #1
 800794c:	657b      	str	r3, [r7, #84]	; 0x54
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3314      	adds	r3, #20
 8007954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007956:	63ba      	str	r2, [r7, #56]	; 0x38
 8007958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800795c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3314      	adds	r3, #20
 8007970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007980:	653b      	str	r3, [r7, #80]	; 0x50
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	3314      	adds	r3, #20
 8007988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800798a:	627a      	str	r2, [r7, #36]	; 0x24
 800798c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	6a39      	ldr	r1, [r7, #32]
 8007990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	61fb      	str	r3, [r7, #28]
   return(result);
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e5      	bne.n	800796a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3760      	adds	r7, #96	; 0x60
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	080075d1 	.word	0x080075d1
 80079ac:	080076fd 	.word	0x080076fd
 80079b0:	08007739 	.word	0x08007739

080079b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b089      	sub	sp, #36	; 0x24
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	330c      	adds	r3, #12
 80079c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	e853 3f00 	ldrex	r3, [r3]
 80079ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079d2:	61fb      	str	r3, [r7, #28]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	330c      	adds	r3, #12
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	61ba      	str	r2, [r7, #24]
 80079de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e0:	6979      	ldr	r1, [r7, #20]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	e841 2300 	strex	r3, r2, [r1]
 80079e8:	613b      	str	r3, [r7, #16]
   return(result);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1e5      	bne.n	80079bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80079f8:	bf00      	nop
 80079fa:	3724      	adds	r7, #36	; 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b095      	sub	sp, #84	; 0x54
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	330c      	adds	r3, #12
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a2c:	643a      	str	r2, [r7, #64]	; 0x40
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e5      	bne.n	8007a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3314      	adds	r3, #20
 8007a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	3314      	adds	r3, #20
 8007a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e5      	bne.n	8007a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d119      	bne.n	8007ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	647b      	str	r3, [r7, #68]	; 0x44
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	330c      	adds	r3, #12
 8007a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a9c:	61ba      	str	r2, [r7, #24]
 8007a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa0:	6979      	ldr	r1, [r7, #20]
 8007aa2:	69ba      	ldr	r2, [r7, #24]
 8007aa4:	e841 2300 	strex	r3, r2, [r1]
 8007aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d1e5      	bne.n	8007a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007abe:	bf00      	nop
 8007ac0:	3754      	adds	r7, #84	; 0x54
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ae4:	68f8      	ldr	r0, [r7, #12]
 8007ae6:	f7ff fd5d 	bl	80075a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007af2:	b480      	push	{r7}
 8007af4:	b085      	sub	sp, #20
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b21      	cmp	r3, #33	; 0x21
 8007b04:	d13e      	bne.n	8007b84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b0e:	d114      	bne.n	8007b3a <UART_Transmit_IT+0x48>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d110      	bne.n	8007b3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	1c9a      	adds	r2, r3, #2
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	621a      	str	r2, [r3, #32]
 8007b38:	e008      	b.n	8007b4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
 8007b3e:	1c59      	adds	r1, r3, #1
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	6211      	str	r1, [r2, #32]
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3b01      	subs	r3, #1
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10f      	bne.n	8007b80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	e000      	b.n	8007b86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b84:	2302      	movs	r3, #2
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3714      	adds	r7, #20
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b92:	b580      	push	{r7, lr}
 8007b94:	b082      	sub	sp, #8
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68da      	ldr	r2, [r3, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7ff fce2 	bl	800757c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b08c      	sub	sp, #48	; 0x30
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b22      	cmp	r3, #34	; 0x22
 8007bd4:	f040 80ae 	bne.w	8007d34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be0:	d117      	bne.n	8007c12 <UART_Receive_IT+0x50>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d113      	bne.n	8007c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	1c9a      	adds	r2, r3, #2
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c10:	e026      	b.n	8007c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c24:	d007      	beq.n	8007c36 <UART_Receive_IT+0x74>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10a      	bne.n	8007c44 <UART_Receive_IT+0x82>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d106      	bne.n	8007c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e008      	b.n	8007c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d15d      	bne.n	8007d30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0220 	bic.w	r2, r2, #32
 8007c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695a      	ldr	r2, [r3, #20]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0201 	bic.w	r2, r2, #1
 8007ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2220      	movs	r2, #32
 8007ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d135      	bne.n	8007d26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	330c      	adds	r3, #12
 8007cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	e853 3f00 	ldrex	r3, [r3]
 8007cce:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 0310 	bic.w	r3, r3, #16
 8007cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	330c      	adds	r3, #12
 8007cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce0:	623a      	str	r2, [r7, #32]
 8007ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69f9      	ldr	r1, [r7, #28]
 8007ce6:	6a3a      	ldr	r2, [r7, #32]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d10a      	bne.n	8007d18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d02:	2300      	movs	r3, #0
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff fc4a 	bl	80075b8 <HAL_UARTEx_RxEventCallback>
 8007d24:	e002      	b.n	8007d2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7f9 ffa6 	bl	8001c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e002      	b.n	8007d36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e000      	b.n	8007d36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d34:	2302      	movs	r3, #2
  }
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3730      	adds	r7, #48	; 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d44:	b0c0      	sub	sp, #256	; 0x100
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d5c:	68d9      	ldr	r1, [r3, #12]
 8007d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	ea40 0301 	orr.w	r3, r0, r1
 8007d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d6e:	689a      	ldr	r2, [r3, #8]
 8007d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	431a      	orrs	r2, r3
 8007d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d98:	f021 010c 	bic.w	r1, r1, #12
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007da6:	430b      	orrs	r3, r1
 8007da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dba:	6999      	ldr	r1, [r3, #24]
 8007dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	ea40 0301 	orr.w	r3, r0, r1
 8007dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	4b8f      	ldr	r3, [pc, #572]	; (800800c <UART_SetConfig+0x2cc>)
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d005      	beq.n	8007de0 <UART_SetConfig+0xa0>
 8007dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	4b8d      	ldr	r3, [pc, #564]	; (8008010 <UART_SetConfig+0x2d0>)
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d104      	bne.n	8007dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007de0:	f7fe f82e 	bl	8005e40 <HAL_RCC_GetPCLK2Freq>
 8007de4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007de8:	e003      	b.n	8007df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dea:	f7fe f815 	bl	8005e18 <HAL_RCC_GetPCLK1Freq>
 8007dee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007df6:	69db      	ldr	r3, [r3, #28]
 8007df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfc:	f040 810c 	bne.w	8008018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	1891      	adds	r1, r2, r2
 8007e18:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e1a:	415b      	adcs	r3, r3
 8007e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007e22:	4621      	mov	r1, r4
 8007e24:	eb12 0801 	adds.w	r8, r2, r1
 8007e28:	4629      	mov	r1, r5
 8007e2a:	eb43 0901 	adc.w	r9, r3, r1
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	f04f 0300 	mov.w	r3, #0
 8007e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e42:	4690      	mov	r8, r2
 8007e44:	4699      	mov	r9, r3
 8007e46:	4623      	mov	r3, r4
 8007e48:	eb18 0303 	adds.w	r3, r8, r3
 8007e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e50:	462b      	mov	r3, r5
 8007e52:	eb49 0303 	adc.w	r3, r9, r3
 8007e56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007e6e:	460b      	mov	r3, r1
 8007e70:	18db      	adds	r3, r3, r3
 8007e72:	653b      	str	r3, [r7, #80]	; 0x50
 8007e74:	4613      	mov	r3, r2
 8007e76:	eb42 0303 	adc.w	r3, r2, r3
 8007e7a:	657b      	str	r3, [r7, #84]	; 0x54
 8007e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007e84:	f7f8 ff00 	bl	8000c88 <__aeabi_uldivmod>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <UART_SetConfig+0x2d4>)
 8007e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	011c      	lsls	r4, r3, #4
 8007e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	1891      	adds	r1, r2, r2
 8007eae:	64b9      	str	r1, [r7, #72]	; 0x48
 8007eb0:	415b      	adcs	r3, r3
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007eb8:	4641      	mov	r1, r8
 8007eba:	eb12 0a01 	adds.w	sl, r2, r1
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ed8:	4692      	mov	sl, r2
 8007eda:	469b      	mov	fp, r3
 8007edc:	4643      	mov	r3, r8
 8007ede:	eb1a 0303 	adds.w	r3, sl, r3
 8007ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8007eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007efc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007f04:	460b      	mov	r3, r1
 8007f06:	18db      	adds	r3, r3, r3
 8007f08:	643b      	str	r3, [r7, #64]	; 0x40
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	eb42 0303 	adc.w	r3, r2, r3
 8007f10:	647b      	str	r3, [r7, #68]	; 0x44
 8007f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007f1a:	f7f8 feb5 	bl	8000c88 <__aeabi_uldivmod>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4611      	mov	r1, r2
 8007f24:	4b3b      	ldr	r3, [pc, #236]	; (8008014 <UART_SetConfig+0x2d4>)
 8007f26:	fba3 2301 	umull	r2, r3, r3, r1
 8007f2a:	095b      	lsrs	r3, r3, #5
 8007f2c:	2264      	movs	r2, #100	; 0x64
 8007f2e:	fb02 f303 	mul.w	r3, r2, r3
 8007f32:	1acb      	subs	r3, r1, r3
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007f3a:	4b36      	ldr	r3, [pc, #216]	; (8008014 <UART_SetConfig+0x2d4>)
 8007f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f40:	095b      	lsrs	r3, r3, #5
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007f48:	441c      	add	r4, r3
 8007f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007f54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007f5c:	4642      	mov	r2, r8
 8007f5e:	464b      	mov	r3, r9
 8007f60:	1891      	adds	r1, r2, r2
 8007f62:	63b9      	str	r1, [r7, #56]	; 0x38
 8007f64:	415b      	adcs	r3, r3
 8007f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	1851      	adds	r1, r2, r1
 8007f70:	6339      	str	r1, [r7, #48]	; 0x30
 8007f72:	4649      	mov	r1, r9
 8007f74:	414b      	adcs	r3, r1
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
 8007f78:	f04f 0200 	mov.w	r2, #0
 8007f7c:	f04f 0300 	mov.w	r3, #0
 8007f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007f84:	4659      	mov	r1, fp
 8007f86:	00cb      	lsls	r3, r1, #3
 8007f88:	4651      	mov	r1, sl
 8007f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f8e:	4651      	mov	r1, sl
 8007f90:	00ca      	lsls	r2, r1, #3
 8007f92:	4610      	mov	r0, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	4642      	mov	r2, r8
 8007f9a:	189b      	adds	r3, r3, r2
 8007f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	eb42 0303 	adc.w	r3, r2, r3
 8007fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	18db      	adds	r3, r3, r3
 8007fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	eb42 0303 	adc.w	r3, r2, r3
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007fd6:	f7f8 fe57 	bl	8000c88 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4b0d      	ldr	r3, [pc, #52]	; (8008014 <UART_SetConfig+0x2d4>)
 8007fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	2164      	movs	r1, #100	; 0x64
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	3332      	adds	r3, #50	; 0x32
 8007ff2:	4a08      	ldr	r2, [pc, #32]	; (8008014 <UART_SetConfig+0x2d4>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f003 0207 	and.w	r2, r3, #7
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4422      	add	r2, r4
 8008006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008008:	e106      	b.n	8008218 <UART_SetConfig+0x4d8>
 800800a:	bf00      	nop
 800800c:	40011000 	.word	0x40011000
 8008010:	40011400 	.word	0x40011400
 8008014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800801c:	2200      	movs	r2, #0
 800801e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008022:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800802a:	4642      	mov	r2, r8
 800802c:	464b      	mov	r3, r9
 800802e:	1891      	adds	r1, r2, r2
 8008030:	6239      	str	r1, [r7, #32]
 8008032:	415b      	adcs	r3, r3
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
 8008036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800803a:	4641      	mov	r1, r8
 800803c:	1854      	adds	r4, r2, r1
 800803e:	4649      	mov	r1, r9
 8008040:	eb43 0501 	adc.w	r5, r3, r1
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	00eb      	lsls	r3, r5, #3
 800804e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008052:	00e2      	lsls	r2, r4, #3
 8008054:	4614      	mov	r4, r2
 8008056:	461d      	mov	r5, r3
 8008058:	4643      	mov	r3, r8
 800805a:	18e3      	adds	r3, r4, r3
 800805c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008060:	464b      	mov	r3, r9
 8008062:	eb45 0303 	adc.w	r3, r5, r3
 8008066:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800806a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008076:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008086:	4629      	mov	r1, r5
 8008088:	008b      	lsls	r3, r1, #2
 800808a:	4621      	mov	r1, r4
 800808c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008090:	4621      	mov	r1, r4
 8008092:	008a      	lsls	r2, r1, #2
 8008094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008098:	f7f8 fdf6 	bl	8000c88 <__aeabi_uldivmod>
 800809c:	4602      	mov	r2, r0
 800809e:	460b      	mov	r3, r1
 80080a0:	4b60      	ldr	r3, [pc, #384]	; (8008224 <UART_SetConfig+0x4e4>)
 80080a2:	fba3 2302 	umull	r2, r3, r3, r2
 80080a6:	095b      	lsrs	r3, r3, #5
 80080a8:	011c      	lsls	r4, r3, #4
 80080aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ae:	2200      	movs	r2, #0
 80080b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80080b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80080b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80080bc:	4642      	mov	r2, r8
 80080be:	464b      	mov	r3, r9
 80080c0:	1891      	adds	r1, r2, r2
 80080c2:	61b9      	str	r1, [r7, #24]
 80080c4:	415b      	adcs	r3, r3
 80080c6:	61fb      	str	r3, [r7, #28]
 80080c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080cc:	4641      	mov	r1, r8
 80080ce:	1851      	adds	r1, r2, r1
 80080d0:	6139      	str	r1, [r7, #16]
 80080d2:	4649      	mov	r1, r9
 80080d4:	414b      	adcs	r3, r1
 80080d6:	617b      	str	r3, [r7, #20]
 80080d8:	f04f 0200 	mov.w	r2, #0
 80080dc:	f04f 0300 	mov.w	r3, #0
 80080e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080e4:	4659      	mov	r1, fp
 80080e6:	00cb      	lsls	r3, r1, #3
 80080e8:	4651      	mov	r1, sl
 80080ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ee:	4651      	mov	r1, sl
 80080f0:	00ca      	lsls	r2, r1, #3
 80080f2:	4610      	mov	r0, r2
 80080f4:	4619      	mov	r1, r3
 80080f6:	4603      	mov	r3, r0
 80080f8:	4642      	mov	r2, r8
 80080fa:	189b      	adds	r3, r3, r2
 80080fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008100:	464b      	mov	r3, r9
 8008102:	460a      	mov	r2, r1
 8008104:	eb42 0303 	adc.w	r3, r2, r3
 8008108:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	67bb      	str	r3, [r7, #120]	; 0x78
 8008116:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008124:	4649      	mov	r1, r9
 8008126:	008b      	lsls	r3, r1, #2
 8008128:	4641      	mov	r1, r8
 800812a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800812e:	4641      	mov	r1, r8
 8008130:	008a      	lsls	r2, r1, #2
 8008132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008136:	f7f8 fda7 	bl	8000c88 <__aeabi_uldivmod>
 800813a:	4602      	mov	r2, r0
 800813c:	460b      	mov	r3, r1
 800813e:	4611      	mov	r1, r2
 8008140:	4b38      	ldr	r3, [pc, #224]	; (8008224 <UART_SetConfig+0x4e4>)
 8008142:	fba3 2301 	umull	r2, r3, r3, r1
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	2264      	movs	r2, #100	; 0x64
 800814a:	fb02 f303 	mul.w	r3, r2, r3
 800814e:	1acb      	subs	r3, r1, r3
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	3332      	adds	r3, #50	; 0x32
 8008154:	4a33      	ldr	r2, [pc, #204]	; (8008224 <UART_SetConfig+0x4e4>)
 8008156:	fba2 2303 	umull	r2, r3, r2, r3
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008160:	441c      	add	r4, r3
 8008162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008166:	2200      	movs	r2, #0
 8008168:	673b      	str	r3, [r7, #112]	; 0x70
 800816a:	677a      	str	r2, [r7, #116]	; 0x74
 800816c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	1891      	adds	r1, r2, r2
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	415b      	adcs	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008180:	4641      	mov	r1, r8
 8008182:	1851      	adds	r1, r2, r1
 8008184:	6039      	str	r1, [r7, #0]
 8008186:	4649      	mov	r1, r9
 8008188:	414b      	adcs	r3, r1
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	f04f 0200 	mov.w	r2, #0
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008198:	4659      	mov	r1, fp
 800819a:	00cb      	lsls	r3, r1, #3
 800819c:	4651      	mov	r1, sl
 800819e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081a2:	4651      	mov	r1, sl
 80081a4:	00ca      	lsls	r2, r1, #3
 80081a6:	4610      	mov	r0, r2
 80081a8:	4619      	mov	r1, r3
 80081aa:	4603      	mov	r3, r0
 80081ac:	4642      	mov	r2, r8
 80081ae:	189b      	adds	r3, r3, r2
 80081b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80081b2:	464b      	mov	r3, r9
 80081b4:	460a      	mov	r2, r1
 80081b6:	eb42 0303 	adc.w	r3, r2, r3
 80081ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	663b      	str	r3, [r7, #96]	; 0x60
 80081c6:	667a      	str	r2, [r7, #100]	; 0x64
 80081c8:	f04f 0200 	mov.w	r2, #0
 80081cc:	f04f 0300 	mov.w	r3, #0
 80081d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80081d4:	4649      	mov	r1, r9
 80081d6:	008b      	lsls	r3, r1, #2
 80081d8:	4641      	mov	r1, r8
 80081da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081de:	4641      	mov	r1, r8
 80081e0:	008a      	lsls	r2, r1, #2
 80081e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80081e6:	f7f8 fd4f 	bl	8000c88 <__aeabi_uldivmod>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4b0d      	ldr	r3, [pc, #52]	; (8008224 <UART_SetConfig+0x4e4>)
 80081f0:	fba3 1302 	umull	r1, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	2164      	movs	r1, #100	; 0x64
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	011b      	lsls	r3, r3, #4
 8008200:	3332      	adds	r3, #50	; 0x32
 8008202:	4a08      	ldr	r2, [pc, #32]	; (8008224 <UART_SetConfig+0x4e4>)
 8008204:	fba2 2303 	umull	r2, r3, r2, r3
 8008208:	095b      	lsrs	r3, r3, #5
 800820a:	f003 020f 	and.w	r2, r3, #15
 800820e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4422      	add	r2, r4
 8008216:	609a      	str	r2, [r3, #8]
}
 8008218:	bf00      	nop
 800821a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800821e:	46bd      	mov	sp, r7
 8008220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008224:	51eb851f 	.word	0x51eb851f

08008228 <sulp>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4604      	mov	r4, r0
 800822c:	460d      	mov	r5, r1
 800822e:	ec45 4b10 	vmov	d0, r4, r5
 8008232:	4616      	mov	r6, r2
 8008234:	f003 fa94 	bl	800b760 <__ulp>
 8008238:	ec51 0b10 	vmov	r0, r1, d0
 800823c:	b17e      	cbz	r6, 800825e <sulp+0x36>
 800823e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008246:	2b00      	cmp	r3, #0
 8008248:	dd09      	ble.n	800825e <sulp+0x36>
 800824a:	051b      	lsls	r3, r3, #20
 800824c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008250:	2400      	movs	r4, #0
 8008252:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008256:	4622      	mov	r2, r4
 8008258:	462b      	mov	r3, r5
 800825a:	f7f8 f9cd 	bl	80005f8 <__aeabi_dmul>
 800825e:	bd70      	pop	{r4, r5, r6, pc}

08008260 <_strtod_l>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	ed2d 8b02 	vpush	{d8}
 8008268:	b09b      	sub	sp, #108	; 0x6c
 800826a:	4604      	mov	r4, r0
 800826c:	9213      	str	r2, [sp, #76]	; 0x4c
 800826e:	2200      	movs	r2, #0
 8008270:	9216      	str	r2, [sp, #88]	; 0x58
 8008272:	460d      	mov	r5, r1
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	f04f 0900 	mov.w	r9, #0
 800827c:	460a      	mov	r2, r1
 800827e:	9215      	str	r2, [sp, #84]	; 0x54
 8008280:	7811      	ldrb	r1, [r2, #0]
 8008282:	292b      	cmp	r1, #43	; 0x2b
 8008284:	d04c      	beq.n	8008320 <_strtod_l+0xc0>
 8008286:	d83a      	bhi.n	80082fe <_strtod_l+0x9e>
 8008288:	290d      	cmp	r1, #13
 800828a:	d834      	bhi.n	80082f6 <_strtod_l+0x96>
 800828c:	2908      	cmp	r1, #8
 800828e:	d834      	bhi.n	80082fa <_strtod_l+0x9a>
 8008290:	2900      	cmp	r1, #0
 8008292:	d03d      	beq.n	8008310 <_strtod_l+0xb0>
 8008294:	2200      	movs	r2, #0
 8008296:	920a      	str	r2, [sp, #40]	; 0x28
 8008298:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800829a:	7832      	ldrb	r2, [r6, #0]
 800829c:	2a30      	cmp	r2, #48	; 0x30
 800829e:	f040 80b4 	bne.w	800840a <_strtod_l+0x1aa>
 80082a2:	7872      	ldrb	r2, [r6, #1]
 80082a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80082a8:	2a58      	cmp	r2, #88	; 0x58
 80082aa:	d170      	bne.n	800838e <_strtod_l+0x12e>
 80082ac:	9302      	str	r3, [sp, #8]
 80082ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	ab16      	add	r3, sp, #88	; 0x58
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	4a8e      	ldr	r2, [pc, #568]	; (80084f0 <_strtod_l+0x290>)
 80082b8:	ab17      	add	r3, sp, #92	; 0x5c
 80082ba:	a915      	add	r1, sp, #84	; 0x54
 80082bc:	4620      	mov	r0, r4
 80082be:	f002 fb2d 	bl	800a91c <__gethex>
 80082c2:	f010 070f 	ands.w	r7, r0, #15
 80082c6:	4605      	mov	r5, r0
 80082c8:	d005      	beq.n	80082d6 <_strtod_l+0x76>
 80082ca:	2f06      	cmp	r7, #6
 80082cc:	d12a      	bne.n	8008324 <_strtod_l+0xc4>
 80082ce:	3601      	adds	r6, #1
 80082d0:	2300      	movs	r3, #0
 80082d2:	9615      	str	r6, [sp, #84]	; 0x54
 80082d4:	930a      	str	r3, [sp, #40]	; 0x28
 80082d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f040 857f 	bne.w	8008ddc <_strtod_l+0xb7c>
 80082de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e0:	b1db      	cbz	r3, 800831a <_strtod_l+0xba>
 80082e2:	4642      	mov	r2, r8
 80082e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80082e8:	ec43 2b10 	vmov	d0, r2, r3
 80082ec:	b01b      	add	sp, #108	; 0x6c
 80082ee:	ecbd 8b02 	vpop	{d8}
 80082f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f6:	2920      	cmp	r1, #32
 80082f8:	d1cc      	bne.n	8008294 <_strtod_l+0x34>
 80082fa:	3201      	adds	r2, #1
 80082fc:	e7bf      	b.n	800827e <_strtod_l+0x1e>
 80082fe:	292d      	cmp	r1, #45	; 0x2d
 8008300:	d1c8      	bne.n	8008294 <_strtod_l+0x34>
 8008302:	2101      	movs	r1, #1
 8008304:	910a      	str	r1, [sp, #40]	; 0x28
 8008306:	1c51      	adds	r1, r2, #1
 8008308:	9115      	str	r1, [sp, #84]	; 0x54
 800830a:	7852      	ldrb	r2, [r2, #1]
 800830c:	2a00      	cmp	r2, #0
 800830e:	d1c3      	bne.n	8008298 <_strtod_l+0x38>
 8008310:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008312:	9515      	str	r5, [sp, #84]	; 0x54
 8008314:	2b00      	cmp	r3, #0
 8008316:	f040 855f 	bne.w	8008dd8 <_strtod_l+0xb78>
 800831a:	4642      	mov	r2, r8
 800831c:	464b      	mov	r3, r9
 800831e:	e7e3      	b.n	80082e8 <_strtod_l+0x88>
 8008320:	2100      	movs	r1, #0
 8008322:	e7ef      	b.n	8008304 <_strtod_l+0xa4>
 8008324:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008326:	b13a      	cbz	r2, 8008338 <_strtod_l+0xd8>
 8008328:	2135      	movs	r1, #53	; 0x35
 800832a:	a818      	add	r0, sp, #96	; 0x60
 800832c:	f003 fb15 	bl	800b95a <__copybits>
 8008330:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008332:	4620      	mov	r0, r4
 8008334:	f002 fee8 	bl	800b108 <_Bfree>
 8008338:	3f01      	subs	r7, #1
 800833a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800833c:	2f04      	cmp	r7, #4
 800833e:	d806      	bhi.n	800834e <_strtod_l+0xee>
 8008340:	e8df f007 	tbb	[pc, r7]
 8008344:	201d0314 	.word	0x201d0314
 8008348:	14          	.byte	0x14
 8008349:	00          	.byte	0x00
 800834a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800834e:	05e9      	lsls	r1, r5, #23
 8008350:	bf48      	it	mi
 8008352:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8008356:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800835a:	0d1b      	lsrs	r3, r3, #20
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1b9      	bne.n	80082d6 <_strtod_l+0x76>
 8008362:	f001 fb69 	bl	8009a38 <__errno>
 8008366:	2322      	movs	r3, #34	; 0x22
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	e7b4      	b.n	80082d6 <_strtod_l+0x76>
 800836c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8008370:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008374:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008378:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800837c:	e7e7      	b.n	800834e <_strtod_l+0xee>
 800837e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80084f8 <_strtod_l+0x298>
 8008382:	e7e4      	b.n	800834e <_strtod_l+0xee>
 8008384:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008388:	f04f 38ff 	mov.w	r8, #4294967295
 800838c:	e7df      	b.n	800834e <_strtod_l+0xee>
 800838e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	9215      	str	r2, [sp, #84]	; 0x54
 8008394:	785b      	ldrb	r3, [r3, #1]
 8008396:	2b30      	cmp	r3, #48	; 0x30
 8008398:	d0f9      	beq.n	800838e <_strtod_l+0x12e>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d09b      	beq.n	80082d6 <_strtod_l+0x76>
 800839e:	2301      	movs	r3, #1
 80083a0:	f04f 0a00 	mov.w	sl, #0
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80083ae:	46d3      	mov	fp, sl
 80083b0:	220a      	movs	r2, #10
 80083b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80083b4:	7806      	ldrb	r6, [r0, #0]
 80083b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80083ba:	b2d9      	uxtb	r1, r3
 80083bc:	2909      	cmp	r1, #9
 80083be:	d926      	bls.n	800840e <_strtod_l+0x1ae>
 80083c0:	494c      	ldr	r1, [pc, #304]	; (80084f4 <_strtod_l+0x294>)
 80083c2:	2201      	movs	r2, #1
 80083c4:	f001 fadb 	bl	800997e <strncmp>
 80083c8:	2800      	cmp	r0, #0
 80083ca:	d030      	beq.n	800842e <_strtod_l+0x1ce>
 80083cc:	2000      	movs	r0, #0
 80083ce:	4632      	mov	r2, r6
 80083d0:	9005      	str	r0, [sp, #20]
 80083d2:	465e      	mov	r6, fp
 80083d4:	4603      	mov	r3, r0
 80083d6:	2a65      	cmp	r2, #101	; 0x65
 80083d8:	d001      	beq.n	80083de <_strtod_l+0x17e>
 80083da:	2a45      	cmp	r2, #69	; 0x45
 80083dc:	d113      	bne.n	8008406 <_strtod_l+0x1a6>
 80083de:	b91e      	cbnz	r6, 80083e8 <_strtod_l+0x188>
 80083e0:	9a04      	ldr	r2, [sp, #16]
 80083e2:	4302      	orrs	r2, r0
 80083e4:	d094      	beq.n	8008310 <_strtod_l+0xb0>
 80083e6:	2600      	movs	r6, #0
 80083e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80083ea:	1c6a      	adds	r2, r5, #1
 80083ec:	9215      	str	r2, [sp, #84]	; 0x54
 80083ee:	786a      	ldrb	r2, [r5, #1]
 80083f0:	2a2b      	cmp	r2, #43	; 0x2b
 80083f2:	d074      	beq.n	80084de <_strtod_l+0x27e>
 80083f4:	2a2d      	cmp	r2, #45	; 0x2d
 80083f6:	d078      	beq.n	80084ea <_strtod_l+0x28a>
 80083f8:	f04f 0c00 	mov.w	ip, #0
 80083fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008400:	2909      	cmp	r1, #9
 8008402:	d97f      	bls.n	8008504 <_strtod_l+0x2a4>
 8008404:	9515      	str	r5, [sp, #84]	; 0x54
 8008406:	2700      	movs	r7, #0
 8008408:	e09e      	b.n	8008548 <_strtod_l+0x2e8>
 800840a:	2300      	movs	r3, #0
 800840c:	e7c8      	b.n	80083a0 <_strtod_l+0x140>
 800840e:	f1bb 0f08 	cmp.w	fp, #8
 8008412:	bfd8      	it	le
 8008414:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008416:	f100 0001 	add.w	r0, r0, #1
 800841a:	bfda      	itte	le
 800841c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008420:	9309      	strle	r3, [sp, #36]	; 0x24
 8008422:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008426:	f10b 0b01 	add.w	fp, fp, #1
 800842a:	9015      	str	r0, [sp, #84]	; 0x54
 800842c:	e7c1      	b.n	80083b2 <_strtod_l+0x152>
 800842e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	9215      	str	r2, [sp, #84]	; 0x54
 8008434:	785a      	ldrb	r2, [r3, #1]
 8008436:	f1bb 0f00 	cmp.w	fp, #0
 800843a:	d037      	beq.n	80084ac <_strtod_l+0x24c>
 800843c:	9005      	str	r0, [sp, #20]
 800843e:	465e      	mov	r6, fp
 8008440:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008444:	2b09      	cmp	r3, #9
 8008446:	d912      	bls.n	800846e <_strtod_l+0x20e>
 8008448:	2301      	movs	r3, #1
 800844a:	e7c4      	b.n	80083d6 <_strtod_l+0x176>
 800844c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	9215      	str	r2, [sp, #84]	; 0x54
 8008452:	785a      	ldrb	r2, [r3, #1]
 8008454:	3001      	adds	r0, #1
 8008456:	2a30      	cmp	r2, #48	; 0x30
 8008458:	d0f8      	beq.n	800844c <_strtod_l+0x1ec>
 800845a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800845e:	2b08      	cmp	r3, #8
 8008460:	f200 84c1 	bhi.w	8008de6 <_strtod_l+0xb86>
 8008464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008466:	9005      	str	r0, [sp, #20]
 8008468:	2000      	movs	r0, #0
 800846a:	930b      	str	r3, [sp, #44]	; 0x2c
 800846c:	4606      	mov	r6, r0
 800846e:	3a30      	subs	r2, #48	; 0x30
 8008470:	f100 0301 	add.w	r3, r0, #1
 8008474:	d014      	beq.n	80084a0 <_strtod_l+0x240>
 8008476:	9905      	ldr	r1, [sp, #20]
 8008478:	4419      	add	r1, r3
 800847a:	9105      	str	r1, [sp, #20]
 800847c:	4633      	mov	r3, r6
 800847e:	eb00 0c06 	add.w	ip, r0, r6
 8008482:	210a      	movs	r1, #10
 8008484:	4563      	cmp	r3, ip
 8008486:	d113      	bne.n	80084b0 <_strtod_l+0x250>
 8008488:	1833      	adds	r3, r6, r0
 800848a:	2b08      	cmp	r3, #8
 800848c:	f106 0601 	add.w	r6, r6, #1
 8008490:	4406      	add	r6, r0
 8008492:	dc1a      	bgt.n	80084ca <_strtod_l+0x26a>
 8008494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008496:	230a      	movs	r3, #10
 8008498:	fb03 2301 	mla	r3, r3, r1, r2
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	2300      	movs	r3, #0
 80084a0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084a2:	1c51      	adds	r1, r2, #1
 80084a4:	9115      	str	r1, [sp, #84]	; 0x54
 80084a6:	7852      	ldrb	r2, [r2, #1]
 80084a8:	4618      	mov	r0, r3
 80084aa:	e7c9      	b.n	8008440 <_strtod_l+0x1e0>
 80084ac:	4658      	mov	r0, fp
 80084ae:	e7d2      	b.n	8008456 <_strtod_l+0x1f6>
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	f103 0301 	add.w	r3, r3, #1
 80084b6:	dc03      	bgt.n	80084c0 <_strtod_l+0x260>
 80084b8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80084ba:	434f      	muls	r7, r1
 80084bc:	9709      	str	r7, [sp, #36]	; 0x24
 80084be:	e7e1      	b.n	8008484 <_strtod_l+0x224>
 80084c0:	2b10      	cmp	r3, #16
 80084c2:	bfd8      	it	le
 80084c4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80084c8:	e7dc      	b.n	8008484 <_strtod_l+0x224>
 80084ca:	2e10      	cmp	r6, #16
 80084cc:	bfdc      	itt	le
 80084ce:	230a      	movle	r3, #10
 80084d0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80084d4:	e7e3      	b.n	800849e <_strtod_l+0x23e>
 80084d6:	2300      	movs	r3, #0
 80084d8:	9305      	str	r3, [sp, #20]
 80084da:	2301      	movs	r3, #1
 80084dc:	e780      	b.n	80083e0 <_strtod_l+0x180>
 80084de:	f04f 0c00 	mov.w	ip, #0
 80084e2:	1caa      	adds	r2, r5, #2
 80084e4:	9215      	str	r2, [sp, #84]	; 0x54
 80084e6:	78aa      	ldrb	r2, [r5, #2]
 80084e8:	e788      	b.n	80083fc <_strtod_l+0x19c>
 80084ea:	f04f 0c01 	mov.w	ip, #1
 80084ee:	e7f8      	b.n	80084e2 <_strtod_l+0x282>
 80084f0:	0800c500 	.word	0x0800c500
 80084f4:	0800c4fc 	.word	0x0800c4fc
 80084f8:	7ff00000 	.word	0x7ff00000
 80084fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80084fe:	1c51      	adds	r1, r2, #1
 8008500:	9115      	str	r1, [sp, #84]	; 0x54
 8008502:	7852      	ldrb	r2, [r2, #1]
 8008504:	2a30      	cmp	r2, #48	; 0x30
 8008506:	d0f9      	beq.n	80084fc <_strtod_l+0x29c>
 8008508:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800850c:	2908      	cmp	r1, #8
 800850e:	f63f af7a 	bhi.w	8008406 <_strtod_l+0x1a6>
 8008512:	3a30      	subs	r2, #48	; 0x30
 8008514:	9208      	str	r2, [sp, #32]
 8008516:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008518:	920c      	str	r2, [sp, #48]	; 0x30
 800851a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800851c:	1c57      	adds	r7, r2, #1
 800851e:	9715      	str	r7, [sp, #84]	; 0x54
 8008520:	7852      	ldrb	r2, [r2, #1]
 8008522:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008526:	f1be 0f09 	cmp.w	lr, #9
 800852a:	d938      	bls.n	800859e <_strtod_l+0x33e>
 800852c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800852e:	1a7f      	subs	r7, r7, r1
 8008530:	2f08      	cmp	r7, #8
 8008532:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008536:	dc03      	bgt.n	8008540 <_strtod_l+0x2e0>
 8008538:	9908      	ldr	r1, [sp, #32]
 800853a:	428f      	cmp	r7, r1
 800853c:	bfa8      	it	ge
 800853e:	460f      	movge	r7, r1
 8008540:	f1bc 0f00 	cmp.w	ip, #0
 8008544:	d000      	beq.n	8008548 <_strtod_l+0x2e8>
 8008546:	427f      	negs	r7, r7
 8008548:	2e00      	cmp	r6, #0
 800854a:	d14f      	bne.n	80085ec <_strtod_l+0x38c>
 800854c:	9904      	ldr	r1, [sp, #16]
 800854e:	4301      	orrs	r1, r0
 8008550:	f47f aec1 	bne.w	80082d6 <_strtod_l+0x76>
 8008554:	2b00      	cmp	r3, #0
 8008556:	f47f aedb 	bne.w	8008310 <_strtod_l+0xb0>
 800855a:	2a69      	cmp	r2, #105	; 0x69
 800855c:	d029      	beq.n	80085b2 <_strtod_l+0x352>
 800855e:	dc26      	bgt.n	80085ae <_strtod_l+0x34e>
 8008560:	2a49      	cmp	r2, #73	; 0x49
 8008562:	d026      	beq.n	80085b2 <_strtod_l+0x352>
 8008564:	2a4e      	cmp	r2, #78	; 0x4e
 8008566:	f47f aed3 	bne.w	8008310 <_strtod_l+0xb0>
 800856a:	499b      	ldr	r1, [pc, #620]	; (80087d8 <_strtod_l+0x578>)
 800856c:	a815      	add	r0, sp, #84	; 0x54
 800856e:	f002 fc15 	bl	800ad9c <__match>
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f aecc 	beq.w	8008310 <_strtod_l+0xb0>
 8008578:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b28      	cmp	r3, #40	; 0x28
 800857e:	d12f      	bne.n	80085e0 <_strtod_l+0x380>
 8008580:	4996      	ldr	r1, [pc, #600]	; (80087dc <_strtod_l+0x57c>)
 8008582:	aa18      	add	r2, sp, #96	; 0x60
 8008584:	a815      	add	r0, sp, #84	; 0x54
 8008586:	f002 fc1d 	bl	800adc4 <__hexnan>
 800858a:	2805      	cmp	r0, #5
 800858c:	d128      	bne.n	80085e0 <_strtod_l+0x380>
 800858e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008590:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008594:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008598:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800859c:	e69b      	b.n	80082d6 <_strtod_l+0x76>
 800859e:	9f08      	ldr	r7, [sp, #32]
 80085a0:	210a      	movs	r1, #10
 80085a2:	fb01 2107 	mla	r1, r1, r7, r2
 80085a6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80085aa:	9208      	str	r2, [sp, #32]
 80085ac:	e7b5      	b.n	800851a <_strtod_l+0x2ba>
 80085ae:	2a6e      	cmp	r2, #110	; 0x6e
 80085b0:	e7d9      	b.n	8008566 <_strtod_l+0x306>
 80085b2:	498b      	ldr	r1, [pc, #556]	; (80087e0 <_strtod_l+0x580>)
 80085b4:	a815      	add	r0, sp, #84	; 0x54
 80085b6:	f002 fbf1 	bl	800ad9c <__match>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f43f aea8 	beq.w	8008310 <_strtod_l+0xb0>
 80085c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085c2:	4988      	ldr	r1, [pc, #544]	; (80087e4 <_strtod_l+0x584>)
 80085c4:	3b01      	subs	r3, #1
 80085c6:	a815      	add	r0, sp, #84	; 0x54
 80085c8:	9315      	str	r3, [sp, #84]	; 0x54
 80085ca:	f002 fbe7 	bl	800ad9c <__match>
 80085ce:	b910      	cbnz	r0, 80085d6 <_strtod_l+0x376>
 80085d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d2:	3301      	adds	r3, #1
 80085d4:	9315      	str	r3, [sp, #84]	; 0x54
 80085d6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80087f4 <_strtod_l+0x594>
 80085da:	f04f 0800 	mov.w	r8, #0
 80085de:	e67a      	b.n	80082d6 <_strtod_l+0x76>
 80085e0:	4881      	ldr	r0, [pc, #516]	; (80087e8 <_strtod_l+0x588>)
 80085e2:	f001 fa65 	bl	8009ab0 <nan>
 80085e6:	ec59 8b10 	vmov	r8, r9, d0
 80085ea:	e674      	b.n	80082d6 <_strtod_l+0x76>
 80085ec:	9b05      	ldr	r3, [sp, #20]
 80085ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085f0:	1afb      	subs	r3, r7, r3
 80085f2:	f1bb 0f00 	cmp.w	fp, #0
 80085f6:	bf08      	it	eq
 80085f8:	46b3      	moveq	fp, r6
 80085fa:	2e10      	cmp	r6, #16
 80085fc:	9308      	str	r3, [sp, #32]
 80085fe:	4635      	mov	r5, r6
 8008600:	bfa8      	it	ge
 8008602:	2510      	movge	r5, #16
 8008604:	f7f7 ff7e 	bl	8000504 <__aeabi_ui2d>
 8008608:	2e09      	cmp	r6, #9
 800860a:	4680      	mov	r8, r0
 800860c:	4689      	mov	r9, r1
 800860e:	dd13      	ble.n	8008638 <_strtod_l+0x3d8>
 8008610:	4b76      	ldr	r3, [pc, #472]	; (80087ec <_strtod_l+0x58c>)
 8008612:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008616:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800861a:	f7f7 ffed 	bl	80005f8 <__aeabi_dmul>
 800861e:	4680      	mov	r8, r0
 8008620:	4650      	mov	r0, sl
 8008622:	4689      	mov	r9, r1
 8008624:	f7f7 ff6e 	bl	8000504 <__aeabi_ui2d>
 8008628:	4602      	mov	r2, r0
 800862a:	460b      	mov	r3, r1
 800862c:	4640      	mov	r0, r8
 800862e:	4649      	mov	r1, r9
 8008630:	f7f7 fe2c 	bl	800028c <__adddf3>
 8008634:	4680      	mov	r8, r0
 8008636:	4689      	mov	r9, r1
 8008638:	2e0f      	cmp	r6, #15
 800863a:	dc38      	bgt.n	80086ae <_strtod_l+0x44e>
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f43f ae49 	beq.w	80082d6 <_strtod_l+0x76>
 8008644:	dd24      	ble.n	8008690 <_strtod_l+0x430>
 8008646:	2b16      	cmp	r3, #22
 8008648:	dc0b      	bgt.n	8008662 <_strtod_l+0x402>
 800864a:	4968      	ldr	r1, [pc, #416]	; (80087ec <_strtod_l+0x58c>)
 800864c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008654:	4642      	mov	r2, r8
 8008656:	464b      	mov	r3, r9
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	4680      	mov	r8, r0
 800865e:	4689      	mov	r9, r1
 8008660:	e639      	b.n	80082d6 <_strtod_l+0x76>
 8008662:	9a08      	ldr	r2, [sp, #32]
 8008664:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8008668:	4293      	cmp	r3, r2
 800866a:	db20      	blt.n	80086ae <_strtod_l+0x44e>
 800866c:	4c5f      	ldr	r4, [pc, #380]	; (80087ec <_strtod_l+0x58c>)
 800866e:	f1c6 060f 	rsb	r6, r6, #15
 8008672:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8008676:	4642      	mov	r2, r8
 8008678:	464b      	mov	r3, r9
 800867a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800867e:	f7f7 ffbb 	bl	80005f8 <__aeabi_dmul>
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	1b9e      	subs	r6, r3, r6
 8008686:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800868a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800868e:	e7e3      	b.n	8008658 <_strtod_l+0x3f8>
 8008690:	9b08      	ldr	r3, [sp, #32]
 8008692:	3316      	adds	r3, #22
 8008694:	db0b      	blt.n	80086ae <_strtod_l+0x44e>
 8008696:	9b05      	ldr	r3, [sp, #20]
 8008698:	1bdf      	subs	r7, r3, r7
 800869a:	4b54      	ldr	r3, [pc, #336]	; (80087ec <_strtod_l+0x58c>)
 800869c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80086a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a4:	4640      	mov	r0, r8
 80086a6:	4649      	mov	r1, r9
 80086a8:	f7f8 f8d0 	bl	800084c <__aeabi_ddiv>
 80086ac:	e7d6      	b.n	800865c <_strtod_l+0x3fc>
 80086ae:	9b08      	ldr	r3, [sp, #32]
 80086b0:	1b75      	subs	r5, r6, r5
 80086b2:	441d      	add	r5, r3
 80086b4:	2d00      	cmp	r5, #0
 80086b6:	dd70      	ble.n	800879a <_strtod_l+0x53a>
 80086b8:	f015 030f 	ands.w	r3, r5, #15
 80086bc:	d00a      	beq.n	80086d4 <_strtod_l+0x474>
 80086be:	494b      	ldr	r1, [pc, #300]	; (80087ec <_strtod_l+0x58c>)
 80086c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086c4:	4642      	mov	r2, r8
 80086c6:	464b      	mov	r3, r9
 80086c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	f035 050f 	bics.w	r5, r5, #15
 80086d8:	d04d      	beq.n	8008776 <_strtod_l+0x516>
 80086da:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80086de:	dd22      	ble.n	8008726 <_strtod_l+0x4c6>
 80086e0:	2500      	movs	r5, #0
 80086e2:	46ab      	mov	fp, r5
 80086e4:	9509      	str	r5, [sp, #36]	; 0x24
 80086e6:	9505      	str	r5, [sp, #20]
 80086e8:	2322      	movs	r3, #34	; 0x22
 80086ea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80087f4 <_strtod_l+0x594>
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	f04f 0800 	mov.w	r8, #0
 80086f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f43f aded 	beq.w	80082d6 <_strtod_l+0x76>
 80086fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80086fe:	4620      	mov	r0, r4
 8008700:	f002 fd02 	bl	800b108 <_Bfree>
 8008704:	9905      	ldr	r1, [sp, #20]
 8008706:	4620      	mov	r0, r4
 8008708:	f002 fcfe 	bl	800b108 <_Bfree>
 800870c:	4659      	mov	r1, fp
 800870e:	4620      	mov	r0, r4
 8008710:	f002 fcfa 	bl	800b108 <_Bfree>
 8008714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008716:	4620      	mov	r0, r4
 8008718:	f002 fcf6 	bl	800b108 <_Bfree>
 800871c:	4629      	mov	r1, r5
 800871e:	4620      	mov	r0, r4
 8008720:	f002 fcf2 	bl	800b108 <_Bfree>
 8008724:	e5d7      	b.n	80082d6 <_strtod_l+0x76>
 8008726:	4b32      	ldr	r3, [pc, #200]	; (80087f0 <_strtod_l+0x590>)
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	2300      	movs	r3, #0
 800872c:	112d      	asrs	r5, r5, #4
 800872e:	4640      	mov	r0, r8
 8008730:	4649      	mov	r1, r9
 8008732:	469a      	mov	sl, r3
 8008734:	2d01      	cmp	r5, #1
 8008736:	dc21      	bgt.n	800877c <_strtod_l+0x51c>
 8008738:	b10b      	cbz	r3, 800873e <_strtod_l+0x4de>
 800873a:	4680      	mov	r8, r0
 800873c:	4689      	mov	r9, r1
 800873e:	492c      	ldr	r1, [pc, #176]	; (80087f0 <_strtod_l+0x590>)
 8008740:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8008744:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008748:	4642      	mov	r2, r8
 800874a:	464b      	mov	r3, r9
 800874c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008750:	f7f7 ff52 	bl	80005f8 <__aeabi_dmul>
 8008754:	4b27      	ldr	r3, [pc, #156]	; (80087f4 <_strtod_l+0x594>)
 8008756:	460a      	mov	r2, r1
 8008758:	400b      	ands	r3, r1
 800875a:	4927      	ldr	r1, [pc, #156]	; (80087f8 <_strtod_l+0x598>)
 800875c:	428b      	cmp	r3, r1
 800875e:	4680      	mov	r8, r0
 8008760:	d8be      	bhi.n	80086e0 <_strtod_l+0x480>
 8008762:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008766:	428b      	cmp	r3, r1
 8008768:	bf86      	itte	hi
 800876a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80087fc <_strtod_l+0x59c>
 800876e:	f04f 38ff 	movhi.w	r8, #4294967295
 8008772:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8008776:	2300      	movs	r3, #0
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	e07b      	b.n	8008874 <_strtod_l+0x614>
 800877c:	07ea      	lsls	r2, r5, #31
 800877e:	d505      	bpl.n	800878c <_strtod_l+0x52c>
 8008780:	9b04      	ldr	r3, [sp, #16]
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	f7f7 ff37 	bl	80005f8 <__aeabi_dmul>
 800878a:	2301      	movs	r3, #1
 800878c:	9a04      	ldr	r2, [sp, #16]
 800878e:	3208      	adds	r2, #8
 8008790:	f10a 0a01 	add.w	sl, sl, #1
 8008794:	106d      	asrs	r5, r5, #1
 8008796:	9204      	str	r2, [sp, #16]
 8008798:	e7cc      	b.n	8008734 <_strtod_l+0x4d4>
 800879a:	d0ec      	beq.n	8008776 <_strtod_l+0x516>
 800879c:	426d      	negs	r5, r5
 800879e:	f015 020f 	ands.w	r2, r5, #15
 80087a2:	d00a      	beq.n	80087ba <_strtod_l+0x55a>
 80087a4:	4b11      	ldr	r3, [pc, #68]	; (80087ec <_strtod_l+0x58c>)
 80087a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b2:	f7f8 f84b 	bl	800084c <__aeabi_ddiv>
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	112d      	asrs	r5, r5, #4
 80087bc:	d0db      	beq.n	8008776 <_strtod_l+0x516>
 80087be:	2d1f      	cmp	r5, #31
 80087c0:	dd1e      	ble.n	8008800 <_strtod_l+0x5a0>
 80087c2:	2500      	movs	r5, #0
 80087c4:	46ab      	mov	fp, r5
 80087c6:	9509      	str	r5, [sp, #36]	; 0x24
 80087c8:	9505      	str	r5, [sp, #20]
 80087ca:	2322      	movs	r3, #34	; 0x22
 80087cc:	f04f 0800 	mov.w	r8, #0
 80087d0:	f04f 0900 	mov.w	r9, #0
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	e78d      	b.n	80086f4 <_strtod_l+0x494>
 80087d8:	0800c55d 	.word	0x0800c55d
 80087dc:	0800c514 	.word	0x0800c514
 80087e0:	0800c555 	.word	0x0800c555
 80087e4:	0800c58f 	.word	0x0800c58f
 80087e8:	0800c921 	.word	0x0800c921
 80087ec:	0800c700 	.word	0x0800c700
 80087f0:	0800c6d8 	.word	0x0800c6d8
 80087f4:	7ff00000 	.word	0x7ff00000
 80087f8:	7ca00000 	.word	0x7ca00000
 80087fc:	7fefffff 	.word	0x7fefffff
 8008800:	f015 0310 	ands.w	r3, r5, #16
 8008804:	bf18      	it	ne
 8008806:	236a      	movne	r3, #106	; 0x6a
 8008808:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008bac <_strtod_l+0x94c>
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	4640      	mov	r0, r8
 8008810:	4649      	mov	r1, r9
 8008812:	2300      	movs	r3, #0
 8008814:	07ea      	lsls	r2, r5, #31
 8008816:	d504      	bpl.n	8008822 <_strtod_l+0x5c2>
 8008818:	e9da 2300 	ldrd	r2, r3, [sl]
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	2301      	movs	r3, #1
 8008822:	106d      	asrs	r5, r5, #1
 8008824:	f10a 0a08 	add.w	sl, sl, #8
 8008828:	d1f4      	bne.n	8008814 <_strtod_l+0x5b4>
 800882a:	b10b      	cbz	r3, 8008830 <_strtod_l+0x5d0>
 800882c:	4680      	mov	r8, r0
 800882e:	4689      	mov	r9, r1
 8008830:	9b04      	ldr	r3, [sp, #16]
 8008832:	b1bb      	cbz	r3, 8008864 <_strtod_l+0x604>
 8008834:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8008838:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800883c:	2b00      	cmp	r3, #0
 800883e:	4649      	mov	r1, r9
 8008840:	dd10      	ble.n	8008864 <_strtod_l+0x604>
 8008842:	2b1f      	cmp	r3, #31
 8008844:	f340 811e 	ble.w	8008a84 <_strtod_l+0x824>
 8008848:	2b34      	cmp	r3, #52	; 0x34
 800884a:	bfde      	ittt	le
 800884c:	f04f 33ff 	movle.w	r3, #4294967295
 8008850:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008854:	4093      	lslle	r3, r2
 8008856:	f04f 0800 	mov.w	r8, #0
 800885a:	bfcc      	ite	gt
 800885c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008860:	ea03 0901 	andle.w	r9, r3, r1
 8008864:	2200      	movs	r2, #0
 8008866:	2300      	movs	r3, #0
 8008868:	4640      	mov	r0, r8
 800886a:	4649      	mov	r1, r9
 800886c:	f7f8 f92c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008870:	2800      	cmp	r0, #0
 8008872:	d1a6      	bne.n	80087c2 <_strtod_l+0x562>
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800887a:	4633      	mov	r3, r6
 800887c:	465a      	mov	r2, fp
 800887e:	4620      	mov	r0, r4
 8008880:	f002 fcaa 	bl	800b1d8 <__s2b>
 8008884:	9009      	str	r0, [sp, #36]	; 0x24
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f af2a 	beq.w	80086e0 <_strtod_l+0x480>
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	9b05      	ldr	r3, [sp, #20]
 8008890:	2a00      	cmp	r2, #0
 8008892:	eba3 0307 	sub.w	r3, r3, r7
 8008896:	bfa8      	it	ge
 8008898:	2300      	movge	r3, #0
 800889a:	930c      	str	r3, [sp, #48]	; 0x30
 800889c:	2500      	movs	r5, #0
 800889e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80088a2:	9312      	str	r3, [sp, #72]	; 0x48
 80088a4:	46ab      	mov	fp, r5
 80088a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a8:	4620      	mov	r0, r4
 80088aa:	6859      	ldr	r1, [r3, #4]
 80088ac:	f002 fbec 	bl	800b088 <_Balloc>
 80088b0:	9005      	str	r0, [sp, #20]
 80088b2:	2800      	cmp	r0, #0
 80088b4:	f43f af18 	beq.w	80086e8 <_strtod_l+0x488>
 80088b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	3202      	adds	r2, #2
 80088be:	f103 010c 	add.w	r1, r3, #12
 80088c2:	0092      	lsls	r2, r2, #2
 80088c4:	300c      	adds	r0, #12
 80088c6:	f001 f8e4 	bl	8009a92 <memcpy>
 80088ca:	ec49 8b10 	vmov	d0, r8, r9
 80088ce:	aa18      	add	r2, sp, #96	; 0x60
 80088d0:	a917      	add	r1, sp, #92	; 0x5c
 80088d2:	4620      	mov	r0, r4
 80088d4:	f002 ffb4 	bl	800b840 <__d2b>
 80088d8:	ec49 8b18 	vmov	d8, r8, r9
 80088dc:	9016      	str	r0, [sp, #88]	; 0x58
 80088de:	2800      	cmp	r0, #0
 80088e0:	f43f af02 	beq.w	80086e8 <_strtod_l+0x488>
 80088e4:	2101      	movs	r1, #1
 80088e6:	4620      	mov	r0, r4
 80088e8:	f002 fd0e 	bl	800b308 <__i2b>
 80088ec:	4683      	mov	fp, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f aefa 	beq.w	80086e8 <_strtod_l+0x488>
 80088f4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80088f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80088f8:	2e00      	cmp	r6, #0
 80088fa:	bfab      	itete	ge
 80088fc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80088fe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008900:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008902:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008906:	bfac      	ite	ge
 8008908:	eb06 0a03 	addge.w	sl, r6, r3
 800890c:	1b9f      	sublt	r7, r3, r6
 800890e:	9b04      	ldr	r3, [sp, #16]
 8008910:	1af6      	subs	r6, r6, r3
 8008912:	4416      	add	r6, r2
 8008914:	4ba0      	ldr	r3, [pc, #640]	; (8008b98 <_strtod_l+0x938>)
 8008916:	3e01      	subs	r6, #1
 8008918:	429e      	cmp	r6, r3
 800891a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800891e:	f280 80c4 	bge.w	8008aaa <_strtod_l+0x84a>
 8008922:	1b9b      	subs	r3, r3, r6
 8008924:	2b1f      	cmp	r3, #31
 8008926:	eba2 0203 	sub.w	r2, r2, r3
 800892a:	f04f 0101 	mov.w	r1, #1
 800892e:	f300 80b0 	bgt.w	8008a92 <_strtod_l+0x832>
 8008932:	fa01 f303 	lsl.w	r3, r1, r3
 8008936:	930e      	str	r3, [sp, #56]	; 0x38
 8008938:	2300      	movs	r3, #0
 800893a:	930d      	str	r3, [sp, #52]	; 0x34
 800893c:	eb0a 0602 	add.w	r6, sl, r2
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	45b2      	cmp	sl, r6
 8008944:	4417      	add	r7, r2
 8008946:	441f      	add	r7, r3
 8008948:	4653      	mov	r3, sl
 800894a:	bfa8      	it	ge
 800894c:	4633      	movge	r3, r6
 800894e:	42bb      	cmp	r3, r7
 8008950:	bfa8      	it	ge
 8008952:	463b      	movge	r3, r7
 8008954:	2b00      	cmp	r3, #0
 8008956:	bfc2      	ittt	gt
 8008958:	1af6      	subgt	r6, r6, r3
 800895a:	1aff      	subgt	r7, r7, r3
 800895c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	dd17      	ble.n	8008996 <_strtod_l+0x736>
 8008966:	4659      	mov	r1, fp
 8008968:	461a      	mov	r2, r3
 800896a:	4620      	mov	r0, r4
 800896c:	f002 fd8c 	bl	800b488 <__pow5mult>
 8008970:	4683      	mov	fp, r0
 8008972:	2800      	cmp	r0, #0
 8008974:	f43f aeb8 	beq.w	80086e8 <_strtod_l+0x488>
 8008978:	4601      	mov	r1, r0
 800897a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800897c:	4620      	mov	r0, r4
 800897e:	f002 fcd9 	bl	800b334 <__multiply>
 8008982:	900b      	str	r0, [sp, #44]	; 0x2c
 8008984:	2800      	cmp	r0, #0
 8008986:	f43f aeaf 	beq.w	80086e8 <_strtod_l+0x488>
 800898a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800898c:	4620      	mov	r0, r4
 800898e:	f002 fbbb 	bl	800b108 <_Bfree>
 8008992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008994:	9316      	str	r3, [sp, #88]	; 0x58
 8008996:	2e00      	cmp	r6, #0
 8008998:	f300 808c 	bgt.w	8008ab4 <_strtod_l+0x854>
 800899c:	9b08      	ldr	r3, [sp, #32]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	dd08      	ble.n	80089b4 <_strtod_l+0x754>
 80089a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089a4:	9905      	ldr	r1, [sp, #20]
 80089a6:	4620      	mov	r0, r4
 80089a8:	f002 fd6e 	bl	800b488 <__pow5mult>
 80089ac:	9005      	str	r0, [sp, #20]
 80089ae:	2800      	cmp	r0, #0
 80089b0:	f43f ae9a 	beq.w	80086e8 <_strtod_l+0x488>
 80089b4:	2f00      	cmp	r7, #0
 80089b6:	dd08      	ble.n	80089ca <_strtod_l+0x76a>
 80089b8:	9905      	ldr	r1, [sp, #20]
 80089ba:	463a      	mov	r2, r7
 80089bc:	4620      	mov	r0, r4
 80089be:	f002 fdbd 	bl	800b53c <__lshift>
 80089c2:	9005      	str	r0, [sp, #20]
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f43f ae8f 	beq.w	80086e8 <_strtod_l+0x488>
 80089ca:	f1ba 0f00 	cmp.w	sl, #0
 80089ce:	dd08      	ble.n	80089e2 <_strtod_l+0x782>
 80089d0:	4659      	mov	r1, fp
 80089d2:	4652      	mov	r2, sl
 80089d4:	4620      	mov	r0, r4
 80089d6:	f002 fdb1 	bl	800b53c <__lshift>
 80089da:	4683      	mov	fp, r0
 80089dc:	2800      	cmp	r0, #0
 80089de:	f43f ae83 	beq.w	80086e8 <_strtod_l+0x488>
 80089e2:	9a05      	ldr	r2, [sp, #20]
 80089e4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80089e6:	4620      	mov	r0, r4
 80089e8:	f002 fe30 	bl	800b64c <__mdiff>
 80089ec:	4605      	mov	r5, r0
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f ae7a 	beq.w	80086e8 <_strtod_l+0x488>
 80089f4:	68c3      	ldr	r3, [r0, #12]
 80089f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80089f8:	2300      	movs	r3, #0
 80089fa:	60c3      	str	r3, [r0, #12]
 80089fc:	4659      	mov	r1, fp
 80089fe:	f002 fe09 	bl	800b614 <__mcmp>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	da60      	bge.n	8008ac8 <_strtod_l+0x868>
 8008a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a08:	ea53 0308 	orrs.w	r3, r3, r8
 8008a0c:	f040 8084 	bne.w	8008b18 <_strtod_l+0x8b8>
 8008a10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d17f      	bne.n	8008b18 <_strtod_l+0x8b8>
 8008a18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a1c:	0d1b      	lsrs	r3, r3, #20
 8008a1e:	051b      	lsls	r3, r3, #20
 8008a20:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008a24:	d978      	bls.n	8008b18 <_strtod_l+0x8b8>
 8008a26:	696b      	ldr	r3, [r5, #20]
 8008a28:	b913      	cbnz	r3, 8008a30 <_strtod_l+0x7d0>
 8008a2a:	692b      	ldr	r3, [r5, #16]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	dd73      	ble.n	8008b18 <_strtod_l+0x8b8>
 8008a30:	4629      	mov	r1, r5
 8008a32:	2201      	movs	r2, #1
 8008a34:	4620      	mov	r0, r4
 8008a36:	f002 fd81 	bl	800b53c <__lshift>
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	f002 fde9 	bl	800b614 <__mcmp>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	dd68      	ble.n	8008b18 <_strtod_l+0x8b8>
 8008a46:	9904      	ldr	r1, [sp, #16]
 8008a48:	4a54      	ldr	r2, [pc, #336]	; (8008b9c <_strtod_l+0x93c>)
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	2900      	cmp	r1, #0
 8008a4e:	f000 8084 	beq.w	8008b5a <_strtod_l+0x8fa>
 8008a52:	ea02 0109 	and.w	r1, r2, r9
 8008a56:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008a5a:	dc7e      	bgt.n	8008b5a <_strtod_l+0x8fa>
 8008a5c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008a60:	f77f aeb3 	ble.w	80087ca <_strtod_l+0x56a>
 8008a64:	4b4e      	ldr	r3, [pc, #312]	; (8008ba0 <_strtod_l+0x940>)
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	4b4a      	ldr	r3, [pc, #296]	; (8008b9c <_strtod_l+0x93c>)
 8008a72:	400b      	ands	r3, r1
 8008a74:	4680      	mov	r8, r0
 8008a76:	4689      	mov	r9, r1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f47f ae3f 	bne.w	80086fc <_strtod_l+0x49c>
 8008a7e:	2322      	movs	r3, #34	; 0x22
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	e63b      	b.n	80086fc <_strtod_l+0x49c>
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	ea03 0808 	and.w	r8, r3, r8
 8008a90:	e6e8      	b.n	8008864 <_strtod_l+0x604>
 8008a92:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008a96:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008a9a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008a9e:	36e2      	adds	r6, #226	; 0xe2
 8008aa0:	fa01 f306 	lsl.w	r3, r1, r6
 8008aa4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008aa8:	e748      	b.n	800893c <_strtod_l+0x6dc>
 8008aaa:	2100      	movs	r1, #0
 8008aac:	2301      	movs	r3, #1
 8008aae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008ab2:	e743      	b.n	800893c <_strtod_l+0x6dc>
 8008ab4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f002 fd3f 	bl	800b53c <__lshift>
 8008abe:	9016      	str	r0, [sp, #88]	; 0x58
 8008ac0:	2800      	cmp	r0, #0
 8008ac2:	f47f af6b 	bne.w	800899c <_strtod_l+0x73c>
 8008ac6:	e60f      	b.n	80086e8 <_strtod_l+0x488>
 8008ac8:	46ca      	mov	sl, r9
 8008aca:	d171      	bne.n	8008bb0 <_strtod_l+0x950>
 8008acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ad2:	b352      	cbz	r2, 8008b2a <_strtod_l+0x8ca>
 8008ad4:	4a33      	ldr	r2, [pc, #204]	; (8008ba4 <_strtod_l+0x944>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d12a      	bne.n	8008b30 <_strtod_l+0x8d0>
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	4641      	mov	r1, r8
 8008ade:	b1fb      	cbz	r3, 8008b20 <_strtod_l+0x8c0>
 8008ae0:	4b2e      	ldr	r3, [pc, #184]	; (8008b9c <_strtod_l+0x93c>)
 8008ae2:	ea09 0303 	and.w	r3, r9, r3
 8008ae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aea:	f04f 32ff 	mov.w	r2, #4294967295
 8008aee:	d81a      	bhi.n	8008b26 <_strtod_l+0x8c6>
 8008af0:	0d1b      	lsrs	r3, r3, #20
 8008af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d118      	bne.n	8008b30 <_strtod_l+0x8d0>
 8008afe:	4b2a      	ldr	r3, [pc, #168]	; (8008ba8 <_strtod_l+0x948>)
 8008b00:	459a      	cmp	sl, r3
 8008b02:	d102      	bne.n	8008b0a <_strtod_l+0x8aa>
 8008b04:	3101      	adds	r1, #1
 8008b06:	f43f adef 	beq.w	80086e8 <_strtod_l+0x488>
 8008b0a:	4b24      	ldr	r3, [pc, #144]	; (8008b9c <_strtod_l+0x93c>)
 8008b0c:	ea0a 0303 	and.w	r3, sl, r3
 8008b10:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008b14:	f04f 0800 	mov.w	r8, #0
 8008b18:	9b04      	ldr	r3, [sp, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1a2      	bne.n	8008a64 <_strtod_l+0x804>
 8008b1e:	e5ed      	b.n	80086fc <_strtod_l+0x49c>
 8008b20:	f04f 33ff 	mov.w	r3, #4294967295
 8008b24:	e7e9      	b.n	8008afa <_strtod_l+0x89a>
 8008b26:	4613      	mov	r3, r2
 8008b28:	e7e7      	b.n	8008afa <_strtod_l+0x89a>
 8008b2a:	ea53 0308 	orrs.w	r3, r3, r8
 8008b2e:	d08a      	beq.n	8008a46 <_strtod_l+0x7e6>
 8008b30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b32:	b1e3      	cbz	r3, 8008b6e <_strtod_l+0x90e>
 8008b34:	ea13 0f0a 	tst.w	r3, sl
 8008b38:	d0ee      	beq.n	8008b18 <_strtod_l+0x8b8>
 8008b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3c:	9a04      	ldr	r2, [sp, #16]
 8008b3e:	4640      	mov	r0, r8
 8008b40:	4649      	mov	r1, r9
 8008b42:	b1c3      	cbz	r3, 8008b76 <_strtod_l+0x916>
 8008b44:	f7ff fb70 	bl	8008228 <sulp>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	ec51 0b18 	vmov	r0, r1, d8
 8008b50:	f7f7 fb9c 	bl	800028c <__adddf3>
 8008b54:	4680      	mov	r8, r0
 8008b56:	4689      	mov	r9, r1
 8008b58:	e7de      	b.n	8008b18 <_strtod_l+0x8b8>
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008b60:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008b64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008b68:	f04f 38ff 	mov.w	r8, #4294967295
 8008b6c:	e7d4      	b.n	8008b18 <_strtod_l+0x8b8>
 8008b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b70:	ea13 0f08 	tst.w	r3, r8
 8008b74:	e7e0      	b.n	8008b38 <_strtod_l+0x8d8>
 8008b76:	f7ff fb57 	bl	8008228 <sulp>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	ec51 0b18 	vmov	r0, r1, d8
 8008b82:	f7f7 fb81 	bl	8000288 <__aeabi_dsub>
 8008b86:	2200      	movs	r2, #0
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4680      	mov	r8, r0
 8008b8c:	4689      	mov	r9, r1
 8008b8e:	f7f7 ff9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d0c0      	beq.n	8008b18 <_strtod_l+0x8b8>
 8008b96:	e618      	b.n	80087ca <_strtod_l+0x56a>
 8008b98:	fffffc02 	.word	0xfffffc02
 8008b9c:	7ff00000 	.word	0x7ff00000
 8008ba0:	39500000 	.word	0x39500000
 8008ba4:	000fffff 	.word	0x000fffff
 8008ba8:	7fefffff 	.word	0x7fefffff
 8008bac:	0800c528 	.word	0x0800c528
 8008bb0:	4659      	mov	r1, fp
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f002 fe9e 	bl	800b8f4 <__ratio>
 8008bb8:	ec57 6b10 	vmov	r6, r7, d0
 8008bbc:	ee10 0a10 	vmov	r0, s0
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	f7f7 ff92 	bl	8000af0 <__aeabi_dcmple>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d071      	beq.n	8008cb4 <_strtod_l+0xa54>
 8008bd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d17c      	bne.n	8008cd0 <_strtod_l+0xa70>
 8008bd6:	f1b8 0f00 	cmp.w	r8, #0
 8008bda:	d15a      	bne.n	8008c92 <_strtod_l+0xa32>
 8008bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d15d      	bne.n	8008ca0 <_strtod_l+0xa40>
 8008be4:	4b90      	ldr	r3, [pc, #576]	; (8008e28 <_strtod_l+0xbc8>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	4630      	mov	r0, r6
 8008bea:	4639      	mov	r1, r7
 8008bec:	f7f7 ff76 	bl	8000adc <__aeabi_dcmplt>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	d15c      	bne.n	8008cae <_strtod_l+0xa4e>
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	4b8c      	ldr	r3, [pc, #560]	; (8008e2c <_strtod_l+0xbcc>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	f7f7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8008c00:	4606      	mov	r6, r0
 8008c02:	460f      	mov	r7, r1
 8008c04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008c08:	9606      	str	r6, [sp, #24]
 8008c0a:	9307      	str	r3, [sp, #28]
 8008c0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008c14:	4b86      	ldr	r3, [pc, #536]	; (8008e30 <_strtod_l+0xbd0>)
 8008c16:	ea0a 0303 	and.w	r3, sl, r3
 8008c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c1e:	4b85      	ldr	r3, [pc, #532]	; (8008e34 <_strtod_l+0xbd4>)
 8008c20:	429a      	cmp	r2, r3
 8008c22:	f040 8090 	bne.w	8008d46 <_strtod_l+0xae6>
 8008c26:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008c2a:	ec49 8b10 	vmov	d0, r8, r9
 8008c2e:	f002 fd97 	bl	800b760 <__ulp>
 8008c32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c36:	ec51 0b10 	vmov	r0, r1, d0
 8008c3a:	f7f7 fcdd 	bl	80005f8 <__aeabi_dmul>
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	f7f7 fb23 	bl	800028c <__adddf3>
 8008c46:	460b      	mov	r3, r1
 8008c48:	4979      	ldr	r1, [pc, #484]	; (8008e30 <_strtod_l+0xbd0>)
 8008c4a:	4a7b      	ldr	r2, [pc, #492]	; (8008e38 <_strtod_l+0xbd8>)
 8008c4c:	4019      	ands	r1, r3
 8008c4e:	4291      	cmp	r1, r2
 8008c50:	4680      	mov	r8, r0
 8008c52:	d944      	bls.n	8008cde <_strtod_l+0xa7e>
 8008c54:	ee18 2a90 	vmov	r2, s17
 8008c58:	4b78      	ldr	r3, [pc, #480]	; (8008e3c <_strtod_l+0xbdc>)
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d104      	bne.n	8008c68 <_strtod_l+0xa08>
 8008c5e:	ee18 3a10 	vmov	r3, s16
 8008c62:	3301      	adds	r3, #1
 8008c64:	f43f ad40 	beq.w	80086e8 <_strtod_l+0x488>
 8008c68:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008e3c <_strtod_l+0xbdc>
 8008c6c:	f04f 38ff 	mov.w	r8, #4294967295
 8008c70:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c72:	4620      	mov	r0, r4
 8008c74:	f002 fa48 	bl	800b108 <_Bfree>
 8008c78:	9905      	ldr	r1, [sp, #20]
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f002 fa44 	bl	800b108 <_Bfree>
 8008c80:	4659      	mov	r1, fp
 8008c82:	4620      	mov	r0, r4
 8008c84:	f002 fa40 	bl	800b108 <_Bfree>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f002 fa3c 	bl	800b108 <_Bfree>
 8008c90:	e609      	b.n	80088a6 <_strtod_l+0x646>
 8008c92:	f1b8 0f01 	cmp.w	r8, #1
 8008c96:	d103      	bne.n	8008ca0 <_strtod_l+0xa40>
 8008c98:	f1b9 0f00 	cmp.w	r9, #0
 8008c9c:	f43f ad95 	beq.w	80087ca <_strtod_l+0x56a>
 8008ca0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008df8 <_strtod_l+0xb98>
 8008ca4:	4f60      	ldr	r7, [pc, #384]	; (8008e28 <_strtod_l+0xbc8>)
 8008ca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008caa:	2600      	movs	r6, #0
 8008cac:	e7ae      	b.n	8008c0c <_strtod_l+0x9ac>
 8008cae:	4f5f      	ldr	r7, [pc, #380]	; (8008e2c <_strtod_l+0xbcc>)
 8008cb0:	2600      	movs	r6, #0
 8008cb2:	e7a7      	b.n	8008c04 <_strtod_l+0x9a4>
 8008cb4:	4b5d      	ldr	r3, [pc, #372]	; (8008e2c <_strtod_l+0xbcc>)
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	4639      	mov	r1, r7
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f7f7 fc9c 	bl	80005f8 <__aeabi_dmul>
 8008cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d09c      	beq.n	8008c04 <_strtod_l+0x9a4>
 8008cca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008cce:	e79d      	b.n	8008c0c <_strtod_l+0x9ac>
 8008cd0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008e00 <_strtod_l+0xba0>
 8008cd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008cd8:	ec57 6b17 	vmov	r6, r7, d7
 8008cdc:	e796      	b.n	8008c0c <_strtod_l+0x9ac>
 8008cde:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008ce2:	9b04      	ldr	r3, [sp, #16]
 8008ce4:	46ca      	mov	sl, r9
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1c2      	bne.n	8008c70 <_strtod_l+0xa10>
 8008cea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cf0:	0d1b      	lsrs	r3, r3, #20
 8008cf2:	051b      	lsls	r3, r3, #20
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d1bb      	bne.n	8008c70 <_strtod_l+0xa10>
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	f7f7 ffdc 	bl	8000cb8 <__aeabi_d2lz>
 8008d00:	f7f7 fc4c 	bl	800059c <__aeabi_l2d>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4630      	mov	r0, r6
 8008d0a:	4639      	mov	r1, r7
 8008d0c:	f7f7 fabc 	bl	8000288 <__aeabi_dsub>
 8008d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d12:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d16:	ea43 0308 	orr.w	r3, r3, r8
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	d054      	beq.n	8008dcc <_strtod_l+0xb6c>
 8008d22:	a339      	add	r3, pc, #228	; (adr r3, 8008e08 <_strtod_l+0xba8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fed8 	bl	8000adc <__aeabi_dcmplt>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f47f ace5 	bne.w	80086fc <_strtod_l+0x49c>
 8008d32:	a337      	add	r3, pc, #220	; (adr r3, 8008e10 <_strtod_l+0xbb0>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	4630      	mov	r0, r6
 8008d3a:	4639      	mov	r1, r7
 8008d3c:	f7f7 feec 	bl	8000b18 <__aeabi_dcmpgt>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d095      	beq.n	8008c70 <_strtod_l+0xa10>
 8008d44:	e4da      	b.n	80086fc <_strtod_l+0x49c>
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	b333      	cbz	r3, 8008d98 <_strtod_l+0xb38>
 8008d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d4c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008d50:	d822      	bhi.n	8008d98 <_strtod_l+0xb38>
 8008d52:	a331      	add	r3, pc, #196	; (adr r3, 8008e18 <_strtod_l+0xbb8>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	4630      	mov	r0, r6
 8008d5a:	4639      	mov	r1, r7
 8008d5c:	f7f7 fec8 	bl	8000af0 <__aeabi_dcmple>
 8008d60:	b1a0      	cbz	r0, 8008d8c <_strtod_l+0xb2c>
 8008d62:	4639      	mov	r1, r7
 8008d64:	4630      	mov	r0, r6
 8008d66:	f7f7 ff1f 	bl	8000ba8 <__aeabi_d2uiz>
 8008d6a:	2801      	cmp	r0, #1
 8008d6c:	bf38      	it	cc
 8008d6e:	2001      	movcc	r0, #1
 8008d70:	f7f7 fbc8 	bl	8000504 <__aeabi_ui2d>
 8008d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	bb23      	cbnz	r3, 8008dc6 <_strtod_l+0xb66>
 8008d7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d80:	9010      	str	r0, [sp, #64]	; 0x40
 8008d82:	9311      	str	r3, [sp, #68]	; 0x44
 8008d84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008d88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d90:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d9c:	eeb0 0a48 	vmov.f32	s0, s16
 8008da0:	eef0 0a68 	vmov.f32	s1, s17
 8008da4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008da8:	f002 fcda 	bl	800b760 <__ulp>
 8008dac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008db0:	ec53 2b10 	vmov	r2, r3, d0
 8008db4:	f7f7 fc20 	bl	80005f8 <__aeabi_dmul>
 8008db8:	ec53 2b18 	vmov	r2, r3, d8
 8008dbc:	f7f7 fa66 	bl	800028c <__adddf3>
 8008dc0:	4680      	mov	r8, r0
 8008dc2:	4689      	mov	r9, r1
 8008dc4:	e78d      	b.n	8008ce2 <_strtod_l+0xa82>
 8008dc6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008dca:	e7db      	b.n	8008d84 <_strtod_l+0xb24>
 8008dcc:	a314      	add	r3, pc, #80	; (adr r3, 8008e20 <_strtod_l+0xbc0>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fe83 	bl	8000adc <__aeabi_dcmplt>
 8008dd6:	e7b3      	b.n	8008d40 <_strtod_l+0xae0>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	930a      	str	r3, [sp, #40]	; 0x28
 8008ddc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008dde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008de0:	6013      	str	r3, [r2, #0]
 8008de2:	f7ff ba7c 	b.w	80082de <_strtod_l+0x7e>
 8008de6:	2a65      	cmp	r2, #101	; 0x65
 8008de8:	f43f ab75 	beq.w	80084d6 <_strtod_l+0x276>
 8008dec:	2a45      	cmp	r2, #69	; 0x45
 8008dee:	f43f ab72 	beq.w	80084d6 <_strtod_l+0x276>
 8008df2:	2301      	movs	r3, #1
 8008df4:	f7ff bbaa 	b.w	800854c <_strtod_l+0x2ec>
 8008df8:	00000000 	.word	0x00000000
 8008dfc:	bff00000 	.word	0xbff00000
 8008e00:	00000000 	.word	0x00000000
 8008e04:	3ff00000 	.word	0x3ff00000
 8008e08:	94a03595 	.word	0x94a03595
 8008e0c:	3fdfffff 	.word	0x3fdfffff
 8008e10:	35afe535 	.word	0x35afe535
 8008e14:	3fe00000 	.word	0x3fe00000
 8008e18:	ffc00000 	.word	0xffc00000
 8008e1c:	41dfffff 	.word	0x41dfffff
 8008e20:	94a03595 	.word	0x94a03595
 8008e24:	3fcfffff 	.word	0x3fcfffff
 8008e28:	3ff00000 	.word	0x3ff00000
 8008e2c:	3fe00000 	.word	0x3fe00000
 8008e30:	7ff00000 	.word	0x7ff00000
 8008e34:	7fe00000 	.word	0x7fe00000
 8008e38:	7c9fffff 	.word	0x7c9fffff
 8008e3c:	7fefffff 	.word	0x7fefffff

08008e40 <strtod>:
 8008e40:	460a      	mov	r2, r1
 8008e42:	4601      	mov	r1, r0
 8008e44:	4802      	ldr	r0, [pc, #8]	; (8008e50 <strtod+0x10>)
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <strtod+0x14>)
 8008e48:	6800      	ldr	r0, [r0, #0]
 8008e4a:	f7ff ba09 	b.w	8008260 <_strtod_l>
 8008e4e:	bf00      	nop
 8008e50:	200001d0 	.word	0x200001d0
 8008e54:	20000018 	.word	0x20000018

08008e58 <__cvt>:
 8008e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	ec55 4b10 	vmov	r4, r5, d0
 8008e60:	2d00      	cmp	r5, #0
 8008e62:	460e      	mov	r6, r1
 8008e64:	4619      	mov	r1, r3
 8008e66:	462b      	mov	r3, r5
 8008e68:	bfbb      	ittet	lt
 8008e6a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008e6e:	461d      	movlt	r5, r3
 8008e70:	2300      	movge	r3, #0
 8008e72:	232d      	movlt	r3, #45	; 0x2d
 8008e74:	700b      	strb	r3, [r1, #0]
 8008e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e78:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008e7c:	4691      	mov	r9, r2
 8008e7e:	f023 0820 	bic.w	r8, r3, #32
 8008e82:	bfbc      	itt	lt
 8008e84:	4622      	movlt	r2, r4
 8008e86:	4614      	movlt	r4, r2
 8008e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e8c:	d005      	beq.n	8008e9a <__cvt+0x42>
 8008e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e92:	d100      	bne.n	8008e96 <__cvt+0x3e>
 8008e94:	3601      	adds	r6, #1
 8008e96:	2102      	movs	r1, #2
 8008e98:	e000      	b.n	8008e9c <__cvt+0x44>
 8008e9a:	2103      	movs	r1, #3
 8008e9c:	ab03      	add	r3, sp, #12
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	ab02      	add	r3, sp, #8
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	ec45 4b10 	vmov	d0, r4, r5
 8008ea8:	4653      	mov	r3, sl
 8008eaa:	4632      	mov	r2, r6
 8008eac:	f000 fe90 	bl	8009bd0 <_dtoa_r>
 8008eb0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008eb4:	4607      	mov	r7, r0
 8008eb6:	d102      	bne.n	8008ebe <__cvt+0x66>
 8008eb8:	f019 0f01 	tst.w	r9, #1
 8008ebc:	d022      	beq.n	8008f04 <__cvt+0xac>
 8008ebe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ec2:	eb07 0906 	add.w	r9, r7, r6
 8008ec6:	d110      	bne.n	8008eea <__cvt+0x92>
 8008ec8:	783b      	ldrb	r3, [r7, #0]
 8008eca:	2b30      	cmp	r3, #48	; 0x30
 8008ecc:	d10a      	bne.n	8008ee4 <__cvt+0x8c>
 8008ece:	2200      	movs	r2, #0
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	f7f7 fdf7 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eda:	b918      	cbnz	r0, 8008ee4 <__cvt+0x8c>
 8008edc:	f1c6 0601 	rsb	r6, r6, #1
 8008ee0:	f8ca 6000 	str.w	r6, [sl]
 8008ee4:	f8da 3000 	ldr.w	r3, [sl]
 8008ee8:	4499      	add	r9, r3
 8008eea:	2200      	movs	r2, #0
 8008eec:	2300      	movs	r3, #0
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ef6:	b108      	cbz	r0, 8008efc <__cvt+0xa4>
 8008ef8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008efc:	2230      	movs	r2, #48	; 0x30
 8008efe:	9b03      	ldr	r3, [sp, #12]
 8008f00:	454b      	cmp	r3, r9
 8008f02:	d307      	bcc.n	8008f14 <__cvt+0xbc>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f08:	1bdb      	subs	r3, r3, r7
 8008f0a:	4638      	mov	r0, r7
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	b004      	add	sp, #16
 8008f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f14:	1c59      	adds	r1, r3, #1
 8008f16:	9103      	str	r1, [sp, #12]
 8008f18:	701a      	strb	r2, [r3, #0]
 8008f1a:	e7f0      	b.n	8008efe <__cvt+0xa6>

08008f1c <__exponent>:
 8008f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2900      	cmp	r1, #0
 8008f22:	bfb8      	it	lt
 8008f24:	4249      	neglt	r1, r1
 8008f26:	f803 2b02 	strb.w	r2, [r3], #2
 8008f2a:	bfb4      	ite	lt
 8008f2c:	222d      	movlt	r2, #45	; 0x2d
 8008f2e:	222b      	movge	r2, #43	; 0x2b
 8008f30:	2909      	cmp	r1, #9
 8008f32:	7042      	strb	r2, [r0, #1]
 8008f34:	dd2a      	ble.n	8008f8c <__exponent+0x70>
 8008f36:	f10d 0207 	add.w	r2, sp, #7
 8008f3a:	4617      	mov	r7, r2
 8008f3c:	260a      	movs	r6, #10
 8008f3e:	4694      	mov	ip, r2
 8008f40:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f44:	fb06 1415 	mls	r4, r6, r5, r1
 8008f48:	3430      	adds	r4, #48	; 0x30
 8008f4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f4e:	460c      	mov	r4, r1
 8008f50:	2c63      	cmp	r4, #99	; 0x63
 8008f52:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f56:	4629      	mov	r1, r5
 8008f58:	dcf1      	bgt.n	8008f3e <__exponent+0x22>
 8008f5a:	3130      	adds	r1, #48	; 0x30
 8008f5c:	f1ac 0402 	sub.w	r4, ip, #2
 8008f60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f64:	1c41      	adds	r1, r0, #1
 8008f66:	4622      	mov	r2, r4
 8008f68:	42ba      	cmp	r2, r7
 8008f6a:	d30a      	bcc.n	8008f82 <__exponent+0x66>
 8008f6c:	f10d 0209 	add.w	r2, sp, #9
 8008f70:	eba2 020c 	sub.w	r2, r2, ip
 8008f74:	42bc      	cmp	r4, r7
 8008f76:	bf88      	it	hi
 8008f78:	2200      	movhi	r2, #0
 8008f7a:	4413      	add	r3, r2
 8008f7c:	1a18      	subs	r0, r3, r0
 8008f7e:	b003      	add	sp, #12
 8008f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f8a:	e7ed      	b.n	8008f68 <__exponent+0x4c>
 8008f8c:	2330      	movs	r3, #48	; 0x30
 8008f8e:	3130      	adds	r1, #48	; 0x30
 8008f90:	7083      	strb	r3, [r0, #2]
 8008f92:	70c1      	strb	r1, [r0, #3]
 8008f94:	1d03      	adds	r3, r0, #4
 8008f96:	e7f1      	b.n	8008f7c <__exponent+0x60>

08008f98 <_printf_float>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	ed2d 8b02 	vpush	{d8}
 8008fa0:	b08d      	sub	sp, #52	; 0x34
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fa8:	4616      	mov	r6, r2
 8008faa:	461f      	mov	r7, r3
 8008fac:	4605      	mov	r5, r0
 8008fae:	f000 fcf9 	bl	80099a4 <_localeconv_r>
 8008fb2:	f8d0 a000 	ldr.w	sl, [r0]
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	f7f7 f95a 	bl	8000270 <strlen>
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc0:	6823      	ldr	r3, [r4, #0]
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008fcc:	3307      	adds	r3, #7
 8008fce:	f023 0307 	bic.w	r3, r3, #7
 8008fd2:	f103 0208 	add.w	r2, r3, #8
 8008fd6:	f8c8 2000 	str.w	r2, [r8]
 8008fda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008fe2:	9307      	str	r3, [sp, #28]
 8008fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fe8:	ee08 0a10 	vmov	s16, r0
 8008fec:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff4:	4b9e      	ldr	r3, [pc, #632]	; (8009270 <_printf_float+0x2d8>)
 8008ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffa:	f7f7 fd97 	bl	8000b2c <__aeabi_dcmpun>
 8008ffe:	bb88      	cbnz	r0, 8009064 <_printf_float+0xcc>
 8009000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009004:	4b9a      	ldr	r3, [pc, #616]	; (8009270 <_printf_float+0x2d8>)
 8009006:	f04f 32ff 	mov.w	r2, #4294967295
 800900a:	f7f7 fd71 	bl	8000af0 <__aeabi_dcmple>
 800900e:	bb48      	cbnz	r0, 8009064 <_printf_float+0xcc>
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	4640      	mov	r0, r8
 8009016:	4649      	mov	r1, r9
 8009018:	f7f7 fd60 	bl	8000adc <__aeabi_dcmplt>
 800901c:	b110      	cbz	r0, 8009024 <_printf_float+0x8c>
 800901e:	232d      	movs	r3, #45	; 0x2d
 8009020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009024:	4a93      	ldr	r2, [pc, #588]	; (8009274 <_printf_float+0x2dc>)
 8009026:	4b94      	ldr	r3, [pc, #592]	; (8009278 <_printf_float+0x2e0>)
 8009028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800902c:	bf94      	ite	ls
 800902e:	4690      	movls	r8, r2
 8009030:	4698      	movhi	r8, r3
 8009032:	2303      	movs	r3, #3
 8009034:	6123      	str	r3, [r4, #16]
 8009036:	9b05      	ldr	r3, [sp, #20]
 8009038:	f023 0304 	bic.w	r3, r3, #4
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	f04f 0900 	mov.w	r9, #0
 8009042:	9700      	str	r7, [sp, #0]
 8009044:	4633      	mov	r3, r6
 8009046:	aa0b      	add	r2, sp, #44	; 0x2c
 8009048:	4621      	mov	r1, r4
 800904a:	4628      	mov	r0, r5
 800904c:	f000 f9da 	bl	8009404 <_printf_common>
 8009050:	3001      	adds	r0, #1
 8009052:	f040 8090 	bne.w	8009176 <_printf_float+0x1de>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	b00d      	add	sp, #52	; 0x34
 800905c:	ecbd 8b02 	vpop	{d8}
 8009060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009064:	4642      	mov	r2, r8
 8009066:	464b      	mov	r3, r9
 8009068:	4640      	mov	r0, r8
 800906a:	4649      	mov	r1, r9
 800906c:	f7f7 fd5e 	bl	8000b2c <__aeabi_dcmpun>
 8009070:	b140      	cbz	r0, 8009084 <_printf_float+0xec>
 8009072:	464b      	mov	r3, r9
 8009074:	2b00      	cmp	r3, #0
 8009076:	bfbc      	itt	lt
 8009078:	232d      	movlt	r3, #45	; 0x2d
 800907a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800907e:	4a7f      	ldr	r2, [pc, #508]	; (800927c <_printf_float+0x2e4>)
 8009080:	4b7f      	ldr	r3, [pc, #508]	; (8009280 <_printf_float+0x2e8>)
 8009082:	e7d1      	b.n	8009028 <_printf_float+0x90>
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800908a:	9206      	str	r2, [sp, #24]
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	d13f      	bne.n	8009110 <_printf_float+0x178>
 8009090:	2306      	movs	r3, #6
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	9b05      	ldr	r3, [sp, #20]
 8009096:	6861      	ldr	r1, [r4, #4]
 8009098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800909c:	2300      	movs	r3, #0
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	ab0a      	add	r3, sp, #40	; 0x28
 80090a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090a6:	ab09      	add	r3, sp, #36	; 0x24
 80090a8:	ec49 8b10 	vmov	d0, r8, r9
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	6022      	str	r2, [r4, #0]
 80090b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090b4:	4628      	mov	r0, r5
 80090b6:	f7ff fecf 	bl	8008e58 <__cvt>
 80090ba:	9b06      	ldr	r3, [sp, #24]
 80090bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090be:	2b47      	cmp	r3, #71	; 0x47
 80090c0:	4680      	mov	r8, r0
 80090c2:	d108      	bne.n	80090d6 <_printf_float+0x13e>
 80090c4:	1cc8      	adds	r0, r1, #3
 80090c6:	db02      	blt.n	80090ce <_printf_float+0x136>
 80090c8:	6863      	ldr	r3, [r4, #4]
 80090ca:	4299      	cmp	r1, r3
 80090cc:	dd41      	ble.n	8009152 <_printf_float+0x1ba>
 80090ce:	f1ab 0302 	sub.w	r3, fp, #2
 80090d2:	fa5f fb83 	uxtb.w	fp, r3
 80090d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090da:	d820      	bhi.n	800911e <_printf_float+0x186>
 80090dc:	3901      	subs	r1, #1
 80090de:	465a      	mov	r2, fp
 80090e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090e4:	9109      	str	r1, [sp, #36]	; 0x24
 80090e6:	f7ff ff19 	bl	8008f1c <__exponent>
 80090ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090ec:	1813      	adds	r3, r2, r0
 80090ee:	2a01      	cmp	r2, #1
 80090f0:	4681      	mov	r9, r0
 80090f2:	6123      	str	r3, [r4, #16]
 80090f4:	dc02      	bgt.n	80090fc <_printf_float+0x164>
 80090f6:	6822      	ldr	r2, [r4, #0]
 80090f8:	07d2      	lsls	r2, r2, #31
 80090fa:	d501      	bpl.n	8009100 <_printf_float+0x168>
 80090fc:	3301      	adds	r3, #1
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009104:	2b00      	cmp	r3, #0
 8009106:	d09c      	beq.n	8009042 <_printf_float+0xaa>
 8009108:	232d      	movs	r3, #45	; 0x2d
 800910a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800910e:	e798      	b.n	8009042 <_printf_float+0xaa>
 8009110:	9a06      	ldr	r2, [sp, #24]
 8009112:	2a47      	cmp	r2, #71	; 0x47
 8009114:	d1be      	bne.n	8009094 <_printf_float+0xfc>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1bc      	bne.n	8009094 <_printf_float+0xfc>
 800911a:	2301      	movs	r3, #1
 800911c:	e7b9      	b.n	8009092 <_printf_float+0xfa>
 800911e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009122:	d118      	bne.n	8009156 <_printf_float+0x1be>
 8009124:	2900      	cmp	r1, #0
 8009126:	6863      	ldr	r3, [r4, #4]
 8009128:	dd0b      	ble.n	8009142 <_printf_float+0x1aa>
 800912a:	6121      	str	r1, [r4, #16]
 800912c:	b913      	cbnz	r3, 8009134 <_printf_float+0x19c>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	07d0      	lsls	r0, r2, #31
 8009132:	d502      	bpl.n	800913a <_printf_float+0x1a2>
 8009134:	3301      	adds	r3, #1
 8009136:	440b      	add	r3, r1
 8009138:	6123      	str	r3, [r4, #16]
 800913a:	65a1      	str	r1, [r4, #88]	; 0x58
 800913c:	f04f 0900 	mov.w	r9, #0
 8009140:	e7de      	b.n	8009100 <_printf_float+0x168>
 8009142:	b913      	cbnz	r3, 800914a <_printf_float+0x1b2>
 8009144:	6822      	ldr	r2, [r4, #0]
 8009146:	07d2      	lsls	r2, r2, #31
 8009148:	d501      	bpl.n	800914e <_printf_float+0x1b6>
 800914a:	3302      	adds	r3, #2
 800914c:	e7f4      	b.n	8009138 <_printf_float+0x1a0>
 800914e:	2301      	movs	r3, #1
 8009150:	e7f2      	b.n	8009138 <_printf_float+0x1a0>
 8009152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009158:	4299      	cmp	r1, r3
 800915a:	db05      	blt.n	8009168 <_printf_float+0x1d0>
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	6121      	str	r1, [r4, #16]
 8009160:	07d8      	lsls	r0, r3, #31
 8009162:	d5ea      	bpl.n	800913a <_printf_float+0x1a2>
 8009164:	1c4b      	adds	r3, r1, #1
 8009166:	e7e7      	b.n	8009138 <_printf_float+0x1a0>
 8009168:	2900      	cmp	r1, #0
 800916a:	bfd4      	ite	le
 800916c:	f1c1 0202 	rsble	r2, r1, #2
 8009170:	2201      	movgt	r2, #1
 8009172:	4413      	add	r3, r2
 8009174:	e7e0      	b.n	8009138 <_printf_float+0x1a0>
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	055a      	lsls	r2, r3, #21
 800917a:	d407      	bmi.n	800918c <_printf_float+0x1f4>
 800917c:	6923      	ldr	r3, [r4, #16]
 800917e:	4642      	mov	r2, r8
 8009180:	4631      	mov	r1, r6
 8009182:	4628      	mov	r0, r5
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	d12c      	bne.n	80091e4 <_printf_float+0x24c>
 800918a:	e764      	b.n	8009056 <_printf_float+0xbe>
 800918c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009190:	f240 80e0 	bls.w	8009354 <_printf_float+0x3bc>
 8009194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009198:	2200      	movs	r2, #0
 800919a:	2300      	movs	r3, #0
 800919c:	f7f7 fc94 	bl	8000ac8 <__aeabi_dcmpeq>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d034      	beq.n	800920e <_printf_float+0x276>
 80091a4:	4a37      	ldr	r2, [pc, #220]	; (8009284 <_printf_float+0x2ec>)
 80091a6:	2301      	movs	r3, #1
 80091a8:	4631      	mov	r1, r6
 80091aa:	4628      	mov	r0, r5
 80091ac:	47b8      	blx	r7
 80091ae:	3001      	adds	r0, #1
 80091b0:	f43f af51 	beq.w	8009056 <_printf_float+0xbe>
 80091b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091b8:	429a      	cmp	r2, r3
 80091ba:	db02      	blt.n	80091c2 <_printf_float+0x22a>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	07d8      	lsls	r0, r3, #31
 80091c0:	d510      	bpl.n	80091e4 <_printf_float+0x24c>
 80091c2:	ee18 3a10 	vmov	r3, s16
 80091c6:	4652      	mov	r2, sl
 80091c8:	4631      	mov	r1, r6
 80091ca:	4628      	mov	r0, r5
 80091cc:	47b8      	blx	r7
 80091ce:	3001      	adds	r0, #1
 80091d0:	f43f af41 	beq.w	8009056 <_printf_float+0xbe>
 80091d4:	f04f 0800 	mov.w	r8, #0
 80091d8:	f104 091a 	add.w	r9, r4, #26
 80091dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091de:	3b01      	subs	r3, #1
 80091e0:	4543      	cmp	r3, r8
 80091e2:	dc09      	bgt.n	80091f8 <_printf_float+0x260>
 80091e4:	6823      	ldr	r3, [r4, #0]
 80091e6:	079b      	lsls	r3, r3, #30
 80091e8:	f100 8107 	bmi.w	80093fa <_printf_float+0x462>
 80091ec:	68e0      	ldr	r0, [r4, #12]
 80091ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091f0:	4298      	cmp	r0, r3
 80091f2:	bfb8      	it	lt
 80091f4:	4618      	movlt	r0, r3
 80091f6:	e730      	b.n	800905a <_printf_float+0xc2>
 80091f8:	2301      	movs	r3, #1
 80091fa:	464a      	mov	r2, r9
 80091fc:	4631      	mov	r1, r6
 80091fe:	4628      	mov	r0, r5
 8009200:	47b8      	blx	r7
 8009202:	3001      	adds	r0, #1
 8009204:	f43f af27 	beq.w	8009056 <_printf_float+0xbe>
 8009208:	f108 0801 	add.w	r8, r8, #1
 800920c:	e7e6      	b.n	80091dc <_printf_float+0x244>
 800920e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc39      	bgt.n	8009288 <_printf_float+0x2f0>
 8009214:	4a1b      	ldr	r2, [pc, #108]	; (8009284 <_printf_float+0x2ec>)
 8009216:	2301      	movs	r3, #1
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	f43f af19 	beq.w	8009056 <_printf_float+0xbe>
 8009224:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009228:	4313      	orrs	r3, r2
 800922a:	d102      	bne.n	8009232 <_printf_float+0x29a>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	07d9      	lsls	r1, r3, #31
 8009230:	d5d8      	bpl.n	80091e4 <_printf_float+0x24c>
 8009232:	ee18 3a10 	vmov	r3, s16
 8009236:	4652      	mov	r2, sl
 8009238:	4631      	mov	r1, r6
 800923a:	4628      	mov	r0, r5
 800923c:	47b8      	blx	r7
 800923e:	3001      	adds	r0, #1
 8009240:	f43f af09 	beq.w	8009056 <_printf_float+0xbe>
 8009244:	f04f 0900 	mov.w	r9, #0
 8009248:	f104 0a1a 	add.w	sl, r4, #26
 800924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924e:	425b      	negs	r3, r3
 8009250:	454b      	cmp	r3, r9
 8009252:	dc01      	bgt.n	8009258 <_printf_float+0x2c0>
 8009254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009256:	e792      	b.n	800917e <_printf_float+0x1e6>
 8009258:	2301      	movs	r3, #1
 800925a:	4652      	mov	r2, sl
 800925c:	4631      	mov	r1, r6
 800925e:	4628      	mov	r0, r5
 8009260:	47b8      	blx	r7
 8009262:	3001      	adds	r0, #1
 8009264:	f43f aef7 	beq.w	8009056 <_printf_float+0xbe>
 8009268:	f109 0901 	add.w	r9, r9, #1
 800926c:	e7ee      	b.n	800924c <_printf_float+0x2b4>
 800926e:	bf00      	nop
 8009270:	7fefffff 	.word	0x7fefffff
 8009274:	0800c550 	.word	0x0800c550
 8009278:	0800c554 	.word	0x0800c554
 800927c:	0800c558 	.word	0x0800c558
 8009280:	0800c55c 	.word	0x0800c55c
 8009284:	0800c560 	.word	0x0800c560
 8009288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800928a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800928c:	429a      	cmp	r2, r3
 800928e:	bfa8      	it	ge
 8009290:	461a      	movge	r2, r3
 8009292:	2a00      	cmp	r2, #0
 8009294:	4691      	mov	r9, r2
 8009296:	dc37      	bgt.n	8009308 <_printf_float+0x370>
 8009298:	f04f 0b00 	mov.w	fp, #0
 800929c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092a0:	f104 021a 	add.w	r2, r4, #26
 80092a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092a6:	9305      	str	r3, [sp, #20]
 80092a8:	eba3 0309 	sub.w	r3, r3, r9
 80092ac:	455b      	cmp	r3, fp
 80092ae:	dc33      	bgt.n	8009318 <_printf_float+0x380>
 80092b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092b4:	429a      	cmp	r2, r3
 80092b6:	db3b      	blt.n	8009330 <_printf_float+0x398>
 80092b8:	6823      	ldr	r3, [r4, #0]
 80092ba:	07da      	lsls	r2, r3, #31
 80092bc:	d438      	bmi.n	8009330 <_printf_float+0x398>
 80092be:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092c2:	eba2 0903 	sub.w	r9, r2, r3
 80092c6:	9b05      	ldr	r3, [sp, #20]
 80092c8:	1ad2      	subs	r2, r2, r3
 80092ca:	4591      	cmp	r9, r2
 80092cc:	bfa8      	it	ge
 80092ce:	4691      	movge	r9, r2
 80092d0:	f1b9 0f00 	cmp.w	r9, #0
 80092d4:	dc35      	bgt.n	8009342 <_printf_float+0x3aa>
 80092d6:	f04f 0800 	mov.w	r8, #0
 80092da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092de:	f104 0a1a 	add.w	sl, r4, #26
 80092e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092e6:	1a9b      	subs	r3, r3, r2
 80092e8:	eba3 0309 	sub.w	r3, r3, r9
 80092ec:	4543      	cmp	r3, r8
 80092ee:	f77f af79 	ble.w	80091e4 <_printf_float+0x24c>
 80092f2:	2301      	movs	r3, #1
 80092f4:	4652      	mov	r2, sl
 80092f6:	4631      	mov	r1, r6
 80092f8:	4628      	mov	r0, r5
 80092fa:	47b8      	blx	r7
 80092fc:	3001      	adds	r0, #1
 80092fe:	f43f aeaa 	beq.w	8009056 <_printf_float+0xbe>
 8009302:	f108 0801 	add.w	r8, r8, #1
 8009306:	e7ec      	b.n	80092e2 <_printf_float+0x34a>
 8009308:	4613      	mov	r3, r2
 800930a:	4631      	mov	r1, r6
 800930c:	4642      	mov	r2, r8
 800930e:	4628      	mov	r0, r5
 8009310:	47b8      	blx	r7
 8009312:	3001      	adds	r0, #1
 8009314:	d1c0      	bne.n	8009298 <_printf_float+0x300>
 8009316:	e69e      	b.n	8009056 <_printf_float+0xbe>
 8009318:	2301      	movs	r3, #1
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	9205      	str	r2, [sp, #20]
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f ae97 	beq.w	8009056 <_printf_float+0xbe>
 8009328:	9a05      	ldr	r2, [sp, #20]
 800932a:	f10b 0b01 	add.w	fp, fp, #1
 800932e:	e7b9      	b.n	80092a4 <_printf_float+0x30c>
 8009330:	ee18 3a10 	vmov	r3, s16
 8009334:	4652      	mov	r2, sl
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	d1be      	bne.n	80092be <_printf_float+0x326>
 8009340:	e689      	b.n	8009056 <_printf_float+0xbe>
 8009342:	9a05      	ldr	r2, [sp, #20]
 8009344:	464b      	mov	r3, r9
 8009346:	4442      	add	r2, r8
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	47b8      	blx	r7
 800934e:	3001      	adds	r0, #1
 8009350:	d1c1      	bne.n	80092d6 <_printf_float+0x33e>
 8009352:	e680      	b.n	8009056 <_printf_float+0xbe>
 8009354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009356:	2a01      	cmp	r2, #1
 8009358:	dc01      	bgt.n	800935e <_printf_float+0x3c6>
 800935a:	07db      	lsls	r3, r3, #31
 800935c:	d53a      	bpl.n	80093d4 <_printf_float+0x43c>
 800935e:	2301      	movs	r3, #1
 8009360:	4642      	mov	r2, r8
 8009362:	4631      	mov	r1, r6
 8009364:	4628      	mov	r0, r5
 8009366:	47b8      	blx	r7
 8009368:	3001      	adds	r0, #1
 800936a:	f43f ae74 	beq.w	8009056 <_printf_float+0xbe>
 800936e:	ee18 3a10 	vmov	r3, s16
 8009372:	4652      	mov	r2, sl
 8009374:	4631      	mov	r1, r6
 8009376:	4628      	mov	r0, r5
 8009378:	47b8      	blx	r7
 800937a:	3001      	adds	r0, #1
 800937c:	f43f ae6b 	beq.w	8009056 <_printf_float+0xbe>
 8009380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009384:	2200      	movs	r2, #0
 8009386:	2300      	movs	r3, #0
 8009388:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800938c:	f7f7 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009390:	b9d8      	cbnz	r0, 80093ca <_printf_float+0x432>
 8009392:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009396:	f108 0201 	add.w	r2, r8, #1
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	d10e      	bne.n	80093c2 <_printf_float+0x42a>
 80093a4:	e657      	b.n	8009056 <_printf_float+0xbe>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4652      	mov	r2, sl
 80093aa:	4631      	mov	r1, r6
 80093ac:	4628      	mov	r0, r5
 80093ae:	47b8      	blx	r7
 80093b0:	3001      	adds	r0, #1
 80093b2:	f43f ae50 	beq.w	8009056 <_printf_float+0xbe>
 80093b6:	f108 0801 	add.w	r8, r8, #1
 80093ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093bc:	3b01      	subs	r3, #1
 80093be:	4543      	cmp	r3, r8
 80093c0:	dcf1      	bgt.n	80093a6 <_printf_float+0x40e>
 80093c2:	464b      	mov	r3, r9
 80093c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80093c8:	e6da      	b.n	8009180 <_printf_float+0x1e8>
 80093ca:	f04f 0800 	mov.w	r8, #0
 80093ce:	f104 0a1a 	add.w	sl, r4, #26
 80093d2:	e7f2      	b.n	80093ba <_printf_float+0x422>
 80093d4:	2301      	movs	r3, #1
 80093d6:	4642      	mov	r2, r8
 80093d8:	e7df      	b.n	800939a <_printf_float+0x402>
 80093da:	2301      	movs	r3, #1
 80093dc:	464a      	mov	r2, r9
 80093de:	4631      	mov	r1, r6
 80093e0:	4628      	mov	r0, r5
 80093e2:	47b8      	blx	r7
 80093e4:	3001      	adds	r0, #1
 80093e6:	f43f ae36 	beq.w	8009056 <_printf_float+0xbe>
 80093ea:	f108 0801 	add.w	r8, r8, #1
 80093ee:	68e3      	ldr	r3, [r4, #12]
 80093f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80093f2:	1a5b      	subs	r3, r3, r1
 80093f4:	4543      	cmp	r3, r8
 80093f6:	dcf0      	bgt.n	80093da <_printf_float+0x442>
 80093f8:	e6f8      	b.n	80091ec <_printf_float+0x254>
 80093fa:	f04f 0800 	mov.w	r8, #0
 80093fe:	f104 0919 	add.w	r9, r4, #25
 8009402:	e7f4      	b.n	80093ee <_printf_float+0x456>

08009404 <_printf_common>:
 8009404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009408:	4616      	mov	r6, r2
 800940a:	4699      	mov	r9, r3
 800940c:	688a      	ldr	r2, [r1, #8]
 800940e:	690b      	ldr	r3, [r1, #16]
 8009410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009414:	4293      	cmp	r3, r2
 8009416:	bfb8      	it	lt
 8009418:	4613      	movlt	r3, r2
 800941a:	6033      	str	r3, [r6, #0]
 800941c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009420:	4607      	mov	r7, r0
 8009422:	460c      	mov	r4, r1
 8009424:	b10a      	cbz	r2, 800942a <_printf_common+0x26>
 8009426:	3301      	adds	r3, #1
 8009428:	6033      	str	r3, [r6, #0]
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	0699      	lsls	r1, r3, #26
 800942e:	bf42      	ittt	mi
 8009430:	6833      	ldrmi	r3, [r6, #0]
 8009432:	3302      	addmi	r3, #2
 8009434:	6033      	strmi	r3, [r6, #0]
 8009436:	6825      	ldr	r5, [r4, #0]
 8009438:	f015 0506 	ands.w	r5, r5, #6
 800943c:	d106      	bne.n	800944c <_printf_common+0x48>
 800943e:	f104 0a19 	add.w	sl, r4, #25
 8009442:	68e3      	ldr	r3, [r4, #12]
 8009444:	6832      	ldr	r2, [r6, #0]
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	42ab      	cmp	r3, r5
 800944a:	dc26      	bgt.n	800949a <_printf_common+0x96>
 800944c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009450:	1e13      	subs	r3, r2, #0
 8009452:	6822      	ldr	r2, [r4, #0]
 8009454:	bf18      	it	ne
 8009456:	2301      	movne	r3, #1
 8009458:	0692      	lsls	r2, r2, #26
 800945a:	d42b      	bmi.n	80094b4 <_printf_common+0xb0>
 800945c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009460:	4649      	mov	r1, r9
 8009462:	4638      	mov	r0, r7
 8009464:	47c0      	blx	r8
 8009466:	3001      	adds	r0, #1
 8009468:	d01e      	beq.n	80094a8 <_printf_common+0xa4>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	6922      	ldr	r2, [r4, #16]
 800946e:	f003 0306 	and.w	r3, r3, #6
 8009472:	2b04      	cmp	r3, #4
 8009474:	bf02      	ittt	eq
 8009476:	68e5      	ldreq	r5, [r4, #12]
 8009478:	6833      	ldreq	r3, [r6, #0]
 800947a:	1aed      	subeq	r5, r5, r3
 800947c:	68a3      	ldr	r3, [r4, #8]
 800947e:	bf0c      	ite	eq
 8009480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009484:	2500      	movne	r5, #0
 8009486:	4293      	cmp	r3, r2
 8009488:	bfc4      	itt	gt
 800948a:	1a9b      	subgt	r3, r3, r2
 800948c:	18ed      	addgt	r5, r5, r3
 800948e:	2600      	movs	r6, #0
 8009490:	341a      	adds	r4, #26
 8009492:	42b5      	cmp	r5, r6
 8009494:	d11a      	bne.n	80094cc <_printf_common+0xc8>
 8009496:	2000      	movs	r0, #0
 8009498:	e008      	b.n	80094ac <_printf_common+0xa8>
 800949a:	2301      	movs	r3, #1
 800949c:	4652      	mov	r2, sl
 800949e:	4649      	mov	r1, r9
 80094a0:	4638      	mov	r0, r7
 80094a2:	47c0      	blx	r8
 80094a4:	3001      	adds	r0, #1
 80094a6:	d103      	bne.n	80094b0 <_printf_common+0xac>
 80094a8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b0:	3501      	adds	r5, #1
 80094b2:	e7c6      	b.n	8009442 <_printf_common+0x3e>
 80094b4:	18e1      	adds	r1, r4, r3
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	2030      	movs	r0, #48	; 0x30
 80094ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094be:	4422      	add	r2, r4
 80094c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094c8:	3302      	adds	r3, #2
 80094ca:	e7c7      	b.n	800945c <_printf_common+0x58>
 80094cc:	2301      	movs	r3, #1
 80094ce:	4622      	mov	r2, r4
 80094d0:	4649      	mov	r1, r9
 80094d2:	4638      	mov	r0, r7
 80094d4:	47c0      	blx	r8
 80094d6:	3001      	adds	r0, #1
 80094d8:	d0e6      	beq.n	80094a8 <_printf_common+0xa4>
 80094da:	3601      	adds	r6, #1
 80094dc:	e7d9      	b.n	8009492 <_printf_common+0x8e>
	...

080094e0 <_printf_i>:
 80094e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094e4:	7e0f      	ldrb	r7, [r1, #24]
 80094e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094e8:	2f78      	cmp	r7, #120	; 0x78
 80094ea:	4691      	mov	r9, r2
 80094ec:	4680      	mov	r8, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	469a      	mov	sl, r3
 80094f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094f6:	d807      	bhi.n	8009508 <_printf_i+0x28>
 80094f8:	2f62      	cmp	r7, #98	; 0x62
 80094fa:	d80a      	bhi.n	8009512 <_printf_i+0x32>
 80094fc:	2f00      	cmp	r7, #0
 80094fe:	f000 80d4 	beq.w	80096aa <_printf_i+0x1ca>
 8009502:	2f58      	cmp	r7, #88	; 0x58
 8009504:	f000 80c0 	beq.w	8009688 <_printf_i+0x1a8>
 8009508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800950c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009510:	e03a      	b.n	8009588 <_printf_i+0xa8>
 8009512:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009516:	2b15      	cmp	r3, #21
 8009518:	d8f6      	bhi.n	8009508 <_printf_i+0x28>
 800951a:	a101      	add	r1, pc, #4	; (adr r1, 8009520 <_printf_i+0x40>)
 800951c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009520:	08009579 	.word	0x08009579
 8009524:	0800958d 	.word	0x0800958d
 8009528:	08009509 	.word	0x08009509
 800952c:	08009509 	.word	0x08009509
 8009530:	08009509 	.word	0x08009509
 8009534:	08009509 	.word	0x08009509
 8009538:	0800958d 	.word	0x0800958d
 800953c:	08009509 	.word	0x08009509
 8009540:	08009509 	.word	0x08009509
 8009544:	08009509 	.word	0x08009509
 8009548:	08009509 	.word	0x08009509
 800954c:	08009691 	.word	0x08009691
 8009550:	080095b9 	.word	0x080095b9
 8009554:	0800964b 	.word	0x0800964b
 8009558:	08009509 	.word	0x08009509
 800955c:	08009509 	.word	0x08009509
 8009560:	080096b3 	.word	0x080096b3
 8009564:	08009509 	.word	0x08009509
 8009568:	080095b9 	.word	0x080095b9
 800956c:	08009509 	.word	0x08009509
 8009570:	08009509 	.word	0x08009509
 8009574:	08009653 	.word	0x08009653
 8009578:	682b      	ldr	r3, [r5, #0]
 800957a:	1d1a      	adds	r2, r3, #4
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	602a      	str	r2, [r5, #0]
 8009580:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009584:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009588:	2301      	movs	r3, #1
 800958a:	e09f      	b.n	80096cc <_printf_i+0x1ec>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	682b      	ldr	r3, [r5, #0]
 8009590:	0607      	lsls	r7, r0, #24
 8009592:	f103 0104 	add.w	r1, r3, #4
 8009596:	6029      	str	r1, [r5, #0]
 8009598:	d501      	bpl.n	800959e <_printf_i+0xbe>
 800959a:	681e      	ldr	r6, [r3, #0]
 800959c:	e003      	b.n	80095a6 <_printf_i+0xc6>
 800959e:	0646      	lsls	r6, r0, #25
 80095a0:	d5fb      	bpl.n	800959a <_printf_i+0xba>
 80095a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095a6:	2e00      	cmp	r6, #0
 80095a8:	da03      	bge.n	80095b2 <_printf_i+0xd2>
 80095aa:	232d      	movs	r3, #45	; 0x2d
 80095ac:	4276      	negs	r6, r6
 80095ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095b2:	485a      	ldr	r0, [pc, #360]	; (800971c <_printf_i+0x23c>)
 80095b4:	230a      	movs	r3, #10
 80095b6:	e012      	b.n	80095de <_printf_i+0xfe>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	6820      	ldr	r0, [r4, #0]
 80095bc:	1d19      	adds	r1, r3, #4
 80095be:	6029      	str	r1, [r5, #0]
 80095c0:	0605      	lsls	r5, r0, #24
 80095c2:	d501      	bpl.n	80095c8 <_printf_i+0xe8>
 80095c4:	681e      	ldr	r6, [r3, #0]
 80095c6:	e002      	b.n	80095ce <_printf_i+0xee>
 80095c8:	0641      	lsls	r1, r0, #25
 80095ca:	d5fb      	bpl.n	80095c4 <_printf_i+0xe4>
 80095cc:	881e      	ldrh	r6, [r3, #0]
 80095ce:	4853      	ldr	r0, [pc, #332]	; (800971c <_printf_i+0x23c>)
 80095d0:	2f6f      	cmp	r7, #111	; 0x6f
 80095d2:	bf0c      	ite	eq
 80095d4:	2308      	moveq	r3, #8
 80095d6:	230a      	movne	r3, #10
 80095d8:	2100      	movs	r1, #0
 80095da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095de:	6865      	ldr	r5, [r4, #4]
 80095e0:	60a5      	str	r5, [r4, #8]
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	bfa2      	ittt	ge
 80095e6:	6821      	ldrge	r1, [r4, #0]
 80095e8:	f021 0104 	bicge.w	r1, r1, #4
 80095ec:	6021      	strge	r1, [r4, #0]
 80095ee:	b90e      	cbnz	r6, 80095f4 <_printf_i+0x114>
 80095f0:	2d00      	cmp	r5, #0
 80095f2:	d04b      	beq.n	800968c <_printf_i+0x1ac>
 80095f4:	4615      	mov	r5, r2
 80095f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80095fa:	fb03 6711 	mls	r7, r3, r1, r6
 80095fe:	5dc7      	ldrb	r7, [r0, r7]
 8009600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009604:	4637      	mov	r7, r6
 8009606:	42bb      	cmp	r3, r7
 8009608:	460e      	mov	r6, r1
 800960a:	d9f4      	bls.n	80095f6 <_printf_i+0x116>
 800960c:	2b08      	cmp	r3, #8
 800960e:	d10b      	bne.n	8009628 <_printf_i+0x148>
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	07de      	lsls	r6, r3, #31
 8009614:	d508      	bpl.n	8009628 <_printf_i+0x148>
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	6861      	ldr	r1, [r4, #4]
 800961a:	4299      	cmp	r1, r3
 800961c:	bfde      	ittt	le
 800961e:	2330      	movle	r3, #48	; 0x30
 8009620:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009624:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009628:	1b52      	subs	r2, r2, r5
 800962a:	6122      	str	r2, [r4, #16]
 800962c:	f8cd a000 	str.w	sl, [sp]
 8009630:	464b      	mov	r3, r9
 8009632:	aa03      	add	r2, sp, #12
 8009634:	4621      	mov	r1, r4
 8009636:	4640      	mov	r0, r8
 8009638:	f7ff fee4 	bl	8009404 <_printf_common>
 800963c:	3001      	adds	r0, #1
 800963e:	d14a      	bne.n	80096d6 <_printf_i+0x1f6>
 8009640:	f04f 30ff 	mov.w	r0, #4294967295
 8009644:	b004      	add	sp, #16
 8009646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f043 0320 	orr.w	r3, r3, #32
 8009650:	6023      	str	r3, [r4, #0]
 8009652:	4833      	ldr	r0, [pc, #204]	; (8009720 <_printf_i+0x240>)
 8009654:	2778      	movs	r7, #120	; 0x78
 8009656:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800965a:	6823      	ldr	r3, [r4, #0]
 800965c:	6829      	ldr	r1, [r5, #0]
 800965e:	061f      	lsls	r7, r3, #24
 8009660:	f851 6b04 	ldr.w	r6, [r1], #4
 8009664:	d402      	bmi.n	800966c <_printf_i+0x18c>
 8009666:	065f      	lsls	r7, r3, #25
 8009668:	bf48      	it	mi
 800966a:	b2b6      	uxthmi	r6, r6
 800966c:	07df      	lsls	r7, r3, #31
 800966e:	bf48      	it	mi
 8009670:	f043 0320 	orrmi.w	r3, r3, #32
 8009674:	6029      	str	r1, [r5, #0]
 8009676:	bf48      	it	mi
 8009678:	6023      	strmi	r3, [r4, #0]
 800967a:	b91e      	cbnz	r6, 8009684 <_printf_i+0x1a4>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	f023 0320 	bic.w	r3, r3, #32
 8009682:	6023      	str	r3, [r4, #0]
 8009684:	2310      	movs	r3, #16
 8009686:	e7a7      	b.n	80095d8 <_printf_i+0xf8>
 8009688:	4824      	ldr	r0, [pc, #144]	; (800971c <_printf_i+0x23c>)
 800968a:	e7e4      	b.n	8009656 <_printf_i+0x176>
 800968c:	4615      	mov	r5, r2
 800968e:	e7bd      	b.n	800960c <_printf_i+0x12c>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	6826      	ldr	r6, [r4, #0]
 8009694:	6961      	ldr	r1, [r4, #20]
 8009696:	1d18      	adds	r0, r3, #4
 8009698:	6028      	str	r0, [r5, #0]
 800969a:	0635      	lsls	r5, r6, #24
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	d501      	bpl.n	80096a4 <_printf_i+0x1c4>
 80096a0:	6019      	str	r1, [r3, #0]
 80096a2:	e002      	b.n	80096aa <_printf_i+0x1ca>
 80096a4:	0670      	lsls	r0, r6, #25
 80096a6:	d5fb      	bpl.n	80096a0 <_printf_i+0x1c0>
 80096a8:	8019      	strh	r1, [r3, #0]
 80096aa:	2300      	movs	r3, #0
 80096ac:	6123      	str	r3, [r4, #16]
 80096ae:	4615      	mov	r5, r2
 80096b0:	e7bc      	b.n	800962c <_printf_i+0x14c>
 80096b2:	682b      	ldr	r3, [r5, #0]
 80096b4:	1d1a      	adds	r2, r3, #4
 80096b6:	602a      	str	r2, [r5, #0]
 80096b8:	681d      	ldr	r5, [r3, #0]
 80096ba:	6862      	ldr	r2, [r4, #4]
 80096bc:	2100      	movs	r1, #0
 80096be:	4628      	mov	r0, r5
 80096c0:	f7f6 fd86 	bl	80001d0 <memchr>
 80096c4:	b108      	cbz	r0, 80096ca <_printf_i+0x1ea>
 80096c6:	1b40      	subs	r0, r0, r5
 80096c8:	6060      	str	r0, [r4, #4]
 80096ca:	6863      	ldr	r3, [r4, #4]
 80096cc:	6123      	str	r3, [r4, #16]
 80096ce:	2300      	movs	r3, #0
 80096d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096d4:	e7aa      	b.n	800962c <_printf_i+0x14c>
 80096d6:	6923      	ldr	r3, [r4, #16]
 80096d8:	462a      	mov	r2, r5
 80096da:	4649      	mov	r1, r9
 80096dc:	4640      	mov	r0, r8
 80096de:	47d0      	blx	sl
 80096e0:	3001      	adds	r0, #1
 80096e2:	d0ad      	beq.n	8009640 <_printf_i+0x160>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	079b      	lsls	r3, r3, #30
 80096e8:	d413      	bmi.n	8009712 <_printf_i+0x232>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	4298      	cmp	r0, r3
 80096f0:	bfb8      	it	lt
 80096f2:	4618      	movlt	r0, r3
 80096f4:	e7a6      	b.n	8009644 <_printf_i+0x164>
 80096f6:	2301      	movs	r3, #1
 80096f8:	4632      	mov	r2, r6
 80096fa:	4649      	mov	r1, r9
 80096fc:	4640      	mov	r0, r8
 80096fe:	47d0      	blx	sl
 8009700:	3001      	adds	r0, #1
 8009702:	d09d      	beq.n	8009640 <_printf_i+0x160>
 8009704:	3501      	adds	r5, #1
 8009706:	68e3      	ldr	r3, [r4, #12]
 8009708:	9903      	ldr	r1, [sp, #12]
 800970a:	1a5b      	subs	r3, r3, r1
 800970c:	42ab      	cmp	r3, r5
 800970e:	dcf2      	bgt.n	80096f6 <_printf_i+0x216>
 8009710:	e7eb      	b.n	80096ea <_printf_i+0x20a>
 8009712:	2500      	movs	r5, #0
 8009714:	f104 0619 	add.w	r6, r4, #25
 8009718:	e7f5      	b.n	8009706 <_printf_i+0x226>
 800971a:	bf00      	nop
 800971c:	0800c562 	.word	0x0800c562
 8009720:	0800c573 	.word	0x0800c573

08009724 <std>:
 8009724:	2300      	movs	r3, #0
 8009726:	b510      	push	{r4, lr}
 8009728:	4604      	mov	r4, r0
 800972a:	e9c0 3300 	strd	r3, r3, [r0]
 800972e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009732:	6083      	str	r3, [r0, #8]
 8009734:	8181      	strh	r1, [r0, #12]
 8009736:	6643      	str	r3, [r0, #100]	; 0x64
 8009738:	81c2      	strh	r2, [r0, #14]
 800973a:	6183      	str	r3, [r0, #24]
 800973c:	4619      	mov	r1, r3
 800973e:	2208      	movs	r2, #8
 8009740:	305c      	adds	r0, #92	; 0x5c
 8009742:	f000 f914 	bl	800996e <memset>
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <std+0x58>)
 8009748:	6263      	str	r3, [r4, #36]	; 0x24
 800974a:	4b0d      	ldr	r3, [pc, #52]	; (8009780 <std+0x5c>)
 800974c:	62a3      	str	r3, [r4, #40]	; 0x28
 800974e:	4b0d      	ldr	r3, [pc, #52]	; (8009784 <std+0x60>)
 8009750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009752:	4b0d      	ldr	r3, [pc, #52]	; (8009788 <std+0x64>)
 8009754:	6323      	str	r3, [r4, #48]	; 0x30
 8009756:	4b0d      	ldr	r3, [pc, #52]	; (800978c <std+0x68>)
 8009758:	6224      	str	r4, [r4, #32]
 800975a:	429c      	cmp	r4, r3
 800975c:	d006      	beq.n	800976c <std+0x48>
 800975e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009762:	4294      	cmp	r4, r2
 8009764:	d002      	beq.n	800976c <std+0x48>
 8009766:	33d0      	adds	r3, #208	; 0xd0
 8009768:	429c      	cmp	r4, r3
 800976a:	d105      	bne.n	8009778 <std+0x54>
 800976c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009774:	f000 b98a 	b.w	8009a8c <__retarget_lock_init_recursive>
 8009778:	bd10      	pop	{r4, pc}
 800977a:	bf00      	nop
 800977c:	080098e9 	.word	0x080098e9
 8009780:	0800990b 	.word	0x0800990b
 8009784:	08009943 	.word	0x08009943
 8009788:	08009967 	.word	0x08009967
 800978c:	200008f8 	.word	0x200008f8

08009790 <stdio_exit_handler>:
 8009790:	4a02      	ldr	r2, [pc, #8]	; (800979c <stdio_exit_handler+0xc>)
 8009792:	4903      	ldr	r1, [pc, #12]	; (80097a0 <stdio_exit_handler+0x10>)
 8009794:	4803      	ldr	r0, [pc, #12]	; (80097a4 <stdio_exit_handler+0x14>)
 8009796:	f000 b869 	b.w	800986c <_fwalk_sglue>
 800979a:	bf00      	nop
 800979c:	2000000c 	.word	0x2000000c
 80097a0:	0800bdb9 	.word	0x0800bdb9
 80097a4:	20000184 	.word	0x20000184

080097a8 <cleanup_stdio>:
 80097a8:	6841      	ldr	r1, [r0, #4]
 80097aa:	4b0c      	ldr	r3, [pc, #48]	; (80097dc <cleanup_stdio+0x34>)
 80097ac:	4299      	cmp	r1, r3
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	d001      	beq.n	80097b8 <cleanup_stdio+0x10>
 80097b4:	f002 fb00 	bl	800bdb8 <_fflush_r>
 80097b8:	68a1      	ldr	r1, [r4, #8]
 80097ba:	4b09      	ldr	r3, [pc, #36]	; (80097e0 <cleanup_stdio+0x38>)
 80097bc:	4299      	cmp	r1, r3
 80097be:	d002      	beq.n	80097c6 <cleanup_stdio+0x1e>
 80097c0:	4620      	mov	r0, r4
 80097c2:	f002 faf9 	bl	800bdb8 <_fflush_r>
 80097c6:	68e1      	ldr	r1, [r4, #12]
 80097c8:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <cleanup_stdio+0x3c>)
 80097ca:	4299      	cmp	r1, r3
 80097cc:	d004      	beq.n	80097d8 <cleanup_stdio+0x30>
 80097ce:	4620      	mov	r0, r4
 80097d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097d4:	f002 baf0 	b.w	800bdb8 <_fflush_r>
 80097d8:	bd10      	pop	{r4, pc}
 80097da:	bf00      	nop
 80097dc:	200008f8 	.word	0x200008f8
 80097e0:	20000960 	.word	0x20000960
 80097e4:	200009c8 	.word	0x200009c8

080097e8 <global_stdio_init.part.0>:
 80097e8:	b510      	push	{r4, lr}
 80097ea:	4b0b      	ldr	r3, [pc, #44]	; (8009818 <global_stdio_init.part.0+0x30>)
 80097ec:	4c0b      	ldr	r4, [pc, #44]	; (800981c <global_stdio_init.part.0+0x34>)
 80097ee:	4a0c      	ldr	r2, [pc, #48]	; (8009820 <global_stdio_init.part.0+0x38>)
 80097f0:	601a      	str	r2, [r3, #0]
 80097f2:	4620      	mov	r0, r4
 80097f4:	2200      	movs	r2, #0
 80097f6:	2104      	movs	r1, #4
 80097f8:	f7ff ff94 	bl	8009724 <std>
 80097fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009800:	2201      	movs	r2, #1
 8009802:	2109      	movs	r1, #9
 8009804:	f7ff ff8e 	bl	8009724 <std>
 8009808:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800980c:	2202      	movs	r2, #2
 800980e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009812:	2112      	movs	r1, #18
 8009814:	f7ff bf86 	b.w	8009724 <std>
 8009818:	20000a30 	.word	0x20000a30
 800981c:	200008f8 	.word	0x200008f8
 8009820:	08009791 	.word	0x08009791

08009824 <__sfp_lock_acquire>:
 8009824:	4801      	ldr	r0, [pc, #4]	; (800982c <__sfp_lock_acquire+0x8>)
 8009826:	f000 b932 	b.w	8009a8e <__retarget_lock_acquire_recursive>
 800982a:	bf00      	nop
 800982c:	20000a39 	.word	0x20000a39

08009830 <__sfp_lock_release>:
 8009830:	4801      	ldr	r0, [pc, #4]	; (8009838 <__sfp_lock_release+0x8>)
 8009832:	f000 b92d 	b.w	8009a90 <__retarget_lock_release_recursive>
 8009836:	bf00      	nop
 8009838:	20000a39 	.word	0x20000a39

0800983c <__sinit>:
 800983c:	b510      	push	{r4, lr}
 800983e:	4604      	mov	r4, r0
 8009840:	f7ff fff0 	bl	8009824 <__sfp_lock_acquire>
 8009844:	6a23      	ldr	r3, [r4, #32]
 8009846:	b11b      	cbz	r3, 8009850 <__sinit+0x14>
 8009848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800984c:	f7ff bff0 	b.w	8009830 <__sfp_lock_release>
 8009850:	4b04      	ldr	r3, [pc, #16]	; (8009864 <__sinit+0x28>)
 8009852:	6223      	str	r3, [r4, #32]
 8009854:	4b04      	ldr	r3, [pc, #16]	; (8009868 <__sinit+0x2c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1f5      	bne.n	8009848 <__sinit+0xc>
 800985c:	f7ff ffc4 	bl	80097e8 <global_stdio_init.part.0>
 8009860:	e7f2      	b.n	8009848 <__sinit+0xc>
 8009862:	bf00      	nop
 8009864:	080097a9 	.word	0x080097a9
 8009868:	20000a30 	.word	0x20000a30

0800986c <_fwalk_sglue>:
 800986c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009870:	4607      	mov	r7, r0
 8009872:	4688      	mov	r8, r1
 8009874:	4614      	mov	r4, r2
 8009876:	2600      	movs	r6, #0
 8009878:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800987c:	f1b9 0901 	subs.w	r9, r9, #1
 8009880:	d505      	bpl.n	800988e <_fwalk_sglue+0x22>
 8009882:	6824      	ldr	r4, [r4, #0]
 8009884:	2c00      	cmp	r4, #0
 8009886:	d1f7      	bne.n	8009878 <_fwalk_sglue+0xc>
 8009888:	4630      	mov	r0, r6
 800988a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800988e:	89ab      	ldrh	r3, [r5, #12]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d907      	bls.n	80098a4 <_fwalk_sglue+0x38>
 8009894:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009898:	3301      	adds	r3, #1
 800989a:	d003      	beq.n	80098a4 <_fwalk_sglue+0x38>
 800989c:	4629      	mov	r1, r5
 800989e:	4638      	mov	r0, r7
 80098a0:	47c0      	blx	r8
 80098a2:	4306      	orrs	r6, r0
 80098a4:	3568      	adds	r5, #104	; 0x68
 80098a6:	e7e9      	b.n	800987c <_fwalk_sglue+0x10>

080098a8 <siprintf>:
 80098a8:	b40e      	push	{r1, r2, r3}
 80098aa:	b500      	push	{lr}
 80098ac:	b09c      	sub	sp, #112	; 0x70
 80098ae:	ab1d      	add	r3, sp, #116	; 0x74
 80098b0:	9002      	str	r0, [sp, #8]
 80098b2:	9006      	str	r0, [sp, #24]
 80098b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80098b8:	4809      	ldr	r0, [pc, #36]	; (80098e0 <siprintf+0x38>)
 80098ba:	9107      	str	r1, [sp, #28]
 80098bc:	9104      	str	r1, [sp, #16]
 80098be:	4909      	ldr	r1, [pc, #36]	; (80098e4 <siprintf+0x3c>)
 80098c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c4:	9105      	str	r1, [sp, #20]
 80098c6:	6800      	ldr	r0, [r0, #0]
 80098c8:	9301      	str	r3, [sp, #4]
 80098ca:	a902      	add	r1, sp, #8
 80098cc:	f002 f8f0 	bl	800bab0 <_svfiprintf_r>
 80098d0:	9b02      	ldr	r3, [sp, #8]
 80098d2:	2200      	movs	r2, #0
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	b01c      	add	sp, #112	; 0x70
 80098d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098dc:	b003      	add	sp, #12
 80098de:	4770      	bx	lr
 80098e0:	200001d0 	.word	0x200001d0
 80098e4:	ffff0208 	.word	0xffff0208

080098e8 <__sread>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	460c      	mov	r4, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	f000 f87e 	bl	80099f0 <_read_r>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	bfab      	itete	ge
 80098f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098fa:	89a3      	ldrhlt	r3, [r4, #12]
 80098fc:	181b      	addge	r3, r3, r0
 80098fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009902:	bfac      	ite	ge
 8009904:	6563      	strge	r3, [r4, #84]	; 0x54
 8009906:	81a3      	strhlt	r3, [r4, #12]
 8009908:	bd10      	pop	{r4, pc}

0800990a <__swrite>:
 800990a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800990e:	461f      	mov	r7, r3
 8009910:	898b      	ldrh	r3, [r1, #12]
 8009912:	05db      	lsls	r3, r3, #23
 8009914:	4605      	mov	r5, r0
 8009916:	460c      	mov	r4, r1
 8009918:	4616      	mov	r6, r2
 800991a:	d505      	bpl.n	8009928 <__swrite+0x1e>
 800991c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009920:	2302      	movs	r3, #2
 8009922:	2200      	movs	r2, #0
 8009924:	f000 f852 	bl	80099cc <_lseek_r>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009932:	81a3      	strh	r3, [r4, #12]
 8009934:	4632      	mov	r2, r6
 8009936:	463b      	mov	r3, r7
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	f000 b869 	b.w	8009a14 <_write_r>

08009942 <__sseek>:
 8009942:	b510      	push	{r4, lr}
 8009944:	460c      	mov	r4, r1
 8009946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800994a:	f000 f83f 	bl	80099cc <_lseek_r>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	89a3      	ldrh	r3, [r4, #12]
 8009952:	bf15      	itete	ne
 8009954:	6560      	strne	r0, [r4, #84]	; 0x54
 8009956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800995a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800995e:	81a3      	strheq	r3, [r4, #12]
 8009960:	bf18      	it	ne
 8009962:	81a3      	strhne	r3, [r4, #12]
 8009964:	bd10      	pop	{r4, pc}

08009966 <__sclose>:
 8009966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800996a:	f000 b81f 	b.w	80099ac <_close_r>

0800996e <memset>:
 800996e:	4402      	add	r2, r0
 8009970:	4603      	mov	r3, r0
 8009972:	4293      	cmp	r3, r2
 8009974:	d100      	bne.n	8009978 <memset+0xa>
 8009976:	4770      	bx	lr
 8009978:	f803 1b01 	strb.w	r1, [r3], #1
 800997c:	e7f9      	b.n	8009972 <memset+0x4>

0800997e <strncmp>:
 800997e:	b510      	push	{r4, lr}
 8009980:	b16a      	cbz	r2, 800999e <strncmp+0x20>
 8009982:	3901      	subs	r1, #1
 8009984:	1884      	adds	r4, r0, r2
 8009986:	f810 2b01 	ldrb.w	r2, [r0], #1
 800998a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800998e:	429a      	cmp	r2, r3
 8009990:	d103      	bne.n	800999a <strncmp+0x1c>
 8009992:	42a0      	cmp	r0, r4
 8009994:	d001      	beq.n	800999a <strncmp+0x1c>
 8009996:	2a00      	cmp	r2, #0
 8009998:	d1f5      	bne.n	8009986 <strncmp+0x8>
 800999a:	1ad0      	subs	r0, r2, r3
 800999c:	bd10      	pop	{r4, pc}
 800999e:	4610      	mov	r0, r2
 80099a0:	e7fc      	b.n	800999c <strncmp+0x1e>
	...

080099a4 <_localeconv_r>:
 80099a4:	4800      	ldr	r0, [pc, #0]	; (80099a8 <_localeconv_r+0x4>)
 80099a6:	4770      	bx	lr
 80099a8:	20000108 	.word	0x20000108

080099ac <_close_r>:
 80099ac:	b538      	push	{r3, r4, r5, lr}
 80099ae:	4d06      	ldr	r5, [pc, #24]	; (80099c8 <_close_r+0x1c>)
 80099b0:	2300      	movs	r3, #0
 80099b2:	4604      	mov	r4, r0
 80099b4:	4608      	mov	r0, r1
 80099b6:	602b      	str	r3, [r5, #0]
 80099b8:	f7f9 ff0f 	bl	80037da <_close>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_close_r+0x1a>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_close_r+0x1a>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	20000a34 	.word	0x20000a34

080099cc <_lseek_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	; (80099ec <_lseek_r+0x20>)
 80099d0:	4604      	mov	r4, r0
 80099d2:	4608      	mov	r0, r1
 80099d4:	4611      	mov	r1, r2
 80099d6:	2200      	movs	r2, #0
 80099d8:	602a      	str	r2, [r5, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	f7f9 ff24 	bl	8003828 <_lseek>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_lseek_r+0x1e>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_lseek_r+0x1e>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	20000a34 	.word	0x20000a34

080099f0 <_read_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d07      	ldr	r5, [pc, #28]	; (8009a10 <_read_r+0x20>)
 80099f4:	4604      	mov	r4, r0
 80099f6:	4608      	mov	r0, r1
 80099f8:	4611      	mov	r1, r2
 80099fa:	2200      	movs	r2, #0
 80099fc:	602a      	str	r2, [r5, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	f7f9 feb2 	bl	8003768 <_read>
 8009a04:	1c43      	adds	r3, r0, #1
 8009a06:	d102      	bne.n	8009a0e <_read_r+0x1e>
 8009a08:	682b      	ldr	r3, [r5, #0]
 8009a0a:	b103      	cbz	r3, 8009a0e <_read_r+0x1e>
 8009a0c:	6023      	str	r3, [r4, #0]
 8009a0e:	bd38      	pop	{r3, r4, r5, pc}
 8009a10:	20000a34 	.word	0x20000a34

08009a14 <_write_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d07      	ldr	r5, [pc, #28]	; (8009a34 <_write_r+0x20>)
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	2200      	movs	r2, #0
 8009a20:	602a      	str	r2, [r5, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f7f9 febd 	bl	80037a2 <_write>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_write_r+0x1e>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_write_r+0x1e>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	20000a34 	.word	0x20000a34

08009a38 <__errno>:
 8009a38:	4b01      	ldr	r3, [pc, #4]	; (8009a40 <__errno+0x8>)
 8009a3a:	6818      	ldr	r0, [r3, #0]
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	200001d0 	.word	0x200001d0

08009a44 <__libc_init_array>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	4d0d      	ldr	r5, [pc, #52]	; (8009a7c <__libc_init_array+0x38>)
 8009a48:	4c0d      	ldr	r4, [pc, #52]	; (8009a80 <__libc_init_array+0x3c>)
 8009a4a:	1b64      	subs	r4, r4, r5
 8009a4c:	10a4      	asrs	r4, r4, #2
 8009a4e:	2600      	movs	r6, #0
 8009a50:	42a6      	cmp	r6, r4
 8009a52:	d109      	bne.n	8009a68 <__libc_init_array+0x24>
 8009a54:	4d0b      	ldr	r5, [pc, #44]	; (8009a84 <__libc_init_array+0x40>)
 8009a56:	4c0c      	ldr	r4, [pc, #48]	; (8009a88 <__libc_init_array+0x44>)
 8009a58:	f002 fd26 	bl	800c4a8 <_init>
 8009a5c:	1b64      	subs	r4, r4, r5
 8009a5e:	10a4      	asrs	r4, r4, #2
 8009a60:	2600      	movs	r6, #0
 8009a62:	42a6      	cmp	r6, r4
 8009a64:	d105      	bne.n	8009a72 <__libc_init_array+0x2e>
 8009a66:	bd70      	pop	{r4, r5, r6, pc}
 8009a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a6c:	4798      	blx	r3
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7ee      	b.n	8009a50 <__libc_init_array+0xc>
 8009a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a76:	4798      	blx	r3
 8009a78:	3601      	adds	r6, #1
 8009a7a:	e7f2      	b.n	8009a62 <__libc_init_array+0x1e>
 8009a7c:	0800c92c 	.word	0x0800c92c
 8009a80:	0800c92c 	.word	0x0800c92c
 8009a84:	0800c92c 	.word	0x0800c92c
 8009a88:	0800c930 	.word	0x0800c930

08009a8c <__retarget_lock_init_recursive>:
 8009a8c:	4770      	bx	lr

08009a8e <__retarget_lock_acquire_recursive>:
 8009a8e:	4770      	bx	lr

08009a90 <__retarget_lock_release_recursive>:
 8009a90:	4770      	bx	lr

08009a92 <memcpy>:
 8009a92:	440a      	add	r2, r1
 8009a94:	4291      	cmp	r1, r2
 8009a96:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a9a:	d100      	bne.n	8009a9e <memcpy+0xc>
 8009a9c:	4770      	bx	lr
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa8:	4291      	cmp	r1, r2
 8009aaa:	d1f9      	bne.n	8009aa0 <memcpy+0xe>
 8009aac:	bd10      	pop	{r4, pc}
	...

08009ab0 <nan>:
 8009ab0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009ab8 <nan+0x8>
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	7ff80000 	.word	0x7ff80000

08009ac0 <quorem>:
 8009ac0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac4:	6903      	ldr	r3, [r0, #16]
 8009ac6:	690c      	ldr	r4, [r1, #16]
 8009ac8:	42a3      	cmp	r3, r4
 8009aca:	4607      	mov	r7, r0
 8009acc:	db7e      	blt.n	8009bcc <quorem+0x10c>
 8009ace:	3c01      	subs	r4, #1
 8009ad0:	f101 0814 	add.w	r8, r1, #20
 8009ad4:	f100 0514 	add.w	r5, r0, #20
 8009ad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009adc:	9301      	str	r3, [sp, #4]
 8009ade:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	429a      	cmp	r2, r3
 8009aea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009aee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009af2:	fbb2 f6f3 	udiv	r6, r2, r3
 8009af6:	d331      	bcc.n	8009b5c <quorem+0x9c>
 8009af8:	f04f 0e00 	mov.w	lr, #0
 8009afc:	4640      	mov	r0, r8
 8009afe:	46ac      	mov	ip, r5
 8009b00:	46f2      	mov	sl, lr
 8009b02:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b06:	b293      	uxth	r3, r2
 8009b08:	fb06 e303 	mla	r3, r6, r3, lr
 8009b0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b10:	0c1a      	lsrs	r2, r3, #16
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	ebaa 0303 	sub.w	r3, sl, r3
 8009b18:	f8dc a000 	ldr.w	sl, [ip]
 8009b1c:	fa13 f38a 	uxtah	r3, r3, sl
 8009b20:	fb06 220e 	mla	r2, r6, lr, r2
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b2c:	b292      	uxth	r2, r2
 8009b2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b36:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b3a:	4581      	cmp	r9, r0
 8009b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b40:	f84c 3b04 	str.w	r3, [ip], #4
 8009b44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b48:	d2db      	bcs.n	8009b02 <quorem+0x42>
 8009b4a:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b4e:	b92b      	cbnz	r3, 8009b5c <quorem+0x9c>
 8009b50:	9b01      	ldr	r3, [sp, #4]
 8009b52:	3b04      	subs	r3, #4
 8009b54:	429d      	cmp	r5, r3
 8009b56:	461a      	mov	r2, r3
 8009b58:	d32c      	bcc.n	8009bb4 <quorem+0xf4>
 8009b5a:	613c      	str	r4, [r7, #16]
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f001 fd59 	bl	800b614 <__mcmp>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	db22      	blt.n	8009bac <quorem+0xec>
 8009b66:	3601      	adds	r6, #1
 8009b68:	4629      	mov	r1, r5
 8009b6a:	2000      	movs	r0, #0
 8009b6c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b70:	f8d1 c000 	ldr.w	ip, [r1]
 8009b74:	b293      	uxth	r3, r2
 8009b76:	1ac3      	subs	r3, r0, r3
 8009b78:	0c12      	lsrs	r2, r2, #16
 8009b7a:	fa13 f38c 	uxtah	r3, r3, ip
 8009b7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009b82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b8c:	45c1      	cmp	r9, r8
 8009b8e:	f841 3b04 	str.w	r3, [r1], #4
 8009b92:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b96:	d2e9      	bcs.n	8009b6c <quorem+0xac>
 8009b98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba0:	b922      	cbnz	r2, 8009bac <quorem+0xec>
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	429d      	cmp	r5, r3
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	d30a      	bcc.n	8009bc0 <quorem+0x100>
 8009baa:	613c      	str	r4, [r7, #16]
 8009bac:	4630      	mov	r0, r6
 8009bae:	b003      	add	sp, #12
 8009bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bb4:	6812      	ldr	r2, [r2, #0]
 8009bb6:	3b04      	subs	r3, #4
 8009bb8:	2a00      	cmp	r2, #0
 8009bba:	d1ce      	bne.n	8009b5a <quorem+0x9a>
 8009bbc:	3c01      	subs	r4, #1
 8009bbe:	e7c9      	b.n	8009b54 <quorem+0x94>
 8009bc0:	6812      	ldr	r2, [r2, #0]
 8009bc2:	3b04      	subs	r3, #4
 8009bc4:	2a00      	cmp	r2, #0
 8009bc6:	d1f0      	bne.n	8009baa <quorem+0xea>
 8009bc8:	3c01      	subs	r4, #1
 8009bca:	e7eb      	b.n	8009ba4 <quorem+0xe4>
 8009bcc:	2000      	movs	r0, #0
 8009bce:	e7ee      	b.n	8009bae <quorem+0xee>

08009bd0 <_dtoa_r>:
 8009bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd4:	ed2d 8b04 	vpush	{d8-d9}
 8009bd8:	69c5      	ldr	r5, [r0, #28]
 8009bda:	b093      	sub	sp, #76	; 0x4c
 8009bdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009be0:	ec57 6b10 	vmov	r6, r7, d0
 8009be4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009be8:	9107      	str	r1, [sp, #28]
 8009bea:	4604      	mov	r4, r0
 8009bec:	920a      	str	r2, [sp, #40]	; 0x28
 8009bee:	930d      	str	r3, [sp, #52]	; 0x34
 8009bf0:	b975      	cbnz	r5, 8009c10 <_dtoa_r+0x40>
 8009bf2:	2010      	movs	r0, #16
 8009bf4:	f001 f982 	bl	800aefc <malloc>
 8009bf8:	4602      	mov	r2, r0
 8009bfa:	61e0      	str	r0, [r4, #28]
 8009bfc:	b920      	cbnz	r0, 8009c08 <_dtoa_r+0x38>
 8009bfe:	4bae      	ldr	r3, [pc, #696]	; (8009eb8 <_dtoa_r+0x2e8>)
 8009c00:	21ef      	movs	r1, #239	; 0xef
 8009c02:	48ae      	ldr	r0, [pc, #696]	; (8009ebc <_dtoa_r+0x2ec>)
 8009c04:	f002 f92a 	bl	800be5c <__assert_func>
 8009c08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c0c:	6005      	str	r5, [r0, #0]
 8009c0e:	60c5      	str	r5, [r0, #12]
 8009c10:	69e3      	ldr	r3, [r4, #28]
 8009c12:	6819      	ldr	r1, [r3, #0]
 8009c14:	b151      	cbz	r1, 8009c2c <_dtoa_r+0x5c>
 8009c16:	685a      	ldr	r2, [r3, #4]
 8009c18:	604a      	str	r2, [r1, #4]
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	4093      	lsls	r3, r2
 8009c1e:	608b      	str	r3, [r1, #8]
 8009c20:	4620      	mov	r0, r4
 8009c22:	f001 fa71 	bl	800b108 <_Bfree>
 8009c26:	69e3      	ldr	r3, [r4, #28]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	1e3b      	subs	r3, r7, #0
 8009c2e:	bfbb      	ittet	lt
 8009c30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009c34:	9303      	strlt	r3, [sp, #12]
 8009c36:	2300      	movge	r3, #0
 8009c38:	2201      	movlt	r2, #1
 8009c3a:	bfac      	ite	ge
 8009c3c:	f8c8 3000 	strge.w	r3, [r8]
 8009c40:	f8c8 2000 	strlt.w	r2, [r8]
 8009c44:	4b9e      	ldr	r3, [pc, #632]	; (8009ec0 <_dtoa_r+0x2f0>)
 8009c46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009c4a:	ea33 0308 	bics.w	r3, r3, r8
 8009c4e:	d11b      	bne.n	8009c88 <_dtoa_r+0xb8>
 8009c50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009c52:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c56:	6013      	str	r3, [r2, #0]
 8009c58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c5c:	4333      	orrs	r3, r6
 8009c5e:	f000 8593 	beq.w	800a788 <_dtoa_r+0xbb8>
 8009c62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c64:	b963      	cbnz	r3, 8009c80 <_dtoa_r+0xb0>
 8009c66:	4b97      	ldr	r3, [pc, #604]	; (8009ec4 <_dtoa_r+0x2f4>)
 8009c68:	e027      	b.n	8009cba <_dtoa_r+0xea>
 8009c6a:	4b97      	ldr	r3, [pc, #604]	; (8009ec8 <_dtoa_r+0x2f8>)
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	3308      	adds	r3, #8
 8009c70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	9800      	ldr	r0, [sp, #0]
 8009c76:	b013      	add	sp, #76	; 0x4c
 8009c78:	ecbd 8b04 	vpop	{d8-d9}
 8009c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c80:	4b90      	ldr	r3, [pc, #576]	; (8009ec4 <_dtoa_r+0x2f4>)
 8009c82:	9300      	str	r3, [sp, #0]
 8009c84:	3303      	adds	r3, #3
 8009c86:	e7f3      	b.n	8009c70 <_dtoa_r+0xa0>
 8009c88:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	ec51 0b17 	vmov	r0, r1, d7
 8009c92:	eeb0 8a47 	vmov.f32	s16, s14
 8009c96:	eef0 8a67 	vmov.f32	s17, s15
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	f7f6 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca0:	4681      	mov	r9, r0
 8009ca2:	b160      	cbz	r0, 8009cbe <_dtoa_r+0xee>
 8009ca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8568 	beq.w	800a782 <_dtoa_r+0xbb2>
 8009cb2:	4b86      	ldr	r3, [pc, #536]	; (8009ecc <_dtoa_r+0x2fc>)
 8009cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	9300      	str	r3, [sp, #0]
 8009cbc:	e7da      	b.n	8009c74 <_dtoa_r+0xa4>
 8009cbe:	aa10      	add	r2, sp, #64	; 0x40
 8009cc0:	a911      	add	r1, sp, #68	; 0x44
 8009cc2:	4620      	mov	r0, r4
 8009cc4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cc8:	eef0 0a68 	vmov.f32	s1, s17
 8009ccc:	f001 fdb8 	bl	800b840 <__d2b>
 8009cd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009cd4:	4682      	mov	sl, r0
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	d07f      	beq.n	8009dda <_dtoa_r+0x20a>
 8009cda:	ee18 3a90 	vmov	r3, s17
 8009cde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009ce6:	ec51 0b18 	vmov	r0, r1, d8
 8009cea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009cee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009cf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b75      	ldr	r3, [pc, #468]	; (8009ed0 <_dtoa_r+0x300>)
 8009cfc:	f7f6 fac4 	bl	8000288 <__aeabi_dsub>
 8009d00:	a367      	add	r3, pc, #412	; (adr r3, 8009ea0 <_dtoa_r+0x2d0>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fc77 	bl	80005f8 <__aeabi_dmul>
 8009d0a:	a367      	add	r3, pc, #412	; (adr r3, 8009ea8 <_dtoa_r+0x2d8>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fabc 	bl	800028c <__adddf3>
 8009d14:	4606      	mov	r6, r0
 8009d16:	4628      	mov	r0, r5
 8009d18:	460f      	mov	r7, r1
 8009d1a:	f7f6 fc03 	bl	8000524 <__aeabi_i2d>
 8009d1e:	a364      	add	r3, pc, #400	; (adr r3, 8009eb0 <_dtoa_r+0x2e0>)
 8009d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d24:	f7f6 fc68 	bl	80005f8 <__aeabi_dmul>
 8009d28:	4602      	mov	r2, r0
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	4639      	mov	r1, r7
 8009d30:	f7f6 faac 	bl	800028c <__adddf3>
 8009d34:	4606      	mov	r6, r0
 8009d36:	460f      	mov	r7, r1
 8009d38:	f7f6 ff0e 	bl	8000b58 <__aeabi_d2iz>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4683      	mov	fp, r0
 8009d40:	2300      	movs	r3, #0
 8009d42:	4630      	mov	r0, r6
 8009d44:	4639      	mov	r1, r7
 8009d46:	f7f6 fec9 	bl	8000adc <__aeabi_dcmplt>
 8009d4a:	b148      	cbz	r0, 8009d60 <_dtoa_r+0x190>
 8009d4c:	4658      	mov	r0, fp
 8009d4e:	f7f6 fbe9 	bl	8000524 <__aeabi_i2d>
 8009d52:	4632      	mov	r2, r6
 8009d54:	463b      	mov	r3, r7
 8009d56:	f7f6 feb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d5a:	b908      	cbnz	r0, 8009d60 <_dtoa_r+0x190>
 8009d5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d60:	f1bb 0f16 	cmp.w	fp, #22
 8009d64:	d857      	bhi.n	8009e16 <_dtoa_r+0x246>
 8009d66:	4b5b      	ldr	r3, [pc, #364]	; (8009ed4 <_dtoa_r+0x304>)
 8009d68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	ec51 0b18 	vmov	r0, r1, d8
 8009d74:	f7f6 feb2 	bl	8000adc <__aeabi_dcmplt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d04e      	beq.n	8009e1a <_dtoa_r+0x24a>
 8009d7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d80:	2300      	movs	r3, #0
 8009d82:	930c      	str	r3, [sp, #48]	; 0x30
 8009d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d86:	1b5b      	subs	r3, r3, r5
 8009d88:	1e5a      	subs	r2, r3, #1
 8009d8a:	bf45      	ittet	mi
 8009d8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8009d90:	9305      	strmi	r3, [sp, #20]
 8009d92:	2300      	movpl	r3, #0
 8009d94:	2300      	movmi	r3, #0
 8009d96:	9206      	str	r2, [sp, #24]
 8009d98:	bf54      	ite	pl
 8009d9a:	9305      	strpl	r3, [sp, #20]
 8009d9c:	9306      	strmi	r3, [sp, #24]
 8009d9e:	f1bb 0f00 	cmp.w	fp, #0
 8009da2:	db3c      	blt.n	8009e1e <_dtoa_r+0x24e>
 8009da4:	9b06      	ldr	r3, [sp, #24]
 8009da6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009daa:	445b      	add	r3, fp
 8009dac:	9306      	str	r3, [sp, #24]
 8009dae:	2300      	movs	r3, #0
 8009db0:	9308      	str	r3, [sp, #32]
 8009db2:	9b07      	ldr	r3, [sp, #28]
 8009db4:	2b09      	cmp	r3, #9
 8009db6:	d868      	bhi.n	8009e8a <_dtoa_r+0x2ba>
 8009db8:	2b05      	cmp	r3, #5
 8009dba:	bfc4      	itt	gt
 8009dbc:	3b04      	subgt	r3, #4
 8009dbe:	9307      	strgt	r3, [sp, #28]
 8009dc0:	9b07      	ldr	r3, [sp, #28]
 8009dc2:	f1a3 0302 	sub.w	r3, r3, #2
 8009dc6:	bfcc      	ite	gt
 8009dc8:	2500      	movgt	r5, #0
 8009dca:	2501      	movle	r5, #1
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	f200 8085 	bhi.w	8009edc <_dtoa_r+0x30c>
 8009dd2:	e8df f003 	tbb	[pc, r3]
 8009dd6:	3b2e      	.short	0x3b2e
 8009dd8:	5839      	.short	0x5839
 8009dda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009dde:	441d      	add	r5, r3
 8009de0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009de4:	2b20      	cmp	r3, #32
 8009de6:	bfc1      	itttt	gt
 8009de8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009dec:	fa08 f803 	lslgt.w	r8, r8, r3
 8009df0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009df4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009df8:	bfd6      	itet	le
 8009dfa:	f1c3 0320 	rsble	r3, r3, #32
 8009dfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009e02:	fa06 f003 	lslle.w	r0, r6, r3
 8009e06:	f7f6 fb7d 	bl	8000504 <__aeabi_ui2d>
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009e10:	3d01      	subs	r5, #1
 8009e12:	920e      	str	r2, [sp, #56]	; 0x38
 8009e14:	e76f      	b.n	8009cf6 <_dtoa_r+0x126>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e7b3      	b.n	8009d82 <_dtoa_r+0x1b2>
 8009e1a:	900c      	str	r0, [sp, #48]	; 0x30
 8009e1c:	e7b2      	b.n	8009d84 <_dtoa_r+0x1b4>
 8009e1e:	9b05      	ldr	r3, [sp, #20]
 8009e20:	eba3 030b 	sub.w	r3, r3, fp
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	f1cb 0300 	rsb	r3, fp, #0
 8009e2a:	9308      	str	r3, [sp, #32]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e30:	e7bf      	b.n	8009db2 <_dtoa_r+0x1e2>
 8009e32:	2300      	movs	r3, #0
 8009e34:	9309      	str	r3, [sp, #36]	; 0x24
 8009e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	dc52      	bgt.n	8009ee2 <_dtoa_r+0x312>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	9301      	str	r3, [sp, #4]
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	461a      	mov	r2, r3
 8009e44:	920a      	str	r2, [sp, #40]	; 0x28
 8009e46:	e00b      	b.n	8009e60 <_dtoa_r+0x290>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e7f3      	b.n	8009e34 <_dtoa_r+0x264>
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e52:	445b      	add	r3, fp
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	3301      	adds	r3, #1
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	bfb8      	it	lt
 8009e5e:	2301      	movlt	r3, #1
 8009e60:	69e0      	ldr	r0, [r4, #28]
 8009e62:	2100      	movs	r1, #0
 8009e64:	2204      	movs	r2, #4
 8009e66:	f102 0614 	add.w	r6, r2, #20
 8009e6a:	429e      	cmp	r6, r3
 8009e6c:	d93d      	bls.n	8009eea <_dtoa_r+0x31a>
 8009e6e:	6041      	str	r1, [r0, #4]
 8009e70:	4620      	mov	r0, r4
 8009e72:	f001 f909 	bl	800b088 <_Balloc>
 8009e76:	9000      	str	r0, [sp, #0]
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	d139      	bne.n	8009ef0 <_dtoa_r+0x320>
 8009e7c:	4b16      	ldr	r3, [pc, #88]	; (8009ed8 <_dtoa_r+0x308>)
 8009e7e:	4602      	mov	r2, r0
 8009e80:	f240 11af 	movw	r1, #431	; 0x1af
 8009e84:	e6bd      	b.n	8009c02 <_dtoa_r+0x32>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e7e1      	b.n	8009e4e <_dtoa_r+0x27e>
 8009e8a:	2501      	movs	r5, #1
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	9509      	str	r5, [sp, #36]	; 0x24
 8009e92:	f04f 33ff 	mov.w	r3, #4294967295
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	2312      	movs	r3, #18
 8009e9e:	e7d1      	b.n	8009e44 <_dtoa_r+0x274>
 8009ea0:	636f4361 	.word	0x636f4361
 8009ea4:	3fd287a7 	.word	0x3fd287a7
 8009ea8:	8b60c8b3 	.word	0x8b60c8b3
 8009eac:	3fc68a28 	.word	0x3fc68a28
 8009eb0:	509f79fb 	.word	0x509f79fb
 8009eb4:	3fd34413 	.word	0x3fd34413
 8009eb8:	0800c599 	.word	0x0800c599
 8009ebc:	0800c5b0 	.word	0x0800c5b0
 8009ec0:	7ff00000 	.word	0x7ff00000
 8009ec4:	0800c595 	.word	0x0800c595
 8009ec8:	0800c58c 	.word	0x0800c58c
 8009ecc:	0800c561 	.word	0x0800c561
 8009ed0:	3ff80000 	.word	0x3ff80000
 8009ed4:	0800c700 	.word	0x0800c700
 8009ed8:	0800c608 	.word	0x0800c608
 8009edc:	2301      	movs	r3, #1
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	e7d7      	b.n	8009e92 <_dtoa_r+0x2c2>
 8009ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	9304      	str	r3, [sp, #16]
 8009ee8:	e7ba      	b.n	8009e60 <_dtoa_r+0x290>
 8009eea:	3101      	adds	r1, #1
 8009eec:	0052      	lsls	r2, r2, #1
 8009eee:	e7ba      	b.n	8009e66 <_dtoa_r+0x296>
 8009ef0:	69e3      	ldr	r3, [r4, #28]
 8009ef2:	9a00      	ldr	r2, [sp, #0]
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	9b04      	ldr	r3, [sp, #16]
 8009ef8:	2b0e      	cmp	r3, #14
 8009efa:	f200 80a8 	bhi.w	800a04e <_dtoa_r+0x47e>
 8009efe:	2d00      	cmp	r5, #0
 8009f00:	f000 80a5 	beq.w	800a04e <_dtoa_r+0x47e>
 8009f04:	f1bb 0f00 	cmp.w	fp, #0
 8009f08:	dd38      	ble.n	8009f7c <_dtoa_r+0x3ac>
 8009f0a:	4bc0      	ldr	r3, [pc, #768]	; (800a20c <_dtoa_r+0x63c>)
 8009f0c:	f00b 020f 	and.w	r2, fp, #15
 8009f10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009f18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009f1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009f20:	d019      	beq.n	8009f56 <_dtoa_r+0x386>
 8009f22:	4bbb      	ldr	r3, [pc, #748]	; (800a210 <_dtoa_r+0x640>)
 8009f24:	ec51 0b18 	vmov	r0, r1, d8
 8009f28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f2c:	f7f6 fc8e 	bl	800084c <__aeabi_ddiv>
 8009f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f34:	f008 080f 	and.w	r8, r8, #15
 8009f38:	2503      	movs	r5, #3
 8009f3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a210 <_dtoa_r+0x640>
 8009f3e:	f1b8 0f00 	cmp.w	r8, #0
 8009f42:	d10a      	bne.n	8009f5a <_dtoa_r+0x38a>
 8009f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f48:	4632      	mov	r2, r6
 8009f4a:	463b      	mov	r3, r7
 8009f4c:	f7f6 fc7e 	bl	800084c <__aeabi_ddiv>
 8009f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f54:	e02b      	b.n	8009fae <_dtoa_r+0x3de>
 8009f56:	2502      	movs	r5, #2
 8009f58:	e7ef      	b.n	8009f3a <_dtoa_r+0x36a>
 8009f5a:	f018 0f01 	tst.w	r8, #1
 8009f5e:	d008      	beq.n	8009f72 <_dtoa_r+0x3a2>
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009f68:	f7f6 fb46 	bl	80005f8 <__aeabi_dmul>
 8009f6c:	3501      	adds	r5, #1
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460f      	mov	r7, r1
 8009f72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009f76:	f109 0908 	add.w	r9, r9, #8
 8009f7a:	e7e0      	b.n	8009f3e <_dtoa_r+0x36e>
 8009f7c:	f000 809f 	beq.w	800a0be <_dtoa_r+0x4ee>
 8009f80:	f1cb 0600 	rsb	r6, fp, #0
 8009f84:	4ba1      	ldr	r3, [pc, #644]	; (800a20c <_dtoa_r+0x63c>)
 8009f86:	4fa2      	ldr	r7, [pc, #648]	; (800a210 <_dtoa_r+0x640>)
 8009f88:	f006 020f 	and.w	r2, r6, #15
 8009f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	ec51 0b18 	vmov	r0, r1, d8
 8009f98:	f7f6 fb2e 	bl	80005f8 <__aeabi_dmul>
 8009f9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fa0:	1136      	asrs	r6, r6, #4
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2502      	movs	r5, #2
 8009fa6:	2e00      	cmp	r6, #0
 8009fa8:	d17e      	bne.n	800a0a8 <_dtoa_r+0x4d8>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1d0      	bne.n	8009f50 <_dtoa_r+0x380>
 8009fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	f000 8084 	beq.w	800a0c2 <_dtoa_r+0x4f2>
 8009fba:	4b96      	ldr	r3, [pc, #600]	; (800a214 <_dtoa_r+0x644>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4640      	mov	r0, r8
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	f7f6 fd8b 	bl	8000adc <__aeabi_dcmplt>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d07b      	beq.n	800a0c2 <_dtoa_r+0x4f2>
 8009fca:	9b04      	ldr	r3, [sp, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d078      	beq.n	800a0c2 <_dtoa_r+0x4f2>
 8009fd0:	9b01      	ldr	r3, [sp, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	dd39      	ble.n	800a04a <_dtoa_r+0x47a>
 8009fd6:	4b90      	ldr	r3, [pc, #576]	; (800a218 <_dtoa_r+0x648>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	4640      	mov	r0, r8
 8009fdc:	4649      	mov	r1, r9
 8009fde:	f7f6 fb0b 	bl	80005f8 <__aeabi_dmul>
 8009fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fe6:	9e01      	ldr	r6, [sp, #4]
 8009fe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009fec:	3501      	adds	r5, #1
 8009fee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7f6 fa96 	bl	8000524 <__aeabi_i2d>
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	464b      	mov	r3, r9
 8009ffc:	f7f6 fafc 	bl	80005f8 <__aeabi_dmul>
 800a000:	4b86      	ldr	r3, [pc, #536]	; (800a21c <_dtoa_r+0x64c>)
 800a002:	2200      	movs	r2, #0
 800a004:	f7f6 f942 	bl	800028c <__adddf3>
 800a008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a010:	9303      	str	r3, [sp, #12]
 800a012:	2e00      	cmp	r6, #0
 800a014:	d158      	bne.n	800a0c8 <_dtoa_r+0x4f8>
 800a016:	4b82      	ldr	r3, [pc, #520]	; (800a220 <_dtoa_r+0x650>)
 800a018:	2200      	movs	r2, #0
 800a01a:	4640      	mov	r0, r8
 800a01c:	4649      	mov	r1, r9
 800a01e:	f7f6 f933 	bl	8000288 <__aeabi_dsub>
 800a022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a026:	4680      	mov	r8, r0
 800a028:	4689      	mov	r9, r1
 800a02a:	f7f6 fd75 	bl	8000b18 <__aeabi_dcmpgt>
 800a02e:	2800      	cmp	r0, #0
 800a030:	f040 8296 	bne.w	800a560 <_dtoa_r+0x990>
 800a034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a038:	4640      	mov	r0, r8
 800a03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a03e:	4649      	mov	r1, r9
 800a040:	f7f6 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800a044:	2800      	cmp	r0, #0
 800a046:	f040 8289 	bne.w	800a55c <_dtoa_r+0x98c>
 800a04a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a050:	2b00      	cmp	r3, #0
 800a052:	f2c0 814e 	blt.w	800a2f2 <_dtoa_r+0x722>
 800a056:	f1bb 0f0e 	cmp.w	fp, #14
 800a05a:	f300 814a 	bgt.w	800a2f2 <_dtoa_r+0x722>
 800a05e:	4b6b      	ldr	r3, [pc, #428]	; (800a20c <_dtoa_r+0x63c>)
 800a060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a064:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f280 80dc 	bge.w	800a228 <_dtoa_r+0x658>
 800a070:	9b04      	ldr	r3, [sp, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	f300 80d8 	bgt.w	800a228 <_dtoa_r+0x658>
 800a078:	f040 826f 	bne.w	800a55a <_dtoa_r+0x98a>
 800a07c:	4b68      	ldr	r3, [pc, #416]	; (800a220 <_dtoa_r+0x650>)
 800a07e:	2200      	movs	r2, #0
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fab8 	bl	80005f8 <__aeabi_dmul>
 800a088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a08c:	f7f6 fd3a 	bl	8000b04 <__aeabi_dcmpge>
 800a090:	9e04      	ldr	r6, [sp, #16]
 800a092:	4637      	mov	r7, r6
 800a094:	2800      	cmp	r0, #0
 800a096:	f040 8245 	bne.w	800a524 <_dtoa_r+0x954>
 800a09a:	9d00      	ldr	r5, [sp, #0]
 800a09c:	2331      	movs	r3, #49	; 0x31
 800a09e:	f805 3b01 	strb.w	r3, [r5], #1
 800a0a2:	f10b 0b01 	add.w	fp, fp, #1
 800a0a6:	e241      	b.n	800a52c <_dtoa_r+0x95c>
 800a0a8:	07f2      	lsls	r2, r6, #31
 800a0aa:	d505      	bpl.n	800a0b8 <_dtoa_r+0x4e8>
 800a0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0b0:	f7f6 faa2 	bl	80005f8 <__aeabi_dmul>
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	1076      	asrs	r6, r6, #1
 800a0ba:	3708      	adds	r7, #8
 800a0bc:	e773      	b.n	8009fa6 <_dtoa_r+0x3d6>
 800a0be:	2502      	movs	r5, #2
 800a0c0:	e775      	b.n	8009fae <_dtoa_r+0x3de>
 800a0c2:	9e04      	ldr	r6, [sp, #16]
 800a0c4:	465f      	mov	r7, fp
 800a0c6:	e792      	b.n	8009fee <_dtoa_r+0x41e>
 800a0c8:	9900      	ldr	r1, [sp, #0]
 800a0ca:	4b50      	ldr	r3, [pc, #320]	; (800a20c <_dtoa_r+0x63c>)
 800a0cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0d0:	4431      	add	r1, r6
 800a0d2:	9102      	str	r1, [sp, #8]
 800a0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0d6:	eeb0 9a47 	vmov.f32	s18, s14
 800a0da:	eef0 9a67 	vmov.f32	s19, s15
 800a0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d044      	beq.n	800a174 <_dtoa_r+0x5a4>
 800a0ea:	494e      	ldr	r1, [pc, #312]	; (800a224 <_dtoa_r+0x654>)
 800a0ec:	2000      	movs	r0, #0
 800a0ee:	f7f6 fbad 	bl	800084c <__aeabi_ddiv>
 800a0f2:	ec53 2b19 	vmov	r2, r3, d9
 800a0f6:	f7f6 f8c7 	bl	8000288 <__aeabi_dsub>
 800a0fa:	9d00      	ldr	r5, [sp, #0]
 800a0fc:	ec41 0b19 	vmov	d9, r0, r1
 800a100:	4649      	mov	r1, r9
 800a102:	4640      	mov	r0, r8
 800a104:	f7f6 fd28 	bl	8000b58 <__aeabi_d2iz>
 800a108:	4606      	mov	r6, r0
 800a10a:	f7f6 fa0b 	bl	8000524 <__aeabi_i2d>
 800a10e:	4602      	mov	r2, r0
 800a110:	460b      	mov	r3, r1
 800a112:	4640      	mov	r0, r8
 800a114:	4649      	mov	r1, r9
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	3630      	adds	r6, #48	; 0x30
 800a11c:	f805 6b01 	strb.w	r6, [r5], #1
 800a120:	ec53 2b19 	vmov	r2, r3, d9
 800a124:	4680      	mov	r8, r0
 800a126:	4689      	mov	r9, r1
 800a128:	f7f6 fcd8 	bl	8000adc <__aeabi_dcmplt>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	d164      	bne.n	800a1fa <_dtoa_r+0x62a>
 800a130:	4642      	mov	r2, r8
 800a132:	464b      	mov	r3, r9
 800a134:	4937      	ldr	r1, [pc, #220]	; (800a214 <_dtoa_r+0x644>)
 800a136:	2000      	movs	r0, #0
 800a138:	f7f6 f8a6 	bl	8000288 <__aeabi_dsub>
 800a13c:	ec53 2b19 	vmov	r2, r3, d9
 800a140:	f7f6 fccc 	bl	8000adc <__aeabi_dcmplt>
 800a144:	2800      	cmp	r0, #0
 800a146:	f040 80b6 	bne.w	800a2b6 <_dtoa_r+0x6e6>
 800a14a:	9b02      	ldr	r3, [sp, #8]
 800a14c:	429d      	cmp	r5, r3
 800a14e:	f43f af7c 	beq.w	800a04a <_dtoa_r+0x47a>
 800a152:	4b31      	ldr	r3, [pc, #196]	; (800a218 <_dtoa_r+0x648>)
 800a154:	ec51 0b19 	vmov	r0, r1, d9
 800a158:	2200      	movs	r2, #0
 800a15a:	f7f6 fa4d 	bl	80005f8 <__aeabi_dmul>
 800a15e:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <_dtoa_r+0x648>)
 800a160:	ec41 0b19 	vmov	d9, r0, r1
 800a164:	2200      	movs	r2, #0
 800a166:	4640      	mov	r0, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f7f6 fa45 	bl	80005f8 <__aeabi_dmul>
 800a16e:	4680      	mov	r8, r0
 800a170:	4689      	mov	r9, r1
 800a172:	e7c5      	b.n	800a100 <_dtoa_r+0x530>
 800a174:	ec51 0b17 	vmov	r0, r1, d7
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	9b02      	ldr	r3, [sp, #8]
 800a17e:	9d00      	ldr	r5, [sp, #0]
 800a180:	930f      	str	r3, [sp, #60]	; 0x3c
 800a182:	ec41 0b19 	vmov	d9, r0, r1
 800a186:	4649      	mov	r1, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	f7f6 fce5 	bl	8000b58 <__aeabi_d2iz>
 800a18e:	4606      	mov	r6, r0
 800a190:	f7f6 f9c8 	bl	8000524 <__aeabi_i2d>
 800a194:	3630      	adds	r6, #48	; 0x30
 800a196:	4602      	mov	r2, r0
 800a198:	460b      	mov	r3, r1
 800a19a:	4640      	mov	r0, r8
 800a19c:	4649      	mov	r1, r9
 800a19e:	f7f6 f873 	bl	8000288 <__aeabi_dsub>
 800a1a2:	f805 6b01 	strb.w	r6, [r5], #1
 800a1a6:	9b02      	ldr	r3, [sp, #8]
 800a1a8:	429d      	cmp	r5, r3
 800a1aa:	4680      	mov	r8, r0
 800a1ac:	4689      	mov	r9, r1
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	d124      	bne.n	800a1fe <_dtoa_r+0x62e>
 800a1b4:	4b1b      	ldr	r3, [pc, #108]	; (800a224 <_dtoa_r+0x654>)
 800a1b6:	ec51 0b19 	vmov	r0, r1, d9
 800a1ba:	f7f6 f867 	bl	800028c <__adddf3>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4640      	mov	r0, r8
 800a1c4:	4649      	mov	r1, r9
 800a1c6:	f7f6 fca7 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ca:	2800      	cmp	r0, #0
 800a1cc:	d173      	bne.n	800a2b6 <_dtoa_r+0x6e6>
 800a1ce:	ec53 2b19 	vmov	r2, r3, d9
 800a1d2:	4914      	ldr	r1, [pc, #80]	; (800a224 <_dtoa_r+0x654>)
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4640      	mov	r0, r8
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	f7f6 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	f43f af2f 	beq.w	800a04a <_dtoa_r+0x47a>
 800a1ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a1ee:	1e6b      	subs	r3, r5, #1
 800a1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1f6:	2b30      	cmp	r3, #48	; 0x30
 800a1f8:	d0f8      	beq.n	800a1ec <_dtoa_r+0x61c>
 800a1fa:	46bb      	mov	fp, r7
 800a1fc:	e04a      	b.n	800a294 <_dtoa_r+0x6c4>
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <_dtoa_r+0x648>)
 800a200:	f7f6 f9fa 	bl	80005f8 <__aeabi_dmul>
 800a204:	4680      	mov	r8, r0
 800a206:	4689      	mov	r9, r1
 800a208:	e7bd      	b.n	800a186 <_dtoa_r+0x5b6>
 800a20a:	bf00      	nop
 800a20c:	0800c700 	.word	0x0800c700
 800a210:	0800c6d8 	.word	0x0800c6d8
 800a214:	3ff00000 	.word	0x3ff00000
 800a218:	40240000 	.word	0x40240000
 800a21c:	401c0000 	.word	0x401c0000
 800a220:	40140000 	.word	0x40140000
 800a224:	3fe00000 	.word	0x3fe00000
 800a228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a22c:	9d00      	ldr	r5, [sp, #0]
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4630      	mov	r0, r6
 800a234:	4639      	mov	r1, r7
 800a236:	f7f6 fb09 	bl	800084c <__aeabi_ddiv>
 800a23a:	f7f6 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800a23e:	9001      	str	r0, [sp, #4]
 800a240:	f7f6 f970 	bl	8000524 <__aeabi_i2d>
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	f7f6 f9d6 	bl	80005f8 <__aeabi_dmul>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4630      	mov	r0, r6
 800a252:	4639      	mov	r1, r7
 800a254:	f7f6 f818 	bl	8000288 <__aeabi_dsub>
 800a258:	9e01      	ldr	r6, [sp, #4]
 800a25a:	9f04      	ldr	r7, [sp, #16]
 800a25c:	3630      	adds	r6, #48	; 0x30
 800a25e:	f805 6b01 	strb.w	r6, [r5], #1
 800a262:	9e00      	ldr	r6, [sp, #0]
 800a264:	1bae      	subs	r6, r5, r6
 800a266:	42b7      	cmp	r7, r6
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	d134      	bne.n	800a2d8 <_dtoa_r+0x708>
 800a26e:	f7f6 f80d 	bl	800028c <__adddf3>
 800a272:	4642      	mov	r2, r8
 800a274:	464b      	mov	r3, r9
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	f7f6 fc4d 	bl	8000b18 <__aeabi_dcmpgt>
 800a27e:	b9c8      	cbnz	r0, 800a2b4 <_dtoa_r+0x6e4>
 800a280:	4642      	mov	r2, r8
 800a282:	464b      	mov	r3, r9
 800a284:	4630      	mov	r0, r6
 800a286:	4639      	mov	r1, r7
 800a288:	f7f6 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a28c:	b110      	cbz	r0, 800a294 <_dtoa_r+0x6c4>
 800a28e:	9b01      	ldr	r3, [sp, #4]
 800a290:	07db      	lsls	r3, r3, #31
 800a292:	d40f      	bmi.n	800a2b4 <_dtoa_r+0x6e4>
 800a294:	4651      	mov	r1, sl
 800a296:	4620      	mov	r0, r4
 800a298:	f000 ff36 	bl	800b108 <_Bfree>
 800a29c:	2300      	movs	r3, #0
 800a29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2a0:	702b      	strb	r3, [r5, #0]
 800a2a2:	f10b 0301 	add.w	r3, fp, #1
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f43f ace2 	beq.w	8009c74 <_dtoa_r+0xa4>
 800a2b0:	601d      	str	r5, [r3, #0]
 800a2b2:	e4df      	b.n	8009c74 <_dtoa_r+0xa4>
 800a2b4:	465f      	mov	r7, fp
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	461d      	mov	r5, r3
 800a2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2be:	2a39      	cmp	r2, #57	; 0x39
 800a2c0:	d106      	bne.n	800a2d0 <_dtoa_r+0x700>
 800a2c2:	9a00      	ldr	r2, [sp, #0]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d1f7      	bne.n	800a2b8 <_dtoa_r+0x6e8>
 800a2c8:	9900      	ldr	r1, [sp, #0]
 800a2ca:	2230      	movs	r2, #48	; 0x30
 800a2cc:	3701      	adds	r7, #1
 800a2ce:	700a      	strb	r2, [r1, #0]
 800a2d0:	781a      	ldrb	r2, [r3, #0]
 800a2d2:	3201      	adds	r2, #1
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	e790      	b.n	800a1fa <_dtoa_r+0x62a>
 800a2d8:	4ba3      	ldr	r3, [pc, #652]	; (800a568 <_dtoa_r+0x998>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f7f6 f98c 	bl	80005f8 <__aeabi_dmul>
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	4606      	mov	r6, r0
 800a2e6:	460f      	mov	r7, r1
 800a2e8:	f7f6 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	d09e      	beq.n	800a22e <_dtoa_r+0x65e>
 800a2f0:	e7d0      	b.n	800a294 <_dtoa_r+0x6c4>
 800a2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2f4:	2a00      	cmp	r2, #0
 800a2f6:	f000 80ca 	beq.w	800a48e <_dtoa_r+0x8be>
 800a2fa:	9a07      	ldr	r2, [sp, #28]
 800a2fc:	2a01      	cmp	r2, #1
 800a2fe:	f300 80ad 	bgt.w	800a45c <_dtoa_r+0x88c>
 800a302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a304:	2a00      	cmp	r2, #0
 800a306:	f000 80a5 	beq.w	800a454 <_dtoa_r+0x884>
 800a30a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a30e:	9e08      	ldr	r6, [sp, #32]
 800a310:	9d05      	ldr	r5, [sp, #20]
 800a312:	9a05      	ldr	r2, [sp, #20]
 800a314:	441a      	add	r2, r3
 800a316:	9205      	str	r2, [sp, #20]
 800a318:	9a06      	ldr	r2, [sp, #24]
 800a31a:	2101      	movs	r1, #1
 800a31c:	441a      	add	r2, r3
 800a31e:	4620      	mov	r0, r4
 800a320:	9206      	str	r2, [sp, #24]
 800a322:	f000 fff1 	bl	800b308 <__i2b>
 800a326:	4607      	mov	r7, r0
 800a328:	b165      	cbz	r5, 800a344 <_dtoa_r+0x774>
 800a32a:	9b06      	ldr	r3, [sp, #24]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	dd09      	ble.n	800a344 <_dtoa_r+0x774>
 800a330:	42ab      	cmp	r3, r5
 800a332:	9a05      	ldr	r2, [sp, #20]
 800a334:	bfa8      	it	ge
 800a336:	462b      	movge	r3, r5
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	9205      	str	r2, [sp, #20]
 800a33c:	9a06      	ldr	r2, [sp, #24]
 800a33e:	1aed      	subs	r5, r5, r3
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	9306      	str	r3, [sp, #24]
 800a344:	9b08      	ldr	r3, [sp, #32]
 800a346:	b1f3      	cbz	r3, 800a386 <_dtoa_r+0x7b6>
 800a348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f000 80a3 	beq.w	800a496 <_dtoa_r+0x8c6>
 800a350:	2e00      	cmp	r6, #0
 800a352:	dd10      	ble.n	800a376 <_dtoa_r+0x7a6>
 800a354:	4639      	mov	r1, r7
 800a356:	4632      	mov	r2, r6
 800a358:	4620      	mov	r0, r4
 800a35a:	f001 f895 	bl	800b488 <__pow5mult>
 800a35e:	4652      	mov	r2, sl
 800a360:	4601      	mov	r1, r0
 800a362:	4607      	mov	r7, r0
 800a364:	4620      	mov	r0, r4
 800a366:	f000 ffe5 	bl	800b334 <__multiply>
 800a36a:	4651      	mov	r1, sl
 800a36c:	4680      	mov	r8, r0
 800a36e:	4620      	mov	r0, r4
 800a370:	f000 feca 	bl	800b108 <_Bfree>
 800a374:	46c2      	mov	sl, r8
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	1b9a      	subs	r2, r3, r6
 800a37a:	d004      	beq.n	800a386 <_dtoa_r+0x7b6>
 800a37c:	4651      	mov	r1, sl
 800a37e:	4620      	mov	r0, r4
 800a380:	f001 f882 	bl	800b488 <__pow5mult>
 800a384:	4682      	mov	sl, r0
 800a386:	2101      	movs	r1, #1
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 ffbd 	bl	800b308 <__i2b>
 800a38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	4606      	mov	r6, r0
 800a394:	f340 8081 	ble.w	800a49a <_dtoa_r+0x8ca>
 800a398:	461a      	mov	r2, r3
 800a39a:	4601      	mov	r1, r0
 800a39c:	4620      	mov	r0, r4
 800a39e:	f001 f873 	bl	800b488 <__pow5mult>
 800a3a2:	9b07      	ldr	r3, [sp, #28]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	dd7a      	ble.n	800a4a0 <_dtoa_r+0x8d0>
 800a3aa:	f04f 0800 	mov.w	r8, #0
 800a3ae:	6933      	ldr	r3, [r6, #16]
 800a3b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3b4:	6918      	ldr	r0, [r3, #16]
 800a3b6:	f000 ff59 	bl	800b26c <__hi0bits>
 800a3ba:	f1c0 0020 	rsb	r0, r0, #32
 800a3be:	9b06      	ldr	r3, [sp, #24]
 800a3c0:	4418      	add	r0, r3
 800a3c2:	f010 001f 	ands.w	r0, r0, #31
 800a3c6:	f000 8094 	beq.w	800a4f2 <_dtoa_r+0x922>
 800a3ca:	f1c0 0320 	rsb	r3, r0, #32
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	f340 8085 	ble.w	800a4de <_dtoa_r+0x90e>
 800a3d4:	9b05      	ldr	r3, [sp, #20]
 800a3d6:	f1c0 001c 	rsb	r0, r0, #28
 800a3da:	4403      	add	r3, r0
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	4403      	add	r3, r0
 800a3e2:	4405      	add	r5, r0
 800a3e4:	9306      	str	r3, [sp, #24]
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd05      	ble.n	800a3f8 <_dtoa_r+0x828>
 800a3ec:	4651      	mov	r1, sl
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f001 f8a3 	bl	800b53c <__lshift>
 800a3f6:	4682      	mov	sl, r0
 800a3f8:	9b06      	ldr	r3, [sp, #24]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd05      	ble.n	800a40a <_dtoa_r+0x83a>
 800a3fe:	4631      	mov	r1, r6
 800a400:	461a      	mov	r2, r3
 800a402:	4620      	mov	r0, r4
 800a404:	f001 f89a 	bl	800b53c <__lshift>
 800a408:	4606      	mov	r6, r0
 800a40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d072      	beq.n	800a4f6 <_dtoa_r+0x926>
 800a410:	4631      	mov	r1, r6
 800a412:	4650      	mov	r0, sl
 800a414:	f001 f8fe 	bl	800b614 <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	da6c      	bge.n	800a4f6 <_dtoa_r+0x926>
 800a41c:	2300      	movs	r3, #0
 800a41e:	4651      	mov	r1, sl
 800a420:	220a      	movs	r2, #10
 800a422:	4620      	mov	r0, r4
 800a424:	f000 fe92 	bl	800b14c <__multadd>
 800a428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a42a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a42e:	4682      	mov	sl, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 81b0 	beq.w	800a796 <_dtoa_r+0xbc6>
 800a436:	2300      	movs	r3, #0
 800a438:	4639      	mov	r1, r7
 800a43a:	220a      	movs	r2, #10
 800a43c:	4620      	mov	r0, r4
 800a43e:	f000 fe85 	bl	800b14c <__multadd>
 800a442:	9b01      	ldr	r3, [sp, #4]
 800a444:	2b00      	cmp	r3, #0
 800a446:	4607      	mov	r7, r0
 800a448:	f300 8096 	bgt.w	800a578 <_dtoa_r+0x9a8>
 800a44c:	9b07      	ldr	r3, [sp, #28]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	dc59      	bgt.n	800a506 <_dtoa_r+0x936>
 800a452:	e091      	b.n	800a578 <_dtoa_r+0x9a8>
 800a454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a45a:	e758      	b.n	800a30e <_dtoa_r+0x73e>
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	1e5e      	subs	r6, r3, #1
 800a460:	9b08      	ldr	r3, [sp, #32]
 800a462:	42b3      	cmp	r3, r6
 800a464:	bfbf      	itttt	lt
 800a466:	9b08      	ldrlt	r3, [sp, #32]
 800a468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a46a:	9608      	strlt	r6, [sp, #32]
 800a46c:	1af3      	sublt	r3, r6, r3
 800a46e:	bfb4      	ite	lt
 800a470:	18d2      	addlt	r2, r2, r3
 800a472:	1b9e      	subge	r6, r3, r6
 800a474:	9b04      	ldr	r3, [sp, #16]
 800a476:	bfbc      	itt	lt
 800a478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a47a:	2600      	movlt	r6, #0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	bfb7      	itett	lt
 800a480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a488:	1a9d      	sublt	r5, r3, r2
 800a48a:	2300      	movlt	r3, #0
 800a48c:	e741      	b.n	800a312 <_dtoa_r+0x742>
 800a48e:	9e08      	ldr	r6, [sp, #32]
 800a490:	9d05      	ldr	r5, [sp, #20]
 800a492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a494:	e748      	b.n	800a328 <_dtoa_r+0x758>
 800a496:	9a08      	ldr	r2, [sp, #32]
 800a498:	e770      	b.n	800a37c <_dtoa_r+0x7ac>
 800a49a:	9b07      	ldr	r3, [sp, #28]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	dc19      	bgt.n	800a4d4 <_dtoa_r+0x904>
 800a4a0:	9b02      	ldr	r3, [sp, #8]
 800a4a2:	b9bb      	cbnz	r3, 800a4d4 <_dtoa_r+0x904>
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4aa:	b99b      	cbnz	r3, 800a4d4 <_dtoa_r+0x904>
 800a4ac:	9b03      	ldr	r3, [sp, #12]
 800a4ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a4b2:	0d1b      	lsrs	r3, r3, #20
 800a4b4:	051b      	lsls	r3, r3, #20
 800a4b6:	b183      	cbz	r3, 800a4da <_dtoa_r+0x90a>
 800a4b8:	9b05      	ldr	r3, [sp, #20]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	9306      	str	r3, [sp, #24]
 800a4c4:	f04f 0801 	mov.w	r8, #1
 800a4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f47f af6f 	bne.w	800a3ae <_dtoa_r+0x7de>
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	e774      	b.n	800a3be <_dtoa_r+0x7ee>
 800a4d4:	f04f 0800 	mov.w	r8, #0
 800a4d8:	e7f6      	b.n	800a4c8 <_dtoa_r+0x8f8>
 800a4da:	4698      	mov	r8, r3
 800a4dc:	e7f4      	b.n	800a4c8 <_dtoa_r+0x8f8>
 800a4de:	d082      	beq.n	800a3e6 <_dtoa_r+0x816>
 800a4e0:	9a05      	ldr	r2, [sp, #20]
 800a4e2:	331c      	adds	r3, #28
 800a4e4:	441a      	add	r2, r3
 800a4e6:	9205      	str	r2, [sp, #20]
 800a4e8:	9a06      	ldr	r2, [sp, #24]
 800a4ea:	441a      	add	r2, r3
 800a4ec:	441d      	add	r5, r3
 800a4ee:	9206      	str	r2, [sp, #24]
 800a4f0:	e779      	b.n	800a3e6 <_dtoa_r+0x816>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	e7f4      	b.n	800a4e0 <_dtoa_r+0x910>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	dc37      	bgt.n	800a56c <_dtoa_r+0x99c>
 800a4fc:	9b07      	ldr	r3, [sp, #28]
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	dd34      	ble.n	800a56c <_dtoa_r+0x99c>
 800a502:	9b04      	ldr	r3, [sp, #16]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	9b01      	ldr	r3, [sp, #4]
 800a508:	b963      	cbnz	r3, 800a524 <_dtoa_r+0x954>
 800a50a:	4631      	mov	r1, r6
 800a50c:	2205      	movs	r2, #5
 800a50e:	4620      	mov	r0, r4
 800a510:	f000 fe1c 	bl	800b14c <__multadd>
 800a514:	4601      	mov	r1, r0
 800a516:	4606      	mov	r6, r0
 800a518:	4650      	mov	r0, sl
 800a51a:	f001 f87b 	bl	800b614 <__mcmp>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f73f adbb 	bgt.w	800a09a <_dtoa_r+0x4ca>
 800a524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a526:	9d00      	ldr	r5, [sp, #0]
 800a528:	ea6f 0b03 	mvn.w	fp, r3
 800a52c:	f04f 0800 	mov.w	r8, #0
 800a530:	4631      	mov	r1, r6
 800a532:	4620      	mov	r0, r4
 800a534:	f000 fde8 	bl	800b108 <_Bfree>
 800a538:	2f00      	cmp	r7, #0
 800a53a:	f43f aeab 	beq.w	800a294 <_dtoa_r+0x6c4>
 800a53e:	f1b8 0f00 	cmp.w	r8, #0
 800a542:	d005      	beq.n	800a550 <_dtoa_r+0x980>
 800a544:	45b8      	cmp	r8, r7
 800a546:	d003      	beq.n	800a550 <_dtoa_r+0x980>
 800a548:	4641      	mov	r1, r8
 800a54a:	4620      	mov	r0, r4
 800a54c:	f000 fddc 	bl	800b108 <_Bfree>
 800a550:	4639      	mov	r1, r7
 800a552:	4620      	mov	r0, r4
 800a554:	f000 fdd8 	bl	800b108 <_Bfree>
 800a558:	e69c      	b.n	800a294 <_dtoa_r+0x6c4>
 800a55a:	2600      	movs	r6, #0
 800a55c:	4637      	mov	r7, r6
 800a55e:	e7e1      	b.n	800a524 <_dtoa_r+0x954>
 800a560:	46bb      	mov	fp, r7
 800a562:	4637      	mov	r7, r6
 800a564:	e599      	b.n	800a09a <_dtoa_r+0x4ca>
 800a566:	bf00      	nop
 800a568:	40240000 	.word	0x40240000
 800a56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 80c8 	beq.w	800a704 <_dtoa_r+0xb34>
 800a574:	9b04      	ldr	r3, [sp, #16]
 800a576:	9301      	str	r3, [sp, #4]
 800a578:	2d00      	cmp	r5, #0
 800a57a:	dd05      	ble.n	800a588 <_dtoa_r+0x9b8>
 800a57c:	4639      	mov	r1, r7
 800a57e:	462a      	mov	r2, r5
 800a580:	4620      	mov	r0, r4
 800a582:	f000 ffdb 	bl	800b53c <__lshift>
 800a586:	4607      	mov	r7, r0
 800a588:	f1b8 0f00 	cmp.w	r8, #0
 800a58c:	d05b      	beq.n	800a646 <_dtoa_r+0xa76>
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	4620      	mov	r0, r4
 800a592:	f000 fd79 	bl	800b088 <_Balloc>
 800a596:	4605      	mov	r5, r0
 800a598:	b928      	cbnz	r0, 800a5a6 <_dtoa_r+0x9d6>
 800a59a:	4b83      	ldr	r3, [pc, #524]	; (800a7a8 <_dtoa_r+0xbd8>)
 800a59c:	4602      	mov	r2, r0
 800a59e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a5a2:	f7ff bb2e 	b.w	8009c02 <_dtoa_r+0x32>
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	3202      	adds	r2, #2
 800a5aa:	0092      	lsls	r2, r2, #2
 800a5ac:	f107 010c 	add.w	r1, r7, #12
 800a5b0:	300c      	adds	r0, #12
 800a5b2:	f7ff fa6e 	bl	8009a92 <memcpy>
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 ffbe 	bl	800b53c <__lshift>
 800a5c0:	9b00      	ldr	r3, [sp, #0]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	9304      	str	r3, [sp, #16]
 800a5c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	9308      	str	r3, [sp, #32]
 800a5ce:	9b02      	ldr	r3, [sp, #8]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	46b8      	mov	r8, r7
 800a5d6:	9306      	str	r3, [sp, #24]
 800a5d8:	4607      	mov	r7, r0
 800a5da:	9b04      	ldr	r3, [sp, #16]
 800a5dc:	4631      	mov	r1, r6
 800a5de:	3b01      	subs	r3, #1
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	9301      	str	r3, [sp, #4]
 800a5e4:	f7ff fa6c 	bl	8009ac0 <quorem>
 800a5e8:	4641      	mov	r1, r8
 800a5ea:	9002      	str	r0, [sp, #8]
 800a5ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a5f0:	4650      	mov	r0, sl
 800a5f2:	f001 f80f 	bl	800b614 <__mcmp>
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	9005      	str	r0, [sp, #20]
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f001 f825 	bl	800b64c <__mdiff>
 800a602:	68c2      	ldr	r2, [r0, #12]
 800a604:	4605      	mov	r5, r0
 800a606:	bb02      	cbnz	r2, 800a64a <_dtoa_r+0xa7a>
 800a608:	4601      	mov	r1, r0
 800a60a:	4650      	mov	r0, sl
 800a60c:	f001 f802 	bl	800b614 <__mcmp>
 800a610:	4602      	mov	r2, r0
 800a612:	4629      	mov	r1, r5
 800a614:	4620      	mov	r0, r4
 800a616:	9209      	str	r2, [sp, #36]	; 0x24
 800a618:	f000 fd76 	bl	800b108 <_Bfree>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a620:	9d04      	ldr	r5, [sp, #16]
 800a622:	ea43 0102 	orr.w	r1, r3, r2
 800a626:	9b06      	ldr	r3, [sp, #24]
 800a628:	4319      	orrs	r1, r3
 800a62a:	d110      	bne.n	800a64e <_dtoa_r+0xa7e>
 800a62c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a630:	d029      	beq.n	800a686 <_dtoa_r+0xab6>
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	2b00      	cmp	r3, #0
 800a636:	dd02      	ble.n	800a63e <_dtoa_r+0xa6e>
 800a638:	9b02      	ldr	r3, [sp, #8]
 800a63a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	f883 9000 	strb.w	r9, [r3]
 800a644:	e774      	b.n	800a530 <_dtoa_r+0x960>
 800a646:	4638      	mov	r0, r7
 800a648:	e7ba      	b.n	800a5c0 <_dtoa_r+0x9f0>
 800a64a:	2201      	movs	r2, #1
 800a64c:	e7e1      	b.n	800a612 <_dtoa_r+0xa42>
 800a64e:	9b05      	ldr	r3, [sp, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	db04      	blt.n	800a65e <_dtoa_r+0xa8e>
 800a654:	9907      	ldr	r1, [sp, #28]
 800a656:	430b      	orrs	r3, r1
 800a658:	9906      	ldr	r1, [sp, #24]
 800a65a:	430b      	orrs	r3, r1
 800a65c:	d120      	bne.n	800a6a0 <_dtoa_r+0xad0>
 800a65e:	2a00      	cmp	r2, #0
 800a660:	dded      	ble.n	800a63e <_dtoa_r+0xa6e>
 800a662:	4651      	mov	r1, sl
 800a664:	2201      	movs	r2, #1
 800a666:	4620      	mov	r0, r4
 800a668:	f000 ff68 	bl	800b53c <__lshift>
 800a66c:	4631      	mov	r1, r6
 800a66e:	4682      	mov	sl, r0
 800a670:	f000 ffd0 	bl	800b614 <__mcmp>
 800a674:	2800      	cmp	r0, #0
 800a676:	dc03      	bgt.n	800a680 <_dtoa_r+0xab0>
 800a678:	d1e1      	bne.n	800a63e <_dtoa_r+0xa6e>
 800a67a:	f019 0f01 	tst.w	r9, #1
 800a67e:	d0de      	beq.n	800a63e <_dtoa_r+0xa6e>
 800a680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a684:	d1d8      	bne.n	800a638 <_dtoa_r+0xa68>
 800a686:	9a01      	ldr	r2, [sp, #4]
 800a688:	2339      	movs	r3, #57	; 0x39
 800a68a:	7013      	strb	r3, [r2, #0]
 800a68c:	462b      	mov	r3, r5
 800a68e:	461d      	mov	r5, r3
 800a690:	3b01      	subs	r3, #1
 800a692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a696:	2a39      	cmp	r2, #57	; 0x39
 800a698:	d06c      	beq.n	800a774 <_dtoa_r+0xba4>
 800a69a:	3201      	adds	r2, #1
 800a69c:	701a      	strb	r2, [r3, #0]
 800a69e:	e747      	b.n	800a530 <_dtoa_r+0x960>
 800a6a0:	2a00      	cmp	r2, #0
 800a6a2:	dd07      	ble.n	800a6b4 <_dtoa_r+0xae4>
 800a6a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a6a8:	d0ed      	beq.n	800a686 <_dtoa_r+0xab6>
 800a6aa:	9a01      	ldr	r2, [sp, #4]
 800a6ac:	f109 0301 	add.w	r3, r9, #1
 800a6b0:	7013      	strb	r3, [r2, #0]
 800a6b2:	e73d      	b.n	800a530 <_dtoa_r+0x960>
 800a6b4:	9b04      	ldr	r3, [sp, #16]
 800a6b6:	9a08      	ldr	r2, [sp, #32]
 800a6b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d043      	beq.n	800a748 <_dtoa_r+0xb78>
 800a6c0:	4651      	mov	r1, sl
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	220a      	movs	r2, #10
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fd40 	bl	800b14c <__multadd>
 800a6cc:	45b8      	cmp	r8, r7
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	f04f 0300 	mov.w	r3, #0
 800a6d4:	f04f 020a 	mov.w	r2, #10
 800a6d8:	4641      	mov	r1, r8
 800a6da:	4620      	mov	r0, r4
 800a6dc:	d107      	bne.n	800a6ee <_dtoa_r+0xb1e>
 800a6de:	f000 fd35 	bl	800b14c <__multadd>
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4607      	mov	r7, r0
 800a6e6:	9b04      	ldr	r3, [sp, #16]
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	e775      	b.n	800a5da <_dtoa_r+0xa0a>
 800a6ee:	f000 fd2d 	bl	800b14c <__multadd>
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fd26 	bl	800b14c <__multadd>
 800a700:	4607      	mov	r7, r0
 800a702:	e7f0      	b.n	800a6e6 <_dtoa_r+0xb16>
 800a704:	9b04      	ldr	r3, [sp, #16]
 800a706:	9301      	str	r3, [sp, #4]
 800a708:	9d00      	ldr	r5, [sp, #0]
 800a70a:	4631      	mov	r1, r6
 800a70c:	4650      	mov	r0, sl
 800a70e:	f7ff f9d7 	bl	8009ac0 <quorem>
 800a712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a716:	9b00      	ldr	r3, [sp, #0]
 800a718:	f805 9b01 	strb.w	r9, [r5], #1
 800a71c:	1aea      	subs	r2, r5, r3
 800a71e:	9b01      	ldr	r3, [sp, #4]
 800a720:	4293      	cmp	r3, r2
 800a722:	dd07      	ble.n	800a734 <_dtoa_r+0xb64>
 800a724:	4651      	mov	r1, sl
 800a726:	2300      	movs	r3, #0
 800a728:	220a      	movs	r2, #10
 800a72a:	4620      	mov	r0, r4
 800a72c:	f000 fd0e 	bl	800b14c <__multadd>
 800a730:	4682      	mov	sl, r0
 800a732:	e7ea      	b.n	800a70a <_dtoa_r+0xb3a>
 800a734:	9b01      	ldr	r3, [sp, #4]
 800a736:	2b00      	cmp	r3, #0
 800a738:	bfc8      	it	gt
 800a73a:	461d      	movgt	r5, r3
 800a73c:	9b00      	ldr	r3, [sp, #0]
 800a73e:	bfd8      	it	le
 800a740:	2501      	movle	r5, #1
 800a742:	441d      	add	r5, r3
 800a744:	f04f 0800 	mov.w	r8, #0
 800a748:	4651      	mov	r1, sl
 800a74a:	2201      	movs	r2, #1
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fef5 	bl	800b53c <__lshift>
 800a752:	4631      	mov	r1, r6
 800a754:	4682      	mov	sl, r0
 800a756:	f000 ff5d 	bl	800b614 <__mcmp>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	dc96      	bgt.n	800a68c <_dtoa_r+0xabc>
 800a75e:	d102      	bne.n	800a766 <_dtoa_r+0xb96>
 800a760:	f019 0f01 	tst.w	r9, #1
 800a764:	d192      	bne.n	800a68c <_dtoa_r+0xabc>
 800a766:	462b      	mov	r3, r5
 800a768:	461d      	mov	r5, r3
 800a76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a76e:	2a30      	cmp	r2, #48	; 0x30
 800a770:	d0fa      	beq.n	800a768 <_dtoa_r+0xb98>
 800a772:	e6dd      	b.n	800a530 <_dtoa_r+0x960>
 800a774:	9a00      	ldr	r2, [sp, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d189      	bne.n	800a68e <_dtoa_r+0xabe>
 800a77a:	f10b 0b01 	add.w	fp, fp, #1
 800a77e:	2331      	movs	r3, #49	; 0x31
 800a780:	e796      	b.n	800a6b0 <_dtoa_r+0xae0>
 800a782:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <_dtoa_r+0xbdc>)
 800a784:	f7ff ba99 	b.w	8009cba <_dtoa_r+0xea>
 800a788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	f47f aa6d 	bne.w	8009c6a <_dtoa_r+0x9a>
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <_dtoa_r+0xbe0>)
 800a792:	f7ff ba92 	b.w	8009cba <_dtoa_r+0xea>
 800a796:	9b01      	ldr	r3, [sp, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dcb5      	bgt.n	800a708 <_dtoa_r+0xb38>
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	f73f aeb1 	bgt.w	800a506 <_dtoa_r+0x936>
 800a7a4:	e7b0      	b.n	800a708 <_dtoa_r+0xb38>
 800a7a6:	bf00      	nop
 800a7a8:	0800c608 	.word	0x0800c608
 800a7ac:	0800c560 	.word	0x0800c560
 800a7b0:	0800c58c 	.word	0x0800c58c

0800a7b4 <_free_r>:
 800a7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7b6:	2900      	cmp	r1, #0
 800a7b8:	d044      	beq.n	800a844 <_free_r+0x90>
 800a7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7be:	9001      	str	r0, [sp, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a7c6:	bfb8      	it	lt
 800a7c8:	18e4      	addlt	r4, r4, r3
 800a7ca:	f000 fc51 	bl	800b070 <__malloc_lock>
 800a7ce:	4a1e      	ldr	r2, [pc, #120]	; (800a848 <_free_r+0x94>)
 800a7d0:	9801      	ldr	r0, [sp, #4]
 800a7d2:	6813      	ldr	r3, [r2, #0]
 800a7d4:	b933      	cbnz	r3, 800a7e4 <_free_r+0x30>
 800a7d6:	6063      	str	r3, [r4, #4]
 800a7d8:	6014      	str	r4, [r2, #0]
 800a7da:	b003      	add	sp, #12
 800a7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7e0:	f000 bc4c 	b.w	800b07c <__malloc_unlock>
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	d908      	bls.n	800a7fa <_free_r+0x46>
 800a7e8:	6825      	ldr	r5, [r4, #0]
 800a7ea:	1961      	adds	r1, r4, r5
 800a7ec:	428b      	cmp	r3, r1
 800a7ee:	bf01      	itttt	eq
 800a7f0:	6819      	ldreq	r1, [r3, #0]
 800a7f2:	685b      	ldreq	r3, [r3, #4]
 800a7f4:	1949      	addeq	r1, r1, r5
 800a7f6:	6021      	streq	r1, [r4, #0]
 800a7f8:	e7ed      	b.n	800a7d6 <_free_r+0x22>
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	b10b      	cbz	r3, 800a804 <_free_r+0x50>
 800a800:	42a3      	cmp	r3, r4
 800a802:	d9fa      	bls.n	800a7fa <_free_r+0x46>
 800a804:	6811      	ldr	r1, [r2, #0]
 800a806:	1855      	adds	r5, r2, r1
 800a808:	42a5      	cmp	r5, r4
 800a80a:	d10b      	bne.n	800a824 <_free_r+0x70>
 800a80c:	6824      	ldr	r4, [r4, #0]
 800a80e:	4421      	add	r1, r4
 800a810:	1854      	adds	r4, r2, r1
 800a812:	42a3      	cmp	r3, r4
 800a814:	6011      	str	r1, [r2, #0]
 800a816:	d1e0      	bne.n	800a7da <_free_r+0x26>
 800a818:	681c      	ldr	r4, [r3, #0]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	6053      	str	r3, [r2, #4]
 800a81e:	440c      	add	r4, r1
 800a820:	6014      	str	r4, [r2, #0]
 800a822:	e7da      	b.n	800a7da <_free_r+0x26>
 800a824:	d902      	bls.n	800a82c <_free_r+0x78>
 800a826:	230c      	movs	r3, #12
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	e7d6      	b.n	800a7da <_free_r+0x26>
 800a82c:	6825      	ldr	r5, [r4, #0]
 800a82e:	1961      	adds	r1, r4, r5
 800a830:	428b      	cmp	r3, r1
 800a832:	bf04      	itt	eq
 800a834:	6819      	ldreq	r1, [r3, #0]
 800a836:	685b      	ldreq	r3, [r3, #4]
 800a838:	6063      	str	r3, [r4, #4]
 800a83a:	bf04      	itt	eq
 800a83c:	1949      	addeq	r1, r1, r5
 800a83e:	6021      	streq	r1, [r4, #0]
 800a840:	6054      	str	r4, [r2, #4]
 800a842:	e7ca      	b.n	800a7da <_free_r+0x26>
 800a844:	b003      	add	sp, #12
 800a846:	bd30      	pop	{r4, r5, pc}
 800a848:	20000a3c 	.word	0x20000a3c

0800a84c <rshift>:
 800a84c:	6903      	ldr	r3, [r0, #16]
 800a84e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a852:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a856:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a85a:	f100 0414 	add.w	r4, r0, #20
 800a85e:	dd45      	ble.n	800a8ec <rshift+0xa0>
 800a860:	f011 011f 	ands.w	r1, r1, #31
 800a864:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a868:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a86c:	d10c      	bne.n	800a888 <rshift+0x3c>
 800a86e:	f100 0710 	add.w	r7, r0, #16
 800a872:	4629      	mov	r1, r5
 800a874:	42b1      	cmp	r1, r6
 800a876:	d334      	bcc.n	800a8e2 <rshift+0x96>
 800a878:	1a9b      	subs	r3, r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	1eea      	subs	r2, r5, #3
 800a87e:	4296      	cmp	r6, r2
 800a880:	bf38      	it	cc
 800a882:	2300      	movcc	r3, #0
 800a884:	4423      	add	r3, r4
 800a886:	e015      	b.n	800a8b4 <rshift+0x68>
 800a888:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a88c:	f1c1 0820 	rsb	r8, r1, #32
 800a890:	40cf      	lsrs	r7, r1
 800a892:	f105 0e04 	add.w	lr, r5, #4
 800a896:	46a1      	mov	r9, r4
 800a898:	4576      	cmp	r6, lr
 800a89a:	46f4      	mov	ip, lr
 800a89c:	d815      	bhi.n	800a8ca <rshift+0x7e>
 800a89e:	1a9a      	subs	r2, r3, r2
 800a8a0:	0092      	lsls	r2, r2, #2
 800a8a2:	3a04      	subs	r2, #4
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	42ae      	cmp	r6, r5
 800a8a8:	bf38      	it	cc
 800a8aa:	2200      	movcc	r2, #0
 800a8ac:	18a3      	adds	r3, r4, r2
 800a8ae:	50a7      	str	r7, [r4, r2]
 800a8b0:	b107      	cbz	r7, 800a8b4 <rshift+0x68>
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	1b1a      	subs	r2, r3, r4
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a8bc:	bf08      	it	eq
 800a8be:	2300      	moveq	r3, #0
 800a8c0:	6102      	str	r2, [r0, #16]
 800a8c2:	bf08      	it	eq
 800a8c4:	6143      	streq	r3, [r0, #20]
 800a8c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8ca:	f8dc c000 	ldr.w	ip, [ip]
 800a8ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800a8d2:	ea4c 0707 	orr.w	r7, ip, r7
 800a8d6:	f849 7b04 	str.w	r7, [r9], #4
 800a8da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a8de:	40cf      	lsrs	r7, r1
 800a8e0:	e7da      	b.n	800a898 <rshift+0x4c>
 800a8e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a8e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a8ea:	e7c3      	b.n	800a874 <rshift+0x28>
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	e7e1      	b.n	800a8b4 <rshift+0x68>

0800a8f0 <__hexdig_fun>:
 800a8f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a8f4:	2b09      	cmp	r3, #9
 800a8f6:	d802      	bhi.n	800a8fe <__hexdig_fun+0xe>
 800a8f8:	3820      	subs	r0, #32
 800a8fa:	b2c0      	uxtb	r0, r0
 800a8fc:	4770      	bx	lr
 800a8fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a902:	2b05      	cmp	r3, #5
 800a904:	d801      	bhi.n	800a90a <__hexdig_fun+0x1a>
 800a906:	3847      	subs	r0, #71	; 0x47
 800a908:	e7f7      	b.n	800a8fa <__hexdig_fun+0xa>
 800a90a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a90e:	2b05      	cmp	r3, #5
 800a910:	d801      	bhi.n	800a916 <__hexdig_fun+0x26>
 800a912:	3827      	subs	r0, #39	; 0x27
 800a914:	e7f1      	b.n	800a8fa <__hexdig_fun+0xa>
 800a916:	2000      	movs	r0, #0
 800a918:	4770      	bx	lr
	...

0800a91c <__gethex>:
 800a91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a920:	4617      	mov	r7, r2
 800a922:	680a      	ldr	r2, [r1, #0]
 800a924:	b085      	sub	sp, #20
 800a926:	f102 0b02 	add.w	fp, r2, #2
 800a92a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a92e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a932:	4681      	mov	r9, r0
 800a934:	468a      	mov	sl, r1
 800a936:	9302      	str	r3, [sp, #8]
 800a938:	32fe      	adds	r2, #254	; 0xfe
 800a93a:	eb02 030b 	add.w	r3, r2, fp
 800a93e:	46d8      	mov	r8, fp
 800a940:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a944:	9301      	str	r3, [sp, #4]
 800a946:	2830      	cmp	r0, #48	; 0x30
 800a948:	d0f7      	beq.n	800a93a <__gethex+0x1e>
 800a94a:	f7ff ffd1 	bl	800a8f0 <__hexdig_fun>
 800a94e:	4604      	mov	r4, r0
 800a950:	2800      	cmp	r0, #0
 800a952:	d138      	bne.n	800a9c6 <__gethex+0xaa>
 800a954:	49a7      	ldr	r1, [pc, #668]	; (800abf4 <__gethex+0x2d8>)
 800a956:	2201      	movs	r2, #1
 800a958:	4640      	mov	r0, r8
 800a95a:	f7ff f810 	bl	800997e <strncmp>
 800a95e:	4606      	mov	r6, r0
 800a960:	2800      	cmp	r0, #0
 800a962:	d169      	bne.n	800aa38 <__gethex+0x11c>
 800a964:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a968:	465d      	mov	r5, fp
 800a96a:	f7ff ffc1 	bl	800a8f0 <__hexdig_fun>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d064      	beq.n	800aa3c <__gethex+0x120>
 800a972:	465a      	mov	r2, fp
 800a974:	7810      	ldrb	r0, [r2, #0]
 800a976:	2830      	cmp	r0, #48	; 0x30
 800a978:	4690      	mov	r8, r2
 800a97a:	f102 0201 	add.w	r2, r2, #1
 800a97e:	d0f9      	beq.n	800a974 <__gethex+0x58>
 800a980:	f7ff ffb6 	bl	800a8f0 <__hexdig_fun>
 800a984:	2301      	movs	r3, #1
 800a986:	fab0 f480 	clz	r4, r0
 800a98a:	0964      	lsrs	r4, r4, #5
 800a98c:	465e      	mov	r6, fp
 800a98e:	9301      	str	r3, [sp, #4]
 800a990:	4642      	mov	r2, r8
 800a992:	4615      	mov	r5, r2
 800a994:	3201      	adds	r2, #1
 800a996:	7828      	ldrb	r0, [r5, #0]
 800a998:	f7ff ffaa 	bl	800a8f0 <__hexdig_fun>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d1f8      	bne.n	800a992 <__gethex+0x76>
 800a9a0:	4994      	ldr	r1, [pc, #592]	; (800abf4 <__gethex+0x2d8>)
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	f7fe ffea 	bl	800997e <strncmp>
 800a9aa:	b978      	cbnz	r0, 800a9cc <__gethex+0xb0>
 800a9ac:	b946      	cbnz	r6, 800a9c0 <__gethex+0xa4>
 800a9ae:	1c6e      	adds	r6, r5, #1
 800a9b0:	4632      	mov	r2, r6
 800a9b2:	4615      	mov	r5, r2
 800a9b4:	3201      	adds	r2, #1
 800a9b6:	7828      	ldrb	r0, [r5, #0]
 800a9b8:	f7ff ff9a 	bl	800a8f0 <__hexdig_fun>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	d1f8      	bne.n	800a9b2 <__gethex+0x96>
 800a9c0:	1b73      	subs	r3, r6, r5
 800a9c2:	009e      	lsls	r6, r3, #2
 800a9c4:	e004      	b.n	800a9d0 <__gethex+0xb4>
 800a9c6:	2400      	movs	r4, #0
 800a9c8:	4626      	mov	r6, r4
 800a9ca:	e7e1      	b.n	800a990 <__gethex+0x74>
 800a9cc:	2e00      	cmp	r6, #0
 800a9ce:	d1f7      	bne.n	800a9c0 <__gethex+0xa4>
 800a9d0:	782b      	ldrb	r3, [r5, #0]
 800a9d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a9d6:	2b50      	cmp	r3, #80	; 0x50
 800a9d8:	d13d      	bne.n	800aa56 <__gethex+0x13a>
 800a9da:	786b      	ldrb	r3, [r5, #1]
 800a9dc:	2b2b      	cmp	r3, #43	; 0x2b
 800a9de:	d02f      	beq.n	800aa40 <__gethex+0x124>
 800a9e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a9e2:	d031      	beq.n	800aa48 <__gethex+0x12c>
 800a9e4:	1c69      	adds	r1, r5, #1
 800a9e6:	f04f 0b00 	mov.w	fp, #0
 800a9ea:	7808      	ldrb	r0, [r1, #0]
 800a9ec:	f7ff ff80 	bl	800a8f0 <__hexdig_fun>
 800a9f0:	1e42      	subs	r2, r0, #1
 800a9f2:	b2d2      	uxtb	r2, r2
 800a9f4:	2a18      	cmp	r2, #24
 800a9f6:	d82e      	bhi.n	800aa56 <__gethex+0x13a>
 800a9f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a9fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa00:	f7ff ff76 	bl	800a8f0 <__hexdig_fun>
 800aa04:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa08:	fa5f fc8c 	uxtb.w	ip, ip
 800aa0c:	f1bc 0f18 	cmp.w	ip, #24
 800aa10:	d91d      	bls.n	800aa4e <__gethex+0x132>
 800aa12:	f1bb 0f00 	cmp.w	fp, #0
 800aa16:	d000      	beq.n	800aa1a <__gethex+0xfe>
 800aa18:	4252      	negs	r2, r2
 800aa1a:	4416      	add	r6, r2
 800aa1c:	f8ca 1000 	str.w	r1, [sl]
 800aa20:	b1dc      	cbz	r4, 800aa5a <__gethex+0x13e>
 800aa22:	9b01      	ldr	r3, [sp, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	bf14      	ite	ne
 800aa28:	f04f 0800 	movne.w	r8, #0
 800aa2c:	f04f 0806 	moveq.w	r8, #6
 800aa30:	4640      	mov	r0, r8
 800aa32:	b005      	add	sp, #20
 800aa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa38:	4645      	mov	r5, r8
 800aa3a:	4626      	mov	r6, r4
 800aa3c:	2401      	movs	r4, #1
 800aa3e:	e7c7      	b.n	800a9d0 <__gethex+0xb4>
 800aa40:	f04f 0b00 	mov.w	fp, #0
 800aa44:	1ca9      	adds	r1, r5, #2
 800aa46:	e7d0      	b.n	800a9ea <__gethex+0xce>
 800aa48:	f04f 0b01 	mov.w	fp, #1
 800aa4c:	e7fa      	b.n	800aa44 <__gethex+0x128>
 800aa4e:	230a      	movs	r3, #10
 800aa50:	fb03 0002 	mla	r0, r3, r2, r0
 800aa54:	e7d0      	b.n	800a9f8 <__gethex+0xdc>
 800aa56:	4629      	mov	r1, r5
 800aa58:	e7e0      	b.n	800aa1c <__gethex+0x100>
 800aa5a:	eba5 0308 	sub.w	r3, r5, r8
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	4621      	mov	r1, r4
 800aa62:	2b07      	cmp	r3, #7
 800aa64:	dc0a      	bgt.n	800aa7c <__gethex+0x160>
 800aa66:	4648      	mov	r0, r9
 800aa68:	f000 fb0e 	bl	800b088 <_Balloc>
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	b940      	cbnz	r0, 800aa82 <__gethex+0x166>
 800aa70:	4b61      	ldr	r3, [pc, #388]	; (800abf8 <__gethex+0x2dc>)
 800aa72:	4602      	mov	r2, r0
 800aa74:	21e4      	movs	r1, #228	; 0xe4
 800aa76:	4861      	ldr	r0, [pc, #388]	; (800abfc <__gethex+0x2e0>)
 800aa78:	f001 f9f0 	bl	800be5c <__assert_func>
 800aa7c:	3101      	adds	r1, #1
 800aa7e:	105b      	asrs	r3, r3, #1
 800aa80:	e7ef      	b.n	800aa62 <__gethex+0x146>
 800aa82:	f100 0a14 	add.w	sl, r0, #20
 800aa86:	2300      	movs	r3, #0
 800aa88:	495a      	ldr	r1, [pc, #360]	; (800abf4 <__gethex+0x2d8>)
 800aa8a:	f8cd a004 	str.w	sl, [sp, #4]
 800aa8e:	469b      	mov	fp, r3
 800aa90:	45a8      	cmp	r8, r5
 800aa92:	d342      	bcc.n	800ab1a <__gethex+0x1fe>
 800aa94:	9801      	ldr	r0, [sp, #4]
 800aa96:	f840 bb04 	str.w	fp, [r0], #4
 800aa9a:	eba0 000a 	sub.w	r0, r0, sl
 800aa9e:	1080      	asrs	r0, r0, #2
 800aaa0:	6120      	str	r0, [r4, #16]
 800aaa2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800aaa6:	4658      	mov	r0, fp
 800aaa8:	f000 fbe0 	bl	800b26c <__hi0bits>
 800aaac:	683d      	ldr	r5, [r7, #0]
 800aaae:	eba8 0000 	sub.w	r0, r8, r0
 800aab2:	42a8      	cmp	r0, r5
 800aab4:	dd59      	ble.n	800ab6a <__gethex+0x24e>
 800aab6:	eba0 0805 	sub.w	r8, r0, r5
 800aaba:	4641      	mov	r1, r8
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 ff6f 	bl	800b9a0 <__any_on>
 800aac2:	4683      	mov	fp, r0
 800aac4:	b1b8      	cbz	r0, 800aaf6 <__gethex+0x1da>
 800aac6:	f108 33ff 	add.w	r3, r8, #4294967295
 800aaca:	1159      	asrs	r1, r3, #5
 800aacc:	f003 021f 	and.w	r2, r3, #31
 800aad0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aad4:	f04f 0b01 	mov.w	fp, #1
 800aad8:	fa0b f202 	lsl.w	r2, fp, r2
 800aadc:	420a      	tst	r2, r1
 800aade:	d00a      	beq.n	800aaf6 <__gethex+0x1da>
 800aae0:	455b      	cmp	r3, fp
 800aae2:	dd06      	ble.n	800aaf2 <__gethex+0x1d6>
 800aae4:	f1a8 0102 	sub.w	r1, r8, #2
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 ff59 	bl	800b9a0 <__any_on>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d138      	bne.n	800ab64 <__gethex+0x248>
 800aaf2:	f04f 0b02 	mov.w	fp, #2
 800aaf6:	4641      	mov	r1, r8
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff fea7 	bl	800a84c <rshift>
 800aafe:	4446      	add	r6, r8
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	42b3      	cmp	r3, r6
 800ab04:	da41      	bge.n	800ab8a <__gethex+0x26e>
 800ab06:	4621      	mov	r1, r4
 800ab08:	4648      	mov	r0, r9
 800ab0a:	f000 fafd 	bl	800b108 <_Bfree>
 800ab0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab10:	2300      	movs	r3, #0
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ab18:	e78a      	b.n	800aa30 <__gethex+0x114>
 800ab1a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ab1e:	2a2e      	cmp	r2, #46	; 0x2e
 800ab20:	d014      	beq.n	800ab4c <__gethex+0x230>
 800ab22:	2b20      	cmp	r3, #32
 800ab24:	d106      	bne.n	800ab34 <__gethex+0x218>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	f843 bb04 	str.w	fp, [r3], #4
 800ab2c:	f04f 0b00 	mov.w	fp, #0
 800ab30:	9301      	str	r3, [sp, #4]
 800ab32:	465b      	mov	r3, fp
 800ab34:	7828      	ldrb	r0, [r5, #0]
 800ab36:	9303      	str	r3, [sp, #12]
 800ab38:	f7ff feda 	bl	800a8f0 <__hexdig_fun>
 800ab3c:	9b03      	ldr	r3, [sp, #12]
 800ab3e:	f000 000f 	and.w	r0, r0, #15
 800ab42:	4098      	lsls	r0, r3
 800ab44:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab48:	3304      	adds	r3, #4
 800ab4a:	e7a1      	b.n	800aa90 <__gethex+0x174>
 800ab4c:	45a8      	cmp	r8, r5
 800ab4e:	d8e8      	bhi.n	800ab22 <__gethex+0x206>
 800ab50:	2201      	movs	r2, #1
 800ab52:	4628      	mov	r0, r5
 800ab54:	9303      	str	r3, [sp, #12]
 800ab56:	f7fe ff12 	bl	800997e <strncmp>
 800ab5a:	4926      	ldr	r1, [pc, #152]	; (800abf4 <__gethex+0x2d8>)
 800ab5c:	9b03      	ldr	r3, [sp, #12]
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d1df      	bne.n	800ab22 <__gethex+0x206>
 800ab62:	e795      	b.n	800aa90 <__gethex+0x174>
 800ab64:	f04f 0b03 	mov.w	fp, #3
 800ab68:	e7c5      	b.n	800aaf6 <__gethex+0x1da>
 800ab6a:	da0b      	bge.n	800ab84 <__gethex+0x268>
 800ab6c:	eba5 0800 	sub.w	r8, r5, r0
 800ab70:	4621      	mov	r1, r4
 800ab72:	4642      	mov	r2, r8
 800ab74:	4648      	mov	r0, r9
 800ab76:	f000 fce1 	bl	800b53c <__lshift>
 800ab7a:	eba6 0608 	sub.w	r6, r6, r8
 800ab7e:	4604      	mov	r4, r0
 800ab80:	f100 0a14 	add.w	sl, r0, #20
 800ab84:	f04f 0b00 	mov.w	fp, #0
 800ab88:	e7ba      	b.n	800ab00 <__gethex+0x1e4>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	42b3      	cmp	r3, r6
 800ab8e:	dd73      	ble.n	800ac78 <__gethex+0x35c>
 800ab90:	1b9e      	subs	r6, r3, r6
 800ab92:	42b5      	cmp	r5, r6
 800ab94:	dc34      	bgt.n	800ac00 <__gethex+0x2e4>
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d023      	beq.n	800abe4 <__gethex+0x2c8>
 800ab9c:	2b03      	cmp	r3, #3
 800ab9e:	d025      	beq.n	800abec <__gethex+0x2d0>
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d115      	bne.n	800abd0 <__gethex+0x2b4>
 800aba4:	42b5      	cmp	r5, r6
 800aba6:	d113      	bne.n	800abd0 <__gethex+0x2b4>
 800aba8:	2d01      	cmp	r5, #1
 800abaa:	d10b      	bne.n	800abc4 <__gethex+0x2a8>
 800abac:	9a02      	ldr	r2, [sp, #8]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	2301      	movs	r3, #1
 800abb4:	6123      	str	r3, [r4, #16]
 800abb6:	f8ca 3000 	str.w	r3, [sl]
 800abba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abbc:	f04f 0862 	mov.w	r8, #98	; 0x62
 800abc0:	601c      	str	r4, [r3, #0]
 800abc2:	e735      	b.n	800aa30 <__gethex+0x114>
 800abc4:	1e69      	subs	r1, r5, #1
 800abc6:	4620      	mov	r0, r4
 800abc8:	f000 feea 	bl	800b9a0 <__any_on>
 800abcc:	2800      	cmp	r0, #0
 800abce:	d1ed      	bne.n	800abac <__gethex+0x290>
 800abd0:	4621      	mov	r1, r4
 800abd2:	4648      	mov	r0, r9
 800abd4:	f000 fa98 	bl	800b108 <_Bfree>
 800abd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abda:	2300      	movs	r3, #0
 800abdc:	6013      	str	r3, [r2, #0]
 800abde:	f04f 0850 	mov.w	r8, #80	; 0x50
 800abe2:	e725      	b.n	800aa30 <__gethex+0x114>
 800abe4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d1f2      	bne.n	800abd0 <__gethex+0x2b4>
 800abea:	e7df      	b.n	800abac <__gethex+0x290>
 800abec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1dc      	bne.n	800abac <__gethex+0x290>
 800abf2:	e7ed      	b.n	800abd0 <__gethex+0x2b4>
 800abf4:	0800c4fc 	.word	0x0800c4fc
 800abf8:	0800c608 	.word	0x0800c608
 800abfc:	0800c619 	.word	0x0800c619
 800ac00:	f106 38ff 	add.w	r8, r6, #4294967295
 800ac04:	f1bb 0f00 	cmp.w	fp, #0
 800ac08:	d133      	bne.n	800ac72 <__gethex+0x356>
 800ac0a:	f1b8 0f00 	cmp.w	r8, #0
 800ac0e:	d004      	beq.n	800ac1a <__gethex+0x2fe>
 800ac10:	4641      	mov	r1, r8
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 fec4 	bl	800b9a0 <__any_on>
 800ac18:	4683      	mov	fp, r0
 800ac1a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac24:	f008 081f 	and.w	r8, r8, #31
 800ac28:	fa03 f308 	lsl.w	r3, r3, r8
 800ac2c:	4213      	tst	r3, r2
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4620      	mov	r0, r4
 800ac32:	bf18      	it	ne
 800ac34:	f04b 0b02 	orrne.w	fp, fp, #2
 800ac38:	1bad      	subs	r5, r5, r6
 800ac3a:	f7ff fe07 	bl	800a84c <rshift>
 800ac3e:	687e      	ldr	r6, [r7, #4]
 800ac40:	f04f 0802 	mov.w	r8, #2
 800ac44:	f1bb 0f00 	cmp.w	fp, #0
 800ac48:	d04a      	beq.n	800ace0 <__gethex+0x3c4>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d016      	beq.n	800ac7e <__gethex+0x362>
 800ac50:	2b03      	cmp	r3, #3
 800ac52:	d018      	beq.n	800ac86 <__gethex+0x36a>
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d109      	bne.n	800ac6c <__gethex+0x350>
 800ac58:	f01b 0f02 	tst.w	fp, #2
 800ac5c:	d006      	beq.n	800ac6c <__gethex+0x350>
 800ac5e:	f8da 3000 	ldr.w	r3, [sl]
 800ac62:	ea4b 0b03 	orr.w	fp, fp, r3
 800ac66:	f01b 0f01 	tst.w	fp, #1
 800ac6a:	d10f      	bne.n	800ac8c <__gethex+0x370>
 800ac6c:	f048 0810 	orr.w	r8, r8, #16
 800ac70:	e036      	b.n	800ace0 <__gethex+0x3c4>
 800ac72:	f04f 0b01 	mov.w	fp, #1
 800ac76:	e7d0      	b.n	800ac1a <__gethex+0x2fe>
 800ac78:	f04f 0801 	mov.w	r8, #1
 800ac7c:	e7e2      	b.n	800ac44 <__gethex+0x328>
 800ac7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac80:	f1c3 0301 	rsb	r3, r3, #1
 800ac84:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0ef      	beq.n	800ac6c <__gethex+0x350>
 800ac8c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac90:	f104 0214 	add.w	r2, r4, #20
 800ac94:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ac98:	9301      	str	r3, [sp, #4]
 800ac9a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4694      	mov	ip, r2
 800aca2:	f852 1b04 	ldr.w	r1, [r2], #4
 800aca6:	f1b1 3fff 	cmp.w	r1, #4294967295
 800acaa:	d01e      	beq.n	800acea <__gethex+0x3ce>
 800acac:	3101      	adds	r1, #1
 800acae:	f8cc 1000 	str.w	r1, [ip]
 800acb2:	f1b8 0f02 	cmp.w	r8, #2
 800acb6:	f104 0214 	add.w	r2, r4, #20
 800acba:	d13d      	bne.n	800ad38 <__gethex+0x41c>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	42ab      	cmp	r3, r5
 800acc2:	d10b      	bne.n	800acdc <__gethex+0x3c0>
 800acc4:	1169      	asrs	r1, r5, #5
 800acc6:	2301      	movs	r3, #1
 800acc8:	f005 051f 	and.w	r5, r5, #31
 800accc:	fa03 f505 	lsl.w	r5, r3, r5
 800acd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acd4:	421d      	tst	r5, r3
 800acd6:	bf18      	it	ne
 800acd8:	f04f 0801 	movne.w	r8, #1
 800acdc:	f048 0820 	orr.w	r8, r8, #32
 800ace0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ace2:	601c      	str	r4, [r3, #0]
 800ace4:	9b02      	ldr	r3, [sp, #8]
 800ace6:	601e      	str	r6, [r3, #0]
 800ace8:	e6a2      	b.n	800aa30 <__gethex+0x114>
 800acea:	4290      	cmp	r0, r2
 800acec:	f842 3c04 	str.w	r3, [r2, #-4]
 800acf0:	d8d6      	bhi.n	800aca0 <__gethex+0x384>
 800acf2:	68a2      	ldr	r2, [r4, #8]
 800acf4:	4593      	cmp	fp, r2
 800acf6:	db17      	blt.n	800ad28 <__gethex+0x40c>
 800acf8:	6861      	ldr	r1, [r4, #4]
 800acfa:	4648      	mov	r0, r9
 800acfc:	3101      	adds	r1, #1
 800acfe:	f000 f9c3 	bl	800b088 <_Balloc>
 800ad02:	4682      	mov	sl, r0
 800ad04:	b918      	cbnz	r0, 800ad0e <__gethex+0x3f2>
 800ad06:	4b1b      	ldr	r3, [pc, #108]	; (800ad74 <__gethex+0x458>)
 800ad08:	4602      	mov	r2, r0
 800ad0a:	2184      	movs	r1, #132	; 0x84
 800ad0c:	e6b3      	b.n	800aa76 <__gethex+0x15a>
 800ad0e:	6922      	ldr	r2, [r4, #16]
 800ad10:	3202      	adds	r2, #2
 800ad12:	f104 010c 	add.w	r1, r4, #12
 800ad16:	0092      	lsls	r2, r2, #2
 800ad18:	300c      	adds	r0, #12
 800ad1a:	f7fe feba 	bl	8009a92 <memcpy>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	4648      	mov	r0, r9
 800ad22:	f000 f9f1 	bl	800b108 <_Bfree>
 800ad26:	4654      	mov	r4, sl
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	1c51      	adds	r1, r2, #1
 800ad2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad30:	6121      	str	r1, [r4, #16]
 800ad32:	2101      	movs	r1, #1
 800ad34:	6151      	str	r1, [r2, #20]
 800ad36:	e7bc      	b.n	800acb2 <__gethex+0x396>
 800ad38:	6921      	ldr	r1, [r4, #16]
 800ad3a:	4559      	cmp	r1, fp
 800ad3c:	dd0b      	ble.n	800ad56 <__gethex+0x43a>
 800ad3e:	2101      	movs	r1, #1
 800ad40:	4620      	mov	r0, r4
 800ad42:	f7ff fd83 	bl	800a84c <rshift>
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	3601      	adds	r6, #1
 800ad4a:	42b3      	cmp	r3, r6
 800ad4c:	f6ff aedb 	blt.w	800ab06 <__gethex+0x1ea>
 800ad50:	f04f 0801 	mov.w	r8, #1
 800ad54:	e7c2      	b.n	800acdc <__gethex+0x3c0>
 800ad56:	f015 051f 	ands.w	r5, r5, #31
 800ad5a:	d0f9      	beq.n	800ad50 <__gethex+0x434>
 800ad5c:	9b01      	ldr	r3, [sp, #4]
 800ad5e:	441a      	add	r2, r3
 800ad60:	f1c5 0520 	rsb	r5, r5, #32
 800ad64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ad68:	f000 fa80 	bl	800b26c <__hi0bits>
 800ad6c:	42a8      	cmp	r0, r5
 800ad6e:	dbe6      	blt.n	800ad3e <__gethex+0x422>
 800ad70:	e7ee      	b.n	800ad50 <__gethex+0x434>
 800ad72:	bf00      	nop
 800ad74:	0800c608 	.word	0x0800c608

0800ad78 <L_shift>:
 800ad78:	f1c2 0208 	rsb	r2, r2, #8
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	b570      	push	{r4, r5, r6, lr}
 800ad80:	f1c2 0620 	rsb	r6, r2, #32
 800ad84:	6843      	ldr	r3, [r0, #4]
 800ad86:	6804      	ldr	r4, [r0, #0]
 800ad88:	fa03 f506 	lsl.w	r5, r3, r6
 800ad8c:	432c      	orrs	r4, r5
 800ad8e:	40d3      	lsrs	r3, r2
 800ad90:	6004      	str	r4, [r0, #0]
 800ad92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad96:	4288      	cmp	r0, r1
 800ad98:	d3f4      	bcc.n	800ad84 <L_shift+0xc>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}

0800ad9c <__match>:
 800ad9c:	b530      	push	{r4, r5, lr}
 800ad9e:	6803      	ldr	r3, [r0, #0]
 800ada0:	3301      	adds	r3, #1
 800ada2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada6:	b914      	cbnz	r4, 800adae <__match+0x12>
 800ada8:	6003      	str	r3, [r0, #0]
 800adaa:	2001      	movs	r0, #1
 800adac:	bd30      	pop	{r4, r5, pc}
 800adae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adb2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800adb6:	2d19      	cmp	r5, #25
 800adb8:	bf98      	it	ls
 800adba:	3220      	addls	r2, #32
 800adbc:	42a2      	cmp	r2, r4
 800adbe:	d0f0      	beq.n	800ada2 <__match+0x6>
 800adc0:	2000      	movs	r0, #0
 800adc2:	e7f3      	b.n	800adac <__match+0x10>

0800adc4 <__hexnan>:
 800adc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	680b      	ldr	r3, [r1, #0]
 800adca:	6801      	ldr	r1, [r0, #0]
 800adcc:	115e      	asrs	r6, r3, #5
 800adce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800add2:	f013 031f 	ands.w	r3, r3, #31
 800add6:	b087      	sub	sp, #28
 800add8:	bf18      	it	ne
 800adda:	3604      	addne	r6, #4
 800addc:	2500      	movs	r5, #0
 800adde:	1f37      	subs	r7, r6, #4
 800ade0:	4682      	mov	sl, r0
 800ade2:	4690      	mov	r8, r2
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	f846 5c04 	str.w	r5, [r6, #-4]
 800adea:	46b9      	mov	r9, r7
 800adec:	463c      	mov	r4, r7
 800adee:	9502      	str	r5, [sp, #8]
 800adf0:	46ab      	mov	fp, r5
 800adf2:	784a      	ldrb	r2, [r1, #1]
 800adf4:	1c4b      	adds	r3, r1, #1
 800adf6:	9303      	str	r3, [sp, #12]
 800adf8:	b342      	cbz	r2, 800ae4c <__hexnan+0x88>
 800adfa:	4610      	mov	r0, r2
 800adfc:	9105      	str	r1, [sp, #20]
 800adfe:	9204      	str	r2, [sp, #16]
 800ae00:	f7ff fd76 	bl	800a8f0 <__hexdig_fun>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d14f      	bne.n	800aea8 <__hexnan+0xe4>
 800ae08:	9a04      	ldr	r2, [sp, #16]
 800ae0a:	9905      	ldr	r1, [sp, #20]
 800ae0c:	2a20      	cmp	r2, #32
 800ae0e:	d818      	bhi.n	800ae42 <__hexnan+0x7e>
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	459b      	cmp	fp, r3
 800ae14:	dd13      	ble.n	800ae3e <__hexnan+0x7a>
 800ae16:	454c      	cmp	r4, r9
 800ae18:	d206      	bcs.n	800ae28 <__hexnan+0x64>
 800ae1a:	2d07      	cmp	r5, #7
 800ae1c:	dc04      	bgt.n	800ae28 <__hexnan+0x64>
 800ae1e:	462a      	mov	r2, r5
 800ae20:	4649      	mov	r1, r9
 800ae22:	4620      	mov	r0, r4
 800ae24:	f7ff ffa8 	bl	800ad78 <L_shift>
 800ae28:	4544      	cmp	r4, r8
 800ae2a:	d950      	bls.n	800aece <__hexnan+0x10a>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	f1a4 0904 	sub.w	r9, r4, #4
 800ae32:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae36:	f8cd b008 	str.w	fp, [sp, #8]
 800ae3a:	464c      	mov	r4, r9
 800ae3c:	461d      	mov	r5, r3
 800ae3e:	9903      	ldr	r1, [sp, #12]
 800ae40:	e7d7      	b.n	800adf2 <__hexnan+0x2e>
 800ae42:	2a29      	cmp	r2, #41	; 0x29
 800ae44:	d155      	bne.n	800aef2 <__hexnan+0x12e>
 800ae46:	3102      	adds	r1, #2
 800ae48:	f8ca 1000 	str.w	r1, [sl]
 800ae4c:	f1bb 0f00 	cmp.w	fp, #0
 800ae50:	d04f      	beq.n	800aef2 <__hexnan+0x12e>
 800ae52:	454c      	cmp	r4, r9
 800ae54:	d206      	bcs.n	800ae64 <__hexnan+0xa0>
 800ae56:	2d07      	cmp	r5, #7
 800ae58:	dc04      	bgt.n	800ae64 <__hexnan+0xa0>
 800ae5a:	462a      	mov	r2, r5
 800ae5c:	4649      	mov	r1, r9
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f7ff ff8a 	bl	800ad78 <L_shift>
 800ae64:	4544      	cmp	r4, r8
 800ae66:	d934      	bls.n	800aed2 <__hexnan+0x10e>
 800ae68:	f1a8 0204 	sub.w	r2, r8, #4
 800ae6c:	4623      	mov	r3, r4
 800ae6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae72:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae76:	429f      	cmp	r7, r3
 800ae78:	d2f9      	bcs.n	800ae6e <__hexnan+0xaa>
 800ae7a:	1b3b      	subs	r3, r7, r4
 800ae7c:	f023 0303 	bic.w	r3, r3, #3
 800ae80:	3304      	adds	r3, #4
 800ae82:	3e03      	subs	r6, #3
 800ae84:	3401      	adds	r4, #1
 800ae86:	42a6      	cmp	r6, r4
 800ae88:	bf38      	it	cc
 800ae8a:	2304      	movcc	r3, #4
 800ae8c:	4443      	add	r3, r8
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f843 2b04 	str.w	r2, [r3], #4
 800ae94:	429f      	cmp	r7, r3
 800ae96:	d2fb      	bcs.n	800ae90 <__hexnan+0xcc>
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	b91b      	cbnz	r3, 800aea4 <__hexnan+0xe0>
 800ae9c:	4547      	cmp	r7, r8
 800ae9e:	d126      	bne.n	800aeee <__hexnan+0x12a>
 800aea0:	2301      	movs	r3, #1
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	2005      	movs	r0, #5
 800aea6:	e025      	b.n	800aef4 <__hexnan+0x130>
 800aea8:	3501      	adds	r5, #1
 800aeaa:	2d08      	cmp	r5, #8
 800aeac:	f10b 0b01 	add.w	fp, fp, #1
 800aeb0:	dd06      	ble.n	800aec0 <__hexnan+0xfc>
 800aeb2:	4544      	cmp	r4, r8
 800aeb4:	d9c3      	bls.n	800ae3e <__hexnan+0x7a>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f844 3c04 	str.w	r3, [r4, #-4]
 800aebc:	2501      	movs	r5, #1
 800aebe:	3c04      	subs	r4, #4
 800aec0:	6822      	ldr	r2, [r4, #0]
 800aec2:	f000 000f 	and.w	r0, r0, #15
 800aec6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aeca:	6020      	str	r0, [r4, #0]
 800aecc:	e7b7      	b.n	800ae3e <__hexnan+0x7a>
 800aece:	2508      	movs	r5, #8
 800aed0:	e7b5      	b.n	800ae3e <__hexnan+0x7a>
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0df      	beq.n	800ae98 <__hexnan+0xd4>
 800aed8:	f1c3 0320 	rsb	r3, r3, #32
 800aedc:	f04f 32ff 	mov.w	r2, #4294967295
 800aee0:	40da      	lsrs	r2, r3
 800aee2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aee6:	4013      	ands	r3, r2
 800aee8:	f846 3c04 	str.w	r3, [r6, #-4]
 800aeec:	e7d4      	b.n	800ae98 <__hexnan+0xd4>
 800aeee:	3f04      	subs	r7, #4
 800aef0:	e7d2      	b.n	800ae98 <__hexnan+0xd4>
 800aef2:	2004      	movs	r0, #4
 800aef4:	b007      	add	sp, #28
 800aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800aefc <malloc>:
 800aefc:	4b02      	ldr	r3, [pc, #8]	; (800af08 <malloc+0xc>)
 800aefe:	4601      	mov	r1, r0
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	f000 b823 	b.w	800af4c <_malloc_r>
 800af06:	bf00      	nop
 800af08:	200001d0 	.word	0x200001d0

0800af0c <sbrk_aligned>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	4e0e      	ldr	r6, [pc, #56]	; (800af48 <sbrk_aligned+0x3c>)
 800af10:	460c      	mov	r4, r1
 800af12:	6831      	ldr	r1, [r6, #0]
 800af14:	4605      	mov	r5, r0
 800af16:	b911      	cbnz	r1, 800af1e <sbrk_aligned+0x12>
 800af18:	f000 ff90 	bl	800be3c <_sbrk_r>
 800af1c:	6030      	str	r0, [r6, #0]
 800af1e:	4621      	mov	r1, r4
 800af20:	4628      	mov	r0, r5
 800af22:	f000 ff8b 	bl	800be3c <_sbrk_r>
 800af26:	1c43      	adds	r3, r0, #1
 800af28:	d00a      	beq.n	800af40 <sbrk_aligned+0x34>
 800af2a:	1cc4      	adds	r4, r0, #3
 800af2c:	f024 0403 	bic.w	r4, r4, #3
 800af30:	42a0      	cmp	r0, r4
 800af32:	d007      	beq.n	800af44 <sbrk_aligned+0x38>
 800af34:	1a21      	subs	r1, r4, r0
 800af36:	4628      	mov	r0, r5
 800af38:	f000 ff80 	bl	800be3c <_sbrk_r>
 800af3c:	3001      	adds	r0, #1
 800af3e:	d101      	bne.n	800af44 <sbrk_aligned+0x38>
 800af40:	f04f 34ff 	mov.w	r4, #4294967295
 800af44:	4620      	mov	r0, r4
 800af46:	bd70      	pop	{r4, r5, r6, pc}
 800af48:	20000a40 	.word	0x20000a40

0800af4c <_malloc_r>:
 800af4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af50:	1ccd      	adds	r5, r1, #3
 800af52:	f025 0503 	bic.w	r5, r5, #3
 800af56:	3508      	adds	r5, #8
 800af58:	2d0c      	cmp	r5, #12
 800af5a:	bf38      	it	cc
 800af5c:	250c      	movcc	r5, #12
 800af5e:	2d00      	cmp	r5, #0
 800af60:	4607      	mov	r7, r0
 800af62:	db01      	blt.n	800af68 <_malloc_r+0x1c>
 800af64:	42a9      	cmp	r1, r5
 800af66:	d905      	bls.n	800af74 <_malloc_r+0x28>
 800af68:	230c      	movs	r3, #12
 800af6a:	603b      	str	r3, [r7, #0]
 800af6c:	2600      	movs	r6, #0
 800af6e:	4630      	mov	r0, r6
 800af70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b048 <_malloc_r+0xfc>
 800af78:	f000 f87a 	bl	800b070 <__malloc_lock>
 800af7c:	f8d8 3000 	ldr.w	r3, [r8]
 800af80:	461c      	mov	r4, r3
 800af82:	bb5c      	cbnz	r4, 800afdc <_malloc_r+0x90>
 800af84:	4629      	mov	r1, r5
 800af86:	4638      	mov	r0, r7
 800af88:	f7ff ffc0 	bl	800af0c <sbrk_aligned>
 800af8c:	1c43      	adds	r3, r0, #1
 800af8e:	4604      	mov	r4, r0
 800af90:	d155      	bne.n	800b03e <_malloc_r+0xf2>
 800af92:	f8d8 4000 	ldr.w	r4, [r8]
 800af96:	4626      	mov	r6, r4
 800af98:	2e00      	cmp	r6, #0
 800af9a:	d145      	bne.n	800b028 <_malloc_r+0xdc>
 800af9c:	2c00      	cmp	r4, #0
 800af9e:	d048      	beq.n	800b032 <_malloc_r+0xe6>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	4631      	mov	r1, r6
 800afa4:	4638      	mov	r0, r7
 800afa6:	eb04 0903 	add.w	r9, r4, r3
 800afaa:	f000 ff47 	bl	800be3c <_sbrk_r>
 800afae:	4581      	cmp	r9, r0
 800afb0:	d13f      	bne.n	800b032 <_malloc_r+0xe6>
 800afb2:	6821      	ldr	r1, [r4, #0]
 800afb4:	1a6d      	subs	r5, r5, r1
 800afb6:	4629      	mov	r1, r5
 800afb8:	4638      	mov	r0, r7
 800afba:	f7ff ffa7 	bl	800af0c <sbrk_aligned>
 800afbe:	3001      	adds	r0, #1
 800afc0:	d037      	beq.n	800b032 <_malloc_r+0xe6>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	442b      	add	r3, r5
 800afc6:	6023      	str	r3, [r4, #0]
 800afc8:	f8d8 3000 	ldr.w	r3, [r8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d038      	beq.n	800b042 <_malloc_r+0xf6>
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	42a2      	cmp	r2, r4
 800afd4:	d12b      	bne.n	800b02e <_malloc_r+0xe2>
 800afd6:	2200      	movs	r2, #0
 800afd8:	605a      	str	r2, [r3, #4]
 800afda:	e00f      	b.n	800affc <_malloc_r+0xb0>
 800afdc:	6822      	ldr	r2, [r4, #0]
 800afde:	1b52      	subs	r2, r2, r5
 800afe0:	d41f      	bmi.n	800b022 <_malloc_r+0xd6>
 800afe2:	2a0b      	cmp	r2, #11
 800afe4:	d917      	bls.n	800b016 <_malloc_r+0xca>
 800afe6:	1961      	adds	r1, r4, r5
 800afe8:	42a3      	cmp	r3, r4
 800afea:	6025      	str	r5, [r4, #0]
 800afec:	bf18      	it	ne
 800afee:	6059      	strne	r1, [r3, #4]
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	bf08      	it	eq
 800aff4:	f8c8 1000 	streq.w	r1, [r8]
 800aff8:	5162      	str	r2, [r4, r5]
 800affa:	604b      	str	r3, [r1, #4]
 800affc:	4638      	mov	r0, r7
 800affe:	f104 060b 	add.w	r6, r4, #11
 800b002:	f000 f83b 	bl	800b07c <__malloc_unlock>
 800b006:	f026 0607 	bic.w	r6, r6, #7
 800b00a:	1d23      	adds	r3, r4, #4
 800b00c:	1af2      	subs	r2, r6, r3
 800b00e:	d0ae      	beq.n	800af6e <_malloc_r+0x22>
 800b010:	1b9b      	subs	r3, r3, r6
 800b012:	50a3      	str	r3, [r4, r2]
 800b014:	e7ab      	b.n	800af6e <_malloc_r+0x22>
 800b016:	42a3      	cmp	r3, r4
 800b018:	6862      	ldr	r2, [r4, #4]
 800b01a:	d1dd      	bne.n	800afd8 <_malloc_r+0x8c>
 800b01c:	f8c8 2000 	str.w	r2, [r8]
 800b020:	e7ec      	b.n	800affc <_malloc_r+0xb0>
 800b022:	4623      	mov	r3, r4
 800b024:	6864      	ldr	r4, [r4, #4]
 800b026:	e7ac      	b.n	800af82 <_malloc_r+0x36>
 800b028:	4634      	mov	r4, r6
 800b02a:	6876      	ldr	r6, [r6, #4]
 800b02c:	e7b4      	b.n	800af98 <_malloc_r+0x4c>
 800b02e:	4613      	mov	r3, r2
 800b030:	e7cc      	b.n	800afcc <_malloc_r+0x80>
 800b032:	230c      	movs	r3, #12
 800b034:	603b      	str	r3, [r7, #0]
 800b036:	4638      	mov	r0, r7
 800b038:	f000 f820 	bl	800b07c <__malloc_unlock>
 800b03c:	e797      	b.n	800af6e <_malloc_r+0x22>
 800b03e:	6025      	str	r5, [r4, #0]
 800b040:	e7dc      	b.n	800affc <_malloc_r+0xb0>
 800b042:	605b      	str	r3, [r3, #4]
 800b044:	deff      	udf	#255	; 0xff
 800b046:	bf00      	nop
 800b048:	20000a3c 	.word	0x20000a3c

0800b04c <__ascii_mbtowc>:
 800b04c:	b082      	sub	sp, #8
 800b04e:	b901      	cbnz	r1, 800b052 <__ascii_mbtowc+0x6>
 800b050:	a901      	add	r1, sp, #4
 800b052:	b142      	cbz	r2, 800b066 <__ascii_mbtowc+0x1a>
 800b054:	b14b      	cbz	r3, 800b06a <__ascii_mbtowc+0x1e>
 800b056:	7813      	ldrb	r3, [r2, #0]
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	7812      	ldrb	r2, [r2, #0]
 800b05c:	1e10      	subs	r0, r2, #0
 800b05e:	bf18      	it	ne
 800b060:	2001      	movne	r0, #1
 800b062:	b002      	add	sp, #8
 800b064:	4770      	bx	lr
 800b066:	4610      	mov	r0, r2
 800b068:	e7fb      	b.n	800b062 <__ascii_mbtowc+0x16>
 800b06a:	f06f 0001 	mvn.w	r0, #1
 800b06e:	e7f8      	b.n	800b062 <__ascii_mbtowc+0x16>

0800b070 <__malloc_lock>:
 800b070:	4801      	ldr	r0, [pc, #4]	; (800b078 <__malloc_lock+0x8>)
 800b072:	f7fe bd0c 	b.w	8009a8e <__retarget_lock_acquire_recursive>
 800b076:	bf00      	nop
 800b078:	20000a38 	.word	0x20000a38

0800b07c <__malloc_unlock>:
 800b07c:	4801      	ldr	r0, [pc, #4]	; (800b084 <__malloc_unlock+0x8>)
 800b07e:	f7fe bd07 	b.w	8009a90 <__retarget_lock_release_recursive>
 800b082:	bf00      	nop
 800b084:	20000a38 	.word	0x20000a38

0800b088 <_Balloc>:
 800b088:	b570      	push	{r4, r5, r6, lr}
 800b08a:	69c6      	ldr	r6, [r0, #28]
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	b976      	cbnz	r6, 800b0b0 <_Balloc+0x28>
 800b092:	2010      	movs	r0, #16
 800b094:	f7ff ff32 	bl	800aefc <malloc>
 800b098:	4602      	mov	r2, r0
 800b09a:	61e0      	str	r0, [r4, #28]
 800b09c:	b920      	cbnz	r0, 800b0a8 <_Balloc+0x20>
 800b09e:	4b18      	ldr	r3, [pc, #96]	; (800b100 <_Balloc+0x78>)
 800b0a0:	4818      	ldr	r0, [pc, #96]	; (800b104 <_Balloc+0x7c>)
 800b0a2:	216b      	movs	r1, #107	; 0x6b
 800b0a4:	f000 feda 	bl	800be5c <__assert_func>
 800b0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0ac:	6006      	str	r6, [r0, #0]
 800b0ae:	60c6      	str	r6, [r0, #12]
 800b0b0:	69e6      	ldr	r6, [r4, #28]
 800b0b2:	68f3      	ldr	r3, [r6, #12]
 800b0b4:	b183      	cbz	r3, 800b0d8 <_Balloc+0x50>
 800b0b6:	69e3      	ldr	r3, [r4, #28]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0be:	b9b8      	cbnz	r0, 800b0f0 <_Balloc+0x68>
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800b0c6:	1d72      	adds	r2, r6, #5
 800b0c8:	0092      	lsls	r2, r2, #2
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fee4 	bl	800be98 <_calloc_r>
 800b0d0:	b160      	cbz	r0, 800b0ec <_Balloc+0x64>
 800b0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0d6:	e00e      	b.n	800b0f6 <_Balloc+0x6e>
 800b0d8:	2221      	movs	r2, #33	; 0x21
 800b0da:	2104      	movs	r1, #4
 800b0dc:	4620      	mov	r0, r4
 800b0de:	f000 fedb 	bl	800be98 <_calloc_r>
 800b0e2:	69e3      	ldr	r3, [r4, #28]
 800b0e4:	60f0      	str	r0, [r6, #12]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1e4      	bne.n	800b0b6 <_Balloc+0x2e>
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	6802      	ldr	r2, [r0, #0]
 800b0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0fc:	e7f7      	b.n	800b0ee <_Balloc+0x66>
 800b0fe:	bf00      	nop
 800b100:	0800c599 	.word	0x0800c599
 800b104:	0800c679 	.word	0x0800c679

0800b108 <_Bfree>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	69c6      	ldr	r6, [r0, #28]
 800b10c:	4605      	mov	r5, r0
 800b10e:	460c      	mov	r4, r1
 800b110:	b976      	cbnz	r6, 800b130 <_Bfree+0x28>
 800b112:	2010      	movs	r0, #16
 800b114:	f7ff fef2 	bl	800aefc <malloc>
 800b118:	4602      	mov	r2, r0
 800b11a:	61e8      	str	r0, [r5, #28]
 800b11c:	b920      	cbnz	r0, 800b128 <_Bfree+0x20>
 800b11e:	4b09      	ldr	r3, [pc, #36]	; (800b144 <_Bfree+0x3c>)
 800b120:	4809      	ldr	r0, [pc, #36]	; (800b148 <_Bfree+0x40>)
 800b122:	218f      	movs	r1, #143	; 0x8f
 800b124:	f000 fe9a 	bl	800be5c <__assert_func>
 800b128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b12c:	6006      	str	r6, [r0, #0]
 800b12e:	60c6      	str	r6, [r0, #12]
 800b130:	b13c      	cbz	r4, 800b142 <_Bfree+0x3a>
 800b132:	69eb      	ldr	r3, [r5, #28]
 800b134:	6862      	ldr	r2, [r4, #4]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b13c:	6021      	str	r1, [r4, #0]
 800b13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	0800c599 	.word	0x0800c599
 800b148:	0800c679 	.word	0x0800c679

0800b14c <__multadd>:
 800b14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b150:	690d      	ldr	r5, [r1, #16]
 800b152:	4607      	mov	r7, r0
 800b154:	460c      	mov	r4, r1
 800b156:	461e      	mov	r6, r3
 800b158:	f101 0c14 	add.w	ip, r1, #20
 800b15c:	2000      	movs	r0, #0
 800b15e:	f8dc 3000 	ldr.w	r3, [ip]
 800b162:	b299      	uxth	r1, r3
 800b164:	fb02 6101 	mla	r1, r2, r1, r6
 800b168:	0c1e      	lsrs	r6, r3, #16
 800b16a:	0c0b      	lsrs	r3, r1, #16
 800b16c:	fb02 3306 	mla	r3, r2, r6, r3
 800b170:	b289      	uxth	r1, r1
 800b172:	3001      	adds	r0, #1
 800b174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b178:	4285      	cmp	r5, r0
 800b17a:	f84c 1b04 	str.w	r1, [ip], #4
 800b17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b182:	dcec      	bgt.n	800b15e <__multadd+0x12>
 800b184:	b30e      	cbz	r6, 800b1ca <__multadd+0x7e>
 800b186:	68a3      	ldr	r3, [r4, #8]
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dc19      	bgt.n	800b1c0 <__multadd+0x74>
 800b18c:	6861      	ldr	r1, [r4, #4]
 800b18e:	4638      	mov	r0, r7
 800b190:	3101      	adds	r1, #1
 800b192:	f7ff ff79 	bl	800b088 <_Balloc>
 800b196:	4680      	mov	r8, r0
 800b198:	b928      	cbnz	r0, 800b1a6 <__multadd+0x5a>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b0c      	ldr	r3, [pc, #48]	; (800b1d0 <__multadd+0x84>)
 800b19e:	480d      	ldr	r0, [pc, #52]	; (800b1d4 <__multadd+0x88>)
 800b1a0:	21ba      	movs	r1, #186	; 0xba
 800b1a2:	f000 fe5b 	bl	800be5c <__assert_func>
 800b1a6:	6922      	ldr	r2, [r4, #16]
 800b1a8:	3202      	adds	r2, #2
 800b1aa:	f104 010c 	add.w	r1, r4, #12
 800b1ae:	0092      	lsls	r2, r2, #2
 800b1b0:	300c      	adds	r0, #12
 800b1b2:	f7fe fc6e 	bl	8009a92 <memcpy>
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7ff ffa5 	bl	800b108 <_Bfree>
 800b1be:	4644      	mov	r4, r8
 800b1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b1c4:	3501      	adds	r5, #1
 800b1c6:	615e      	str	r6, [r3, #20]
 800b1c8:	6125      	str	r5, [r4, #16]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d0:	0800c608 	.word	0x0800c608
 800b1d4:	0800c679 	.word	0x0800c679

0800b1d8 <__s2b>:
 800b1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	460c      	mov	r4, r1
 800b1de:	4615      	mov	r5, r2
 800b1e0:	461f      	mov	r7, r3
 800b1e2:	2209      	movs	r2, #9
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	db09      	blt.n	800b208 <__s2b+0x30>
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7ff ff47 	bl	800b088 <_Balloc>
 800b1fa:	b940      	cbnz	r0, 800b20e <__s2b+0x36>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	4b19      	ldr	r3, [pc, #100]	; (800b264 <__s2b+0x8c>)
 800b200:	4819      	ldr	r0, [pc, #100]	; (800b268 <__s2b+0x90>)
 800b202:	21d3      	movs	r1, #211	; 0xd3
 800b204:	f000 fe2a 	bl	800be5c <__assert_func>
 800b208:	0052      	lsls	r2, r2, #1
 800b20a:	3101      	adds	r1, #1
 800b20c:	e7f0      	b.n	800b1f0 <__s2b+0x18>
 800b20e:	9b08      	ldr	r3, [sp, #32]
 800b210:	6143      	str	r3, [r0, #20]
 800b212:	2d09      	cmp	r5, #9
 800b214:	f04f 0301 	mov.w	r3, #1
 800b218:	6103      	str	r3, [r0, #16]
 800b21a:	dd16      	ble.n	800b24a <__s2b+0x72>
 800b21c:	f104 0909 	add.w	r9, r4, #9
 800b220:	46c8      	mov	r8, r9
 800b222:	442c      	add	r4, r5
 800b224:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b228:	4601      	mov	r1, r0
 800b22a:	3b30      	subs	r3, #48	; 0x30
 800b22c:	220a      	movs	r2, #10
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ff8c 	bl	800b14c <__multadd>
 800b234:	45a0      	cmp	r8, r4
 800b236:	d1f5      	bne.n	800b224 <__s2b+0x4c>
 800b238:	f1a5 0408 	sub.w	r4, r5, #8
 800b23c:	444c      	add	r4, r9
 800b23e:	1b2d      	subs	r5, r5, r4
 800b240:	1963      	adds	r3, r4, r5
 800b242:	42bb      	cmp	r3, r7
 800b244:	db04      	blt.n	800b250 <__s2b+0x78>
 800b246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b24a:	340a      	adds	r4, #10
 800b24c:	2509      	movs	r5, #9
 800b24e:	e7f6      	b.n	800b23e <__s2b+0x66>
 800b250:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b254:	4601      	mov	r1, r0
 800b256:	3b30      	subs	r3, #48	; 0x30
 800b258:	220a      	movs	r2, #10
 800b25a:	4630      	mov	r0, r6
 800b25c:	f7ff ff76 	bl	800b14c <__multadd>
 800b260:	e7ee      	b.n	800b240 <__s2b+0x68>
 800b262:	bf00      	nop
 800b264:	0800c608 	.word	0x0800c608
 800b268:	0800c679 	.word	0x0800c679

0800b26c <__hi0bits>:
 800b26c:	0c03      	lsrs	r3, r0, #16
 800b26e:	041b      	lsls	r3, r3, #16
 800b270:	b9d3      	cbnz	r3, 800b2a8 <__hi0bits+0x3c>
 800b272:	0400      	lsls	r0, r0, #16
 800b274:	2310      	movs	r3, #16
 800b276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b27a:	bf04      	itt	eq
 800b27c:	0200      	lsleq	r0, r0, #8
 800b27e:	3308      	addeq	r3, #8
 800b280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b284:	bf04      	itt	eq
 800b286:	0100      	lsleq	r0, r0, #4
 800b288:	3304      	addeq	r3, #4
 800b28a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b28e:	bf04      	itt	eq
 800b290:	0080      	lsleq	r0, r0, #2
 800b292:	3302      	addeq	r3, #2
 800b294:	2800      	cmp	r0, #0
 800b296:	db05      	blt.n	800b2a4 <__hi0bits+0x38>
 800b298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b29c:	f103 0301 	add.w	r3, r3, #1
 800b2a0:	bf08      	it	eq
 800b2a2:	2320      	moveq	r3, #32
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	4770      	bx	lr
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	e7e4      	b.n	800b276 <__hi0bits+0xa>

0800b2ac <__lo0bits>:
 800b2ac:	6803      	ldr	r3, [r0, #0]
 800b2ae:	f013 0207 	ands.w	r2, r3, #7
 800b2b2:	d00c      	beq.n	800b2ce <__lo0bits+0x22>
 800b2b4:	07d9      	lsls	r1, r3, #31
 800b2b6:	d422      	bmi.n	800b2fe <__lo0bits+0x52>
 800b2b8:	079a      	lsls	r2, r3, #30
 800b2ba:	bf49      	itett	mi
 800b2bc:	085b      	lsrmi	r3, r3, #1
 800b2be:	089b      	lsrpl	r3, r3, #2
 800b2c0:	6003      	strmi	r3, [r0, #0]
 800b2c2:	2201      	movmi	r2, #1
 800b2c4:	bf5c      	itt	pl
 800b2c6:	6003      	strpl	r3, [r0, #0]
 800b2c8:	2202      	movpl	r2, #2
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	4770      	bx	lr
 800b2ce:	b299      	uxth	r1, r3
 800b2d0:	b909      	cbnz	r1, 800b2d6 <__lo0bits+0x2a>
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	2210      	movs	r2, #16
 800b2d6:	b2d9      	uxtb	r1, r3
 800b2d8:	b909      	cbnz	r1, 800b2de <__lo0bits+0x32>
 800b2da:	3208      	adds	r2, #8
 800b2dc:	0a1b      	lsrs	r3, r3, #8
 800b2de:	0719      	lsls	r1, r3, #28
 800b2e0:	bf04      	itt	eq
 800b2e2:	091b      	lsreq	r3, r3, #4
 800b2e4:	3204      	addeq	r2, #4
 800b2e6:	0799      	lsls	r1, r3, #30
 800b2e8:	bf04      	itt	eq
 800b2ea:	089b      	lsreq	r3, r3, #2
 800b2ec:	3202      	addeq	r2, #2
 800b2ee:	07d9      	lsls	r1, r3, #31
 800b2f0:	d403      	bmi.n	800b2fa <__lo0bits+0x4e>
 800b2f2:	085b      	lsrs	r3, r3, #1
 800b2f4:	f102 0201 	add.w	r2, r2, #1
 800b2f8:	d003      	beq.n	800b302 <__lo0bits+0x56>
 800b2fa:	6003      	str	r3, [r0, #0]
 800b2fc:	e7e5      	b.n	800b2ca <__lo0bits+0x1e>
 800b2fe:	2200      	movs	r2, #0
 800b300:	e7e3      	b.n	800b2ca <__lo0bits+0x1e>
 800b302:	2220      	movs	r2, #32
 800b304:	e7e1      	b.n	800b2ca <__lo0bits+0x1e>
	...

0800b308 <__i2b>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	2101      	movs	r1, #1
 800b30e:	f7ff febb 	bl	800b088 <_Balloc>
 800b312:	4602      	mov	r2, r0
 800b314:	b928      	cbnz	r0, 800b322 <__i2b+0x1a>
 800b316:	4b05      	ldr	r3, [pc, #20]	; (800b32c <__i2b+0x24>)
 800b318:	4805      	ldr	r0, [pc, #20]	; (800b330 <__i2b+0x28>)
 800b31a:	f240 1145 	movw	r1, #325	; 0x145
 800b31e:	f000 fd9d 	bl	800be5c <__assert_func>
 800b322:	2301      	movs	r3, #1
 800b324:	6144      	str	r4, [r0, #20]
 800b326:	6103      	str	r3, [r0, #16]
 800b328:	bd10      	pop	{r4, pc}
 800b32a:	bf00      	nop
 800b32c:	0800c608 	.word	0x0800c608
 800b330:	0800c679 	.word	0x0800c679

0800b334 <__multiply>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	4691      	mov	r9, r2
 800b33a:	690a      	ldr	r2, [r1, #16]
 800b33c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b340:	429a      	cmp	r2, r3
 800b342:	bfb8      	it	lt
 800b344:	460b      	movlt	r3, r1
 800b346:	460c      	mov	r4, r1
 800b348:	bfbc      	itt	lt
 800b34a:	464c      	movlt	r4, r9
 800b34c:	4699      	movlt	r9, r3
 800b34e:	6927      	ldr	r7, [r4, #16]
 800b350:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b354:	68a3      	ldr	r3, [r4, #8]
 800b356:	6861      	ldr	r1, [r4, #4]
 800b358:	eb07 060a 	add.w	r6, r7, sl
 800b35c:	42b3      	cmp	r3, r6
 800b35e:	b085      	sub	sp, #20
 800b360:	bfb8      	it	lt
 800b362:	3101      	addlt	r1, #1
 800b364:	f7ff fe90 	bl	800b088 <_Balloc>
 800b368:	b930      	cbnz	r0, 800b378 <__multiply+0x44>
 800b36a:	4602      	mov	r2, r0
 800b36c:	4b44      	ldr	r3, [pc, #272]	; (800b480 <__multiply+0x14c>)
 800b36e:	4845      	ldr	r0, [pc, #276]	; (800b484 <__multiply+0x150>)
 800b370:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b374:	f000 fd72 	bl	800be5c <__assert_func>
 800b378:	f100 0514 	add.w	r5, r0, #20
 800b37c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b380:	462b      	mov	r3, r5
 800b382:	2200      	movs	r2, #0
 800b384:	4543      	cmp	r3, r8
 800b386:	d321      	bcc.n	800b3cc <__multiply+0x98>
 800b388:	f104 0314 	add.w	r3, r4, #20
 800b38c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b390:	f109 0314 	add.w	r3, r9, #20
 800b394:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	1b3a      	subs	r2, r7, r4
 800b39c:	3a15      	subs	r2, #21
 800b39e:	f022 0203 	bic.w	r2, r2, #3
 800b3a2:	3204      	adds	r2, #4
 800b3a4:	f104 0115 	add.w	r1, r4, #21
 800b3a8:	428f      	cmp	r7, r1
 800b3aa:	bf38      	it	cc
 800b3ac:	2204      	movcc	r2, #4
 800b3ae:	9201      	str	r2, [sp, #4]
 800b3b0:	9a02      	ldr	r2, [sp, #8]
 800b3b2:	9303      	str	r3, [sp, #12]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d80c      	bhi.n	800b3d2 <__multiply+0x9e>
 800b3b8:	2e00      	cmp	r6, #0
 800b3ba:	dd03      	ble.n	800b3c4 <__multiply+0x90>
 800b3bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d05b      	beq.n	800b47c <__multiply+0x148>
 800b3c4:	6106      	str	r6, [r0, #16]
 800b3c6:	b005      	add	sp, #20
 800b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3cc:	f843 2b04 	str.w	r2, [r3], #4
 800b3d0:	e7d8      	b.n	800b384 <__multiply+0x50>
 800b3d2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3d6:	f1ba 0f00 	cmp.w	sl, #0
 800b3da:	d024      	beq.n	800b426 <__multiply+0xf2>
 800b3dc:	f104 0e14 	add.w	lr, r4, #20
 800b3e0:	46a9      	mov	r9, r5
 800b3e2:	f04f 0c00 	mov.w	ip, #0
 800b3e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3ea:	f8d9 1000 	ldr.w	r1, [r9]
 800b3ee:	fa1f fb82 	uxth.w	fp, r2
 800b3f2:	b289      	uxth	r1, r1
 800b3f4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3fc:	f8d9 2000 	ldr.w	r2, [r9]
 800b400:	4461      	add	r1, ip
 800b402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b406:	fb0a c20b 	mla	r2, sl, fp, ip
 800b40a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b40e:	b289      	uxth	r1, r1
 800b410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b414:	4577      	cmp	r7, lr
 800b416:	f849 1b04 	str.w	r1, [r9], #4
 800b41a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b41e:	d8e2      	bhi.n	800b3e6 <__multiply+0xb2>
 800b420:	9a01      	ldr	r2, [sp, #4]
 800b422:	f845 c002 	str.w	ip, [r5, r2]
 800b426:	9a03      	ldr	r2, [sp, #12]
 800b428:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b42c:	3304      	adds	r3, #4
 800b42e:	f1b9 0f00 	cmp.w	r9, #0
 800b432:	d021      	beq.n	800b478 <__multiply+0x144>
 800b434:	6829      	ldr	r1, [r5, #0]
 800b436:	f104 0c14 	add.w	ip, r4, #20
 800b43a:	46ae      	mov	lr, r5
 800b43c:	f04f 0a00 	mov.w	sl, #0
 800b440:	f8bc b000 	ldrh.w	fp, [ip]
 800b444:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b448:	fb09 220b 	mla	r2, r9, fp, r2
 800b44c:	4452      	add	r2, sl
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b454:	f84e 1b04 	str.w	r1, [lr], #4
 800b458:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b45c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b460:	f8be 1000 	ldrh.w	r1, [lr]
 800b464:	fb09 110a 	mla	r1, r9, sl, r1
 800b468:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b46c:	4567      	cmp	r7, ip
 800b46e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b472:	d8e5      	bhi.n	800b440 <__multiply+0x10c>
 800b474:	9a01      	ldr	r2, [sp, #4]
 800b476:	50a9      	str	r1, [r5, r2]
 800b478:	3504      	adds	r5, #4
 800b47a:	e799      	b.n	800b3b0 <__multiply+0x7c>
 800b47c:	3e01      	subs	r6, #1
 800b47e:	e79b      	b.n	800b3b8 <__multiply+0x84>
 800b480:	0800c608 	.word	0x0800c608
 800b484:	0800c679 	.word	0x0800c679

0800b488 <__pow5mult>:
 800b488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b48c:	4615      	mov	r5, r2
 800b48e:	f012 0203 	ands.w	r2, r2, #3
 800b492:	4606      	mov	r6, r0
 800b494:	460f      	mov	r7, r1
 800b496:	d007      	beq.n	800b4a8 <__pow5mult+0x20>
 800b498:	4c25      	ldr	r4, [pc, #148]	; (800b530 <__pow5mult+0xa8>)
 800b49a:	3a01      	subs	r2, #1
 800b49c:	2300      	movs	r3, #0
 800b49e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4a2:	f7ff fe53 	bl	800b14c <__multadd>
 800b4a6:	4607      	mov	r7, r0
 800b4a8:	10ad      	asrs	r5, r5, #2
 800b4aa:	d03d      	beq.n	800b528 <__pow5mult+0xa0>
 800b4ac:	69f4      	ldr	r4, [r6, #28]
 800b4ae:	b97c      	cbnz	r4, 800b4d0 <__pow5mult+0x48>
 800b4b0:	2010      	movs	r0, #16
 800b4b2:	f7ff fd23 	bl	800aefc <malloc>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	61f0      	str	r0, [r6, #28]
 800b4ba:	b928      	cbnz	r0, 800b4c8 <__pow5mult+0x40>
 800b4bc:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <__pow5mult+0xac>)
 800b4be:	481e      	ldr	r0, [pc, #120]	; (800b538 <__pow5mult+0xb0>)
 800b4c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b4c4:	f000 fcca 	bl	800be5c <__assert_func>
 800b4c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4cc:	6004      	str	r4, [r0, #0]
 800b4ce:	60c4      	str	r4, [r0, #12]
 800b4d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b4d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4d8:	b94c      	cbnz	r4, 800b4ee <__pow5mult+0x66>
 800b4da:	f240 2171 	movw	r1, #625	; 0x271
 800b4de:	4630      	mov	r0, r6
 800b4e0:	f7ff ff12 	bl	800b308 <__i2b>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	6003      	str	r3, [r0, #0]
 800b4ee:	f04f 0900 	mov.w	r9, #0
 800b4f2:	07eb      	lsls	r3, r5, #31
 800b4f4:	d50a      	bpl.n	800b50c <__pow5mult+0x84>
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4622      	mov	r2, r4
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ff1a 	bl	800b334 <__multiply>
 800b500:	4639      	mov	r1, r7
 800b502:	4680      	mov	r8, r0
 800b504:	4630      	mov	r0, r6
 800b506:	f7ff fdff 	bl	800b108 <_Bfree>
 800b50a:	4647      	mov	r7, r8
 800b50c:	106d      	asrs	r5, r5, #1
 800b50e:	d00b      	beq.n	800b528 <__pow5mult+0xa0>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	b938      	cbnz	r0, 800b524 <__pow5mult+0x9c>
 800b514:	4622      	mov	r2, r4
 800b516:	4621      	mov	r1, r4
 800b518:	4630      	mov	r0, r6
 800b51a:	f7ff ff0b 	bl	800b334 <__multiply>
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	f8c0 9000 	str.w	r9, [r0]
 800b524:	4604      	mov	r4, r0
 800b526:	e7e4      	b.n	800b4f2 <__pow5mult+0x6a>
 800b528:	4638      	mov	r0, r7
 800b52a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52e:	bf00      	nop
 800b530:	0800c7c8 	.word	0x0800c7c8
 800b534:	0800c599 	.word	0x0800c599
 800b538:	0800c679 	.word	0x0800c679

0800b53c <__lshift>:
 800b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	460c      	mov	r4, r1
 800b542:	6849      	ldr	r1, [r1, #4]
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b54a:	68a3      	ldr	r3, [r4, #8]
 800b54c:	4607      	mov	r7, r0
 800b54e:	4691      	mov	r9, r2
 800b550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b554:	f108 0601 	add.w	r6, r8, #1
 800b558:	42b3      	cmp	r3, r6
 800b55a:	db0b      	blt.n	800b574 <__lshift+0x38>
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7ff fd93 	bl	800b088 <_Balloc>
 800b562:	4605      	mov	r5, r0
 800b564:	b948      	cbnz	r0, 800b57a <__lshift+0x3e>
 800b566:	4602      	mov	r2, r0
 800b568:	4b28      	ldr	r3, [pc, #160]	; (800b60c <__lshift+0xd0>)
 800b56a:	4829      	ldr	r0, [pc, #164]	; (800b610 <__lshift+0xd4>)
 800b56c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b570:	f000 fc74 	bl	800be5c <__assert_func>
 800b574:	3101      	adds	r1, #1
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	e7ee      	b.n	800b558 <__lshift+0x1c>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f100 0114 	add.w	r1, r0, #20
 800b580:	f100 0210 	add.w	r2, r0, #16
 800b584:	4618      	mov	r0, r3
 800b586:	4553      	cmp	r3, sl
 800b588:	db33      	blt.n	800b5f2 <__lshift+0xb6>
 800b58a:	6920      	ldr	r0, [r4, #16]
 800b58c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b590:	f104 0314 	add.w	r3, r4, #20
 800b594:	f019 091f 	ands.w	r9, r9, #31
 800b598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b59c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5a0:	d02b      	beq.n	800b5fa <__lshift+0xbe>
 800b5a2:	f1c9 0e20 	rsb	lr, r9, #32
 800b5a6:	468a      	mov	sl, r1
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	fa00 f009 	lsl.w	r0, r0, r9
 800b5b0:	4310      	orrs	r0, r2
 800b5b2:	f84a 0b04 	str.w	r0, [sl], #4
 800b5b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5ba:	459c      	cmp	ip, r3
 800b5bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5c0:	d8f3      	bhi.n	800b5aa <__lshift+0x6e>
 800b5c2:	ebac 0304 	sub.w	r3, ip, r4
 800b5c6:	3b15      	subs	r3, #21
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	f104 0015 	add.w	r0, r4, #21
 800b5d2:	4584      	cmp	ip, r0
 800b5d4:	bf38      	it	cc
 800b5d6:	2304      	movcc	r3, #4
 800b5d8:	50ca      	str	r2, [r1, r3]
 800b5da:	b10a      	cbz	r2, 800b5e0 <__lshift+0xa4>
 800b5dc:	f108 0602 	add.w	r6, r8, #2
 800b5e0:	3e01      	subs	r6, #1
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	612e      	str	r6, [r5, #16]
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f7ff fd8e 	bl	800b108 <_Bfree>
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	e7c5      	b.n	800b586 <__lshift+0x4a>
 800b5fa:	3904      	subs	r1, #4
 800b5fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b600:	f841 2f04 	str.w	r2, [r1, #4]!
 800b604:	459c      	cmp	ip, r3
 800b606:	d8f9      	bhi.n	800b5fc <__lshift+0xc0>
 800b608:	e7ea      	b.n	800b5e0 <__lshift+0xa4>
 800b60a:	bf00      	nop
 800b60c:	0800c608 	.word	0x0800c608
 800b610:	0800c679 	.word	0x0800c679

0800b614 <__mcmp>:
 800b614:	b530      	push	{r4, r5, lr}
 800b616:	6902      	ldr	r2, [r0, #16]
 800b618:	690c      	ldr	r4, [r1, #16]
 800b61a:	1b12      	subs	r2, r2, r4
 800b61c:	d10e      	bne.n	800b63c <__mcmp+0x28>
 800b61e:	f100 0314 	add.w	r3, r0, #20
 800b622:	3114      	adds	r1, #20
 800b624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b62c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b634:	42a5      	cmp	r5, r4
 800b636:	d003      	beq.n	800b640 <__mcmp+0x2c>
 800b638:	d305      	bcc.n	800b646 <__mcmp+0x32>
 800b63a:	2201      	movs	r2, #1
 800b63c:	4610      	mov	r0, r2
 800b63e:	bd30      	pop	{r4, r5, pc}
 800b640:	4283      	cmp	r3, r0
 800b642:	d3f3      	bcc.n	800b62c <__mcmp+0x18>
 800b644:	e7fa      	b.n	800b63c <__mcmp+0x28>
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	e7f7      	b.n	800b63c <__mcmp+0x28>

0800b64c <__mdiff>:
 800b64c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b650:	460c      	mov	r4, r1
 800b652:	4606      	mov	r6, r0
 800b654:	4611      	mov	r1, r2
 800b656:	4620      	mov	r0, r4
 800b658:	4690      	mov	r8, r2
 800b65a:	f7ff ffdb 	bl	800b614 <__mcmp>
 800b65e:	1e05      	subs	r5, r0, #0
 800b660:	d110      	bne.n	800b684 <__mdiff+0x38>
 800b662:	4629      	mov	r1, r5
 800b664:	4630      	mov	r0, r6
 800b666:	f7ff fd0f 	bl	800b088 <_Balloc>
 800b66a:	b930      	cbnz	r0, 800b67a <__mdiff+0x2e>
 800b66c:	4b3a      	ldr	r3, [pc, #232]	; (800b758 <__mdiff+0x10c>)
 800b66e:	4602      	mov	r2, r0
 800b670:	f240 2137 	movw	r1, #567	; 0x237
 800b674:	4839      	ldr	r0, [pc, #228]	; (800b75c <__mdiff+0x110>)
 800b676:	f000 fbf1 	bl	800be5c <__assert_func>
 800b67a:	2301      	movs	r3, #1
 800b67c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	bfa4      	itt	ge
 800b686:	4643      	movge	r3, r8
 800b688:	46a0      	movge	r8, r4
 800b68a:	4630      	mov	r0, r6
 800b68c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b690:	bfa6      	itte	ge
 800b692:	461c      	movge	r4, r3
 800b694:	2500      	movge	r5, #0
 800b696:	2501      	movlt	r5, #1
 800b698:	f7ff fcf6 	bl	800b088 <_Balloc>
 800b69c:	b920      	cbnz	r0, 800b6a8 <__mdiff+0x5c>
 800b69e:	4b2e      	ldr	r3, [pc, #184]	; (800b758 <__mdiff+0x10c>)
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	f240 2145 	movw	r1, #581	; 0x245
 800b6a6:	e7e5      	b.n	800b674 <__mdiff+0x28>
 800b6a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b6ac:	6926      	ldr	r6, [r4, #16]
 800b6ae:	60c5      	str	r5, [r0, #12]
 800b6b0:	f104 0914 	add.w	r9, r4, #20
 800b6b4:	f108 0514 	add.w	r5, r8, #20
 800b6b8:	f100 0e14 	add.w	lr, r0, #20
 800b6bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6c4:	f108 0210 	add.w	r2, r8, #16
 800b6c8:	46f2      	mov	sl, lr
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6d4:	fa11 f88b 	uxtah	r8, r1, fp
 800b6d8:	b299      	uxth	r1, r3
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	eba8 0801 	sub.w	r8, r8, r1
 800b6e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6e8:	fa1f f888 	uxth.w	r8, r8
 800b6ec:	1419      	asrs	r1, r3, #16
 800b6ee:	454e      	cmp	r6, r9
 800b6f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6f4:	f84a 3b04 	str.w	r3, [sl], #4
 800b6f8:	d8e8      	bhi.n	800b6cc <__mdiff+0x80>
 800b6fa:	1b33      	subs	r3, r6, r4
 800b6fc:	3b15      	subs	r3, #21
 800b6fe:	f023 0303 	bic.w	r3, r3, #3
 800b702:	3304      	adds	r3, #4
 800b704:	3415      	adds	r4, #21
 800b706:	42a6      	cmp	r6, r4
 800b708:	bf38      	it	cc
 800b70a:	2304      	movcc	r3, #4
 800b70c:	441d      	add	r5, r3
 800b70e:	4473      	add	r3, lr
 800b710:	469e      	mov	lr, r3
 800b712:	462e      	mov	r6, r5
 800b714:	4566      	cmp	r6, ip
 800b716:	d30e      	bcc.n	800b736 <__mdiff+0xea>
 800b718:	f10c 0203 	add.w	r2, ip, #3
 800b71c:	1b52      	subs	r2, r2, r5
 800b71e:	f022 0203 	bic.w	r2, r2, #3
 800b722:	3d03      	subs	r5, #3
 800b724:	45ac      	cmp	ip, r5
 800b726:	bf38      	it	cc
 800b728:	2200      	movcc	r2, #0
 800b72a:	4413      	add	r3, r2
 800b72c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b730:	b17a      	cbz	r2, 800b752 <__mdiff+0x106>
 800b732:	6107      	str	r7, [r0, #16]
 800b734:	e7a4      	b.n	800b680 <__mdiff+0x34>
 800b736:	f856 8b04 	ldr.w	r8, [r6], #4
 800b73a:	fa11 f288 	uxtah	r2, r1, r8
 800b73e:	1414      	asrs	r4, r2, #16
 800b740:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b744:	b292      	uxth	r2, r2
 800b746:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b74a:	f84e 2b04 	str.w	r2, [lr], #4
 800b74e:	1421      	asrs	r1, r4, #16
 800b750:	e7e0      	b.n	800b714 <__mdiff+0xc8>
 800b752:	3f01      	subs	r7, #1
 800b754:	e7ea      	b.n	800b72c <__mdiff+0xe0>
 800b756:	bf00      	nop
 800b758:	0800c608 	.word	0x0800c608
 800b75c:	0800c679 	.word	0x0800c679

0800b760 <__ulp>:
 800b760:	b082      	sub	sp, #8
 800b762:	ed8d 0b00 	vstr	d0, [sp]
 800b766:	9a01      	ldr	r2, [sp, #4]
 800b768:	4b0f      	ldr	r3, [pc, #60]	; (800b7a8 <__ulp+0x48>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b770:	2b00      	cmp	r3, #0
 800b772:	dc08      	bgt.n	800b786 <__ulp+0x26>
 800b774:	425b      	negs	r3, r3
 800b776:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b77a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b77e:	da04      	bge.n	800b78a <__ulp+0x2a>
 800b780:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b784:	4113      	asrs	r3, r2
 800b786:	2200      	movs	r2, #0
 800b788:	e008      	b.n	800b79c <__ulp+0x3c>
 800b78a:	f1a2 0314 	sub.w	r3, r2, #20
 800b78e:	2b1e      	cmp	r3, #30
 800b790:	bfda      	itte	le
 800b792:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b796:	40da      	lsrle	r2, r3
 800b798:	2201      	movgt	r2, #1
 800b79a:	2300      	movs	r3, #0
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	ec41 0b10 	vmov	d0, r0, r1
 800b7a4:	b002      	add	sp, #8
 800b7a6:	4770      	bx	lr
 800b7a8:	7ff00000 	.word	0x7ff00000

0800b7ac <__b2d>:
 800b7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b0:	6906      	ldr	r6, [r0, #16]
 800b7b2:	f100 0814 	add.w	r8, r0, #20
 800b7b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b7ba:	1f37      	subs	r7, r6, #4
 800b7bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f7ff fd53 	bl	800b26c <__hi0bits>
 800b7c6:	f1c0 0320 	rsb	r3, r0, #32
 800b7ca:	280a      	cmp	r0, #10
 800b7cc:	600b      	str	r3, [r1, #0]
 800b7ce:	491b      	ldr	r1, [pc, #108]	; (800b83c <__b2d+0x90>)
 800b7d0:	dc15      	bgt.n	800b7fe <__b2d+0x52>
 800b7d2:	f1c0 0c0b 	rsb	ip, r0, #11
 800b7d6:	fa22 f30c 	lsr.w	r3, r2, ip
 800b7da:	45b8      	cmp	r8, r7
 800b7dc:	ea43 0501 	orr.w	r5, r3, r1
 800b7e0:	bf34      	ite	cc
 800b7e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b7e6:	2300      	movcs	r3, #0
 800b7e8:	3015      	adds	r0, #21
 800b7ea:	fa02 f000 	lsl.w	r0, r2, r0
 800b7ee:	fa23 f30c 	lsr.w	r3, r3, ip
 800b7f2:	4303      	orrs	r3, r0
 800b7f4:	461c      	mov	r4, r3
 800b7f6:	ec45 4b10 	vmov	d0, r4, r5
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fe:	45b8      	cmp	r8, r7
 800b800:	bf3a      	itte	cc
 800b802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b806:	f1a6 0708 	subcc.w	r7, r6, #8
 800b80a:	2300      	movcs	r3, #0
 800b80c:	380b      	subs	r0, #11
 800b80e:	d012      	beq.n	800b836 <__b2d+0x8a>
 800b810:	f1c0 0120 	rsb	r1, r0, #32
 800b814:	fa23 f401 	lsr.w	r4, r3, r1
 800b818:	4082      	lsls	r2, r0
 800b81a:	4322      	orrs	r2, r4
 800b81c:	4547      	cmp	r7, r8
 800b81e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b822:	bf8c      	ite	hi
 800b824:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b828:	2200      	movls	r2, #0
 800b82a:	4083      	lsls	r3, r0
 800b82c:	40ca      	lsrs	r2, r1
 800b82e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b832:	4313      	orrs	r3, r2
 800b834:	e7de      	b.n	800b7f4 <__b2d+0x48>
 800b836:	ea42 0501 	orr.w	r5, r2, r1
 800b83a:	e7db      	b.n	800b7f4 <__b2d+0x48>
 800b83c:	3ff00000 	.word	0x3ff00000

0800b840 <__d2b>:
 800b840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b844:	460f      	mov	r7, r1
 800b846:	2101      	movs	r1, #1
 800b848:	ec59 8b10 	vmov	r8, r9, d0
 800b84c:	4616      	mov	r6, r2
 800b84e:	f7ff fc1b 	bl	800b088 <_Balloc>
 800b852:	4604      	mov	r4, r0
 800b854:	b930      	cbnz	r0, 800b864 <__d2b+0x24>
 800b856:	4602      	mov	r2, r0
 800b858:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <__d2b+0xac>)
 800b85a:	4825      	ldr	r0, [pc, #148]	; (800b8f0 <__d2b+0xb0>)
 800b85c:	f240 310f 	movw	r1, #783	; 0x30f
 800b860:	f000 fafc 	bl	800be5c <__assert_func>
 800b864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b86c:	bb2d      	cbnz	r5, 800b8ba <__d2b+0x7a>
 800b86e:	9301      	str	r3, [sp, #4]
 800b870:	f1b8 0300 	subs.w	r3, r8, #0
 800b874:	d026      	beq.n	800b8c4 <__d2b+0x84>
 800b876:	4668      	mov	r0, sp
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	f7ff fd17 	bl	800b2ac <__lo0bits>
 800b87e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b882:	b1e8      	cbz	r0, 800b8c0 <__d2b+0x80>
 800b884:	f1c0 0320 	rsb	r3, r0, #32
 800b888:	fa02 f303 	lsl.w	r3, r2, r3
 800b88c:	430b      	orrs	r3, r1
 800b88e:	40c2      	lsrs	r2, r0
 800b890:	6163      	str	r3, [r4, #20]
 800b892:	9201      	str	r2, [sp, #4]
 800b894:	9b01      	ldr	r3, [sp, #4]
 800b896:	61a3      	str	r3, [r4, #24]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	bf14      	ite	ne
 800b89c:	2202      	movne	r2, #2
 800b89e:	2201      	moveq	r2, #1
 800b8a0:	6122      	str	r2, [r4, #16]
 800b8a2:	b1bd      	cbz	r5, 800b8d4 <__d2b+0x94>
 800b8a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8a8:	4405      	add	r5, r0
 800b8aa:	603d      	str	r5, [r7, #0]
 800b8ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8b0:	6030      	str	r0, [r6, #0]
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8be:	e7d6      	b.n	800b86e <__d2b+0x2e>
 800b8c0:	6161      	str	r1, [r4, #20]
 800b8c2:	e7e7      	b.n	800b894 <__d2b+0x54>
 800b8c4:	a801      	add	r0, sp, #4
 800b8c6:	f7ff fcf1 	bl	800b2ac <__lo0bits>
 800b8ca:	9b01      	ldr	r3, [sp, #4]
 800b8cc:	6163      	str	r3, [r4, #20]
 800b8ce:	3020      	adds	r0, #32
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	e7e5      	b.n	800b8a0 <__d2b+0x60>
 800b8d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8dc:	6038      	str	r0, [r7, #0]
 800b8de:	6918      	ldr	r0, [r3, #16]
 800b8e0:	f7ff fcc4 	bl	800b26c <__hi0bits>
 800b8e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8e8:	e7e2      	b.n	800b8b0 <__d2b+0x70>
 800b8ea:	bf00      	nop
 800b8ec:	0800c608 	.word	0x0800c608
 800b8f0:	0800c679 	.word	0x0800c679

0800b8f4 <__ratio>:
 800b8f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4688      	mov	r8, r1
 800b8fa:	4669      	mov	r1, sp
 800b8fc:	4681      	mov	r9, r0
 800b8fe:	f7ff ff55 	bl	800b7ac <__b2d>
 800b902:	a901      	add	r1, sp, #4
 800b904:	4640      	mov	r0, r8
 800b906:	ec55 4b10 	vmov	r4, r5, d0
 800b90a:	f7ff ff4f 	bl	800b7ac <__b2d>
 800b90e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b912:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b916:	eba3 0c02 	sub.w	ip, r3, r2
 800b91a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b924:	ec51 0b10 	vmov	r0, r1, d0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfd6      	itet	le
 800b92c:	460a      	movle	r2, r1
 800b92e:	462a      	movgt	r2, r5
 800b930:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b934:	468b      	mov	fp, r1
 800b936:	462f      	mov	r7, r5
 800b938:	bfd4      	ite	le
 800b93a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b93e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b942:	4620      	mov	r0, r4
 800b944:	ee10 2a10 	vmov	r2, s0
 800b948:	465b      	mov	r3, fp
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 ff7e 	bl	800084c <__aeabi_ddiv>
 800b950:	ec41 0b10 	vmov	d0, r0, r1
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b95a <__copybits>:
 800b95a:	3901      	subs	r1, #1
 800b95c:	b570      	push	{r4, r5, r6, lr}
 800b95e:	1149      	asrs	r1, r1, #5
 800b960:	6914      	ldr	r4, [r2, #16]
 800b962:	3101      	adds	r1, #1
 800b964:	f102 0314 	add.w	r3, r2, #20
 800b968:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b96c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b970:	1f05      	subs	r5, r0, #4
 800b972:	42a3      	cmp	r3, r4
 800b974:	d30c      	bcc.n	800b990 <__copybits+0x36>
 800b976:	1aa3      	subs	r3, r4, r2
 800b978:	3b11      	subs	r3, #17
 800b97a:	f023 0303 	bic.w	r3, r3, #3
 800b97e:	3211      	adds	r2, #17
 800b980:	42a2      	cmp	r2, r4
 800b982:	bf88      	it	hi
 800b984:	2300      	movhi	r3, #0
 800b986:	4418      	add	r0, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	4288      	cmp	r0, r1
 800b98c:	d305      	bcc.n	800b99a <__copybits+0x40>
 800b98e:	bd70      	pop	{r4, r5, r6, pc}
 800b990:	f853 6b04 	ldr.w	r6, [r3], #4
 800b994:	f845 6f04 	str.w	r6, [r5, #4]!
 800b998:	e7eb      	b.n	800b972 <__copybits+0x18>
 800b99a:	f840 3b04 	str.w	r3, [r0], #4
 800b99e:	e7f4      	b.n	800b98a <__copybits+0x30>

0800b9a0 <__any_on>:
 800b9a0:	f100 0214 	add.w	r2, r0, #20
 800b9a4:	6900      	ldr	r0, [r0, #16]
 800b9a6:	114b      	asrs	r3, r1, #5
 800b9a8:	4298      	cmp	r0, r3
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	db11      	blt.n	800b9d2 <__any_on+0x32>
 800b9ae:	dd0a      	ble.n	800b9c6 <__any_on+0x26>
 800b9b0:	f011 011f 	ands.w	r1, r1, #31
 800b9b4:	d007      	beq.n	800b9c6 <__any_on+0x26>
 800b9b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b9ba:	fa24 f001 	lsr.w	r0, r4, r1
 800b9be:	fa00 f101 	lsl.w	r1, r0, r1
 800b9c2:	428c      	cmp	r4, r1
 800b9c4:	d10b      	bne.n	800b9de <__any_on+0x3e>
 800b9c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d803      	bhi.n	800b9d6 <__any_on+0x36>
 800b9ce:	2000      	movs	r0, #0
 800b9d0:	bd10      	pop	{r4, pc}
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	e7f7      	b.n	800b9c6 <__any_on+0x26>
 800b9d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9da:	2900      	cmp	r1, #0
 800b9dc:	d0f5      	beq.n	800b9ca <__any_on+0x2a>
 800b9de:	2001      	movs	r0, #1
 800b9e0:	e7f6      	b.n	800b9d0 <__any_on+0x30>

0800b9e2 <__ascii_wctomb>:
 800b9e2:	b149      	cbz	r1, 800b9f8 <__ascii_wctomb+0x16>
 800b9e4:	2aff      	cmp	r2, #255	; 0xff
 800b9e6:	bf85      	ittet	hi
 800b9e8:	238a      	movhi	r3, #138	; 0x8a
 800b9ea:	6003      	strhi	r3, [r0, #0]
 800b9ec:	700a      	strbls	r2, [r1, #0]
 800b9ee:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9f2:	bf98      	it	ls
 800b9f4:	2001      	movls	r0, #1
 800b9f6:	4770      	bx	lr
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4770      	bx	lr

0800b9fc <__ssputs_r>:
 800b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	688e      	ldr	r6, [r1, #8]
 800ba02:	461f      	mov	r7, r3
 800ba04:	42be      	cmp	r6, r7
 800ba06:	680b      	ldr	r3, [r1, #0]
 800ba08:	4682      	mov	sl, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	4690      	mov	r8, r2
 800ba0e:	d82c      	bhi.n	800ba6a <__ssputs_r+0x6e>
 800ba10:	898a      	ldrh	r2, [r1, #12]
 800ba12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba16:	d026      	beq.n	800ba66 <__ssputs_r+0x6a>
 800ba18:	6965      	ldr	r5, [r4, #20]
 800ba1a:	6909      	ldr	r1, [r1, #16]
 800ba1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba20:	eba3 0901 	sub.w	r9, r3, r1
 800ba24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba28:	1c7b      	adds	r3, r7, #1
 800ba2a:	444b      	add	r3, r9
 800ba2c:	106d      	asrs	r5, r5, #1
 800ba2e:	429d      	cmp	r5, r3
 800ba30:	bf38      	it	cc
 800ba32:	461d      	movcc	r5, r3
 800ba34:	0553      	lsls	r3, r2, #21
 800ba36:	d527      	bpl.n	800ba88 <__ssputs_r+0x8c>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f7ff fa87 	bl	800af4c <_malloc_r>
 800ba3e:	4606      	mov	r6, r0
 800ba40:	b360      	cbz	r0, 800ba9c <__ssputs_r+0xa0>
 800ba42:	6921      	ldr	r1, [r4, #16]
 800ba44:	464a      	mov	r2, r9
 800ba46:	f7fe f824 	bl	8009a92 <memcpy>
 800ba4a:	89a3      	ldrh	r3, [r4, #12]
 800ba4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ba50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba54:	81a3      	strh	r3, [r4, #12]
 800ba56:	6126      	str	r6, [r4, #16]
 800ba58:	6165      	str	r5, [r4, #20]
 800ba5a:	444e      	add	r6, r9
 800ba5c:	eba5 0509 	sub.w	r5, r5, r9
 800ba60:	6026      	str	r6, [r4, #0]
 800ba62:	60a5      	str	r5, [r4, #8]
 800ba64:	463e      	mov	r6, r7
 800ba66:	42be      	cmp	r6, r7
 800ba68:	d900      	bls.n	800ba6c <__ssputs_r+0x70>
 800ba6a:	463e      	mov	r6, r7
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	4632      	mov	r2, r6
 800ba70:	4641      	mov	r1, r8
 800ba72:	f000 f9c9 	bl	800be08 <memmove>
 800ba76:	68a3      	ldr	r3, [r4, #8]
 800ba78:	1b9b      	subs	r3, r3, r6
 800ba7a:	60a3      	str	r3, [r4, #8]
 800ba7c:	6823      	ldr	r3, [r4, #0]
 800ba7e:	4433      	add	r3, r6
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	2000      	movs	r0, #0
 800ba84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba88:	462a      	mov	r2, r5
 800ba8a:	f000 fa1b 	bl	800bec4 <_realloc_r>
 800ba8e:	4606      	mov	r6, r0
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d1e0      	bne.n	800ba56 <__ssputs_r+0x5a>
 800ba94:	6921      	ldr	r1, [r4, #16]
 800ba96:	4650      	mov	r0, sl
 800ba98:	f7fe fe8c 	bl	800a7b4 <_free_r>
 800ba9c:	230c      	movs	r3, #12
 800ba9e:	f8ca 3000 	str.w	r3, [sl]
 800baa2:	89a3      	ldrh	r3, [r4, #12]
 800baa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800baa8:	81a3      	strh	r3, [r4, #12]
 800baaa:	f04f 30ff 	mov.w	r0, #4294967295
 800baae:	e7e9      	b.n	800ba84 <__ssputs_r+0x88>

0800bab0 <_svfiprintf_r>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	4698      	mov	r8, r3
 800bab6:	898b      	ldrh	r3, [r1, #12]
 800bab8:	061b      	lsls	r3, r3, #24
 800baba:	b09d      	sub	sp, #116	; 0x74
 800babc:	4607      	mov	r7, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	d50e      	bpl.n	800bae2 <_svfiprintf_r+0x32>
 800bac4:	690b      	ldr	r3, [r1, #16]
 800bac6:	b963      	cbnz	r3, 800bae2 <_svfiprintf_r+0x32>
 800bac8:	2140      	movs	r1, #64	; 0x40
 800baca:	f7ff fa3f 	bl	800af4c <_malloc_r>
 800bace:	6028      	str	r0, [r5, #0]
 800bad0:	6128      	str	r0, [r5, #16]
 800bad2:	b920      	cbnz	r0, 800bade <_svfiprintf_r+0x2e>
 800bad4:	230c      	movs	r3, #12
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295
 800badc:	e0d0      	b.n	800bc80 <_svfiprintf_r+0x1d0>
 800bade:	2340      	movs	r3, #64	; 0x40
 800bae0:	616b      	str	r3, [r5, #20]
 800bae2:	2300      	movs	r3, #0
 800bae4:	9309      	str	r3, [sp, #36]	; 0x24
 800bae6:	2320      	movs	r3, #32
 800bae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baec:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf0:	2330      	movs	r3, #48	; 0x30
 800baf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc98 <_svfiprintf_r+0x1e8>
 800baf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bafa:	f04f 0901 	mov.w	r9, #1
 800bafe:	4623      	mov	r3, r4
 800bb00:	469a      	mov	sl, r3
 800bb02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb06:	b10a      	cbz	r2, 800bb0c <_svfiprintf_r+0x5c>
 800bb08:	2a25      	cmp	r2, #37	; 0x25
 800bb0a:	d1f9      	bne.n	800bb00 <_svfiprintf_r+0x50>
 800bb0c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb10:	d00b      	beq.n	800bb2a <_svfiprintf_r+0x7a>
 800bb12:	465b      	mov	r3, fp
 800bb14:	4622      	mov	r2, r4
 800bb16:	4629      	mov	r1, r5
 800bb18:	4638      	mov	r0, r7
 800bb1a:	f7ff ff6f 	bl	800b9fc <__ssputs_r>
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f000 80a9 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb26:	445a      	add	r2, fp
 800bb28:	9209      	str	r2, [sp, #36]	; 0x24
 800bb2a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f000 80a1 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb34:	2300      	movs	r3, #0
 800bb36:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb3e:	f10a 0a01 	add.w	sl, sl, #1
 800bb42:	9304      	str	r3, [sp, #16]
 800bb44:	9307      	str	r3, [sp, #28]
 800bb46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb4a:	931a      	str	r3, [sp, #104]	; 0x68
 800bb4c:	4654      	mov	r4, sl
 800bb4e:	2205      	movs	r2, #5
 800bb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb54:	4850      	ldr	r0, [pc, #320]	; (800bc98 <_svfiprintf_r+0x1e8>)
 800bb56:	f7f4 fb3b 	bl	80001d0 <memchr>
 800bb5a:	9a04      	ldr	r2, [sp, #16]
 800bb5c:	b9d8      	cbnz	r0, 800bb96 <_svfiprintf_r+0xe6>
 800bb5e:	06d0      	lsls	r0, r2, #27
 800bb60:	bf44      	itt	mi
 800bb62:	2320      	movmi	r3, #32
 800bb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb68:	0711      	lsls	r1, r2, #28
 800bb6a:	bf44      	itt	mi
 800bb6c:	232b      	movmi	r3, #43	; 0x2b
 800bb6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb72:	f89a 3000 	ldrb.w	r3, [sl]
 800bb76:	2b2a      	cmp	r3, #42	; 0x2a
 800bb78:	d015      	beq.n	800bba6 <_svfiprintf_r+0xf6>
 800bb7a:	9a07      	ldr	r2, [sp, #28]
 800bb7c:	4654      	mov	r4, sl
 800bb7e:	2000      	movs	r0, #0
 800bb80:	f04f 0c0a 	mov.w	ip, #10
 800bb84:	4621      	mov	r1, r4
 800bb86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb8a:	3b30      	subs	r3, #48	; 0x30
 800bb8c:	2b09      	cmp	r3, #9
 800bb8e:	d94d      	bls.n	800bc2c <_svfiprintf_r+0x17c>
 800bb90:	b1b0      	cbz	r0, 800bbc0 <_svfiprintf_r+0x110>
 800bb92:	9207      	str	r2, [sp, #28]
 800bb94:	e014      	b.n	800bbc0 <_svfiprintf_r+0x110>
 800bb96:	eba0 0308 	sub.w	r3, r0, r8
 800bb9a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	46a2      	mov	sl, r4
 800bba4:	e7d2      	b.n	800bb4c <_svfiprintf_r+0x9c>
 800bba6:	9b03      	ldr	r3, [sp, #12]
 800bba8:	1d19      	adds	r1, r3, #4
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	9103      	str	r1, [sp, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	bfbb      	ittet	lt
 800bbb2:	425b      	neglt	r3, r3
 800bbb4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbb8:	9307      	strge	r3, [sp, #28]
 800bbba:	9307      	strlt	r3, [sp, #28]
 800bbbc:	bfb8      	it	lt
 800bbbe:	9204      	strlt	r2, [sp, #16]
 800bbc0:	7823      	ldrb	r3, [r4, #0]
 800bbc2:	2b2e      	cmp	r3, #46	; 0x2e
 800bbc4:	d10c      	bne.n	800bbe0 <_svfiprintf_r+0x130>
 800bbc6:	7863      	ldrb	r3, [r4, #1]
 800bbc8:	2b2a      	cmp	r3, #42	; 0x2a
 800bbca:	d134      	bne.n	800bc36 <_svfiprintf_r+0x186>
 800bbcc:	9b03      	ldr	r3, [sp, #12]
 800bbce:	1d1a      	adds	r2, r3, #4
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	9203      	str	r2, [sp, #12]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bfb8      	it	lt
 800bbd8:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbdc:	3402      	adds	r4, #2
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bca8 <_svfiprintf_r+0x1f8>
 800bbe4:	7821      	ldrb	r1, [r4, #0]
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	4650      	mov	r0, sl
 800bbea:	f7f4 faf1 	bl	80001d0 <memchr>
 800bbee:	b138      	cbz	r0, 800bc00 <_svfiprintf_r+0x150>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	eba0 000a 	sub.w	r0, r0, sl
 800bbf6:	2240      	movs	r2, #64	; 0x40
 800bbf8:	4082      	lsls	r2, r0
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	4825      	ldr	r0, [pc, #148]	; (800bc9c <_svfiprintf_r+0x1ec>)
 800bc06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	f7f4 fae0 	bl	80001d0 <memchr>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d038      	beq.n	800bc86 <_svfiprintf_r+0x1d6>
 800bc14:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <_svfiprintf_r+0x1f0>)
 800bc16:	bb1b      	cbnz	r3, 800bc60 <_svfiprintf_r+0x1b0>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	3308      	adds	r3, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc26:	4433      	add	r3, r6
 800bc28:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2a:	e768      	b.n	800bafe <_svfiprintf_r+0x4e>
 800bc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc30:	460c      	mov	r4, r1
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7a6      	b.n	800bb84 <_svfiprintf_r+0xd4>
 800bc36:	2300      	movs	r3, #0
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f04f 0c0a 	mov.w	ip, #10
 800bc42:	4620      	mov	r0, r4
 800bc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc48:	3a30      	subs	r2, #48	; 0x30
 800bc4a:	2a09      	cmp	r2, #9
 800bc4c:	d903      	bls.n	800bc56 <_svfiprintf_r+0x1a6>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c6      	beq.n	800bbe0 <_svfiprintf_r+0x130>
 800bc52:	9105      	str	r1, [sp, #20]
 800bc54:	e7c4      	b.n	800bbe0 <_svfiprintf_r+0x130>
 800bc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7f0      	b.n	800bc42 <_svfiprintf_r+0x192>
 800bc60:	ab03      	add	r3, sp, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462a      	mov	r2, r5
 800bc66:	4b0f      	ldr	r3, [pc, #60]	; (800bca4 <_svfiprintf_r+0x1f4>)
 800bc68:	a904      	add	r1, sp, #16
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7fd f994 	bl	8008f98 <_printf_float>
 800bc70:	1c42      	adds	r2, r0, #1
 800bc72:	4606      	mov	r6, r0
 800bc74:	d1d6      	bne.n	800bc24 <_svfiprintf_r+0x174>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	065b      	lsls	r3, r3, #25
 800bc7a:	f53f af2d 	bmi.w	800bad8 <_svfiprintf_r+0x28>
 800bc7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc80:	b01d      	add	sp, #116	; 0x74
 800bc82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc86:	ab03      	add	r3, sp, #12
 800bc88:	9300      	str	r3, [sp, #0]
 800bc8a:	462a      	mov	r2, r5
 800bc8c:	4b05      	ldr	r3, [pc, #20]	; (800bca4 <_svfiprintf_r+0x1f4>)
 800bc8e:	a904      	add	r1, sp, #16
 800bc90:	4638      	mov	r0, r7
 800bc92:	f7fd fc25 	bl	80094e0 <_printf_i>
 800bc96:	e7eb      	b.n	800bc70 <_svfiprintf_r+0x1c0>
 800bc98:	0800c8d5 	.word	0x0800c8d5
 800bc9c:	0800c8df 	.word	0x0800c8df
 800bca0:	08008f99 	.word	0x08008f99
 800bca4:	0800b9fd 	.word	0x0800b9fd
 800bca8:	0800c8db 	.word	0x0800c8db

0800bcac <__sflush_r>:
 800bcac:	898a      	ldrh	r2, [r1, #12]
 800bcae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	0710      	lsls	r0, r2, #28
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	d458      	bmi.n	800bd6c <__sflush_r+0xc0>
 800bcba:	684b      	ldr	r3, [r1, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	dc05      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	dc02      	bgt.n	800bccc <__sflush_r+0x20>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bccc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcce:	2e00      	cmp	r6, #0
 800bcd0:	d0f9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcd8:	682f      	ldr	r7, [r5, #0]
 800bcda:	6a21      	ldr	r1, [r4, #32]
 800bcdc:	602b      	str	r3, [r5, #0]
 800bcde:	d032      	beq.n	800bd46 <__sflush_r+0x9a>
 800bce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bce2:	89a3      	ldrh	r3, [r4, #12]
 800bce4:	075a      	lsls	r2, r3, #29
 800bce6:	d505      	bpl.n	800bcf4 <__sflush_r+0x48>
 800bce8:	6863      	ldr	r3, [r4, #4]
 800bcea:	1ac0      	subs	r0, r0, r3
 800bcec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcee:	b10b      	cbz	r3, 800bcf4 <__sflush_r+0x48>
 800bcf0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcf2:	1ac0      	subs	r0, r0, r3
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcfa:	6a21      	ldr	r1, [r4, #32]
 800bcfc:	4628      	mov	r0, r5
 800bcfe:	47b0      	blx	r6
 800bd00:	1c43      	adds	r3, r0, #1
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	d106      	bne.n	800bd14 <__sflush_r+0x68>
 800bd06:	6829      	ldr	r1, [r5, #0]
 800bd08:	291d      	cmp	r1, #29
 800bd0a:	d82b      	bhi.n	800bd64 <__sflush_r+0xb8>
 800bd0c:	4a29      	ldr	r2, [pc, #164]	; (800bdb4 <__sflush_r+0x108>)
 800bd0e:	410a      	asrs	r2, r1
 800bd10:	07d6      	lsls	r6, r2, #31
 800bd12:	d427      	bmi.n	800bd64 <__sflush_r+0xb8>
 800bd14:	2200      	movs	r2, #0
 800bd16:	6062      	str	r2, [r4, #4]
 800bd18:	04d9      	lsls	r1, r3, #19
 800bd1a:	6922      	ldr	r2, [r4, #16]
 800bd1c:	6022      	str	r2, [r4, #0]
 800bd1e:	d504      	bpl.n	800bd2a <__sflush_r+0x7e>
 800bd20:	1c42      	adds	r2, r0, #1
 800bd22:	d101      	bne.n	800bd28 <__sflush_r+0x7c>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	b903      	cbnz	r3, 800bd2a <__sflush_r+0x7e>
 800bd28:	6560      	str	r0, [r4, #84]	; 0x54
 800bd2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd2c:	602f      	str	r7, [r5, #0]
 800bd2e:	2900      	cmp	r1, #0
 800bd30:	d0c9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd36:	4299      	cmp	r1, r3
 800bd38:	d002      	beq.n	800bd40 <__sflush_r+0x94>
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	f7fe fd3a 	bl	800a7b4 <_free_r>
 800bd40:	2000      	movs	r0, #0
 800bd42:	6360      	str	r0, [r4, #52]	; 0x34
 800bd44:	e7c0      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd46:	2301      	movs	r3, #1
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b0      	blx	r6
 800bd4c:	1c41      	adds	r1, r0, #1
 800bd4e:	d1c8      	bne.n	800bce2 <__sflush_r+0x36>
 800bd50:	682b      	ldr	r3, [r5, #0]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0c5      	beq.n	800bce2 <__sflush_r+0x36>
 800bd56:	2b1d      	cmp	r3, #29
 800bd58:	d001      	beq.n	800bd5e <__sflush_r+0xb2>
 800bd5a:	2b16      	cmp	r3, #22
 800bd5c:	d101      	bne.n	800bd62 <__sflush_r+0xb6>
 800bd5e:	602f      	str	r7, [r5, #0]
 800bd60:	e7b1      	b.n	800bcc6 <__sflush_r+0x1a>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	e7ad      	b.n	800bcc8 <__sflush_r+0x1c>
 800bd6c:	690f      	ldr	r7, [r1, #16]
 800bd6e:	2f00      	cmp	r7, #0
 800bd70:	d0a9      	beq.n	800bcc6 <__sflush_r+0x1a>
 800bd72:	0793      	lsls	r3, r2, #30
 800bd74:	680e      	ldr	r6, [r1, #0]
 800bd76:	bf08      	it	eq
 800bd78:	694b      	ldreq	r3, [r1, #20]
 800bd7a:	600f      	str	r7, [r1, #0]
 800bd7c:	bf18      	it	ne
 800bd7e:	2300      	movne	r3, #0
 800bd80:	eba6 0807 	sub.w	r8, r6, r7
 800bd84:	608b      	str	r3, [r1, #8]
 800bd86:	f1b8 0f00 	cmp.w	r8, #0
 800bd8a:	dd9c      	ble.n	800bcc6 <__sflush_r+0x1a>
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd90:	4643      	mov	r3, r8
 800bd92:	463a      	mov	r2, r7
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	dc06      	bgt.n	800bdaa <__sflush_r+0xfe>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bda2:	81a3      	strh	r3, [r4, #12]
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295
 800bda8:	e78e      	b.n	800bcc8 <__sflush_r+0x1c>
 800bdaa:	4407      	add	r7, r0
 800bdac:	eba8 0800 	sub.w	r8, r8, r0
 800bdb0:	e7e9      	b.n	800bd86 <__sflush_r+0xda>
 800bdb2:	bf00      	nop
 800bdb4:	dfbffffe 	.word	0xdfbffffe

0800bdb8 <_fflush_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	690b      	ldr	r3, [r1, #16]
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	460c      	mov	r4, r1
 800bdc0:	b913      	cbnz	r3, 800bdc8 <_fflush_r+0x10>
 800bdc2:	2500      	movs	r5, #0
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	bd38      	pop	{r3, r4, r5, pc}
 800bdc8:	b118      	cbz	r0, 800bdd2 <_fflush_r+0x1a>
 800bdca:	6a03      	ldr	r3, [r0, #32]
 800bdcc:	b90b      	cbnz	r3, 800bdd2 <_fflush_r+0x1a>
 800bdce:	f7fd fd35 	bl	800983c <__sinit>
 800bdd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0f3      	beq.n	800bdc2 <_fflush_r+0xa>
 800bdda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bddc:	07d0      	lsls	r0, r2, #31
 800bdde:	d404      	bmi.n	800bdea <_fflush_r+0x32>
 800bde0:	0599      	lsls	r1, r3, #22
 800bde2:	d402      	bmi.n	800bdea <_fflush_r+0x32>
 800bde4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bde6:	f7fd fe52 	bl	8009a8e <__retarget_lock_acquire_recursive>
 800bdea:	4628      	mov	r0, r5
 800bdec:	4621      	mov	r1, r4
 800bdee:	f7ff ff5d 	bl	800bcac <__sflush_r>
 800bdf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdf4:	07da      	lsls	r2, r3, #31
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	d4e4      	bmi.n	800bdc4 <_fflush_r+0xc>
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	059b      	lsls	r3, r3, #22
 800bdfe:	d4e1      	bmi.n	800bdc4 <_fflush_r+0xc>
 800be00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be02:	f7fd fe45 	bl	8009a90 <__retarget_lock_release_recursive>
 800be06:	e7dd      	b.n	800bdc4 <_fflush_r+0xc>

0800be08 <memmove>:
 800be08:	4288      	cmp	r0, r1
 800be0a:	b510      	push	{r4, lr}
 800be0c:	eb01 0402 	add.w	r4, r1, r2
 800be10:	d902      	bls.n	800be18 <memmove+0x10>
 800be12:	4284      	cmp	r4, r0
 800be14:	4623      	mov	r3, r4
 800be16:	d807      	bhi.n	800be28 <memmove+0x20>
 800be18:	1e43      	subs	r3, r0, #1
 800be1a:	42a1      	cmp	r1, r4
 800be1c:	d008      	beq.n	800be30 <memmove+0x28>
 800be1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be22:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be26:	e7f8      	b.n	800be1a <memmove+0x12>
 800be28:	4402      	add	r2, r0
 800be2a:	4601      	mov	r1, r0
 800be2c:	428a      	cmp	r2, r1
 800be2e:	d100      	bne.n	800be32 <memmove+0x2a>
 800be30:	bd10      	pop	{r4, pc}
 800be32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be3a:	e7f7      	b.n	800be2c <memmove+0x24>

0800be3c <_sbrk_r>:
 800be3c:	b538      	push	{r3, r4, r5, lr}
 800be3e:	4d06      	ldr	r5, [pc, #24]	; (800be58 <_sbrk_r+0x1c>)
 800be40:	2300      	movs	r3, #0
 800be42:	4604      	mov	r4, r0
 800be44:	4608      	mov	r0, r1
 800be46:	602b      	str	r3, [r5, #0]
 800be48:	f7f7 fcfc 	bl	8003844 <_sbrk>
 800be4c:	1c43      	adds	r3, r0, #1
 800be4e:	d102      	bne.n	800be56 <_sbrk_r+0x1a>
 800be50:	682b      	ldr	r3, [r5, #0]
 800be52:	b103      	cbz	r3, 800be56 <_sbrk_r+0x1a>
 800be54:	6023      	str	r3, [r4, #0]
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	20000a34 	.word	0x20000a34

0800be5c <__assert_func>:
 800be5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be5e:	4614      	mov	r4, r2
 800be60:	461a      	mov	r2, r3
 800be62:	4b09      	ldr	r3, [pc, #36]	; (800be88 <__assert_func+0x2c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4605      	mov	r5, r0
 800be68:	68d8      	ldr	r0, [r3, #12]
 800be6a:	b14c      	cbz	r4, 800be80 <__assert_func+0x24>
 800be6c:	4b07      	ldr	r3, [pc, #28]	; (800be8c <__assert_func+0x30>)
 800be6e:	9100      	str	r1, [sp, #0]
 800be70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be74:	4906      	ldr	r1, [pc, #24]	; (800be90 <__assert_func+0x34>)
 800be76:	462b      	mov	r3, r5
 800be78:	f000 f854 	bl	800bf24 <fiprintf>
 800be7c:	f000 f864 	bl	800bf48 <abort>
 800be80:	4b04      	ldr	r3, [pc, #16]	; (800be94 <__assert_func+0x38>)
 800be82:	461c      	mov	r4, r3
 800be84:	e7f3      	b.n	800be6e <__assert_func+0x12>
 800be86:	bf00      	nop
 800be88:	200001d0 	.word	0x200001d0
 800be8c:	0800c8e6 	.word	0x0800c8e6
 800be90:	0800c8f3 	.word	0x0800c8f3
 800be94:	0800c921 	.word	0x0800c921

0800be98 <_calloc_r>:
 800be98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be9a:	fba1 2402 	umull	r2, r4, r1, r2
 800be9e:	b94c      	cbnz	r4, 800beb4 <_calloc_r+0x1c>
 800bea0:	4611      	mov	r1, r2
 800bea2:	9201      	str	r2, [sp, #4]
 800bea4:	f7ff f852 	bl	800af4c <_malloc_r>
 800bea8:	9a01      	ldr	r2, [sp, #4]
 800beaa:	4605      	mov	r5, r0
 800beac:	b930      	cbnz	r0, 800bebc <_calloc_r+0x24>
 800beae:	4628      	mov	r0, r5
 800beb0:	b003      	add	sp, #12
 800beb2:	bd30      	pop	{r4, r5, pc}
 800beb4:	220c      	movs	r2, #12
 800beb6:	6002      	str	r2, [r0, #0]
 800beb8:	2500      	movs	r5, #0
 800beba:	e7f8      	b.n	800beae <_calloc_r+0x16>
 800bebc:	4621      	mov	r1, r4
 800bebe:	f7fd fd56 	bl	800996e <memset>
 800bec2:	e7f4      	b.n	800beae <_calloc_r+0x16>

0800bec4 <_realloc_r>:
 800bec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec8:	4680      	mov	r8, r0
 800beca:	4614      	mov	r4, r2
 800becc:	460e      	mov	r6, r1
 800bece:	b921      	cbnz	r1, 800beda <_realloc_r+0x16>
 800bed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bed4:	4611      	mov	r1, r2
 800bed6:	f7ff b839 	b.w	800af4c <_malloc_r>
 800beda:	b92a      	cbnz	r2, 800bee8 <_realloc_r+0x24>
 800bedc:	f7fe fc6a 	bl	800a7b4 <_free_r>
 800bee0:	4625      	mov	r5, r4
 800bee2:	4628      	mov	r0, r5
 800bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bee8:	f000 f835 	bl	800bf56 <_malloc_usable_size_r>
 800beec:	4284      	cmp	r4, r0
 800beee:	4607      	mov	r7, r0
 800bef0:	d802      	bhi.n	800bef8 <_realloc_r+0x34>
 800bef2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bef6:	d812      	bhi.n	800bf1e <_realloc_r+0x5a>
 800bef8:	4621      	mov	r1, r4
 800befa:	4640      	mov	r0, r8
 800befc:	f7ff f826 	bl	800af4c <_malloc_r>
 800bf00:	4605      	mov	r5, r0
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d0ed      	beq.n	800bee2 <_realloc_r+0x1e>
 800bf06:	42bc      	cmp	r4, r7
 800bf08:	4622      	mov	r2, r4
 800bf0a:	4631      	mov	r1, r6
 800bf0c:	bf28      	it	cs
 800bf0e:	463a      	movcs	r2, r7
 800bf10:	f7fd fdbf 	bl	8009a92 <memcpy>
 800bf14:	4631      	mov	r1, r6
 800bf16:	4640      	mov	r0, r8
 800bf18:	f7fe fc4c 	bl	800a7b4 <_free_r>
 800bf1c:	e7e1      	b.n	800bee2 <_realloc_r+0x1e>
 800bf1e:	4635      	mov	r5, r6
 800bf20:	e7df      	b.n	800bee2 <_realloc_r+0x1e>
	...

0800bf24 <fiprintf>:
 800bf24:	b40e      	push	{r1, r2, r3}
 800bf26:	b503      	push	{r0, r1, lr}
 800bf28:	4601      	mov	r1, r0
 800bf2a:	ab03      	add	r3, sp, #12
 800bf2c:	4805      	ldr	r0, [pc, #20]	; (800bf44 <fiprintf+0x20>)
 800bf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf32:	6800      	ldr	r0, [r0, #0]
 800bf34:	9301      	str	r3, [sp, #4]
 800bf36:	f000 f83f 	bl	800bfb8 <_vfiprintf_r>
 800bf3a:	b002      	add	sp, #8
 800bf3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf40:	b003      	add	sp, #12
 800bf42:	4770      	bx	lr
 800bf44:	200001d0 	.word	0x200001d0

0800bf48 <abort>:
 800bf48:	b508      	push	{r3, lr}
 800bf4a:	2006      	movs	r0, #6
 800bf4c:	f000 fa0c 	bl	800c368 <raise>
 800bf50:	2001      	movs	r0, #1
 800bf52:	f7f7 fbff 	bl	8003754 <_exit>

0800bf56 <_malloc_usable_size_r>:
 800bf56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf5a:	1f18      	subs	r0, r3, #4
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	bfbc      	itt	lt
 800bf60:	580b      	ldrlt	r3, [r1, r0]
 800bf62:	18c0      	addlt	r0, r0, r3
 800bf64:	4770      	bx	lr

0800bf66 <__sfputc_r>:
 800bf66:	6893      	ldr	r3, [r2, #8]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	b410      	push	{r4}
 800bf6e:	6093      	str	r3, [r2, #8]
 800bf70:	da08      	bge.n	800bf84 <__sfputc_r+0x1e>
 800bf72:	6994      	ldr	r4, [r2, #24]
 800bf74:	42a3      	cmp	r3, r4
 800bf76:	db01      	blt.n	800bf7c <__sfputc_r+0x16>
 800bf78:	290a      	cmp	r1, #10
 800bf7a:	d103      	bne.n	800bf84 <__sfputc_r+0x1e>
 800bf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf80:	f000 b934 	b.w	800c1ec <__swbuf_r>
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	1c58      	adds	r0, r3, #1
 800bf88:	6010      	str	r0, [r2, #0]
 800bf8a:	7019      	strb	r1, [r3, #0]
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <__sfputs_r>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	4614      	mov	r4, r2
 800bf9c:	18d5      	adds	r5, r2, r3
 800bf9e:	42ac      	cmp	r4, r5
 800bfa0:	d101      	bne.n	800bfa6 <__sfputs_r+0x12>
 800bfa2:	2000      	movs	r0, #0
 800bfa4:	e007      	b.n	800bfb6 <__sfputs_r+0x22>
 800bfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfaa:	463a      	mov	r2, r7
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffda 	bl	800bf66 <__sfputc_r>
 800bfb2:	1c43      	adds	r3, r0, #1
 800bfb4:	d1f3      	bne.n	800bf9e <__sfputs_r+0xa>
 800bfb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfb8 <_vfiprintf_r>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	460d      	mov	r5, r1
 800bfbe:	b09d      	sub	sp, #116	; 0x74
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	4698      	mov	r8, r3
 800bfc4:	4606      	mov	r6, r0
 800bfc6:	b118      	cbz	r0, 800bfd0 <_vfiprintf_r+0x18>
 800bfc8:	6a03      	ldr	r3, [r0, #32]
 800bfca:	b90b      	cbnz	r3, 800bfd0 <_vfiprintf_r+0x18>
 800bfcc:	f7fd fc36 	bl	800983c <__sinit>
 800bfd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfd2:	07d9      	lsls	r1, r3, #31
 800bfd4:	d405      	bmi.n	800bfe2 <_vfiprintf_r+0x2a>
 800bfd6:	89ab      	ldrh	r3, [r5, #12]
 800bfd8:	059a      	lsls	r2, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_vfiprintf_r+0x2a>
 800bfdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfde:	f7fd fd56 	bl	8009a8e <__retarget_lock_acquire_recursive>
 800bfe2:	89ab      	ldrh	r3, [r5, #12]
 800bfe4:	071b      	lsls	r3, r3, #28
 800bfe6:	d501      	bpl.n	800bfec <_vfiprintf_r+0x34>
 800bfe8:	692b      	ldr	r3, [r5, #16]
 800bfea:	b99b      	cbnz	r3, 800c014 <_vfiprintf_r+0x5c>
 800bfec:	4629      	mov	r1, r5
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 f93a 	bl	800c268 <__swsetup_r>
 800bff4:	b170      	cbz	r0, 800c014 <_vfiprintf_r+0x5c>
 800bff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff8:	07dc      	lsls	r4, r3, #31
 800bffa:	d504      	bpl.n	800c006 <_vfiprintf_r+0x4e>
 800bffc:	f04f 30ff 	mov.w	r0, #4294967295
 800c000:	b01d      	add	sp, #116	; 0x74
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	0598      	lsls	r0, r3, #22
 800c00a:	d4f7      	bmi.n	800bffc <_vfiprintf_r+0x44>
 800c00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00e:	f7fd fd3f 	bl	8009a90 <__retarget_lock_release_recursive>
 800c012:	e7f3      	b.n	800bffc <_vfiprintf_r+0x44>
 800c014:	2300      	movs	r3, #0
 800c016:	9309      	str	r3, [sp, #36]	; 0x24
 800c018:	2320      	movs	r3, #32
 800c01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c01e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c022:	2330      	movs	r3, #48	; 0x30
 800c024:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c1d8 <_vfiprintf_r+0x220>
 800c028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c02c:	f04f 0901 	mov.w	r9, #1
 800c030:	4623      	mov	r3, r4
 800c032:	469a      	mov	sl, r3
 800c034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c038:	b10a      	cbz	r2, 800c03e <_vfiprintf_r+0x86>
 800c03a:	2a25      	cmp	r2, #37	; 0x25
 800c03c:	d1f9      	bne.n	800c032 <_vfiprintf_r+0x7a>
 800c03e:	ebba 0b04 	subs.w	fp, sl, r4
 800c042:	d00b      	beq.n	800c05c <_vfiprintf_r+0xa4>
 800c044:	465b      	mov	r3, fp
 800c046:	4622      	mov	r2, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff ffa2 	bl	800bf94 <__sfputs_r>
 800c050:	3001      	adds	r0, #1
 800c052:	f000 80a9 	beq.w	800c1a8 <_vfiprintf_r+0x1f0>
 800c056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c058:	445a      	add	r2, fp
 800c05a:	9209      	str	r2, [sp, #36]	; 0x24
 800c05c:	f89a 3000 	ldrb.w	r3, [sl]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80a1 	beq.w	800c1a8 <_vfiprintf_r+0x1f0>
 800c066:	2300      	movs	r3, #0
 800c068:	f04f 32ff 	mov.w	r2, #4294967295
 800c06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c070:	f10a 0a01 	add.w	sl, sl, #1
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	9307      	str	r3, [sp, #28]
 800c078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c07c:	931a      	str	r3, [sp, #104]	; 0x68
 800c07e:	4654      	mov	r4, sl
 800c080:	2205      	movs	r2, #5
 800c082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c086:	4854      	ldr	r0, [pc, #336]	; (800c1d8 <_vfiprintf_r+0x220>)
 800c088:	f7f4 f8a2 	bl	80001d0 <memchr>
 800c08c:	9a04      	ldr	r2, [sp, #16]
 800c08e:	b9d8      	cbnz	r0, 800c0c8 <_vfiprintf_r+0x110>
 800c090:	06d1      	lsls	r1, r2, #27
 800c092:	bf44      	itt	mi
 800c094:	2320      	movmi	r3, #32
 800c096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09a:	0713      	lsls	r3, r2, #28
 800c09c:	bf44      	itt	mi
 800c09e:	232b      	movmi	r3, #43	; 0x2b
 800c0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0aa:	d015      	beq.n	800c0d8 <_vfiprintf_r+0x120>
 800c0ac:	9a07      	ldr	r2, [sp, #28]
 800c0ae:	4654      	mov	r4, sl
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	f04f 0c0a 	mov.w	ip, #10
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0bc:	3b30      	subs	r3, #48	; 0x30
 800c0be:	2b09      	cmp	r3, #9
 800c0c0:	d94d      	bls.n	800c15e <_vfiprintf_r+0x1a6>
 800c0c2:	b1b0      	cbz	r0, 800c0f2 <_vfiprintf_r+0x13a>
 800c0c4:	9207      	str	r2, [sp, #28]
 800c0c6:	e014      	b.n	800c0f2 <_vfiprintf_r+0x13a>
 800c0c8:	eba0 0308 	sub.w	r3, r0, r8
 800c0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	46a2      	mov	sl, r4
 800c0d6:	e7d2      	b.n	800c07e <_vfiprintf_r+0xc6>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	1d19      	adds	r1, r3, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	9103      	str	r1, [sp, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfbb      	ittet	lt
 800c0e4:	425b      	neglt	r3, r3
 800c0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ea:	9307      	strge	r3, [sp, #28]
 800c0ec:	9307      	strlt	r3, [sp, #28]
 800c0ee:	bfb8      	it	lt
 800c0f0:	9204      	strlt	r2, [sp, #16]
 800c0f2:	7823      	ldrb	r3, [r4, #0]
 800c0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f6:	d10c      	bne.n	800c112 <_vfiprintf_r+0x15a>
 800c0f8:	7863      	ldrb	r3, [r4, #1]
 800c0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fc:	d134      	bne.n	800c168 <_vfiprintf_r+0x1b0>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	1d1a      	adds	r2, r3, #4
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	9203      	str	r2, [sp, #12]
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfb8      	it	lt
 800c10a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c10e:	3402      	adds	r4, #2
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c1e8 <_vfiprintf_r+0x230>
 800c116:	7821      	ldrb	r1, [r4, #0]
 800c118:	2203      	movs	r2, #3
 800c11a:	4650      	mov	r0, sl
 800c11c:	f7f4 f858 	bl	80001d0 <memchr>
 800c120:	b138      	cbz	r0, 800c132 <_vfiprintf_r+0x17a>
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	eba0 000a 	sub.w	r0, r0, sl
 800c128:	2240      	movs	r2, #64	; 0x40
 800c12a:	4082      	lsls	r2, r0
 800c12c:	4313      	orrs	r3, r2
 800c12e:	3401      	adds	r4, #1
 800c130:	9304      	str	r3, [sp, #16]
 800c132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c136:	4829      	ldr	r0, [pc, #164]	; (800c1dc <_vfiprintf_r+0x224>)
 800c138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c13c:	2206      	movs	r2, #6
 800c13e:	f7f4 f847 	bl	80001d0 <memchr>
 800c142:	2800      	cmp	r0, #0
 800c144:	d03f      	beq.n	800c1c6 <_vfiprintf_r+0x20e>
 800c146:	4b26      	ldr	r3, [pc, #152]	; (800c1e0 <_vfiprintf_r+0x228>)
 800c148:	bb1b      	cbnz	r3, 800c192 <_vfiprintf_r+0x1da>
 800c14a:	9b03      	ldr	r3, [sp, #12]
 800c14c:	3307      	adds	r3, #7
 800c14e:	f023 0307 	bic.w	r3, r3, #7
 800c152:	3308      	adds	r3, #8
 800c154:	9303      	str	r3, [sp, #12]
 800c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c158:	443b      	add	r3, r7
 800c15a:	9309      	str	r3, [sp, #36]	; 0x24
 800c15c:	e768      	b.n	800c030 <_vfiprintf_r+0x78>
 800c15e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c162:	460c      	mov	r4, r1
 800c164:	2001      	movs	r0, #1
 800c166:	e7a6      	b.n	800c0b6 <_vfiprintf_r+0xfe>
 800c168:	2300      	movs	r3, #0
 800c16a:	3401      	adds	r4, #1
 800c16c:	9305      	str	r3, [sp, #20]
 800c16e:	4619      	mov	r1, r3
 800c170:	f04f 0c0a 	mov.w	ip, #10
 800c174:	4620      	mov	r0, r4
 800c176:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17a:	3a30      	subs	r2, #48	; 0x30
 800c17c:	2a09      	cmp	r2, #9
 800c17e:	d903      	bls.n	800c188 <_vfiprintf_r+0x1d0>
 800c180:	2b00      	cmp	r3, #0
 800c182:	d0c6      	beq.n	800c112 <_vfiprintf_r+0x15a>
 800c184:	9105      	str	r1, [sp, #20]
 800c186:	e7c4      	b.n	800c112 <_vfiprintf_r+0x15a>
 800c188:	fb0c 2101 	mla	r1, ip, r1, r2
 800c18c:	4604      	mov	r4, r0
 800c18e:	2301      	movs	r3, #1
 800c190:	e7f0      	b.n	800c174 <_vfiprintf_r+0x1bc>
 800c192:	ab03      	add	r3, sp, #12
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	462a      	mov	r2, r5
 800c198:	4b12      	ldr	r3, [pc, #72]	; (800c1e4 <_vfiprintf_r+0x22c>)
 800c19a:	a904      	add	r1, sp, #16
 800c19c:	4630      	mov	r0, r6
 800c19e:	f7fc fefb 	bl	8008f98 <_printf_float>
 800c1a2:	4607      	mov	r7, r0
 800c1a4:	1c78      	adds	r0, r7, #1
 800c1a6:	d1d6      	bne.n	800c156 <_vfiprintf_r+0x19e>
 800c1a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1aa:	07d9      	lsls	r1, r3, #31
 800c1ac:	d405      	bmi.n	800c1ba <_vfiprintf_r+0x202>
 800c1ae:	89ab      	ldrh	r3, [r5, #12]
 800c1b0:	059a      	lsls	r2, r3, #22
 800c1b2:	d402      	bmi.n	800c1ba <_vfiprintf_r+0x202>
 800c1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b6:	f7fd fc6b 	bl	8009a90 <__retarget_lock_release_recursive>
 800c1ba:	89ab      	ldrh	r3, [r5, #12]
 800c1bc:	065b      	lsls	r3, r3, #25
 800c1be:	f53f af1d 	bmi.w	800bffc <_vfiprintf_r+0x44>
 800c1c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1c4:	e71c      	b.n	800c000 <_vfiprintf_r+0x48>
 800c1c6:	ab03      	add	r3, sp, #12
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <_vfiprintf_r+0x22c>)
 800c1ce:	a904      	add	r1, sp, #16
 800c1d0:	4630      	mov	r0, r6
 800c1d2:	f7fd f985 	bl	80094e0 <_printf_i>
 800c1d6:	e7e4      	b.n	800c1a2 <_vfiprintf_r+0x1ea>
 800c1d8:	0800c8d5 	.word	0x0800c8d5
 800c1dc:	0800c8df 	.word	0x0800c8df
 800c1e0:	08008f99 	.word	0x08008f99
 800c1e4:	0800bf95 	.word	0x0800bf95
 800c1e8:	0800c8db 	.word	0x0800c8db

0800c1ec <__swbuf_r>:
 800c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ee:	460e      	mov	r6, r1
 800c1f0:	4614      	mov	r4, r2
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b118      	cbz	r0, 800c1fe <__swbuf_r+0x12>
 800c1f6:	6a03      	ldr	r3, [r0, #32]
 800c1f8:	b90b      	cbnz	r3, 800c1fe <__swbuf_r+0x12>
 800c1fa:	f7fd fb1f 	bl	800983c <__sinit>
 800c1fe:	69a3      	ldr	r3, [r4, #24]
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	89a3      	ldrh	r3, [r4, #12]
 800c204:	071a      	lsls	r2, r3, #28
 800c206:	d525      	bpl.n	800c254 <__swbuf_r+0x68>
 800c208:	6923      	ldr	r3, [r4, #16]
 800c20a:	b31b      	cbz	r3, 800c254 <__swbuf_r+0x68>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	6922      	ldr	r2, [r4, #16]
 800c210:	1a98      	subs	r0, r3, r2
 800c212:	6963      	ldr	r3, [r4, #20]
 800c214:	b2f6      	uxtb	r6, r6
 800c216:	4283      	cmp	r3, r0
 800c218:	4637      	mov	r7, r6
 800c21a:	dc04      	bgt.n	800c226 <__swbuf_r+0x3a>
 800c21c:	4621      	mov	r1, r4
 800c21e:	4628      	mov	r0, r5
 800c220:	f7ff fdca 	bl	800bdb8 <_fflush_r>
 800c224:	b9e0      	cbnz	r0, 800c260 <__swbuf_r+0x74>
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	1c5a      	adds	r2, r3, #1
 800c230:	6022      	str	r2, [r4, #0]
 800c232:	701e      	strb	r6, [r3, #0]
 800c234:	6962      	ldr	r2, [r4, #20]
 800c236:	1c43      	adds	r3, r0, #1
 800c238:	429a      	cmp	r2, r3
 800c23a:	d004      	beq.n	800c246 <__swbuf_r+0x5a>
 800c23c:	89a3      	ldrh	r3, [r4, #12]
 800c23e:	07db      	lsls	r3, r3, #31
 800c240:	d506      	bpl.n	800c250 <__swbuf_r+0x64>
 800c242:	2e0a      	cmp	r6, #10
 800c244:	d104      	bne.n	800c250 <__swbuf_r+0x64>
 800c246:	4621      	mov	r1, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	f7ff fdb5 	bl	800bdb8 <_fflush_r>
 800c24e:	b938      	cbnz	r0, 800c260 <__swbuf_r+0x74>
 800c250:	4638      	mov	r0, r7
 800c252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c254:	4621      	mov	r1, r4
 800c256:	4628      	mov	r0, r5
 800c258:	f000 f806 	bl	800c268 <__swsetup_r>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	d0d5      	beq.n	800c20c <__swbuf_r+0x20>
 800c260:	f04f 37ff 	mov.w	r7, #4294967295
 800c264:	e7f4      	b.n	800c250 <__swbuf_r+0x64>
	...

0800c268 <__swsetup_r>:
 800c268:	b538      	push	{r3, r4, r5, lr}
 800c26a:	4b2a      	ldr	r3, [pc, #168]	; (800c314 <__swsetup_r+0xac>)
 800c26c:	4605      	mov	r5, r0
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	460c      	mov	r4, r1
 800c272:	b118      	cbz	r0, 800c27c <__swsetup_r+0x14>
 800c274:	6a03      	ldr	r3, [r0, #32]
 800c276:	b90b      	cbnz	r3, 800c27c <__swsetup_r+0x14>
 800c278:	f7fd fae0 	bl	800983c <__sinit>
 800c27c:	89a3      	ldrh	r3, [r4, #12]
 800c27e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c282:	0718      	lsls	r0, r3, #28
 800c284:	d422      	bmi.n	800c2cc <__swsetup_r+0x64>
 800c286:	06d9      	lsls	r1, r3, #27
 800c288:	d407      	bmi.n	800c29a <__swsetup_r+0x32>
 800c28a:	2309      	movs	r3, #9
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c292:	81a3      	strh	r3, [r4, #12]
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	e034      	b.n	800c304 <__swsetup_r+0x9c>
 800c29a:	0758      	lsls	r0, r3, #29
 800c29c:	d512      	bpl.n	800c2c4 <__swsetup_r+0x5c>
 800c29e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2a0:	b141      	cbz	r1, 800c2b4 <__swsetup_r+0x4c>
 800c2a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2a6:	4299      	cmp	r1, r3
 800c2a8:	d002      	beq.n	800c2b0 <__swsetup_r+0x48>
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7fe fa82 	bl	800a7b4 <_free_r>
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	6363      	str	r3, [r4, #52]	; 0x34
 800c2b4:	89a3      	ldrh	r3, [r4, #12]
 800c2b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2ba:	81a3      	strh	r3, [r4, #12]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6923      	ldr	r3, [r4, #16]
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0308 	orr.w	r3, r3, #8
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	6923      	ldr	r3, [r4, #16]
 800c2ce:	b94b      	cbnz	r3, 800c2e4 <__swsetup_r+0x7c>
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2da:	d003      	beq.n	800c2e4 <__swsetup_r+0x7c>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f884 	bl	800c3ec <__smakebuf_r>
 800c2e4:	89a0      	ldrh	r0, [r4, #12]
 800c2e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2ea:	f010 0301 	ands.w	r3, r0, #1
 800c2ee:	d00a      	beq.n	800c306 <__swsetup_r+0x9e>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60a3      	str	r3, [r4, #8]
 800c2f4:	6963      	ldr	r3, [r4, #20]
 800c2f6:	425b      	negs	r3, r3
 800c2f8:	61a3      	str	r3, [r4, #24]
 800c2fa:	6923      	ldr	r3, [r4, #16]
 800c2fc:	b943      	cbnz	r3, 800c310 <__swsetup_r+0xa8>
 800c2fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c302:	d1c4      	bne.n	800c28e <__swsetup_r+0x26>
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	0781      	lsls	r1, r0, #30
 800c308:	bf58      	it	pl
 800c30a:	6963      	ldrpl	r3, [r4, #20]
 800c30c:	60a3      	str	r3, [r4, #8]
 800c30e:	e7f4      	b.n	800c2fa <__swsetup_r+0x92>
 800c310:	2000      	movs	r0, #0
 800c312:	e7f7      	b.n	800c304 <__swsetup_r+0x9c>
 800c314:	200001d0 	.word	0x200001d0

0800c318 <_raise_r>:
 800c318:	291f      	cmp	r1, #31
 800c31a:	b538      	push	{r3, r4, r5, lr}
 800c31c:	4604      	mov	r4, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	d904      	bls.n	800c32c <_raise_r+0x14>
 800c322:	2316      	movs	r3, #22
 800c324:	6003      	str	r3, [r0, #0]
 800c326:	f04f 30ff 	mov.w	r0, #4294967295
 800c32a:	bd38      	pop	{r3, r4, r5, pc}
 800c32c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c32e:	b112      	cbz	r2, 800c336 <_raise_r+0x1e>
 800c330:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c334:	b94b      	cbnz	r3, 800c34a <_raise_r+0x32>
 800c336:	4620      	mov	r0, r4
 800c338:	f000 f830 	bl	800c39c <_getpid_r>
 800c33c:	462a      	mov	r2, r5
 800c33e:	4601      	mov	r1, r0
 800c340:	4620      	mov	r0, r4
 800c342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c346:	f000 b817 	b.w	800c378 <_kill_r>
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d00a      	beq.n	800c364 <_raise_r+0x4c>
 800c34e:	1c59      	adds	r1, r3, #1
 800c350:	d103      	bne.n	800c35a <_raise_r+0x42>
 800c352:	2316      	movs	r3, #22
 800c354:	6003      	str	r3, [r0, #0]
 800c356:	2001      	movs	r0, #1
 800c358:	e7e7      	b.n	800c32a <_raise_r+0x12>
 800c35a:	2400      	movs	r4, #0
 800c35c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c360:	4628      	mov	r0, r5
 800c362:	4798      	blx	r3
 800c364:	2000      	movs	r0, #0
 800c366:	e7e0      	b.n	800c32a <_raise_r+0x12>

0800c368 <raise>:
 800c368:	4b02      	ldr	r3, [pc, #8]	; (800c374 <raise+0xc>)
 800c36a:	4601      	mov	r1, r0
 800c36c:	6818      	ldr	r0, [r3, #0]
 800c36e:	f7ff bfd3 	b.w	800c318 <_raise_r>
 800c372:	bf00      	nop
 800c374:	200001d0 	.word	0x200001d0

0800c378 <_kill_r>:
 800c378:	b538      	push	{r3, r4, r5, lr}
 800c37a:	4d07      	ldr	r5, [pc, #28]	; (800c398 <_kill_r+0x20>)
 800c37c:	2300      	movs	r3, #0
 800c37e:	4604      	mov	r4, r0
 800c380:	4608      	mov	r0, r1
 800c382:	4611      	mov	r1, r2
 800c384:	602b      	str	r3, [r5, #0]
 800c386:	f7f7 f9d5 	bl	8003734 <_kill>
 800c38a:	1c43      	adds	r3, r0, #1
 800c38c:	d102      	bne.n	800c394 <_kill_r+0x1c>
 800c38e:	682b      	ldr	r3, [r5, #0]
 800c390:	b103      	cbz	r3, 800c394 <_kill_r+0x1c>
 800c392:	6023      	str	r3, [r4, #0]
 800c394:	bd38      	pop	{r3, r4, r5, pc}
 800c396:	bf00      	nop
 800c398:	20000a34 	.word	0x20000a34

0800c39c <_getpid_r>:
 800c39c:	f7f7 b9c2 	b.w	8003724 <_getpid>

0800c3a0 <__swhatbuf_r>:
 800c3a0:	b570      	push	{r4, r5, r6, lr}
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a8:	2900      	cmp	r1, #0
 800c3aa:	b096      	sub	sp, #88	; 0x58
 800c3ac:	4615      	mov	r5, r2
 800c3ae:	461e      	mov	r6, r3
 800c3b0:	da0d      	bge.n	800c3ce <__swhatbuf_r+0x2e>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c3b8:	f04f 0100 	mov.w	r1, #0
 800c3bc:	bf0c      	ite	eq
 800c3be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c3c2:	2340      	movne	r3, #64	; 0x40
 800c3c4:	2000      	movs	r0, #0
 800c3c6:	6031      	str	r1, [r6, #0]
 800c3c8:	602b      	str	r3, [r5, #0]
 800c3ca:	b016      	add	sp, #88	; 0x58
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
 800c3ce:	466a      	mov	r2, sp
 800c3d0:	f000 f848 	bl	800c464 <_fstat_r>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	dbec      	blt.n	800c3b2 <__swhatbuf_r+0x12>
 800c3d8:	9901      	ldr	r1, [sp, #4]
 800c3da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c3de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c3e2:	4259      	negs	r1, r3
 800c3e4:	4159      	adcs	r1, r3
 800c3e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ea:	e7eb      	b.n	800c3c4 <__swhatbuf_r+0x24>

0800c3ec <__smakebuf_r>:
 800c3ec:	898b      	ldrh	r3, [r1, #12]
 800c3ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3f0:	079d      	lsls	r5, r3, #30
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	d507      	bpl.n	800c408 <__smakebuf_r+0x1c>
 800c3f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3fc:	6023      	str	r3, [r4, #0]
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	2301      	movs	r3, #1
 800c402:	6163      	str	r3, [r4, #20]
 800c404:	b002      	add	sp, #8
 800c406:	bd70      	pop	{r4, r5, r6, pc}
 800c408:	ab01      	add	r3, sp, #4
 800c40a:	466a      	mov	r2, sp
 800c40c:	f7ff ffc8 	bl	800c3a0 <__swhatbuf_r>
 800c410:	9900      	ldr	r1, [sp, #0]
 800c412:	4605      	mov	r5, r0
 800c414:	4630      	mov	r0, r6
 800c416:	f7fe fd99 	bl	800af4c <_malloc_r>
 800c41a:	b948      	cbnz	r0, 800c430 <__smakebuf_r+0x44>
 800c41c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c420:	059a      	lsls	r2, r3, #22
 800c422:	d4ef      	bmi.n	800c404 <__smakebuf_r+0x18>
 800c424:	f023 0303 	bic.w	r3, r3, #3
 800c428:	f043 0302 	orr.w	r3, r3, #2
 800c42c:	81a3      	strh	r3, [r4, #12]
 800c42e:	e7e3      	b.n	800c3f8 <__smakebuf_r+0xc>
 800c430:	89a3      	ldrh	r3, [r4, #12]
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	9b00      	ldr	r3, [sp, #0]
 800c43c:	6163      	str	r3, [r4, #20]
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	6120      	str	r0, [r4, #16]
 800c442:	b15b      	cbz	r3, 800c45c <__smakebuf_r+0x70>
 800c444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c448:	4630      	mov	r0, r6
 800c44a:	f000 f81d 	bl	800c488 <_isatty_r>
 800c44e:	b128      	cbz	r0, 800c45c <__smakebuf_r+0x70>
 800c450:	89a3      	ldrh	r3, [r4, #12]
 800c452:	f023 0303 	bic.w	r3, r3, #3
 800c456:	f043 0301 	orr.w	r3, r3, #1
 800c45a:	81a3      	strh	r3, [r4, #12]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	431d      	orrs	r5, r3
 800c460:	81a5      	strh	r5, [r4, #12]
 800c462:	e7cf      	b.n	800c404 <__smakebuf_r+0x18>

0800c464 <_fstat_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d07      	ldr	r5, [pc, #28]	; (800c484 <_fstat_r+0x20>)
 800c468:	2300      	movs	r3, #0
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	602b      	str	r3, [r5, #0]
 800c472:	f7f7 f9be 	bl	80037f2 <_fstat>
 800c476:	1c43      	adds	r3, r0, #1
 800c478:	d102      	bne.n	800c480 <_fstat_r+0x1c>
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	b103      	cbz	r3, 800c480 <_fstat_r+0x1c>
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	bd38      	pop	{r3, r4, r5, pc}
 800c482:	bf00      	nop
 800c484:	20000a34 	.word	0x20000a34

0800c488 <_isatty_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	4d06      	ldr	r5, [pc, #24]	; (800c4a4 <_isatty_r+0x1c>)
 800c48c:	2300      	movs	r3, #0
 800c48e:	4604      	mov	r4, r0
 800c490:	4608      	mov	r0, r1
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	f7f7 f9bd 	bl	8003812 <_isatty>
 800c498:	1c43      	adds	r3, r0, #1
 800c49a:	d102      	bne.n	800c4a2 <_isatty_r+0x1a>
 800c49c:	682b      	ldr	r3, [r5, #0]
 800c49e:	b103      	cbz	r3, 800c4a2 <_isatty_r+0x1a>
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	bd38      	pop	{r3, r4, r5, pc}
 800c4a4:	20000a34 	.word	0x20000a34

0800c4a8 <_init>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	bf00      	nop
 800c4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ae:	bc08      	pop	{r3}
 800c4b0:	469e      	mov	lr, r3
 800c4b2:	4770      	bx	lr

0800c4b4 <_fini>:
 800c4b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4b6:	bf00      	nop
 800c4b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ba:	bc08      	pop	{r3}
 800c4bc:	469e      	mov	lr, r3
 800c4be:	4770      	bx	lr

/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <stdio.h>
#include <math.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

#define RxBuf_SIZE_uart1 8
#define MainBuf_SIZE_uart1 8
#define RxBuf_SIZE_uart2 8
#define MainBuf_SIZE_uart2 8


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart6_rx;

/* USER CODE BEGIN PV */

extern DMA_HandleTypeDef hdma_usart1_rx;
uint8_t RxBuf_uart1[RxBuf_SIZE_uart1];
uint8_t MainBuf_uart1[MainBuf_SIZE_uart1];
extern DMA_HandleTypeDef hdma_usart6_rx;
uint8_t RxBuf_uart2[RxBuf_SIZE_uart2];
uint8_t MainBuf_uart2[MainBuf_SIZE_uart2];

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


float rx_value_uart1 = 0.0;
float rx_value_uart2 = 0.0;

float cos_1;
float angle_1_rad;
float angle_1_deg;
float choi;

//////////////////////////MOTOR///////////////////////
unsigned char MOTOR_ON_CH1[] = {0x01,0x06,0x00,0x78,0x00,0x01,0xc8,0x13};
unsigned char MOTOR_ON_CH2[] = {0x02,0x06,0x00,0x78,0x00,0x01,0xc8,0x20};
unsigned char MOTOR_SPEED_CH1[] = {0x01,0x06,0x00,0x79,0x00,0x00,0x58,0x13};
unsigned char MOTOR_SPEED_CH2[] = {0x02,0x06,0x00,0x79,0x00,0x00,0x58,0x20};
int temp_currentSpeed_1 , temp_currentSpeed_2;
float target_output_1 = 0.0;
float target_output_2 = 0.0;
int speed_ch1,speed_ch2;

unsigned short MOTOR_CRC(unsigned char *addr, int num)
{
	unsigned short MOTOR_CRC = 0xFFFF;
	int i;
	while (num--)
	{
		MOTOR_CRC ^= *addr++;
		for (i = 0; i < 8; i++)
		{
			if (MOTOR_CRC & 1)
			{
				MOTOR_CRC >>= 1;
				MOTOR_CRC ^= 0xA001;
			}
			else
			{
				MOTOR_CRC >>= 1;
			}
		}
	}
	return MOTOR_CRC;
}

void Packet_MOTOR_SPEED_CH1(int Speed_Value)
{
	temp_currentSpeed_1 = Speed_Value;

	MOTOR_SPEED_CH1[4] = (Speed_Value >> 8) & 0xFF;
	MOTOR_SPEED_CH1[5] = Speed_Value & 0xFF;

	unsigned int crcValue = MOTOR_CRC(MOTOR_SPEED_CH1, 6);
	MOTOR_SPEED_CH1[7] = (crcValue >> 8) & 0xFF;
	MOTOR_SPEED_CH1[6] = crcValue & 0xFF;
	HAL_Delay(1);

	HAL_UART_Transmit(&huart1, &MOTOR_SPEED_CH1, 8, 100);
}

void Packet_MOTOR_SPEED_CH2(int Speed_Value)
{
	temp_currentSpeed_1 = Speed_Value;

	MOTOR_SPEED_CH2[4] = (Speed_Value >> 8) & 0xFF;
	MOTOR_SPEED_CH2[5] = Speed_Value & 0xFF;

	unsigned int crcValue = MOTOR_CRC(MOTOR_SPEED_CH2, 6);
	MOTOR_SPEED_CH2[7] = (crcValue >> 8) & 0xFF;
	MOTOR_SPEED_CH2[6] = crcValue & 0xFF;
	HAL_Delay(1);

	HAL_UART_Transmit(&huart1, &MOTOR_SPEED_CH2, 8, 100);
}

void MOTOR_control()
{
	if(rx_value_uart1 <= 1.0 && rx_value_uart2 <= 1.0)
	{
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH1, 8, 100);
		HAL_Delay(1);
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH2, 8, 100);
		HAL_Delay(1);
		target_output_1 = 0;
		target_output_2 = 0;
		Packet_MOTOR_SPEED_CH1(target_output_1);
		HAL_Delay(1);
		Packet_MOTOR_SPEED_CH2(target_output_2);
		HAL_Delay(1);
	}
	if(rx_value_uart1 > 1.0 && rx_value_uart2 > 1.0)
	{
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH1, 8, 100);
		HAL_Delay(1);
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH2, 8, 100);
		HAL_Delay(1);
		speed_ch1 = -200 + target_output_1*500;
		speed_ch2 = +200 + target_output_2*500;
		Packet_MOTOR_SPEED_CH1(speed_ch1);
		HAL_Delay(1);
		Packet_MOTOR_SPEED_CH2(speed_ch2);
		HAL_Delay(1);
	}


	if(1.0 < rx_value_uart1)
	{
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH1, 8, 100);
		HAL_Delay(1);
		//HAL_UART_Transmit(&huart1, &MOTOR_ON_CH2, 8, 100);
		//HAL_Delay(1);
		speed_ch1 = -100 + target_output_1*500;
		//speed_ch2 = +200 - target_output_1*50;
		Packet_MOTOR_SPEED_CH1(speed_ch1);
		HAL_Delay(1);
		//Packet_MOTOR_SPEED_CH2(speed_ch2);
		//HAL_Delay(1);
	}
	if(1.0 < rx_value_uart2)
	{
		//HAL_UART_Transmit(&huart1, &MOTOR_ON_CH1, 8, 100);
		//HAL_Delay(1);
		HAL_UART_Transmit(&huart1, &MOTOR_ON_CH2, 8, 100);
		HAL_Delay(1);
		//speed_ch1 = -200 + target_output_1*50;
		speed_ch2 = +100 + target_output_2*500;
		//Packet_MOTOR_SPEED_CH1(speed_ch1);
		//HAL_Delay(1);
		Packet_MOTOR_SPEED_CH2(speed_ch2);
		HAL_Delay(1);
	}

}

void target_1(float *output, float target)
{
	float error = target - rx_value_uart1 ;
	*output = error ;
}

void target_2(float *output, float target)
{
	float error = rx_value_uart2 - target;
	*output = error ;
}

void Distance()
{
	target_1(&target_output_1, 1.0);
	target_2(&target_output_2, 1.0);
	MOTOR_control();
}

///////////////////////////////MOTOR//////////////////////////////////


/*uint8_t Rx_data[7];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

	if(huart->Instance == USART1)
	{
		sscanf(Rx_data,"%f",&rx_value_uart1);
		if(rx_value_uart1 < 10.0)
		{
			HAL_UART_Transmit_IT(&huart2 ,&Rx_data,6);
			HAL_UART_Receive_IT(&huart1, &Rx_data, 6);
			 HAL_GPIO_WritePin(GPIOC, led0_Pin|led1_Pin, GPIO_PIN_RESET);
		}


		if(rx_value_uart1 >= 10.0)
		{
			HAL_UART_Transmit_IT(&huart2 ,&Rx_data,7);
			HAL_UART_Receive_IT(&huart1, &Rx_data, 7);
			 HAL_GPIO_WritePin(GPIOC, led0_Pin|led1_Pin, GPIO_PIN_SET);

		}
	}

}*/


/*uint8_t receive_data=0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 if(huart->Instance == USART2)
 {
	HAL_UART_Transmit_IT(&huart2 ,&receive_data,1);
 }
}*/

/*int __io_putchar(int ch)
{
	HAL_UART_Transmit(&huart2,(uint8_t*)&ch,1,0xffff);
	return ch;
}*/

/*volatile int timer_count =0 ;
void HAL_SYSTICK_Callback(void)
{ if((timer_count%1000)==0)// 1sec
 { printf("\n\r 1000ms interation!!");
  HAL_GPIO_TogglePin(GPIOC,led1_Pin); // toggle : on,off loop
 }
 timer_count++;
}*/


uint16_t oldPos_uart1 = 0;
uint16_t newPos_uart1 = 0;
uint16_t oldPos_uart2 = 0;
uint16_t newPos_uart2 = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{

	if (huart->Instance == USART1)
	{
		oldPos_uart1 = newPos_uart1;

		if (oldPos_uart1+Size > MainBuf_SIZE_uart1)
		{
			uint16_t datatocopy = MainBuf_SIZE_uart1-oldPos_uart1;
			memcpy ((uint8_t *)MainBuf_uart1+oldPos_uart1, RxBuf_uart1, datatocopy);

			oldPos_uart1 = 0;
			memcpy ((uint8_t *)MainBuf_uart1, (uint8_t *)RxBuf_uart1+datatocopy, (Size-datatocopy));
			newPos_uart1 = (Size-datatocopy);
		}


		else
		{
			memcpy ((uint8_t *)MainBuf_uart1+oldPos_uart1, RxBuf_uart1, Size);
			newPos_uart1 = Size+oldPos_uart1;
		}


		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf_uart1, RxBuf_SIZE_uart1);
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
		HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart1,RxBuf_SIZE_uart1);
		sscanf((uint8_t *) RxBuf_uart1,"%f",&rx_value_uart1);

		if(rx_value_uart1 < 10.0)
		{
			//HAL_GPIO_WritePin(GPIOC, led0_Pin, GPIO_PIN_SET);
		}

		if(rx_value_uart1 >= 10.0)
		{
			//HAL_GPIO_WritePin(GPIOC, led0_Pin, GPIO_PIN_RESET);
		}

	}

	if (huart->Instance == USART6)
	{
		oldPos_uart2 = newPos_uart2;  // Update the last position before copying new data

		if (oldPos_uart2+Size > MainBuf_SIZE_uart2)  // If the current position + new data size is greater than the main buffer
		{
			uint16_t datatocopy_2 = MainBuf_SIZE_uart2-oldPos_uart2;  // find out how much space is left in the main buffer
			memcpy ((uint8_t *)MainBuf_uart2+oldPos_uart2, RxBuf_uart2, datatocopy_2);  // copy data in that remaining space

			oldPos_uart2 = 0;  // point to the start of the buffer
			memcpy ((uint8_t *)MainBuf_uart2, (uint8_t *)RxBuf_uart2+datatocopy_2, (Size-datatocopy_2));  // copy the remaining data
			newPos_uart2 = (Size-datatocopy_2);  // update the position
		}

		else
		{
			memcpy ((uint8_t *)MainBuf_uart2+oldPos_uart2, RxBuf_uart2, Size);
			newPos_uart2 = Size+oldPos_uart2;
		}


		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) RxBuf_uart2, RxBuf_SIZE_uart2);
		__HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
		HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart2,RxBuf_SIZE_uart2);
		sscanf((uint8_t *) RxBuf_uart2,"%f",&rx_value_uart2);

		if(rx_value_uart2 < 10.0)
		{
			//HAL_GPIO_WritePin(GPIOC, led1_Pin, GPIO_PIN_SET);
		}

		if(rx_value_uart2 >= 10.0)
		{
			//HAL_GPIO_WritePin(GPIOC, led1_Pin, GPIO_PIN_RESET);
		}

	}



}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	/*uint8_t size;
	  uint8_t message[]= "Transwit Test IT \n \r";
	  size = sizeof(message);*/

	//float rx_vaule = 0;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_USART1_UART_Init();
  MX_USART6_UART_Init();

  /* Initialize interrupts */
  MX_NVIC_Init();
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit_IT(&huart2,message,size);
  //HAL_UART_Receive_IT(&huart1,&Rx_data,6);
  //HAL_UART_Transmit_IT(&huart2,&Rx_data,6);
 /////////////////////stm32 comportmaster check
  HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart2,RxBuf_SIZE_uart2);
  //////////////////////////
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf_uart1, RxBuf_SIZE_uart1);
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf_uart2, RxBuf_SIZE_uart2);
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 /*if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) == SET)
	 	 {
			HAL_UART_Receive(&huart1, rx_data, 8, 100);
			sscanf(rx_data,"%f",&rx_value_uart1);
			HAL_Delay(1);
			HAL_UART_Transmit(&huart2, rx_data, 8, 100);
		  }*/

	 Distance();



	 //////////////////////////// cos_rad ///////////////////////
	 //if(rx_value_uart1 && rx_value_uart2  != 0)
		 	/*if(rx_value_uart1 != 0 && rx_value_uart2 != 0)
		 	{
		 		char txBuffer[10];

		 		cos_1 = (0.3*0.3 + rx_value_uart1 * rx_value_uart1 - rx_value_uart2 * rx_value_uart2) / (2 * 0.3 * rx_value_uart1) ;

		 		if(cos_1 >= -1.0 && cos_1 <= 1.0)
		 		{
		 			angle_1_rad = acos(cos_1);
		 			angle_1_deg = angle_1_rad * (180.0/M_PI);
		 			sprintf(txBuffer, "%.2f\r\n", angle_1_deg);
			 		HAL_UART_Transmit_IT(&huart2 , (uint8_t*)txBuffer , strlen(txBuffer));

		 			if(70 < angle_1_deg && angle_1_deg < 90)
		 			{
		 				HAL_GPIO_WritePin(GPIOC, led1_Pin, GPIO_PIN_SET);
		 			}
		 		}
		 		rx_value_uart1 = 0;
		 		rx_value_uart2 = 0;
		 	}*/

		/////////////////////////////////// cos_rad ///////////////////////


	/* if(__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) == SET)
	 	 {
			rx_len = 8;
			HAL_UART_Receive(&huart2, rx_data, rx_len, 1000);
			HAL_UART_Transmit(&huart1, rx_data, rx_len, 1000);
		  }*/
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
  huart6.Init.BaudRate = 115200;
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
  huart6.Init.StopBits = UART_STOPBITS_1;
  huart6.Init.Parity = UART_PARITY_NONE;
  huart6.Init.Mode = UART_MODE_TX_RX;
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart6) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led0_Pin|led1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : led0_Pin led1_Pin */
  GPIO_InitStruct.Pin = led0_Pin|led1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

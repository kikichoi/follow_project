
ESP32_UWB_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d66c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800d810  0800d810  0000e810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcc0  0800dcc0  0000f6c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcc0  0800dcc0  0000ecc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dcc8  0800dcc8  0000f6c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800dcc8  0800dcc8  0000ecc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dcd0  0800dcd0  0000ecd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006c0  20000000  0800dcd4  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  200006c0  0800e394  0000f6c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c94  0800e394  0000fc94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f6c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da1c  00000000  00000000  0000f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdf  00000000  00000000  0001d10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001f0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a7b  00000000  00000000  0001fe58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001747a  00000000  00000000  000208d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed42  00000000  00000000  00037d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906ea  00000000  00000000  00046a8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7179  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  000d71bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000dc46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200006c0 	.word	0x200006c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d7f4 	.word	0x0800d7f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200006c4 	.word	0x200006c4
 80001dc:	0800d7f4 	.word	0x0800d7f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__io_putchar>:
 * @param None
 * @retval None
 */

//printf
PUTCHAR_PROTOTYPE{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
   if (ch == '\n') HAL_UART_Transmit(&huart2, (uint8_t*)"\r", 1, 0xFFFF);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b0a      	cmp	r3, #10
 8001000:	d106      	bne.n	8001010 <__io_putchar+0x1c>
 8001002:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001006:	2201      	movs	r2, #1
 8001008:	4907      	ldr	r1, [pc, #28]	@ (8001028 <__io_putchar+0x34>)
 800100a:	4808      	ldr	r0, [pc, #32]	@ (800102c <__io_putchar+0x38>)
 800100c:	f003 fd40 	bl	8004a90 <HAL_UART_Transmit>
   HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xFFFF);
 8001010:	1d39      	adds	r1, r7, #4
 8001012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001016:	2201      	movs	r2, #1
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <__io_putchar+0x38>)
 800101a:	f003 fd39 	bl	8004a90 <HAL_UART_Transmit>
   return ch;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	0800d810 	.word	0x0800d810
 800102c:	2000076c 	.word	0x2000076c

08001030 <MOTOR_CRC>:

int speed_ch1,speed_ch2;
uint8_t MOTOR_SPEED_UWB[12] = {0,};

unsigned short MOTOR_CRC(unsigned char *addr, int num)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
   unsigned short MOTOR_CRC = 0xFFFF;
 800103a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800103e:	81fb      	strh	r3, [r7, #14]
   int i;
   while (num--)
 8001040:	e023      	b.n	800108a <MOTOR_CRC+0x5a>
   {
      MOTOR_CRC ^= *addr++;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1c5a      	adds	r2, r3, #1
 8001046:	607a      	str	r2, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	4053      	eors	r3, r2
 8001050:	81fb      	strh	r3, [r7, #14]
      for (i = 0; i < 8; i++)
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	e015      	b.n	8001084 <MOTOR_CRC+0x54>
      {
         if (MOTOR_CRC & 1)
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <MOTOR_CRC+0x48>
         {
            MOTOR_CRC >>= 1;
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	085b      	lsrs	r3, r3, #1
 8001066:	81fb      	strh	r3, [r7, #14]
            MOTOR_CRC ^= 0xA001;
 8001068:	89fb      	ldrh	r3, [r7, #14]
 800106a:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800106e:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8001072:	43db      	mvns	r3, r3
 8001074:	81fb      	strh	r3, [r7, #14]
 8001076:	e002      	b.n	800107e <MOTOR_CRC+0x4e>
         }
         else
         {
            MOTOR_CRC >>= 1;
 8001078:	89fb      	ldrh	r3, [r7, #14]
 800107a:	085b      	lsrs	r3, r3, #1
 800107c:	81fb      	strh	r3, [r7, #14]
      for (i = 0; i < 8; i++)
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	3301      	adds	r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	2b07      	cmp	r3, #7
 8001088:	dde6      	ble.n	8001058 <MOTOR_CRC+0x28>
   while (num--)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	603a      	str	r2, [r7, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1d6      	bne.n	8001042 <MOTOR_CRC+0x12>
         }
      }
   }
   return MOTOR_CRC;
 8001094:	89fb      	ldrh	r3, [r7, #14]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3714      	adds	r7, #20
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <Packet_UWB>:


void Packet_UWB(int Speed_Value1 , int Speed_Value2, int direction)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
   MOTOR_SPEED_UWB[0] = 0x11;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <Packet_UWB+0xb8>)
 80010b2:	2211      	movs	r2, #17
 80010b4:	701a      	strb	r2, [r3, #0]
   MOTOR_SPEED_UWB[1] = 0x22;
 80010b6:	4b29      	ldr	r3, [pc, #164]	@ (800115c <Packet_UWB+0xb8>)
 80010b8:	2222      	movs	r2, #34	@ 0x22
 80010ba:	705a      	strb	r2, [r3, #1]

   //uwb_data_1
   MOTOR_SPEED_UWB[2] = (Speed_Value1 >> 8) & 0xFF;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	121b      	asrs	r3, r3, #8
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <Packet_UWB+0xb8>)
 80010c4:	709a      	strb	r2, [r3, #2]
   MOTOR_SPEED_UWB[3] = Speed_Value1 & 0xFF;
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b24      	ldr	r3, [pc, #144]	@ (800115c <Packet_UWB+0xb8>)
 80010cc:	70da      	strb	r2, [r3, #3]

   //uwb_data_2
   MOTOR_SPEED_UWB[4] = (Speed_Value2 >> 8) & 0xFF;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	121b      	asrs	r3, r3, #8
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b21      	ldr	r3, [pc, #132]	@ (800115c <Packet_UWB+0xb8>)
 80010d6:	711a      	strb	r2, [r3, #4]
   MOTOR_SPEED_UWB[5] = Speed_Value2 & 0xFF;
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <Packet_UWB+0xb8>)
 80010de:	715a      	strb	r2, [r3, #5]

   unsigned int crcValue = MOTOR_CRC(MOTOR_SPEED_UWB, 6);
 80010e0:	2106      	movs	r1, #6
 80010e2:	481e      	ldr	r0, [pc, #120]	@ (800115c <Packet_UWB+0xb8>)
 80010e4:	f7ff ffa4 	bl	8001030 <MOTOR_CRC>
 80010e8:	4603      	mov	r3, r0
 80010ea:	617b      	str	r3, [r7, #20]
   MOTOR_SPEED_UWB[7] = (crcValue >> 8) & 0xFF;
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <Packet_UWB+0xb8>)
 80010f4:	71da      	strb	r2, [r3, #7]
   MOTOR_SPEED_UWB[6] = crcValue & 0xFF;
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b18      	ldr	r3, [pc, #96]	@ (800115c <Packet_UWB+0xb8>)
 80010fc:	719a      	strb	r2, [r3, #6]

   MOTOR_SPEED_UWB[8] = 0x08;
 80010fe:	4b17      	ldr	r3, [pc, #92]	@ (800115c <Packet_UWB+0xb8>)
 8001100:	2208      	movs	r2, #8
 8001102:	721a      	strb	r2, [r3, #8]
   MOTOR_SPEED_UWB[9] = 0x09;
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <Packet_UWB+0xb8>)
 8001106:	2209      	movs	r2, #9
 8001108:	725a      	strb	r2, [r3, #9]

   if(direction == 1)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d103      	bne.n	8001118 <Packet_UWB+0x74>
   {
      MOTOR_SPEED_UWB[10] = straight;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <Packet_UWB+0xb8>)
 8001112:	22aa      	movs	r2, #170	@ 0xaa
 8001114:	729a      	strb	r2, [r3, #10]
 8001116:	e00c      	b.n	8001132 <Packet_UWB+0x8e>
   }
   else if(direction == 2)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d103      	bne.n	8001126 <Packet_UWB+0x82>
   {
      MOTOR_SPEED_UWB[10] = right;
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <Packet_UWB+0xb8>)
 8001120:	22bb      	movs	r2, #187	@ 0xbb
 8001122:	729a      	strb	r2, [r3, #10]
 8001124:	e005      	b.n	8001132 <Packet_UWB+0x8e>
   }
   else if(direction == 3)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b03      	cmp	r3, #3
 800112a:	d102      	bne.n	8001132 <Packet_UWB+0x8e>
   {
      MOTOR_SPEED_UWB[10] = left;
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <Packet_UWB+0xb8>)
 800112e:	22cc      	movs	r2, #204	@ 0xcc
 8001130:	729a      	strb	r2, [r3, #10]
   }

   MOTOR_SPEED_UWB[11] = 0xEE;
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <Packet_UWB+0xb8>)
 8001134:	22ee      	movs	r2, #238	@ 0xee
 8001136:	72da      	strb	r2, [r3, #11]
   HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fa3b 	bl	80025b4 <HAL_Delay>

   HAL_UART_Transmit(&huart1, MOTOR_SPEED_UWB, 12, 100);
 800113e:	2364      	movs	r3, #100	@ 0x64
 8001140:	220c      	movs	r2, #12
 8001142:	4906      	ldr	r1, [pc, #24]	@ (800115c <Packet_UWB+0xb8>)
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <Packet_UWB+0xbc>)
 8001146:	f003 fca3 	bl	8004a90 <HAL_UART_Transmit>
   //HAL_UART_Transmit(&huart2, MOTOR_SPEED_UWB, 12, 100); //terminal
   memset(MOTOR_SPEED_UWB, 0, sizeof(MOTOR_SPEED_UWB));
 800114a:	220c      	movs	r2, #12
 800114c:	2100      	movs	r1, #0
 800114e:	4803      	ldr	r0, [pc, #12]	@ (800115c <Packet_UWB+0xb8>)
 8001150:	f004 fff3 	bl	800613a <memset>
}
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000096c 	.word	0x2000096c
 8001160:	20000724 	.word	0x20000724
 8001164:	00000000 	.word	0x00000000

08001168 <MOTOR_control>:

void MOTOR_control()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
   if(sum_1 <= 0.5 && sum_2 <= 0.5)
 800116c:	4bb8      	ldr	r3, [pc, #736]	@ (8001450 <MOTOR_control+0x2e8>)
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800117a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117e:	d83e      	bhi.n	80011fe <MOTOR_control+0x96>
 8001180:	4bb4      	ldr	r3, [pc, #720]	@ (8001454 <MOTOR_control+0x2ec>)
 8001182:	edd3 7a00 	vldr	s15, [r3]
 8001186:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	d834      	bhi.n	80011fe <MOTOR_control+0x96>
   {
      speed_ch1 = 0;
 8001194:	4bb0      	ldr	r3, [pc, #704]	@ (8001458 <MOTOR_control+0x2f0>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
      speed_ch2 = 0;
 800119a:	4bb0      	ldr	r3, [pc, #704]	@ (800145c <MOTOR_control+0x2f4>)
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
      Packet_UWB(speed_ch1,speed_ch2 , 1);
 80011a0:	4bad      	ldr	r3, [pc, #692]	@ (8001458 <MOTOR_control+0x2f0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4aad      	ldr	r2, [pc, #692]	@ (800145c <MOTOR_control+0x2f4>)
 80011a6:	6811      	ldr	r1, [r2, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff ff7a 	bl	80010a4 <Packet_UWB>
      HAL_Delay(1);
 80011b0:	2001      	movs	r0, #1
 80011b2:	f001 f9ff 	bl	80025b4 <HAL_Delay>
      if(sum_1 < 0.3 && sum_2 < 0.3)
 80011b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001450 <MOTOR_control+0x2e8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f9cc 	bl	8000558 <__aeabi_f2d>
 80011c0:	a399      	add	r3, pc, #612	@ (adr r3, 8001428 <MOTOR_control+0x2c0>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fc91 	bl	8000aec <__aeabi_dcmplt>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d011      	beq.n	80011f4 <MOTOR_control+0x8c>
 80011d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001454 <MOTOR_control+0x2ec>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9bf 	bl	8000558 <__aeabi_f2d>
 80011da:	a393      	add	r3, pc, #588	@ (adr r3, 8001428 <MOTOR_control+0x2c0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fc84 	bl	8000aec <__aeabi_dcmplt>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <MOTOR_control+0x8c>
      {
    	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Buzzer ON
 80011ea:	2100      	movs	r1, #0
 80011ec:	489c      	ldr	r0, [pc, #624]	@ (8001460 <MOTOR_control+0x2f8>)
 80011ee:	f002 fe1b 	bl	8003e28 <HAL_TIM_PWM_Start>
      if(sum_1 < 0.3 && sum_2 < 0.3)
 80011f2:	e193      	b.n	800151c <MOTOR_control+0x3b4>
      }
      else
      {
    	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);  // Buzzer OFF
 80011f4:	2100      	movs	r1, #0
 80011f6:	489a      	ldr	r0, [pc, #616]	@ (8001460 <MOTOR_control+0x2f8>)
 80011f8:	f002 fec6 	bl	8003f88 <HAL_TIM_PWM_Stop>
      if(sum_1 < 0.3 && sum_2 < 0.3)
 80011fc:	e18e      	b.n	800151c <MOTOR_control+0x3b4>
      }
   }
   else if(sum_1 > 0.5 && sum_2 > 0.5 )
 80011fe:	4b94      	ldr	r3, [pc, #592]	@ (8001450 <MOTOR_control+0x2e8>)
 8001200:	edd3 7a00 	vldr	s15, [r3]
 8001204:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	f340 8130 	ble.w	8001474 <MOTOR_control+0x30c>
 8001214:	4b8f      	ldr	r3, [pc, #572]	@ (8001454 <MOTOR_control+0x2ec>)
 8001216:	edd3 7a00 	vldr	s15, [r3]
 800121a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	f340 8125 	ble.w	8001474 <MOTOR_control+0x30c>
   {
	   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);  // Buzzer OFF
 800122a:	2100      	movs	r1, #0
 800122c:	488c      	ldr	r0, [pc, #560]	@ (8001460 <MOTOR_control+0x2f8>)
 800122e:	f002 feab 	bl	8003f88 <HAL_TIM_PWM_Stop>
      if(sum_1 - sum_2 > 0.1)
 8001232:	4b87      	ldr	r3, [pc, #540]	@ (8001450 <MOTOR_control+0x2e8>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b86      	ldr	r3, [pc, #536]	@ (8001454 <MOTOR_control+0x2ec>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f7ff f987 	bl	8000558 <__aeabi_f2d>
 800124a:	a379      	add	r3, pc, #484	@ (adr r3, 8001430 <MOTOR_control+0x2c8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff fc6a 	bl	8000b28 <__aeabi_dcmpgt>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d008      	beq.n	800126c <MOTOR_control+0x104>
      {
         speed_ch1 = motor_pwm1_L + 200 ;
 800125a:	4b7f      	ldr	r3, [pc, #508]	@ (8001458 <MOTOR_control+0x2f0>)
 800125c:	f44f 7202 	mov.w	r2, #520	@ 0x208
 8001260:	601a      	str	r2, [r3, #0]
         speed_ch2 = motor_pwm2_R   ;
 8001262:	4b7e      	ldr	r3, [pc, #504]	@ (800145c <MOTOR_control+0x2f4>)
 8001264:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e0d3      	b.n	8001414 <MOTOR_control+0x2ac>
      }
      else if(sum_1 - sum_2 < -0.1)
 800126c:	4b78      	ldr	r3, [pc, #480]	@ (8001450 <MOTOR_control+0x2e8>)
 800126e:	ed93 7a00 	vldr	s14, [r3]
 8001272:	4b78      	ldr	r3, [pc, #480]	@ (8001454 <MOTOR_control+0x2ec>)
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800127c:	ee17 0a90 	vmov	r0, s15
 8001280:	f7ff f96a 	bl	8000558 <__aeabi_f2d>
 8001284:	a36c      	add	r3, pc, #432	@ (adr r3, 8001438 <MOTOR_control+0x2d0>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff fc2f 	bl	8000aec <__aeabi_dcmplt>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d008      	beq.n	80012a6 <MOTOR_control+0x13e>
      {
         speed_ch1 = motor_pwm1_L ;
 8001294:	4b70      	ldr	r3, [pc, #448]	@ (8001458 <MOTOR_control+0x2f0>)
 8001296:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800129a:	601a      	str	r2, [r3, #0]
         speed_ch2 = motor_pwm2_R + 200 ;
 800129c:	4b6f      	ldr	r3, [pc, #444]	@ (800145c <MOTOR_control+0x2f4>)
 800129e:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	e0b6      	b.n	8001414 <MOTOR_control+0x2ac>
      }
      else if(sum_1 >= 1.5 && sum_2 >= 1.5)
 80012a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001450 <MOTOR_control+0x2e8>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80012b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	f2c0 80a4 	blt.w	8001404 <MOTOR_control+0x29c>
 80012bc:	4b65      	ldr	r3, [pc, #404]	@ (8001454 <MOTOR_control+0x2ec>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	f2c0 8099 	blt.w	8001404 <MOTOR_control+0x29c>
      {
         if(sum_1 - sum_2 < 0.2)
 80012d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001450 <MOTOR_control+0x2e8>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001454 <MOTOR_control+0x2ec>)
 80012da:	edd3 7a00 	vldr	s15, [r3]
 80012de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e2:	ee17 0a90 	vmov	r0, s15
 80012e6:	f7ff f937 	bl	8000558 <__aeabi_f2d>
 80012ea:	a355      	add	r3, pc, #340	@ (adr r3, 8001440 <MOTOR_control+0x2d8>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff fbfc 	bl	8000aec <__aeabi_dcmplt>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d026      	beq.n	8001348 <MOTOR_control+0x1e0>
         {
            speed_ch1 = motor_pwm1_L + (sum_1*150) + 200 ;
 80012fa:	4b55      	ldr	r3, [pc, #340]	@ (8001450 <MOTOR_control+0x2e8>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001464 <MOTOR_control+0x2fc>
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001308:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8001468 <MOTOR_control+0x300>
 800130c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001310:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 800146c <MOTOR_control+0x304>
 8001314:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131c:	ee17 2a90 	vmov	r2, s15
 8001320:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <MOTOR_control+0x2f0>)
 8001322:	601a      	str	r2, [r3, #0]
            speed_ch2 = motor_pwm2_R + (sum_2*150);
 8001324:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <MOTOR_control+0x2ec>)
 8001326:	edd3 7a00 	vldr	s15, [r3]
 800132a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001464 <MOTOR_control+0x2fc>
 800132e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001332:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001470 <MOTOR_control+0x308>
 8001336:	ee77 7a87 	vadd.f32	s15, s15, s14
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	4b46      	ldr	r3, [pc, #280]	@ (800145c <MOTOR_control+0x2f4>)
 8001344:	601a      	str	r2, [r3, #0]
         if(sum_1 - sum_2 < 0.2)
 8001346:	e065      	b.n	8001414 <MOTOR_control+0x2ac>
         }
         else if(sum_1 - sum_2 < -0.2)
 8001348:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <MOTOR_control+0x2e8>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b41      	ldr	r3, [pc, #260]	@ (8001454 <MOTOR_control+0x2ec>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001358:	ee17 0a90 	vmov	r0, s15
 800135c:	f7ff f8fc 	bl	8000558 <__aeabi_f2d>
 8001360:	a339      	add	r3, pc, #228	@ (adr r3, 8001448 <MOTOR_control+0x2e0>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff fbc1 	bl	8000aec <__aeabi_dcmplt>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d026      	beq.n	80013be <MOTOR_control+0x256>
         {
            speed_ch1 = motor_pwm1_L + (sum_1*150);
 8001370:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <MOTOR_control+0x2e8>)
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001464 <MOTOR_control+0x2fc>
 800137a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800137e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001468 <MOTOR_control+0x300>
 8001382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138a:	ee17 2a90 	vmov	r2, s15
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MOTOR_control+0x2f0>)
 8001390:	601a      	str	r2, [r3, #0]
            speed_ch2 = motor_pwm2_R + (sum_2*150) + 200 ;
 8001392:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <MOTOR_control+0x2ec>)
 8001394:	edd3 7a00 	vldr	s15, [r3]
 8001398:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001464 <MOTOR_control+0x2fc>
 800139c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001470 <MOTOR_control+0x308>
 80013a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013a8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800146c <MOTOR_control+0x304>
 80013ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013b4:	ee17 2a90 	vmov	r2, s15
 80013b8:	4b28      	ldr	r3, [pc, #160]	@ (800145c <MOTOR_control+0x2f4>)
 80013ba:	601a      	str	r2, [r3, #0]
         if(sum_1 - sum_2 < 0.2)
 80013bc:	e02a      	b.n	8001414 <MOTOR_control+0x2ac>
         }
         else
         {
            speed_ch1 = motor_pwm1_L + (sum_1*150);
 80013be:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <MOTOR_control+0x2e8>)
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001464 <MOTOR_control+0x2fc>
 80013c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013cc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001468 <MOTOR_control+0x300>
 80013d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d8:	ee17 2a90 	vmov	r2, s15
 80013dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001458 <MOTOR_control+0x2f0>)
 80013de:	601a      	str	r2, [r3, #0]
            speed_ch2 = motor_pwm2_R + (sum_2*150);
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MOTOR_control+0x2ec>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001464 <MOTOR_control+0x2fc>
 80013ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ee:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8001470 <MOTOR_control+0x308>
 80013f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 2a90 	vmov	r2, s15
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MOTOR_control+0x2f4>)
 8001400:	601a      	str	r2, [r3, #0]
         if(sum_1 - sum_2 < 0.2)
 8001402:	e007      	b.n	8001414 <MOTOR_control+0x2ac>
         }
      }
      else
      {
         speed_ch1 = motor_pwm1_L ;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MOTOR_control+0x2f0>)
 8001406:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800140a:	601a      	str	r2, [r3, #0]
         speed_ch2 = motor_pwm2_R ;
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <MOTOR_control+0x2f4>)
 800140e:	f44f 72aa 	mov.w	r2, #340	@ 0x154
 8001412:	601a      	str	r2, [r3, #0]
      }
      Packet_UWB(speed_ch1 , speed_ch2 , 1);
 8001414:	4b10      	ldr	r3, [pc, #64]	@ (8001458 <MOTOR_control+0x2f0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a10      	ldr	r2, [pc, #64]	@ (800145c <MOTOR_control+0x2f4>)
 800141a:	6811      	ldr	r1, [r2, #0]
 800141c:	2201      	movs	r2, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff fe40 	bl	80010a4 <Packet_UWB>
 8001424:	e07a      	b.n	800151c <MOTOR_control+0x3b4>
 8001426:	bf00      	nop
 8001428:	33333333 	.word	0x33333333
 800142c:	3fd33333 	.word	0x3fd33333
 8001430:	9999999a 	.word	0x9999999a
 8001434:	3fb99999 	.word	0x3fb99999
 8001438:	9999999a 	.word	0x9999999a
 800143c:	bfb99999 	.word	0xbfb99999
 8001440:	9999999a 	.word	0x9999999a
 8001444:	3fc99999 	.word	0x3fc99999
 8001448:	9999999a 	.word	0x9999999a
 800144c:	bfc99999 	.word	0xbfc99999
 8001450:	20000954 	.word	0x20000954
 8001454:	20000958 	.word	0x20000958
 8001458:	20000964 	.word	0x20000964
 800145c:	20000968 	.word	0x20000968
 8001460:	200006dc 	.word	0x200006dc
 8001464:	43160000 	.word	0x43160000
 8001468:	43a00000 	.word	0x43a00000
 800146c:	43480000 	.word	0x43480000
 8001470:	43aa0000 	.word	0x43aa0000
      //HAL_Delay(1);
   }
   else if(sum_1 > 0.5 && sum_2 < 0.5 )
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <MOTOR_control+0x3b8>)
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	dd1e      	ble.n	80014c6 <MOTOR_control+0x35e>
 8001488:	4b26      	ldr	r3, [pc, #152]	@ (8001524 <MOTOR_control+0x3bc>)
 800148a:	edd3 7a00 	vldr	s15, [r3]
 800148e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149a:	d514      	bpl.n	80014c6 <MOTOR_control+0x35e>
   {
	   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);  // Buzzer OFF
 800149c:	2100      	movs	r1, #0
 800149e:	4822      	ldr	r0, [pc, #136]	@ (8001528 <MOTOR_control+0x3c0>)
 80014a0:	f002 fd72 	bl	8003f88 <HAL_TIM_PWM_Stop>
      speed_ch1 = motor_pwm1_L + 50;
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <MOTOR_control+0x3c4>)
 80014a6:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 80014aa:	601a      	str	r2, [r3, #0]
      speed_ch2 = motor_pwm2_R + 50;
 80014ac:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <MOTOR_control+0x3c8>)
 80014ae:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 80014b2:	601a      	str	r2, [r3, #0]
      Packet_UWB(speed_ch1, speed_ch2 , 2);
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <MOTOR_control+0x3c4>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <MOTOR_control+0x3c8>)
 80014ba:	6811      	ldr	r1, [r2, #0]
 80014bc:	2202      	movs	r2, #2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fdf0 	bl	80010a4 <Packet_UWB>
 80014c4:	e02a      	b.n	800151c <MOTOR_control+0x3b4>
   }
   else if(sum_1 < 0.5 && sum_2 > 0.5 )
 80014c6:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MOTOR_control+0x3b8>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d400      	bmi.n	80014dc <MOTOR_control+0x374>
	   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);  // Buzzer OFF
      speed_ch1 = motor_pwm1_L + 50;
      speed_ch2 = motor_pwm2_R + 50;
      Packet_UWB(speed_ch1, speed_ch2 , 3);
   }
}
 80014da:	e01f      	b.n	800151c <MOTOR_control+0x3b4>
   else if(sum_1 < 0.5 && sum_2 > 0.5 )
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MOTOR_control+0x3bc>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	dc00      	bgt.n	80014f2 <MOTOR_control+0x38a>
}
 80014f0:	e014      	b.n	800151c <MOTOR_control+0x3b4>
	   HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);  // Buzzer OFF
 80014f2:	2100      	movs	r1, #0
 80014f4:	480c      	ldr	r0, [pc, #48]	@ (8001528 <MOTOR_control+0x3c0>)
 80014f6:	f002 fd47 	bl	8003f88 <HAL_TIM_PWM_Stop>
      speed_ch1 = motor_pwm1_L + 50;
 80014fa:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MOTOR_control+0x3c4>)
 80014fc:	f44f 72b9 	mov.w	r2, #370	@ 0x172
 8001500:	601a      	str	r2, [r3, #0]
      speed_ch2 = motor_pwm2_R + 50;
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <MOTOR_control+0x3c8>)
 8001504:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8001508:	601a      	str	r2, [r3, #0]
      Packet_UWB(speed_ch1, speed_ch2 , 3);
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MOTOR_control+0x3c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <MOTOR_control+0x3c8>)
 8001510:	6811      	ldr	r1, [r2, #0]
 8001512:	2203      	movs	r2, #3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fdc5 	bl	80010a4 <Packet_UWB>
}
 800151a:	e7ff      	b.n	800151c <MOTOR_control+0x3b4>
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000954 	.word	0x20000954
 8001524:	20000958 	.word	0x20000958
 8001528:	200006dc 	.word	0x200006dc
 800152c:	20000964 	.word	0x20000964
 8001530:	20000968 	.word	0x20000968

08001534 <insertIntoRawArray_ch1>:


unsigned Array_flag_ch1 = 0;
unsigned Array_flag_ch2 = 0;
void insertIntoRawArray_ch1(float value)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b090      	sub	sp, #64	@ 0x40
 8001538:	af00      	add	r7, sp, #0
 800153a:	ed87 0a01 	vstr	s0, [r7, #4]
   if(value >= 200)
 800153e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001542:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80015fc <insertIntoRawArray_ch1+0xc8>
 8001546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154e:	da50      	bge.n	80015f2 <insertIntoRawArray_ch1+0xbe>
   {//데이터 튀는 값 저장X
   }
   else if(value < 200)
 8001550:	edd7 7a01 	vldr	s15, [r7, #4]
 8001554:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80015fc <insertIntoRawArray_ch1+0xc8>
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	d400      	bmi.n	8001564 <insertIntoRawArray_ch1+0x30>

          raw_array_index_1 = 0;
          Array_flag_ch1 = 1;
       }
   }
}
 8001562:	e046      	b.n	80015f2 <insertIntoRawArray_ch1+0xbe>
      if(raw_array_index_1 == 0) ch1_value0 = value;
 8001564:	4b26      	ldr	r3, [pc, #152]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <insertIntoRawArray_ch1+0x40>
 800156c:	4a25      	ldr	r2, [pc, #148]	@ (8001604 <insertIntoRawArray_ch1+0xd0>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e006      	b.n	8001582 <insertIntoRawArray_ch1+0x4e>
      else if(raw_array_index_1 == 1) ch1_value1 = value;
 8001574:	4b22      	ldr	r3, [pc, #136]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d102      	bne.n	8001582 <insertIntoRawArray_ch1+0x4e>
 800157c:	4a22      	ldr	r2, [pc, #136]	@ (8001608 <insertIntoRawArray_ch1+0xd4>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
      raw_array_index_1++;
 8001582:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	3301      	adds	r3, #1
 8001588:	b29a      	uxth	r2, r3
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 800158c:	801a      	strh	r2, [r3, #0]
      if (raw_array_index_1 >= 2)
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d92d      	bls.n	80015f2 <insertIntoRawArray_ch1+0xbe>
          sum_1 =  (ch1_value0 + ch1_value1) / 2 ;
 8001596:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <insertIntoRawArray_ch1+0xd0>)
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <insertIntoRawArray_ch1+0xd4>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <insertIntoRawArray_ch1+0xd8>)
 80015b0:	edc3 7a00 	vstr	s15, [r3]
          sprintf((char*)TX_sum, "sum_1 : %f \r\n", sum_1);
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <insertIntoRawArray_ch1+0xd8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffcd 	bl	8000558 <__aeabi_f2d>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	f107 000c 	add.w	r0, r7, #12
 80015c6:	4912      	ldr	r1, [pc, #72]	@ (8001610 <insertIntoRawArray_ch1+0xdc>)
 80015c8:	f004 fd28 	bl	800601c <sprintf>
          HAL_UART_Transmit(&huart2, TX_sum, strlen((const char *)TX_sum), 100); //terminal
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe05 	bl	80001e0 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29a      	uxth	r2, r3
 80015da:	f107 010c 	add.w	r1, r7, #12
 80015de:	2364      	movs	r3, #100	@ 0x64
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <insertIntoRawArray_ch1+0xe0>)
 80015e2:	f003 fa55 	bl	8004a90 <HAL_UART_Transmit>
          raw_array_index_1 = 0;
 80015e6:	4b06      	ldr	r3, [pc, #24]	@ (8001600 <insertIntoRawArray_ch1+0xcc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	801a      	strh	r2, [r3, #0]
          Array_flag_ch1 = 1;
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <insertIntoRawArray_ch1+0xe4>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	bf00      	nop
 80015f4:	3740      	adds	r7, #64	@ 0x40
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	43480000 	.word	0x43480000
 8001600:	20000944 	.word	0x20000944
 8001604:	20000948 	.word	0x20000948
 8001608:	2000094c 	.word	0x2000094c
 800160c:	20000954 	.word	0x20000954
 8001610:	0800d814 	.word	0x0800d814
 8001614:	2000076c 	.word	0x2000076c
 8001618:	20000978 	.word	0x20000978

0800161c <insertIntoRawArray_ch2>:

void insertIntoRawArray_ch2(float value)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b090      	sub	sp, #64	@ 0x40
 8001620:	af00      	add	r7, sp, #0
 8001622:	ed87 0a01 	vstr	s0, [r7, #4]
   if(value >= 200)
 8001626:	edd7 7a01 	vldr	s15, [r7, #4]
 800162a:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80016bc <insertIntoRawArray_ch2+0xa0>
 800162e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001636:	da3d      	bge.n	80016b4 <insertIntoRawArray_ch2+0x98>
   {//데이터 튀는 값 저장X
   }
   else if(value < 200)
 8001638:	edd7 7a01 	vldr	s15, [r7, #4]
 800163c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80016bc <insertIntoRawArray_ch2+0xa0>
 8001640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001648:	d400      	bmi.n	800164c <insertIntoRawArray_ch2+0x30>
          HAL_UART_Transmit(&huart2, TX_sum, strlen((const char *)TX_sum), 100); //terminal
          raw_array_index_2 = 0;
          Array_flag_ch2 = 1;
      }
   }
}
 800164a:	e033      	b.n	80016b4 <insertIntoRawArray_ch2+0x98>
      if(raw_array_index_2 == 0) ch2_value0 = value;
 800164c:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <insertIntoRawArray_ch2+0xa4>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <insertIntoRawArray_ch2+0x3e>
 8001654:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <insertIntoRawArray_ch2+0xa8>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6013      	str	r3, [r2, #0]
      raw_array_index_2++;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <insertIntoRawArray_ch2+0xa4>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b29a      	uxth	r2, r3
 8001662:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <insertIntoRawArray_ch2+0xa4>)
 8001664:	801a      	strh	r2, [r3, #0]
      if (raw_array_index_2 >= 1)
 8001666:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <insertIntoRawArray_ch2+0xa4>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d022      	beq.n	80016b4 <insertIntoRawArray_ch2+0x98>
          sum_2 = ch2_value0 ;
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <insertIntoRawArray_ch2+0xa8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <insertIntoRawArray_ch2+0xac>)
 8001674:	6013      	str	r3, [r2, #0]
          sprintf((char*)TX_sum, "sum_2 : %f \r\n", sum_2);
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <insertIntoRawArray_ch2+0xac>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	f107 000c 	add.w	r0, r7, #12
 8001688:	4910      	ldr	r1, [pc, #64]	@ (80016cc <insertIntoRawArray_ch2+0xb0>)
 800168a:	f004 fcc7 	bl	800601c <sprintf>
          HAL_UART_Transmit(&huart2, TX_sum, strlen((const char *)TX_sum), 100); //terminal
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe fda4 	bl	80001e0 <strlen>
 8001698:	4603      	mov	r3, r0
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 010c 	add.w	r1, r7, #12
 80016a0:	2364      	movs	r3, #100	@ 0x64
 80016a2:	480b      	ldr	r0, [pc, #44]	@ (80016d0 <insertIntoRawArray_ch2+0xb4>)
 80016a4:	f003 f9f4 	bl	8004a90 <HAL_UART_Transmit>
          raw_array_index_2 = 0;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <insertIntoRawArray_ch2+0xa4>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	801a      	strh	r2, [r3, #0]
          Array_flag_ch2 = 1;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <insertIntoRawArray_ch2+0xb8>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3740      	adds	r7, #64	@ 0x40
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	43480000 	.word	0x43480000
 80016c0:	20000946 	.word	0x20000946
 80016c4:	20000950 	.word	0x20000950
 80016c8:	20000958 	.word	0x20000958
 80016cc:	0800d824 	.word	0x0800d824
 80016d0:	2000076c 	.word	0x2000076c
 80016d4:	2000097c 	.word	0x2000097c

080016d8 <HAL_UARTEx_RxEventCallback>:


//UART DMA RX , [UART1 , UART6]
//ESP32_UWB , data RX
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
   if (huart->Instance == USART1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001894 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d164      	bne.n	80017b8 <HAL_UARTEx_RxEventCallback+0xe0>
   {
      oldPos_uart1 = newPos_uart1;
 80016ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80016f0:	881a      	ldrh	r2, [r3, #0]
 80016f2:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80016f4:	801a      	strh	r2, [r3, #0]

      if (oldPos_uart1+Size > MainBuf_SIZE_uart1)
 80016f6:	4b69      	ldr	r3, [pc, #420]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	461a      	mov	r2, r3
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	4413      	add	r3, r2
 8001700:	2b08      	cmp	r3, #8
 8001702:	dd22      	ble.n	800174a <HAL_UARTEx_RxEventCallback+0x72>
      {
         uint16_t datatocopy = MainBuf_SIZE_uart1-oldPos_uart1;
 8001704:	4b65      	ldr	r3, [pc, #404]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001706:	881b      	ldrh	r3, [r3, #0]
 8001708:	f1c3 0308 	rsb	r3, r3, #8
 800170c:	81fb      	strh	r3, [r7, #14]
         memcpy ((uint8_t *)MainBuf_uart1+oldPos_uart1, RxBuf_uart1, datatocopy);
 800170e:	4b63      	ldr	r3, [pc, #396]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b62      	ldr	r3, [pc, #392]	@ (80018a0 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001716:	4413      	add	r3, r2
 8001718:	89fa      	ldrh	r2, [r7, #14]
 800171a:	4962      	ldr	r1, [pc, #392]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800171c:	4618      	mov	r0, r3
 800171e:	f004 fd89 	bl	8006234 <memcpy>

         oldPos_uart1 = 0;
 8001722:	4b5e      	ldr	r3, [pc, #376]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
         memcpy ((uint8_t *)MainBuf_uart1, (uint8_t *)RxBuf_uart1+datatocopy, (Size-datatocopy));
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	4a5e      	ldr	r2, [pc, #376]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800172c:	1899      	adds	r1, r3, r2
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	461a      	mov	r2, r3
 8001736:	485a      	ldr	r0, [pc, #360]	@ (80018a0 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001738:	f004 fd7c 	bl	8006234 <memcpy>
         newPos_uart1 = (Size-datatocopy);
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	b29a      	uxth	r2, r3
 8001744:	4b54      	ldr	r3, [pc, #336]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001746:	801a      	strh	r2, [r3, #0]
 8001748:	e010      	b.n	800176c <HAL_UARTEx_RxEventCallback+0x94>
      }
      else
      {
         memcpy ((uint8_t *)MainBuf_uart1+oldPos_uart1, RxBuf_uart1, Size);
 800174a:	4b54      	ldr	r3, [pc, #336]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	4b53      	ldr	r3, [pc, #332]	@ (80018a0 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001752:	4413      	add	r3, r2
 8001754:	887a      	ldrh	r2, [r7, #2]
 8001756:	4953      	ldr	r1, [pc, #332]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001758:	4618      	mov	r0, r3
 800175a:	f004 fd6b 	bl	8006234 <memcpy>
         newPos_uart1 = Size+oldPos_uart1;
 800175e:	4b4f      	ldr	r3, [pc, #316]	@ (800189c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	4413      	add	r3, r2
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b4b      	ldr	r3, [pc, #300]	@ (8001898 <HAL_UARTEx_RxEventCallback+0x1c0>)
 800176a:	801a      	strh	r2, [r3, #0]
      }

      /* start the DMA again */
      HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *) RxBuf_uart1, RxBuf_SIZE_uart1);
 800176c:	2208      	movs	r2, #8
 800176e:	494d      	ldr	r1, [pc, #308]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001770:	484d      	ldr	r0, [pc, #308]	@ (80018a8 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8001772:	f003 fa4e 	bl	8004c12 <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b4b      	ldr	r3, [pc, #300]	@ (80018ac <HAL_UARTEx_RxEventCallback+0x1d4>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0208 	bic.w	r2, r2, #8
 8001784:	601a      	str	r2, [r3, #0]
      //HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart1,RxBuf_SIZE_uart1);
      sscanf((char *)RxBuf_uart1,"%f",&rx_value_uart1);
 8001786:	4a4a      	ldr	r2, [pc, #296]	@ (80018b0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001788:	494a      	ldr	r1, [pc, #296]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 800178a:	4846      	ldr	r0, [pc, #280]	@ (80018a4 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800178c:	f004 fc66 	bl	800605c <sscanf>

      if(rx_value_uart1 >= 0)
 8001790:	4b47      	ldr	r3, [pc, #284]	@ (80018b0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	db07      	blt.n	80017b0 <HAL_UARTEx_RxEventCallback+0xd8>
      {
         //average filter
            insertIntoRawArray_ch1(rx_value_uart1);
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80017a2:	edd3 7a00 	vldr	s15, [r3]
 80017a6:	eeb0 0a67 	vmov.f32	s0, s15
 80017aa:	f7ff fec3 	bl	8001534 <insertIntoRawArray_ch1>
 80017ae:	e003      	b.n	80017b8 <HAL_UARTEx_RxEventCallback+0xe0>
      }
      else insertIntoRawArray_ch1(0); //음수 데이터로 튀는 값은 0 처리
 80017b0:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80018b8 <HAL_UARTEx_RxEventCallback+0x1e0>
 80017b4:	f7ff febe 	bl	8001534 <insertIntoRawArray_ch1>
         //HAL_GPIO_WritePin(GPIOC, led0_Pin, GPIO_PIN_RESET);
      }*/
      //*************************************************//
   }

   if (huart->Instance == USART6)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a3f      	ldr	r2, [pc, #252]	@ (80018bc <HAL_UARTEx_RxEventCallback+0x1e4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d164      	bne.n	800188c <HAL_UARTEx_RxEventCallback+0x1b4>
   {
      oldPos_uart2 = newPos_uart2;  // Update the last position before copying new data
 80017c2:	4b3f      	ldr	r3, [pc, #252]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80017c4:	881a      	ldrh	r2, [r3, #0]
 80017c6:	4b3f      	ldr	r3, [pc, #252]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80017c8:	801a      	strh	r2, [r3, #0]

      if (oldPos_uart2+Size > MainBuf_SIZE_uart2)  // If the current position + new data size is greater than the main buffer
 80017ca:	4b3e      	ldr	r3, [pc, #248]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	4413      	add	r3, r2
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	dd22      	ble.n	800181e <HAL_UARTEx_RxEventCallback+0x146>
      {
         uint16_t datatocopy_2 = MainBuf_SIZE_uart2-oldPos_uart2;  // find out how much space is left in the main buffer
 80017d8:	4b3a      	ldr	r3, [pc, #232]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	f1c3 0308 	rsb	r3, r3, #8
 80017e0:	81bb      	strh	r3, [r7, #12]
         memcpy ((uint8_t *)MainBuf_uart2+oldPos_uart2, RxBuf_uart2, datatocopy_2);  // copy data in that remaining space
 80017e2:	4b38      	ldr	r3, [pc, #224]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	4b37      	ldr	r3, [pc, #220]	@ (80018c8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80017ea:	4413      	add	r3, r2
 80017ec:	89ba      	ldrh	r2, [r7, #12]
 80017ee:	4937      	ldr	r1, [pc, #220]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1f4>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fd1f 	bl	8006234 <memcpy>

         oldPos_uart2 = 0;  // point to the start of the buffer
 80017f6:	4b33      	ldr	r3, [pc, #204]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
         memcpy ((uint8_t *)MainBuf_uart2, (uint8_t *)RxBuf_uart2+datatocopy_2, (Size-datatocopy_2));  // copy the remaining data
 80017fc:	89bb      	ldrh	r3, [r7, #12]
 80017fe:	4a33      	ldr	r2, [pc, #204]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001800:	1899      	adds	r1, r3, r2
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	89bb      	ldrh	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	461a      	mov	r2, r3
 800180a:	482f      	ldr	r0, [pc, #188]	@ (80018c8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800180c:	f004 fd12 	bl	8006234 <memcpy>
         newPos_uart2 = (Size-datatocopy_2);  // update the position
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	89bb      	ldrh	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800181a:	801a      	strh	r2, [r3, #0]
 800181c:	e010      	b.n	8001840 <HAL_UARTEx_RxEventCallback+0x168>
      }

      else
      {
         memcpy ((uint8_t *)MainBuf_uart2+oldPos_uart2, RxBuf_uart2, Size);
 800181e:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b28      	ldr	r3, [pc, #160]	@ (80018c8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8001826:	4413      	add	r3, r2
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	4928      	ldr	r1, [pc, #160]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1f4>)
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fd01 	bl	8006234 <memcpy>
         newPos_uart2 = Size+oldPos_uart2;
 8001832:	4b24      	ldr	r3, [pc, #144]	@ (80018c4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001834:	881a      	ldrh	r2, [r3, #0]
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	4413      	add	r3, r2
 800183a:	b29a      	uxth	r2, r3
 800183c:	4b20      	ldr	r3, [pc, #128]	@ (80018c0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800183e:	801a      	strh	r2, [r3, #0]
      }

      /* start the DMA again */
      HAL_UARTEx_ReceiveToIdle_DMA(&huart6, (uint8_t *) RxBuf_uart2, RxBuf_SIZE_uart2);
 8001840:	2208      	movs	r2, #8
 8001842:	4922      	ldr	r1, [pc, #136]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001844:	4822      	ldr	r0, [pc, #136]	@ (80018d0 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8001846:	f003 f9e4 	bl	8004c12 <HAL_UARTEx_ReceiveToIdle_DMA>
      __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 800184a:	4b22      	ldr	r3, [pc, #136]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1fc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b20      	ldr	r3, [pc, #128]	@ (80018d4 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0208 	bic.w	r2, r2, #8
 8001858:	601a      	str	r2, [r3, #0]
      //HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart2,RxBuf_SIZE_uart2);
      sscanf((char *) RxBuf_uart2,"%f",&rx_value_uart2);
 800185a:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x200>)
 800185c:	4915      	ldr	r1, [pc, #84]	@ (80018b4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 800185e:	481b      	ldr	r0, [pc, #108]	@ (80018cc <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001860:	f004 fbfc 	bl	800605c <sscanf>

      if(rx_value_uart2 >= 0)
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x200>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800186e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001872:	db07      	blt.n	8001884 <HAL_UARTEx_RxEventCallback+0x1ac>
      {
         //average filter
            insertIntoRawArray_ch2(rx_value_uart2);
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <HAL_UARTEx_RxEventCallback+0x200>)
 8001876:	edd3 7a00 	vldr	s15, [r3]
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	f7ff fecd 	bl	800161c <insertIntoRawArray_ch2>
      if(rx_value_uart2 >= 10.0)
      {
         //HAL_GPIO_WritePin(GPIOC, led1_Pin, GPIO_PIN_RESET);
      }*/
   }
}
 8001882:	e003      	b.n	800188c <HAL_UARTEx_RxEventCallback+0x1b4>
      else insertIntoRawArray_ch2(0); //음수 데이터로 튀는 값은 0 처리
 8001884:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80018b8 <HAL_UARTEx_RxEventCallback+0x1e0>
 8001888:	f7ff fec8 	bl	800161c <insertIntoRawArray_ch2>
}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40011000 	.word	0x40011000
 8001898:	2000095e 	.word	0x2000095e
 800189c:	2000095c 	.word	0x2000095c
 80018a0:	20000924 	.word	0x20000924
 80018a4:	2000091c 	.word	0x2000091c
 80018a8:	20000724 	.word	0x20000724
 80018ac:	200007fc 	.word	0x200007fc
 80018b0:	2000093c 	.word	0x2000093c
 80018b4:	0800d834 	.word	0x0800d834
 80018b8:	00000000 	.word	0x00000000
 80018bc:	40011400 	.word	0x40011400
 80018c0:	20000962 	.word	0x20000962
 80018c4:	20000960 	.word	0x20000960
 80018c8:	20000934 	.word	0x20000934
 80018cc:	2000092c 	.word	0x2000092c
 80018d0:	200007b4 	.word	0x200007b4
 80018d4:	200008bc 	.word	0x200008bc
 80018d8:	20000940 	.word	0x20000940

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f000 fdf6 	bl	80024d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f850 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e8:	f000 fa18 	bl	8001d1c <MX_GPIO_Init>
  MX_DMA_Init();
 80018ec:	f000 f9ee 	bl	8001ccc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80018f0:	f000 f998 	bl	8001c24 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80018f4:	f000 f96c 	bl	8001bd0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80018f8:	f000 f9be 	bl	8001c78 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 80018fc:	f000 f8f2 	bl	8001ae4 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001900:	f000 f8ac 	bl	8001a5c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

 /////////////////////stm32 comportmaster check
  HAL_UART_Transmit_IT(&huart2 ,(uint8_t *) RxBuf_uart2,RxBuf_SIZE_uart2);
 8001904:	2208      	movs	r2, #8
 8001906:	4917      	ldr	r1, [pc, #92]	@ (8001964 <main+0x88>)
 8001908:	4817      	ldr	r0, [pc, #92]	@ (8001968 <main+0x8c>)
 800190a:	f003 f94c 	bl	8004ba6 <HAL_UART_Transmit_IT>
  //////////////////////////

  //uart_DMA
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuf_uart1, RxBuf_SIZE_uart1);
 800190e:	2208      	movs	r2, #8
 8001910:	4916      	ldr	r1, [pc, #88]	@ (800196c <main+0x90>)
 8001912:	4817      	ldr	r0, [pc, #92]	@ (8001970 <main+0x94>)
 8001914:	f003 f97d 	bl	8004c12 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT); //Half Transfer ,DISABLE
 8001918:	4b16      	ldr	r3, [pc, #88]	@ (8001974 <main+0x98>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <main+0x98>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0208 	bic.w	r2, r2, #8
 8001926:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuf_uart2, RxBuf_SIZE_uart2);
 8001928:	2208      	movs	r2, #8
 800192a:	490e      	ldr	r1, [pc, #56]	@ (8001964 <main+0x88>)
 800192c:	4812      	ldr	r0, [pc, #72]	@ (8001978 <main+0x9c>)
 800192e:	f003 f970 	bl	8004c12 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart6_rx, DMA_IT_HT);
 8001932:	4b12      	ldr	r3, [pc, #72]	@ (800197c <main+0xa0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b10      	ldr	r3, [pc, #64]	@ (800197c <main+0xa0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0208 	bic.w	r2, r2, #8
 8001940:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
     if( (Array_flag_ch1 == 1) && (Array_flag_ch2 == 1) )
 8001942:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <main+0xa4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d1fb      	bne.n	8001942 <main+0x66>
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <main+0xa8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d1f7      	bne.n	8001942 <main+0x66>
     {
    	MOTOR_control();
 8001952:	f7ff fc09 	bl	8001168 <MOTOR_control>
        Array_flag_ch1 = 0;
 8001956:	4b0a      	ldr	r3, [pc, #40]	@ (8001980 <main+0xa4>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
        Array_flag_ch2 = 0;
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <main+0xa8>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
     if( (Array_flag_ch1 == 1) && (Array_flag_ch2 == 1) )
 8001962:	e7ee      	b.n	8001942 <main+0x66>
 8001964:	2000092c 	.word	0x2000092c
 8001968:	2000076c 	.word	0x2000076c
 800196c:	2000091c 	.word	0x2000091c
 8001970:	20000724 	.word	0x20000724
 8001974:	200007fc 	.word	0x200007fc
 8001978:	200007b4 	.word	0x200007b4
 800197c:	200008bc 	.word	0x200008bc
 8001980:	20000978 	.word	0x20000978
 8001984:	2000097c 	.word	0x2000097c

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b094      	sub	sp, #80	@ 0x50
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2230      	movs	r2, #48	@ 0x30
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f004 fbcf 	bl	800613a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	f107 030c 	add.w	r3, r7, #12
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	2300      	movs	r3, #0
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80019bc:	4b25      	ldr	r3, [pc, #148]	@ (8001a54 <SystemClock_Config+0xcc>)
 80019be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c8:	2300      	movs	r3, #0
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	4b22      	ldr	r3, [pc, #136]	@ (8001a58 <SystemClock_Config+0xd0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a21      	ldr	r2, [pc, #132]	@ (8001a58 <SystemClock_Config+0xd0>)
 80019d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <SystemClock_Config+0xd0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e4:	2302      	movs	r3, #2
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ec:	2310      	movs	r3, #16
 80019ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f0:	2302      	movs	r3, #2
 80019f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f4:	2300      	movs	r3, #0
 80019f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80019f8:	2310      	movs	r3, #16
 80019fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80019fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a02:	2304      	movs	r3, #4
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a06:	2304      	movs	r3, #4
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0320 	add.w	r3, r7, #32
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f001 fcca 	bl	80033a8 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a1a:	f000 fa0f 	bl	8001e3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2302      	movs	r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a30:	2300      	movs	r3, #0
 8001a32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a34:	f107 030c 	add.w	r3, r7, #12
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f001 ff2c 	bl	8003898 <HAL_RCC_ClockConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a46:	f000 f9f9 	bl	8001e3c <Error_Handler>
  }
}
 8001a4a:	bf00      	nop
 8001a4c:	3750      	adds	r7, #80	@ 0x50
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2006      	movs	r0, #6
 8001a66:	f000 fea4 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001a6a:	2006      	movs	r0, #6
 8001a6c:	f000 febd 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2007      	movs	r0, #7
 8001a76:	f000 fe9c 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a7a:	2007      	movs	r0, #7
 8001a7c:	f000 feb5 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	2025      	movs	r0, #37	@ 0x25
 8001a86:	f000 fe94 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a8a:	2025      	movs	r0, #37	@ 0x25
 8001a8c:	f000 fead 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	2026      	movs	r0, #38	@ 0x26
 8001a96:	f000 fe8c 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9a:	2026      	movs	r0, #38	@ 0x26
 8001a9c:	f000 fea5 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2039      	movs	r0, #57	@ 0x39
 8001aa6:	f000 fe84 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001aaa:	2039      	movs	r0, #57	@ 0x39
 8001aac:	f000 fe9d 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2047      	movs	r0, #71	@ 0x47
 8001ab6:	f000 fe7c 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001aba:	2047      	movs	r0, #71	@ 0x47
 8001abc:	f000 fe95 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	203a      	movs	r0, #58	@ 0x3a
 8001ac6:	f000 fe74 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001aca:	203a      	movs	r0, #58	@ 0x3a
 8001acc:	f000 fe8d 	bl	80027ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2010      	movs	r0, #16
 8001ad6:	f000 fe6c 	bl	80027b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ada:	2010      	movs	r0, #16
 8001adc:	f000 fe85 	bl	80027ea <HAL_NVIC_EnableIRQ>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	@ 0x38
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	f107 0320 	add.w	r3, r7, #32
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b14:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21-1;
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b1e:	2214      	movs	r2, #20
 8001b20:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b22:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b28:	4b28      	ldr	r3, [pc, #160]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b30:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b25      	ldr	r3, [pc, #148]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3c:	4823      	ldr	r0, [pc, #140]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b3e:	f002 f8cb 	bl	8003cd8 <HAL_TIM_Base_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001b48:	f000 f978 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b56:	4619      	mov	r1, r3
 8001b58:	481c      	ldr	r0, [pc, #112]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b5a:	f002 fb3b 	bl	80041d4 <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001b64:	f000 f96a 	bl	8001e3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b68:	4818      	ldr	r0, [pc, #96]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b6a:	f002 f904 	bl	8003d76 <HAL_TIM_PWM_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001b74:	f000 f962 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b80:	f107 0320 	add.w	r3, r7, #32
 8001b84:	4619      	mov	r1, r3
 8001b86:	4811      	ldr	r0, [pc, #68]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001b88:	f002 fec4 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001b92:	f000 f953 	bl	8001e3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b96:	2360      	movs	r3, #96	@ 0x60
 8001b98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001b9a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001bb0:	f002 fa4e 	bl	8004050 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001bba:	f000 f93f 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bbe:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <MX_TIM2_Init+0xe8>)
 8001bc0:	f000 f98a 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3738      	adds	r7, #56	@ 0x38
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200006dc 	.word	0x200006dc

08001bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <MX_USART1_UART_Init+0x50>)
 8001bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001be8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bee:	4b0b      	ldr	r3, [pc, #44]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bf4:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c06:	4805      	ldr	r0, [pc, #20]	@ (8001c1c <MX_USART1_UART_Init+0x4c>)
 8001c08:	f002 fef2 	bl	80049f0 <HAL_UART_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c12:	f000 f913 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000724 	.word	0x20000724
 8001c20:	40011000 	.word	0x40011000

08001c24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c28:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c2a:	4a12      	ldr	r2, [pc, #72]	@ (8001c74 <MX_USART2_UART_Init+0x50>)
 8001c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <MX_USART2_UART_Init+0x4c>)
 8001c5c:	f002 fec8 	bl	80049f0 <HAL_UART_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c66:	f000 f8e9 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	2000076c 	.word	0x2000076c
 8001c74:	40004400 	.word	0x40004400

08001c78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART6_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART6_UART_Init+0x4c>)
 8001cb0:	f002 fe9e 	bl	80049f0 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f8bf 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200007b4 	.word	0x200007b4
 8001cc8:	40011400 	.word	0x40011400

08001ccc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001cdc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001cf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <MX_DMA_Init+0x4c>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]

}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
 8001d30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b3d      	ldr	r3, [pc, #244]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b3a      	ldr	r3, [pc, #232]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b36      	ldr	r3, [pc, #216]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a35      	ldr	r2, [pc, #212]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a2e      	ldr	r2, [pc, #184]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b28      	ldr	r3, [pc, #160]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8e:	4a27      	ldr	r2, [pc, #156]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d90:	f043 0302 	orr.w	r3, r3, #2
 8001d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d96:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <MX_GPIO_Init+0x110>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, led0_Pin|led1_Pin, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2103      	movs	r1, #3
 8001da6:	4822      	ldr	r0, [pc, #136]	@ (8001e30 <MX_GPIO_Init+0x114>)
 8001da8:	f001 fac0 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2120      	movs	r1, #32
 8001db0:	4820      	ldr	r0, [pc, #128]	@ (8001e34 <MX_GPIO_Init+0x118>)
 8001db2:	f001 fabb 	bl	800332c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001db6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001dbc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0314 	add.w	r3, r7, #20
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4818      	ldr	r0, [pc, #96]	@ (8001e30 <MX_GPIO_Init+0x114>)
 8001dce:	f001 f929 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : led0_Pin led1_Pin */
  GPIO_InitStruct.Pin = led0_Pin|led1_Pin;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	4811      	ldr	r0, [pc, #68]	@ (8001e30 <MX_GPIO_Init+0x114>)
 8001dea:	f001 f91b 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001dee:	2320      	movs	r3, #32
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	480b      	ldr	r0, [pc, #44]	@ (8001e34 <MX_GPIO_Init+0x118>)
 8001e06:	f001 f90d 	bl	8003024 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4806      	ldr	r0, [pc, #24]	@ (8001e38 <MX_GPIO_Init+0x11c>)
 8001e20:	f001 f900 	bl	8003024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e24:	bf00      	nop
 8001e26:	3728      	adds	r7, #40	@ 0x28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020800 	.word	0x40020800
 8001e34:	40020000 	.word	0x40020000
 8001e38:	40020400 	.word	0x40020400

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e40:	b672      	cpsid	i
}
 8001e42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <Error_Handler+0x8>

08001e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	4a0f      	ldr	r2, [pc, #60]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	603b      	str	r3, [r7, #0]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a08      	ldr	r2, [pc, #32]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e86:	2007      	movs	r0, #7
 8001e88:	f000 fc88 	bl	800279c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	4b09      	ldr	r3, [pc, #36]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a08      	ldr	r2, [pc, #32]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40023800 	.word	0x40023800

08001ed8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ef8:	d11d      	bne.n	8001f36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f16:	2301      	movs	r3, #1
 8001f18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f26:	2301      	movs	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f32:	f001 f877 	bl	8003024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020000 	.word	0x40020000

08001f48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	@ 0x38
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a90      	ldr	r2, [pc, #576]	@ (80021a8 <HAL_UART_MspInit+0x260>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d15b      	bne.n	8002022 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
 8001f6e:	4b8f      	ldr	r3, [pc, #572]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	4a8e      	ldr	r2, [pc, #568]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7a:	4b8c      	ldr	r3, [pc, #560]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	623b      	str	r3, [r7, #32]
 8001f84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
 8001f8a:	4b88      	ldr	r3, [pc, #544]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a87      	ldr	r2, [pc, #540]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fa2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fb4:	2307      	movs	r3, #7
 8001fb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	487c      	ldr	r0, [pc, #496]	@ (80021b0 <HAL_UART_MspInit+0x268>)
 8001fc0:	f001 f830 	bl	8003024 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fc6:	4a7c      	ldr	r2, [pc, #496]	@ (80021b8 <HAL_UART_MspInit+0x270>)
 8001fc8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fca:	4b7a      	ldr	r3, [pc, #488]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fcc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd2:	4b78      	ldr	r3, [pc, #480]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	4b75      	ldr	r3, [pc, #468]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe6:	4b73      	ldr	r3, [pc, #460]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fec:	4b71      	ldr	r3, [pc, #452]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001ff2:	4b70      	ldr	r3, [pc, #448]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff8:	4b6e      	ldr	r3, [pc, #440]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002004:	486b      	ldr	r0, [pc, #428]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8002006:	f000 fc0b 	bl	8002820 <HAL_DMA_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002010:	f7ff ff14 	bl	8001e3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a67      	ldr	r2, [pc, #412]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 8002018:	63da      	str	r2, [r3, #60]	@ 0x3c
 800201a:	4a66      	ldr	r2, [pc, #408]	@ (80021b4 <HAL_UART_MspInit+0x26c>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002020:	e0be      	b.n	80021a0 <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a65      	ldr	r2, [pc, #404]	@ (80021bc <HAL_UART_MspInit+0x274>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d15a      	bne.n	80020e2 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800202c:	2300      	movs	r3, #0
 800202e:	61bb      	str	r3, [r7, #24]
 8002030:	4b5e      	ldr	r3, [pc, #376]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8002036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800203a:	6413      	str	r3, [r2, #64]	@ 0x40
 800203c:	4b5b      	ldr	r3, [pc, #364]	@ (80021ac <HAL_UART_MspInit+0x264>)
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	4b57      	ldr	r3, [pc, #348]	@ (80021ac <HAL_UART_MspInit+0x264>)
 800204e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002050:	4a56      	ldr	r2, [pc, #344]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6313      	str	r3, [r2, #48]	@ 0x30
 8002058:	4b54      	ldr	r3, [pc, #336]	@ (80021ac <HAL_UART_MspInit+0x264>)
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002064:	230c      	movs	r3, #12
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002074:	2307      	movs	r3, #7
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	484c      	ldr	r0, [pc, #304]	@ (80021b0 <HAL_UART_MspInit+0x268>)
 8002080:	f000 ffd0 	bl	8003024 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002084:	4b4e      	ldr	r3, [pc, #312]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 8002086:	4a4f      	ldr	r2, [pc, #316]	@ (80021c4 <HAL_UART_MspInit+0x27c>)
 8002088:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800208a:	4b4d      	ldr	r3, [pc, #308]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 800208c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002090:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002092:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002098:	4b49      	ldr	r3, [pc, #292]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	4b48      	ldr	r3, [pc, #288]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020a4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a6:	4b46      	ldr	r3, [pc, #280]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ac:	4b44      	ldr	r3, [pc, #272]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80020b2:	4b43      	ldr	r3, [pc, #268]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020b8:	4b41      	ldr	r3, [pc, #260]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80020c4:	483e      	ldr	r0, [pc, #248]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020c6:	f000 fbab 	bl	8002820 <HAL_DMA_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80020d0:	f7ff feb4 	bl	8001e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a3a      	ldr	r2, [pc, #232]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020da:	4a39      	ldr	r2, [pc, #228]	@ (80021c0 <HAL_UART_MspInit+0x278>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80020e0:	e05e      	b.n	80021a0 <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART6)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_UART_MspInit+0x280>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d159      	bne.n	80021a0 <HAL_UART_MspInit+0x258>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	4b2e      	ldr	r3, [pc, #184]	@ (80021ac <HAL_UART_MspInit+0x264>)
 80020f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f4:	4a2d      	ldr	r2, [pc, #180]	@ (80021ac <HAL_UART_MspInit+0x264>)
 80020f6:	f043 0320 	orr.w	r3, r3, #32
 80020fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_UART_MspInit+0x264>)
 80020fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	4b27      	ldr	r3, [pc, #156]	@ (80021ac <HAL_UART_MspInit+0x264>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002110:	4a26      	ldr	r2, [pc, #152]	@ (80021ac <HAL_UART_MspInit+0x264>)
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	6313      	str	r3, [r2, #48]	@ 0x30
 8002118:	4b24      	ldr	r3, [pc, #144]	@ (80021ac <HAL_UART_MspInit+0x264>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002124:	23c0      	movs	r3, #192	@ 0xc0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002134:	2308      	movs	r3, #8
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	4823      	ldr	r0, [pc, #140]	@ (80021cc <HAL_UART_MspInit+0x284>)
 8002140:	f000 ff70 	bl	8003024 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002144:	4b22      	ldr	r3, [pc, #136]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002146:	4a23      	ldr	r2, [pc, #140]	@ (80021d4 <HAL_UART_MspInit+0x28c>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800214a:	4b21      	ldr	r3, [pc, #132]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 800214c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002150:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002152:	4b1f      	ldr	r3, [pc, #124]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002158:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800215e:	4b1c      	ldr	r3, [pc, #112]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002160:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002164:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002172:	4b17      	ldr	r3, [pc, #92]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002174:	2200      	movs	r2, #0
 8002176:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002178:	4b15      	ldr	r3, [pc, #84]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 800217a:	2200      	movs	r2, #0
 800217c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800217e:	4b14      	ldr	r3, [pc, #80]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002184:	4812      	ldr	r0, [pc, #72]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002186:	f000 fb4b 	bl	8002820 <HAL_DMA_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_UART_MspInit+0x24c>
      Error_Handler();
 8002190:	f7ff fe54 	bl	8001e3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a0e      	ldr	r2, [pc, #56]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c
 800219a:	4a0d      	ldr	r2, [pc, #52]	@ (80021d0 <HAL_UART_MspInit+0x288>)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80021a0:	bf00      	nop
 80021a2:	3738      	adds	r7, #56	@ 0x38
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020000 	.word	0x40020000
 80021b4:	200007fc 	.word	0x200007fc
 80021b8:	40026440 	.word	0x40026440
 80021bc:	40004400 	.word	0x40004400
 80021c0:	2000085c 	.word	0x2000085c
 80021c4:	40026088 	.word	0x40026088
 80021c8:	40011400 	.word	0x40011400
 80021cc:	40020800 	.word	0x40020800
 80021d0:	200008bc 	.word	0x200008bc
 80021d4:	40026428 	.word	0x40026428

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <NMI_Handler+0x4>

080021e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <MemManage_Handler+0x4>

080021f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <UsageFault_Handler+0x4>

08002200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800222e:	f000 f9a1 	bl	8002574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}

08002236 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 800223a:	2001      	movs	r0, #1
 800223c:	f001 f890 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}

08002244 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8002248:	2002      	movs	r0, #2
 800224a:	f001 f889 	bl	8003360 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002258:	4802      	ldr	r0, [pc, #8]	@ (8002264 <DMA1_Stream5_IRQHandler+0x10>)
 800225a:	f000 fc79 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000085c 	.word	0x2000085c

08002268 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800226c:	4802      	ldr	r0, [pc, #8]	@ (8002278 <USART1_IRQHandler+0x10>)
 800226e:	f002 fd2d 	bl	8004ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000724 	.word	0x20000724

0800227c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002280:	4802      	ldr	r0, [pc, #8]	@ (800228c <USART2_IRQHandler+0x10>)
 8002282:	f002 fd23 	bl	8004ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	2000076c 	.word	0x2000076c

08002290 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002294:	4802      	ldr	r0, [pc, #8]	@ (80022a0 <DMA2_Stream1_IRQHandler+0x10>)
 8002296:	f000 fc5b 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	200008bc 	.word	0x200008bc

080022a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80022a8:	4802      	ldr	r0, [pc, #8]	@ (80022b4 <DMA2_Stream2_IRQHandler+0x10>)
 80022aa:	f000 fc51 	bl	8002b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	200007fc 	.word	0x200007fc

080022b8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022bc:	4802      	ldr	r0, [pc, #8]	@ (80022c8 <USART6_IRQHandler+0x10>)
 80022be:	f002 fd05 	bl	8004ccc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200007b4 	.word	0x200007b4

080022cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_kill>:

int _kill(int pid, int sig)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022e6:	f003 ff77 	bl	80061d8 <__errno>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2216      	movs	r2, #22
 80022ee:	601a      	str	r2, [r3, #0]
  return -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_exit>:

void _exit (int status)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ffe7 	bl	80022dc <_kill>
  while (1) {}    /* Make sure we hang here */
 800230e:	bf00      	nop
 8002310:	e7fd      	b.n	800230e <_exit+0x12>

08002312 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b086      	sub	sp, #24
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	e00a      	b.n	800233a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002324:	f3af 8000 	nop.w
 8002328:	4601      	mov	r1, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	60ba      	str	r2, [r7, #8]
 8002330:	b2ca      	uxtb	r2, r1
 8002332:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	3301      	adds	r3, #1
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697a      	ldr	r2, [r7, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	dbf0      	blt.n	8002324 <_read+0x12>
  }

  return len;
 8002342:	687b      	ldr	r3, [r7, #4]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	e009      	b.n	8002372 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fe44 	bl	8000ff4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	dbf1      	blt.n	800235e <_write+0x12>
  }
  return len;
 800237a:	687b      	ldr	r3, [r7, #4]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <_close>:

int _close(int file)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ac:	605a      	str	r2, [r3, #4]
  return 0;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <_isatty>:

int _isatty(int file)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023c4:	2301      	movs	r3, #1
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023f4:	4a14      	ldr	r2, [pc, #80]	@ (8002448 <_sbrk+0x5c>)
 80023f6:	4b15      	ldr	r3, [pc, #84]	@ (800244c <_sbrk+0x60>)
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002400:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d102      	bne.n	800240e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <_sbrk+0x64>)
 800240a:	4a12      	ldr	r2, [pc, #72]	@ (8002454 <_sbrk+0x68>)
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	429a      	cmp	r2, r3
 800241a:	d207      	bcs.n	800242c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800241c:	f003 fedc 	bl	80061d8 <__errno>
 8002420:	4603      	mov	r3, r0
 8002422:	220c      	movs	r2, #12
 8002424:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002426:	f04f 33ff 	mov.w	r3, #4294967295
 800242a:	e009      	b.n	8002440 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <_sbrk+0x64>)
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <_sbrk+0x64>)
 800243c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20020000 	.word	0x20020000
 800244c:	00000400 	.word	0x00000400
 8002450:	20000980 	.word	0x20000980
 8002454:	20000c98 	.word	0x20000c98

08002458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800245c:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <SystemInit+0x20>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	4a05      	ldr	r2, [pc, #20]	@ (8002478 <SystemInit+0x20>)
 8002464:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002468:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800247c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002480:	f7ff ffea 	bl	8002458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	@ (80024bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	@ (80024c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	@ (80024c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024aa:	f003 fe9b 	bl	80061e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ae:	f7ff fa15 	bl	80018dc <main>
  bx  lr    
 80024b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80024b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	200006c0 	.word	0x200006c0
  ldr r2, =_sidata
 80024c0:	0800dcd4 	.word	0x0800dcd4
  ldr r2, =_sbss
 80024c4:	200006c0 	.word	0x200006c0
  ldr r4, =_ebss
 80024c8:	20000c94 	.word	0x20000c94

080024cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002510 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002510 <HAL_Init+0x40>)
 80024da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_Init+0x40>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_Init+0x40>)
 80024e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ec:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <HAL_Init+0x40>)
 80024f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f8:	2003      	movs	r0, #3
 80024fa:	f000 f94f 	bl	800279c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 f808 	bl	8002514 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002504:	f7ff fca0 	bl	8001e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	4b12      	ldr	r3, [pc, #72]	@ (8002568 <HAL_InitTick+0x54>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_InitTick+0x58>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800252a:	fbb3 f3f1 	udiv	r3, r3, r1
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f967 	bl	8002806 <HAL_SYSTICK_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e00e      	b.n	8002560 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0f      	cmp	r3, #15
 8002546:	d80a      	bhi.n	800255e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002548:	2200      	movs	r2, #0
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	f04f 30ff 	mov.w	r0, #4294967295
 8002550:	f000 f92f 	bl	80027b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002554:	4a06      	ldr	r2, [pc, #24]	@ (8002570 <HAL_InitTick+0x5c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e000      	b.n	8002560 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000000 	.word	0x20000000
 800256c:	20000008 	.word	0x20000008
 8002570:	20000004 	.word	0x20000004

08002574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <HAL_IncTick+0x20>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	461a      	mov	r2, r3
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <HAL_IncTick+0x24>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4413      	add	r3, r2
 8002584:	4a04      	ldr	r2, [pc, #16]	@ (8002598 <HAL_IncTick+0x24>)
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000008 	.word	0x20000008
 8002598:	20000984 	.word	0x20000984

0800259c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return uwTick;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_GetTick+0x14>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	20000984 	.word	0x20000984

080025b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff ffee 	bl	800259c <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d005      	beq.n	80025da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ce:	4b0a      	ldr	r3, [pc, #40]	@ (80025f8 <HAL_Delay+0x44>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025da:	bf00      	nop
 80025dc:	f7ff ffde 	bl	800259c <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d8f7      	bhi.n	80025dc <HAL_Delay+0x28>
  {
  }
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000008 	.word	0x20000008

080025fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002618:	4013      	ands	r3, r2
 800261a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002624:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800262c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800262e:	4a04      	ldr	r2, [pc, #16]	@ (8002640 <__NVIC_SetPriorityGrouping+0x44>)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	60d3      	str	r3, [r2, #12]
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002648:	4b04      	ldr	r3, [pc, #16]	@ (800265c <__NVIC_GetPriorityGrouping+0x18>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	f003 0307 	and.w	r3, r3, #7
}
 8002652:	4618      	mov	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	2b00      	cmp	r3, #0
 8002670:	db0b      	blt.n	800268a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4907      	ldr	r1, [pc, #28]	@ (8002698 <__NVIC_EnableIRQ+0x38>)
 800267a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2001      	movs	r0, #1
 8002682:	fa00 f202 	lsl.w	r2, r0, r2
 8002686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	db0a      	blt.n	80026c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	490c      	ldr	r1, [pc, #48]	@ (80026e8 <__NVIC_SetPriority+0x4c>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	0112      	lsls	r2, r2, #4
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	440b      	add	r3, r1
 80026c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026c4:	e00a      	b.n	80026dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4908      	ldr	r1, [pc, #32]	@ (80026ec <__NVIC_SetPriority+0x50>)
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	3b04      	subs	r3, #4
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	440b      	add	r3, r1
 80026da:	761a      	strb	r2, [r3, #24]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	e000e100 	.word	0xe000e100
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b089      	sub	sp, #36	@ 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f1c3 0307 	rsb	r3, r3, #7
 800270a:	2b04      	cmp	r3, #4
 800270c:	bf28      	it	cs
 800270e:	2304      	movcs	r3, #4
 8002710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	3304      	adds	r3, #4
 8002716:	2b06      	cmp	r3, #6
 8002718:	d902      	bls.n	8002720 <NVIC_EncodePriority+0x30>
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3b03      	subs	r3, #3
 800271e:	e000      	b.n	8002722 <NVIC_EncodePriority+0x32>
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	f04f 32ff 	mov.w	r2, #4294967295
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	401a      	ands	r2, r3
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002738:	f04f 31ff 	mov.w	r1, #4294967295
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	fa01 f303 	lsl.w	r3, r1, r3
 8002742:	43d9      	mvns	r1, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002748:	4313      	orrs	r3, r2
         );
}
 800274a:	4618      	mov	r0, r3
 800274c:	3724      	adds	r7, #36	@ 0x24
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002768:	d301      	bcc.n	800276e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800276a:	2301      	movs	r3, #1
 800276c:	e00f      	b.n	800278e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800276e:	4a0a      	ldr	r2, [pc, #40]	@ (8002798 <SysTick_Config+0x40>)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002776:	210f      	movs	r1, #15
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f7ff ff8e 	bl	800269c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002780:	4b05      	ldr	r3, [pc, #20]	@ (8002798 <SysTick_Config+0x40>)
 8002782:	2200      	movs	r2, #0
 8002784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002786:	4b04      	ldr	r3, [pc, #16]	@ (8002798 <SysTick_Config+0x40>)
 8002788:	2207      	movs	r2, #7
 800278a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	e000e010 	.word	0xe000e010

0800279c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff29 	bl	80025fc <__NVIC_SetPriorityGrouping>
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b086      	sub	sp, #24
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	607a      	str	r2, [r7, #4]
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027c4:	f7ff ff3e 	bl	8002644 <__NVIC_GetPriorityGrouping>
 80027c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	6978      	ldr	r0, [r7, #20]
 80027d0:	f7ff ff8e 	bl	80026f0 <NVIC_EncodePriority>
 80027d4:	4602      	mov	r2, r0
 80027d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff5d 	bl	800269c <__NVIC_SetPriority>
}
 80027e2:	bf00      	nop
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	4603      	mov	r3, r0
 80027f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff31 	bl	8002660 <__NVIC_EnableIRQ>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7ff ffa2 	bl	8002758 <SysTick_Config>
 8002814:	4603      	mov	r3, r0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3708      	adds	r7, #8
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff feb6 	bl	800259c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e099      	b.n	8002970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0201 	bic.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800285c:	e00f      	b.n	800287e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800285e:	f7ff fe9d 	bl	800259c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b05      	cmp	r3, #5
 800286a:	d908      	bls.n	800287e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2203      	movs	r2, #3
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e078      	b.n	8002970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e8      	bne.n	800285e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4b38      	ldr	r3, [pc, #224]	@ (8002978 <HAL_DMA_Init+0x158>)
 8002898:	4013      	ands	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d107      	bne.n	80028e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	4313      	orrs	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0307 	bic.w	r3, r3, #7
 80028fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290e:	2b04      	cmp	r3, #4
 8002910:	d117      	bne.n	8002942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fb01 	bl	8002f2c <DMA_CheckFifoParam>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2240      	movs	r2, #64	@ 0x40
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800293e:	2301      	movs	r3, #1
 8002940:	e016      	b.n	8002970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 fab8 	bl	8002ec0 <DMA_CalcBaseAndBitshift>
 8002950:	4603      	mov	r3, r0
 8002952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	223f      	movs	r2, #63	@ 0x3f
 800295a:	409a      	lsls	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	f010803f 	.word	0xf010803f

0800297c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_DMA_Start_IT+0x26>
 800299e:	2302      	movs	r3, #2
 80029a0:	e040      	b.n	8002a24 <HAL_DMA_Start_IT+0xa8>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d12f      	bne.n	8002a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2202      	movs	r2, #2
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fa4a 	bl	8002e64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d4:	223f      	movs	r2, #63	@ 0x3f
 80029d6:	409a      	lsls	r2, r3
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0216 	orr.w	r2, r2, #22
 80029ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0208 	orr.w	r2, r2, #8
 8002a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0201 	orr.w	r2, r2, #1
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	e005      	b.n	8002a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a3a:	f7ff fdaf 	bl	800259c <HAL_GetTick>
 8002a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2280      	movs	r2, #128	@ 0x80
 8002a50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e052      	b.n	8002b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0216 	bic.w	r2, r2, #22
 8002a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695a      	ldr	r2, [r3, #20]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_DMA_Abort+0x62>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d007      	beq.n	8002a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0208 	bic.w	r2, r2, #8
 8002a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0201 	bic.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aae:	e013      	b.n	8002ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab0:	f7ff fd74 	bl	800259c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b05      	cmp	r3, #5
 8002abc:	d90c      	bls.n	8002ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2203      	movs	r2, #3
 8002ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e015      	b.n	8002b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1e4      	bne.n	8002ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aea:	223f      	movs	r2, #63	@ 0x3f
 8002aec:	409a      	lsls	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b02:	2300      	movs	r3, #0
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d004      	beq.n	8002b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2280      	movs	r2, #128	@ 0x80
 8002b24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e00c      	b.n	8002b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2205      	movs	r2, #5
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0201 	bic.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b5c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d98 <HAL_DMA_IRQHandler+0x248>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a8e      	ldr	r2, [pc, #568]	@ (8002d9c <HAL_DMA_IRQHandler+0x24c>)
 8002b62:	fba2 2303 	umull	r2, r3, r2, r3
 8002b66:	0a9b      	lsrs	r3, r3, #10
 8002b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01a      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d013      	beq.n	8002bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0204 	bic.w	r2, r2, #4
 8002ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba8:	2208      	movs	r2, #8
 8002baa:	409a      	lsls	r2, r3
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	f043 0201 	orr.w	r2, r3, #1
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bde:	2201      	movs	r2, #1
 8002be0:	409a      	lsls	r2, r3
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bea:	f043 0202 	orr.w	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d012      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	2204      	movs	r2, #4
 8002c16:	409a      	lsls	r2, r3
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d043      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0308 	and.w	r3, r3, #8
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d03c      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d018      	beq.n	8002c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d108      	bne.n	8002c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d024      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
 8002c7e:	e01f      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01b      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4798      	blx	r3
 8002c90:	e016      	b.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d107      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0208 	bic.w	r2, r2, #8
 8002cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 808f 	beq.w	8002df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0310 	and.w	r3, r3, #16
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 8087 	beq.w	8002df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b05      	cmp	r3, #5
 8002cf8:	d136      	bne.n	8002d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0216 	bic.w	r2, r2, #22
 8002d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x1da>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0208 	bic.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3e:	223f      	movs	r2, #63	@ 0x3f
 8002d40:	409a      	lsls	r2, r3
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d07e      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
        }
        return;
 8002d66:	e079      	b.n	8002e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01d      	beq.n	8002db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10d      	bne.n	8002da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d031      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e02c      	b.n	8002df0 <HAL_DMA_IRQHandler+0x2a0>
 8002d96:	bf00      	nop
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d023      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4798      	blx	r3
 8002db0:	e01e      	b.n	8002df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10f      	bne.n	8002de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f022 0210 	bic.w	r2, r2, #16
 8002dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d032      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d022      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2205      	movs	r2, #5
 8002e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d307      	bcc.n	8002e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f2      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x2cc>
 8002e36:	e000      	b.n	8002e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d005      	beq.n	8002e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	4798      	blx	r3
 8002e5a:	e000      	b.n	8002e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e5c:	bf00      	nop
    }
  }
}
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	683a      	ldr	r2, [r7, #0]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b40      	cmp	r3, #64	@ 0x40
 8002e90:	d108      	bne.n	8002ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ea2:	e007      	b.n	8002eb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	3b10      	subs	r3, #16
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <DMA_CalcBaseAndBitshift+0x64>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eda:	4a13      	ldr	r2, [pc, #76]	@ (8002f28 <DMA_CalcBaseAndBitshift+0x68>)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4413      	add	r3, r2
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d909      	bls.n	8002f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	1d1a      	adds	r2, r3, #4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f00:	e007      	b.n	8002f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	aaaaaaab 	.word	0xaaaaaaab
 8002f28:	0800d850 	.word	0x0800d850

08002f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11f      	bne.n	8002f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d856      	bhi.n	8002ffa <DMA_CheckFifoParam+0xce>
 8002f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f54 <DMA_CheckFifoParam+0x28>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f65 	.word	0x08002f65
 8002f58:	08002f77 	.word	0x08002f77
 8002f5c:	08002f65 	.word	0x08002f65
 8002f60:	08002ffb 	.word	0x08002ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d046      	beq.n	8002ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f74:	e043      	b.n	8002ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f7e:	d140      	bne.n	8003002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f84:	e03d      	b.n	8003002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f8e:	d121      	bne.n	8002fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d837      	bhi.n	8003006 <DMA_CheckFifoParam+0xda>
 8002f96:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <DMA_CheckFifoParam+0x70>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fb3 	.word	0x08002fb3
 8002fa4:	08002fad 	.word	0x08002fad
 8002fa8:	08002fc5 	.word	0x08002fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e030      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d025      	beq.n	800300a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e022      	b.n	800300a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fcc:	d11f      	bne.n	800300e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fd2:	e01c      	b.n	800300e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d903      	bls.n	8002fe2 <DMA_CheckFifoParam+0xb6>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d003      	beq.n	8002fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fe0:	e018      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe6:	e015      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00e      	beq.n	8003012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e00b      	b.n	8003012 <DMA_CheckFifoParam+0xe6>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e00a      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8002ffe:	bf00      	nop
 8003000:	e008      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003002:	bf00      	nop
 8003004:	e006      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003006:	bf00      	nop
 8003008:	e004      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;   
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <DMA_CheckFifoParam+0xe8>
      break;
 8003012:	bf00      	nop
    }
  } 
  
  return status; 
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3714      	adds	r7, #20
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop

08003024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	@ 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
 800303e:	e159      	b.n	80032f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003040:	2201      	movs	r2, #1
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	429a      	cmp	r2, r3
 800305a:	f040 8148 	bne.w	80032ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b01      	cmp	r3, #1
 8003068:	d005      	beq.n	8003076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003072:	2b02      	cmp	r3, #2
 8003074:	d130      	bne.n	80030d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2203      	movs	r2, #3
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4313      	orrs	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ac:	2201      	movs	r2, #1
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 0201 	and.w	r2, r3, #1
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d017      	beq.n	8003114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d123      	bne.n	8003168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	08da      	lsrs	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3208      	adds	r2, #8
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80a2 	beq.w	80032ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	4b57      	ldr	r3, [pc, #348]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4a56      	ldr	r2, [pc, #344]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ba:	4b54      	ldr	r3, [pc, #336]	@ (800330c <HAL_GPIO_Init+0x2e8>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c6:	4a52      	ldr	r2, [pc, #328]	@ (8003310 <HAL_GPIO_Init+0x2ec>)
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a49      	ldr	r2, [pc, #292]	@ (8003314 <HAL_GPIO_Init+0x2f0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d019      	beq.n	8003226 <HAL_GPIO_Init+0x202>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a48      	ldr	r2, [pc, #288]	@ (8003318 <HAL_GPIO_Init+0x2f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d013      	beq.n	8003222 <HAL_GPIO_Init+0x1fe>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a47      	ldr	r2, [pc, #284]	@ (800331c <HAL_GPIO_Init+0x2f8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00d      	beq.n	800321e <HAL_GPIO_Init+0x1fa>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a46      	ldr	r2, [pc, #280]	@ (8003320 <HAL_GPIO_Init+0x2fc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <HAL_GPIO_Init+0x1f6>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a45      	ldr	r2, [pc, #276]	@ (8003324 <HAL_GPIO_Init+0x300>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_GPIO_Init+0x1f2>
 8003212:	2304      	movs	r3, #4
 8003214:	e008      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003216:	2307      	movs	r3, #7
 8003218:	e006      	b.n	8003228 <HAL_GPIO_Init+0x204>
 800321a:	2303      	movs	r3, #3
 800321c:	e004      	b.n	8003228 <HAL_GPIO_Init+0x204>
 800321e:	2302      	movs	r3, #2
 8003220:	e002      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_GPIO_Init+0x204>
 8003226:	2300      	movs	r3, #0
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	f002 0203 	and.w	r2, r2, #3
 800322e:	0092      	lsls	r2, r2, #2
 8003230:	4093      	lsls	r3, r2
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003238:	4935      	ldr	r1, [pc, #212]	@ (8003310 <HAL_GPIO_Init+0x2ec>)
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003246:	4b38      	ldr	r3, [pc, #224]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800326a:	4a2f      	ldr	r2, [pc, #188]	@ (8003328 <HAL_GPIO_Init+0x304>)
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003270:	4b2d      	ldr	r3, [pc, #180]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003294:	4a24      	ldr	r2, [pc, #144]	@ (8003328 <HAL_GPIO_Init+0x304>)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800329a:	4b23      	ldr	r3, [pc, #140]	@ (8003328 <HAL_GPIO_Init+0x304>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032be:	4a1a      	ldr	r2, [pc, #104]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032c4:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003328 <HAL_GPIO_Init+0x304>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3301      	adds	r3, #1
 80032f2:	61fb      	str	r3, [r7, #28]
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f67f aea2 	bls.w	8003040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032fc:	bf00      	nop
 80032fe:	bf00      	nop
 8003300:	3724      	adds	r7, #36	@ 0x24
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
 8003310:	40013800 	.word	0x40013800
 8003314:	40020000 	.word	0x40020000
 8003318:	40020400 	.word	0x40020400
 800331c:	40020800 	.word	0x40020800
 8003320:	40020c00 	.word	0x40020c00
 8003324:	40021000 	.word	0x40021000
 8003328:	40013c00 	.word	0x40013c00

0800332c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	807b      	strh	r3, [r7, #2]
 8003338:	4613      	mov	r3, r2
 800333a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003348:	e003      	b.n	8003352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800334a:	887b      	ldrh	r3, [r7, #2]
 800334c:	041a      	lsls	r2, r3, #16
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	619a      	str	r2, [r3, #24]
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336a:	4b08      	ldr	r3, [pc, #32]	@ (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4013      	ands	r3, r2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d006      	beq.n	8003384 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003376:	4a05      	ldr	r2, [pc, #20]	@ (800338c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f806 	bl	8003390 <HAL_GPIO_EXTI_Callback>
  }
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40013c00 	.word	0x40013c00

08003390 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	4603      	mov	r3, r0
 8003398:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e267      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4b88      	ldr	r3, [pc, #544]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4b85      	ldr	r3, [pc, #532]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b82      	ldr	r3, [pc, #520]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b7e      	ldr	r3, [pc, #504]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e242      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b76      	ldr	r3, [pc, #472]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a75      	ldr	r2, [pc, #468]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b70      	ldr	r3, [pc, #448]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6f      	ldr	r2, [pc, #444]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b6d      	ldr	r3, [pc, #436]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6c      	ldr	r2, [pc, #432]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b69      	ldr	r3, [pc, #420]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b66      	ldr	r3, [pc, #408]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a65      	ldr	r2, [pc, #404]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7ff f89c 	bl	800259c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7ff f898 	bl	800259c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e207      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b5b      	ldr	r3, [pc, #364]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff f888 	bl	800259c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff f884 	bl	800259c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	@ 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f3      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b51      	ldr	r3, [pc, #324]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b4a      	ldr	r3, [pc, #296]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b44      	ldr	r3, [pc, #272]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c7      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4937      	ldr	r1, [pc, #220]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b34      	ldr	r3, [pc, #208]	@ (80035ec <HAL_RCC_OscConfig+0x244>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7ff f83d 	bl	800259c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7ff f839 	bl	800259c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a8      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b2b      	ldr	r3, [pc, #172]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b28      	ldr	r3, [pc, #160]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4925      	ldr	r1, [pc, #148]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <HAL_RCC_OscConfig+0x244>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7ff f81c 	bl	800259c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7ff f818 	bl	800259c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e187      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d036      	beq.n	8003600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b15      	ldr	r3, [pc, #84]	@ (80035f0 <HAL_RCC_OscConfig+0x248>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fffc 	bl	800259c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fff8 	bl	800259c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e167      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_OscConfig+0x240>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e01b      	b.n	8003600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_OscConfig+0x248>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe ffe5 	bl	800259c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e00e      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe ffe1 	bl	800259c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d907      	bls.n	80035f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e150      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 80035e8:	40023800 	.word	0x40023800
 80035ec:	42470000 	.word	0x42470000
 80035f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f4:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1ea      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 8097 	beq.w	800373c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800360e:	2300      	movs	r3, #0
 8003610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003612:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	4b7d      	ldr	r3, [pc, #500]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	4a7c      	ldr	r2, [pc, #496]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362c:	6413      	str	r3, [r2, #64]	@ 0x40
 800362e:	4b7a      	ldr	r3, [pc, #488]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363a:	2301      	movs	r3, #1
 800363c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	4b77      	ldr	r3, [pc, #476]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003646:	2b00      	cmp	r3, #0
 8003648:	d118      	bne.n	800367c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364a:	4b74      	ldr	r3, [pc, #464]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a73      	ldr	r2, [pc, #460]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003656:	f7fe ffa1 	bl	800259c <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800365e:	f7fe ff9d 	bl	800259c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e10c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	4b6a      	ldr	r3, [pc, #424]	@ (800381c <HAL_RCC_OscConfig+0x474>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d106      	bne.n	8003692 <HAL_RCC_OscConfig+0x2ea>
 8003684:	4b64      	ldr	r3, [pc, #400]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003688:	4a63      	ldr	r2, [pc, #396]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800368a:	f043 0301 	orr.w	r3, r3, #1
 800368e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003690:	e01c      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b05      	cmp	r3, #5
 8003698:	d10c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x30c>
 800369a:	4b5f      	ldr	r3, [pc, #380]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369e:	4a5e      	ldr	r2, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a0:	f043 0304 	orr.w	r3, r3, #4
 80036a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036aa:	4a5b      	ldr	r2, [pc, #364]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036b2:	e00b      	b.n	80036cc <HAL_RCC_OscConfig+0x324>
 80036b4:	4b58      	ldr	r3, [pc, #352]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b8:	4a57      	ldr	r2, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c0:	4b55      	ldr	r3, [pc, #340]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c4:	4a54      	ldr	r2, [pc, #336]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0304 	bic.w	r3, r3, #4
 80036ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d015      	beq.n	8003700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d4:	f7fe ff62 	bl	800259c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe ff5e 	bl	800259c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0cb      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f2:	4b49      	ldr	r3, [pc, #292]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ee      	beq.n	80036dc <HAL_RCC_OscConfig+0x334>
 80036fe:	e014      	b.n	800372a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003700:	f7fe ff4c 	bl	800259c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe ff48 	bl	800259c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e0b5      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800371e:	4b3e      	ldr	r3, [pc, #248]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1ee      	bne.n	8003708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372a:	7dfb      	ldrb	r3, [r7, #23]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d105      	bne.n	800373c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003730:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003734:	4a38      	ldr	r2, [pc, #224]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800373a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a1 	beq.w	8003888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003746:	4b34      	ldr	r3, [pc, #208]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	2b08      	cmp	r3, #8
 8003750:	d05c      	beq.n	800380c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d141      	bne.n	80037de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b31      	ldr	r3, [pc, #196]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe ff1c 	bl	800259c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe ff18 	bl	800259c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e087      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377a:	4b27      	ldr	r3, [pc, #156]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	041b      	lsls	r3, r3, #16
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	491b      	ldr	r1, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fef1 	bl	800259c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe feed 	bl	800259c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e05c      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x416>
 80037dc:	e054      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCC_OscConfig+0x478>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe feda 	bl	800259c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fed6 	bl	800259c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e045      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x470>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x444>
 800380a:	e03d      	b.n	8003888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e038      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
 8003818:	40023800 	.word	0x40023800
 800381c:	40007000 	.word	0x40007000
 8003820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003824:	4b1b      	ldr	r3, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d028      	beq.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d121      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11a      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003854:	4013      	ands	r3, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800385a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386a:	085b      	lsrs	r3, r3, #1
 800386c:	3b01      	subs	r3, #1
 800386e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003870:	429a      	cmp	r2, r3
 8003872:	d107      	bne.n	8003884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e000      	b.n	800388a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe fe08 	bl	800259c <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fe fe04 	bl	800259c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	@ (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	@ (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	@ (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	@ (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fe fd68 	bl	8002514 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	0800d838 	.word	0x0800d838
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a68:	b094      	sub	sp, #80	@ 0x50
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a70:	2300      	movs	r3, #0
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a74:	2300      	movs	r3, #0
 8003a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b79      	ldr	r3, [pc, #484]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80e1 	bhi.w	8003c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e0db      	b.n	8003c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b73      	ldr	r3, [pc, #460]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003a9c:	e0db      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b73      	ldr	r3, [pc, #460]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aa2:	e0d8      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b6d      	ldr	r3, [pc, #436]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d063      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b6a      	ldr	r3, [pc, #424]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ace:	2300      	movs	r3, #0
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ad6:	4622      	mov	r2, r4
 8003ad8:	462b      	mov	r3, r5
 8003ada:	f04f 0000 	mov.w	r0, #0
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	0159      	lsls	r1, r3, #5
 8003ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae8:	0150      	lsls	r0, r2, #5
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4621      	mov	r1, r4
 8003af0:	1a51      	subs	r1, r2, r1
 8003af2:	6139      	str	r1, [r7, #16]
 8003af4:	4629      	mov	r1, r5
 8003af6:	eb63 0301 	sbc.w	r3, r3, r1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	f04f 0200 	mov.w	r2, #0
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b08:	4659      	mov	r1, fp
 8003b0a:	018b      	lsls	r3, r1, #6
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b12:	4651      	mov	r1, sl
 8003b14:	018a      	lsls	r2, r1, #6
 8003b16:	4651      	mov	r1, sl
 8003b18:	ebb2 0801 	subs.w	r8, r2, r1
 8003b1c:	4659      	mov	r1, fp
 8003b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b36:	4690      	mov	r8, r2
 8003b38:	4699      	mov	r9, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	eb18 0303 	adds.w	r3, r8, r3
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	462b      	mov	r3, r5
 8003b44:	eb49 0303 	adc.w	r3, r9, r3
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b56:	4629      	mov	r1, r5
 8003b58:	024b      	lsls	r3, r1, #9
 8003b5a:	4621      	mov	r1, r4
 8003b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b60:	4621      	mov	r1, r4
 8003b62:	024a      	lsls	r2, r1, #9
 8003b64:	4610      	mov	r0, r2
 8003b66:	4619      	mov	r1, r3
 8003b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b74:	f7fd f890 	bl	8000c98 <__aeabi_uldivmod>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b80:	e058      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b82:	4b38      	ldr	r3, [pc, #224]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	2200      	movs	r2, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b92:	623b      	str	r3, [r7, #32]
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	f04f 0000 	mov.w	r0, #0
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	0159      	lsls	r1, r3, #5
 8003baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bae:	0150      	lsls	r0, r2, #5
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bba:	4649      	mov	r1, r9
 8003bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	00eb      	lsls	r3, r5, #3
 8003be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bea:	00e2      	lsls	r2, r4, #3
 8003bec:	4614      	mov	r4, r2
 8003bee:	461d      	mov	r5, r3
 8003bf0:	4643      	mov	r3, r8
 8003bf2:	18e3      	adds	r3, r4, r3
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	eb45 0303 	adc.w	r3, r5, r3
 8003bfc:	607b      	str	r3, [r7, #4]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	028b      	lsls	r3, r1, #10
 8003c0e:	4621      	mov	r1, r4
 8003c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c14:	4621      	mov	r1, r4
 8003c16:	028a      	lsls	r2, r1, #10
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c1e:	2200      	movs	r2, #0
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	61fa      	str	r2, [r7, #28]
 8003c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c28:	f7fd f836 	bl	8000c98 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4613      	mov	r3, r2
 8003c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c4e:	e002      	b.n	8003c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b05      	ldr	r3, [pc, #20]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3750      	adds	r7, #80	@ 0x50
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	007a1200 	.word	0x007a1200

08003c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c74:	4b03      	ldr	r3, [pc, #12]	@ (8003c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c76:	681b      	ldr	r3, [r3, #0]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000000 	.word	0x20000000

08003c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c8c:	f7ff fff0 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	@ (8003cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	0800d848 	.word	0x0800d848

08003cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cb4:	f7ff ffdc 	bl	8003c70 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	@ (8003cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0b5b      	lsrs	r3, r3, #13
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	@ (8003cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	0800d848 	.word	0x0800d848

08003cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fe f8ca 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fb24 	bl	8004364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e041      	b.n	8003e0c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f839 	bl	8003e14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fad5 	bl	8004364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d109      	bne.n	8003e4c <HAL_TIM_PWM_Start+0x24>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	e022      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d109      	bne.n	8003e66 <HAL_TIM_PWM_Start+0x3e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	bf14      	ite	ne
 8003e5e:	2301      	movne	r3, #1
 8003e60:	2300      	moveq	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	e015      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d109      	bne.n	8003e80 <HAL_TIM_PWM_Start+0x58>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	e008      	b.n	8003e92 <HAL_TIM_PWM_Start+0x6a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	bf14      	ite	ne
 8003e8c:	2301      	movne	r3, #1
 8003e8e:	2300      	moveq	r3, #0
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e068      	b.n	8003f6c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d104      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x82>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ea8:	e013      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d104      	bne.n	8003eba <HAL_TIM_PWM_Start+0x92>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003eb8:	e00b      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d104      	bne.n	8003eca <HAL_TIM_PWM_Start+0xa2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ec8:	e003      	b.n	8003ed2 <HAL_TIM_PWM_Start+0xaa>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	6839      	ldr	r1, [r7, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fcf4 	bl	80048c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	@ (8003f74 <HAL_TIM_PWM_Start+0x14c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d107      	bne.n	8003efa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1d      	ldr	r2, [pc, #116]	@ (8003f74 <HAL_TIM_PWM_Start+0x14c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x10e>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d013      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x10e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a19      	ldr	r2, [pc, #100]	@ (8003f78 <HAL_TIM_PWM_Start+0x150>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x10e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a17      	ldr	r2, [pc, #92]	@ (8003f7c <HAL_TIM_PWM_Start+0x154>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x10e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a16      	ldr	r2, [pc, #88]	@ (8003f80 <HAL_TIM_PWM_Start+0x158>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_TIM_PWM_Start+0x10e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a14      	ldr	r2, [pc, #80]	@ (8003f84 <HAL_TIM_PWM_Start+0x15c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d111      	bne.n	8003f5a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b06      	cmp	r3, #6
 8003f46:	d010      	beq.n	8003f6a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	e007      	b.n	8003f6a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40014000 	.word	0x40014000

08003f88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	6839      	ldr	r1, [r7, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fc94 	bl	80048c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a29      	ldr	r2, [pc, #164]	@ (800404c <HAL_TIM_PWM_Stop+0xc4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d117      	bne.n	8003fda <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <HAL_TIM_PWM_Stop+0x52>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6a1a      	ldr	r2, [r3, #32]
 8003fc0:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d107      	bne.n	8003fda <HAL_TIM_PWM_Stop+0x52>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10f      	bne.n	800400a <HAL_TIM_PWM_Stop+0x82>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6a1a      	ldr	r2, [r3, #32]
 8003ff0:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <HAL_TIM_PWM_Stop+0x82>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Stop+0x92>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004018:	e013      	b.n	8004042 <HAL_TIM_PWM_Stop+0xba>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Stop+0xa2>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004028:	e00b      	b.n	8004042 <HAL_TIM_PWM_Stop+0xba>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Stop+0xb2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004038:	e003      	b.n	8004042 <HAL_TIM_PWM_Stop+0xba>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010000 	.word	0x40010000

08004050 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800405c:	2300      	movs	r3, #0
 800405e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800406a:	2302      	movs	r3, #2
 800406c:	e0ae      	b.n	80041cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0c      	cmp	r3, #12
 800407a:	f200 809f 	bhi.w	80041bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800407e:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	080040b9 	.word	0x080040b9
 8004088:	080041bd 	.word	0x080041bd
 800408c:	080041bd 	.word	0x080041bd
 8004090:	080041bd 	.word	0x080041bd
 8004094:	080040f9 	.word	0x080040f9
 8004098:	080041bd 	.word	0x080041bd
 800409c:	080041bd 	.word	0x080041bd
 80040a0:	080041bd 	.word	0x080041bd
 80040a4:	0800413b 	.word	0x0800413b
 80040a8:	080041bd 	.word	0x080041bd
 80040ac:	080041bd 	.word	0x080041bd
 80040b0:	080041bd 	.word	0x080041bd
 80040b4:	0800417b 	.word	0x0800417b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68b9      	ldr	r1, [r7, #8]
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 f9dc 	bl	800447c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f042 0208 	orr.w	r2, r2, #8
 80040d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0204 	bic.w	r2, r2, #4
 80040e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6999      	ldr	r1, [r3, #24]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	619a      	str	r2, [r3, #24]
      break;
 80040f6:	e064      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68b9      	ldr	r1, [r7, #8]
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fa22 	bl	8004548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6999      	ldr	r1, [r3, #24]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	021a      	lsls	r2, r3, #8
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	619a      	str	r2, [r3, #24]
      break;
 8004138:	e043      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fa6d 	bl	8004620 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0208 	orr.w	r2, r2, #8
 8004154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69da      	ldr	r2, [r3, #28]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0204 	bic.w	r2, r2, #4
 8004164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69d9      	ldr	r1, [r3, #28]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	61da      	str	r2, [r3, #28]
      break;
 8004178:	e023      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68b9      	ldr	r1, [r7, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f000 fab7 	bl	80046f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69d9      	ldr	r1, [r3, #28]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	61da      	str	r2, [r3, #28]
      break;
 80041ba:	e002      	b.n	80041c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_TIM_ConfigClockSource+0x1c>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0b4      	b.n	800435a <HAL_TIM_ConfigClockSource+0x186>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800420e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004216:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004228:	d03e      	beq.n	80042a8 <HAL_TIM_ConfigClockSource+0xd4>
 800422a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800422e:	f200 8087 	bhi.w	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004236:	f000 8086 	beq.w	8004346 <HAL_TIM_ConfigClockSource+0x172>
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	d87f      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b70      	cmp	r3, #112	@ 0x70
 8004242:	d01a      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xa6>
 8004244:	2b70      	cmp	r3, #112	@ 0x70
 8004246:	d87b      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b60      	cmp	r3, #96	@ 0x60
 800424a:	d050      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0x11a>
 800424c:	2b60      	cmp	r3, #96	@ 0x60
 800424e:	d877      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b50      	cmp	r3, #80	@ 0x50
 8004252:	d03c      	beq.n	80042ce <HAL_TIM_ConfigClockSource+0xfa>
 8004254:	2b50      	cmp	r3, #80	@ 0x50
 8004256:	d873      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b40      	cmp	r3, #64	@ 0x40
 800425a:	d058      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x13a>
 800425c:	2b40      	cmp	r3, #64	@ 0x40
 800425e:	d86f      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b30      	cmp	r3, #48	@ 0x30
 8004262:	d064      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x15a>
 8004264:	2b30      	cmp	r3, #48	@ 0x30
 8004266:	d86b      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b20      	cmp	r3, #32
 800426a:	d060      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x15a>
 800426c:	2b20      	cmp	r3, #32
 800426e:	d867      	bhi.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d05c      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x15a>
 8004274:	2b10      	cmp	r3, #16
 8004276:	d05a      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x15a>
 8004278:	e062      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800428a:	f000 fafd 	bl	8004888 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800429c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	609a      	str	r2, [r3, #8]
      break;
 80042a6:	e04f      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042b8:	f000 fae6 	bl	8004888 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ca:	609a      	str	r2, [r3, #8]
      break;
 80042cc:	e03c      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042da:	461a      	mov	r2, r3
 80042dc:	f000 fa5a 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2150      	movs	r1, #80	@ 0x50
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fab3 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 80042ec:	e02c      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fa79 	bl	80047f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2160      	movs	r1, #96	@ 0x60
 8004306:	4618      	mov	r0, r3
 8004308:	f000 faa3 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 800430c:	e01c      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fa3a 	bl	8004794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2140      	movs	r1, #64	@ 0x40
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fa93 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 800432c:	e00c      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f000 fa8a 	bl	8004852 <TIM_ITRx_SetConfig>
      break;
 800433e:	e003      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e000      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3a      	ldr	r2, [pc, #232]	@ (8004460 <TIM_Base_SetConfig+0xfc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d00f      	beq.n	800439c <TIM_Base_SetConfig+0x38>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004382:	d00b      	beq.n	800439c <TIM_Base_SetConfig+0x38>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a37      	ldr	r2, [pc, #220]	@ (8004464 <TIM_Base_SetConfig+0x100>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0x38>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a36      	ldr	r2, [pc, #216]	@ (8004468 <TIM_Base_SetConfig+0x104>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x38>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a35      	ldr	r2, [pc, #212]	@ (800446c <TIM_Base_SetConfig+0x108>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <TIM_Base_SetConfig+0xfc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01b      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043bc:	d017      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a28      	ldr	r2, [pc, #160]	@ (8004464 <TIM_Base_SetConfig+0x100>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d013      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <TIM_Base_SetConfig+0x104>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00f      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a26      	ldr	r2, [pc, #152]	@ (800446c <TIM_Base_SetConfig+0x108>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00b      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a25      	ldr	r2, [pc, #148]	@ (8004470 <TIM_Base_SetConfig+0x10c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d007      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a24      	ldr	r2, [pc, #144]	@ (8004474 <TIM_Base_SetConfig+0x110>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d003      	beq.n	80043ee <TIM_Base_SetConfig+0x8a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a23      	ldr	r2, [pc, #140]	@ (8004478 <TIM_Base_SetConfig+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d108      	bne.n	8004400 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <TIM_Base_SetConfig+0xfc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d103      	bne.n	8004434 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b01      	cmp	r3, #1
 8004444:	d105      	bne.n	8004452 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]
  }
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40010000 	.word	0x40010000
 8004464:	40000400 	.word	0x40000400
 8004468:	40000800 	.word	0x40000800
 800446c:	40000c00 	.word	0x40000c00
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800

0800447c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f023 0201 	bic.w	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0303 	bic.w	r3, r3, #3
 80044b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 0302 	bic.w	r3, r3, #2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <TIM_OC1_SetConfig+0xc8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d10c      	bne.n	80044f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0308 	bic.w	r3, r3, #8
 80044de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 0304 	bic.w	r3, r3, #4
 80044f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a13      	ldr	r2, [pc, #76]	@ (8004544 <TIM_OC1_SetConfig+0xc8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d111      	bne.n	800451e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	4313      	orrs	r3, r2
 8004512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	621a      	str	r2, [r3, #32]
}
 8004538:	bf00      	nop
 800453a:	371c      	adds	r7, #28
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	40010000 	.word	0x40010000

08004548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f023 0210 	bic.w	r2, r3, #16
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0320 	bic.w	r3, r3, #32
 8004592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a1e      	ldr	r2, [pc, #120]	@ (800461c <TIM_OC2_SetConfig+0xd4>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d10d      	bne.n	80045c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a15      	ldr	r2, [pc, #84]	@ (800461c <TIM_OC2_SetConfig+0xd4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d113      	bne.n	80045f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	621a      	str	r2, [r3, #32]
}
 800460e:	bf00      	nop
 8004610:	371c      	adds	r7, #28
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000

08004620 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <TIM_OC3_SetConfig+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d10d      	bne.n	800469a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004684:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <TIM_OC3_SetConfig+0xd0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d113      	bne.n	80046ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	693a      	ldr	r2, [r7, #16]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40010000 	.word	0x40010000

080046f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800473e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	031b      	lsls	r3, r3, #12
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a10      	ldr	r2, [pc, #64]	@ (8004790 <TIM_OC4_SetConfig+0x9c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d109      	bne.n	8004768 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800475a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	019b      	lsls	r3, r3, #6
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	621a      	str	r2, [r3, #32]
}
 8004782:	bf00      	nop
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000

08004794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	011b      	lsls	r3, r3, #4
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f023 030a 	bic.w	r3, r3, #10
 80047d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b087      	sub	sp, #28
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 0210 	bic.w	r2, r3, #16
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800481c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	031b      	lsls	r3, r3, #12
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4313      	orrs	r3, r2
 8004826:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800482e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	621a      	str	r2, [r3, #32]
}
 8004846:	bf00      	nop
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004868:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4313      	orrs	r3, r2
 8004870:	f043 0307 	orr.w	r3, r3, #7
 8004874:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	609a      	str	r2, [r3, #8]
}
 800487c:	bf00      	nop
 800487e:	3714      	adds	r7, #20
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	021a      	lsls	r2, r3, #8
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	609a      	str	r2, [r3, #8]
}
 80048bc:	bf00      	nop
 80048be:	371c      	adds	r7, #28
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	f003 031f 	and.w	r3, r3, #31
 80048da:	2201      	movs	r2, #1
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a1a      	ldr	r2, [r3, #32]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	43db      	mvns	r3, r3
 80048ea:	401a      	ands	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1a      	ldr	r2, [r3, #32]
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e050      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004978:	d013      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	@ (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	@ (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	@ (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000

080049f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d101      	bne.n	8004a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e042      	b.n	8004a88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fd fa96 	bl	8001f48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2224      	movs	r2, #36	@ 0x24
 8004a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 ffbb 	bl	80059b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68da      	ldr	r2, [r3, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	@ 0x28
 8004a94:	af02      	add	r7, sp, #8
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	603b      	str	r3, [r7, #0]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d175      	bne.n	8004b9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_UART_Transmit+0x2c>
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e06e      	b.n	8004b9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2221      	movs	r2, #33	@ 0x21
 8004aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ace:	f7fd fd65 	bl	800259c <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	88fa      	ldrh	r2, [r7, #6]
 8004ad8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	88fa      	ldrh	r2, [r7, #6]
 8004ade:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae8:	d108      	bne.n	8004afc <HAL_UART_Transmit+0x6c>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d104      	bne.n	8004afc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	e003      	b.n	8004b04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b04:	e02e      	b.n	8004b64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	2180      	movs	r1, #128	@ 0x80
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f000 fc93 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b24:	2303      	movs	r3, #3
 8004b26:	e03a      	b.n	8004b9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10b      	bne.n	8004b46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	3302      	adds	r3, #2
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	e007      	b.n	8004b56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3301      	adds	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1cb      	bne.n	8004b06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2140      	movs	r1, #64	@ 0x40
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f000 fc5f 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e006      	b.n	8004b9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d121      	bne.n	8004c04 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit_IT+0x26>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e01a      	b.n	8004c06 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	88fa      	ldrh	r2, [r7, #6]
 8004bda:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	88fa      	ldrh	r2, [r7, #6]
 8004be0:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2221      	movs	r2, #33	@ 0x21
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68da      	ldr	r2, [r3, #12]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bfe:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b08c      	sub	sp, #48	@ 0x30
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d14a      	bne.n	8004cc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e043      	b.n	8004cc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004c48:	88fb      	ldrh	r3, [r7, #6]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68b9      	ldr	r1, [r7, #8]
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fc4e 	bl	80054f0 <UART_Start_Receive_DMA>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d12c      	bne.n	8004cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d125      	bne.n	8004cb6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	e853 3f00 	ldrex	r3, [r3]
 8004c8e:	617b      	str	r3, [r7, #20]
   return(result);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f043 0310 	orr.w	r3, r3, #16
 8004c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	330c      	adds	r3, #12
 8004c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ca0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca8:	e841 2300 	strex	r3, r2, [r1]
 8004cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1e5      	bne.n	8004c80 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004cb4:	e002      	b.n	8004cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8004cbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004cc0:	e000      	b.n	8004cc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	@ 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b0ba      	sub	sp, #232	@ 0xe8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10f      	bne.n	8004d32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_UART_IRQHandler+0x66>
 8004d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fd81 	bl	8005832 <UART_Receive_IT>
      return;
 8004d30:	e25b      	b.n	80051ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80de 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x22c>
 8004d3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d106      	bne.n	8004d56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d4c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80d1 	beq.w	8004ef8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00b      	beq.n	8004d7a <HAL_UART_IRQHandler+0xae>
 8004d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d72:	f043 0201 	orr.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_UART_IRQHandler+0xd2>
 8004d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d005      	beq.n	8004d9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f043 0202 	orr.w	r2, r3, #2
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xf6>
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f043 0204 	orr.w	r2, r3, #4
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc6:	f003 0308 	and.w	r3, r3, #8
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d011      	beq.n	8004df2 <HAL_UART_IRQHandler+0x126>
 8004dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dd2:	f003 0320 	and.w	r3, r3, #32
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	f043 0208 	orr.w	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 81f2 	beq.w	80051e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <HAL_UART_IRQHandler+0x14e>
 8004e08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fd0c 	bl	8005832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	bf0c      	ite	eq
 8004e28:	2301      	moveq	r3, #1
 8004e2a:	2300      	movne	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	f003 0308 	and.w	r3, r3, #8
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d103      	bne.n	8004e46 <HAL_UART_IRQHandler+0x17a>
 8004e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d04f      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fc14 	bl	8005674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e56:	2b40      	cmp	r3, #64	@ 0x40
 8004e58:	d141      	bne.n	8004ede <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3314      	adds	r3, #20
 8004e60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3314      	adds	r3, #20
 8004e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1d9      	bne.n	8004e5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d013      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80050ac <HAL_UART_IRQHandler+0x3e0>)
 8004eb4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fd fe26 	bl	8002b0c <HAL_DMA_Abort_IT>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed4:	e00e      	b.n	8004ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f9a8 	bl	800522c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004edc:	e00a      	b.n	8004ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f9a4 	bl	800522c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee4:	e006      	b.n	8004ef4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f9a0 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ef2:	e175      	b.n	80051e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	bf00      	nop
    return;
 8004ef6:	e173      	b.n	80051e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	f040 814f 	bne.w	80051a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8148 	beq.w	80051a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 8141 	beq.w	80051a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	60bb      	str	r3, [r7, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3e:	2b40      	cmp	r3, #64	@ 0x40
 8004f40:	f040 80b6 	bne.w	80050b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8145 	beq.w	80051e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f62:	429a      	cmp	r2, r3
 8004f64:	f080 813e 	bcs.w	80051e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f6e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7a:	f000 8088 	beq.w	800508e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004faa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004fae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004fb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004fba:	e841 2300 	strex	r3, r2, [r1]
 8004fbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1d9      	bne.n	8004f7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3314      	adds	r3, #20
 8004fd0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004fda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fdc:	f023 0301 	bic.w	r3, r3, #1
 8004fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3314      	adds	r3, #20
 8004fea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ff2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ff6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005000:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e1      	bne.n	8004fca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005018:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800501c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800502a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800502c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e3      	bne.n	8005006 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800505c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800505e:	f023 0310 	bic.w	r3, r3, #16
 8005062:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005070:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005072:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005078:	e841 2300 	strex	r3, r2, [r1]
 800507c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800507e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005080:	2b00      	cmp	r3, #0
 8005082:	d1e3      	bne.n	800504c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd fccf 	bl	8002a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800509c:	b29b      	uxth	r3, r3
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc fb17 	bl	80016d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050aa:	e09b      	b.n	80051e4 <HAL_UART_IRQHandler+0x518>
 80050ac:	0800573b 	.word	0x0800573b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 808e 	beq.w	80051e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80050cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8089 	beq.w	80051e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80050fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005100:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	623b      	str	r3, [r7, #32]
   return(result);
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3314      	adds	r3, #20
 800512e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005132:	633a      	str	r2, [r7, #48]	@ 0x30
 8005134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e3      	bne.n	800510e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005178:	61fa      	str	r2, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	617b      	str	r3, [r7, #20]
   return(result);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e3      	bne.n	8005154 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005196:	4619      	mov	r1, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f7fc fa9d 	bl	80016d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800519e:	e023      	b.n	80051e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <HAL_UART_IRQHandler+0x4f4>
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fad2 	bl	8005762 <UART_Transmit_IT>
    return;
 80051be:	e014      	b.n	80051ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00e      	beq.n	80051ea <HAL_UART_IRQHandler+0x51e>
 80051cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb12 	bl	8005802 <UART_EndTransmit_IT>
    return;
 80051de:	e004      	b.n	80051ea <HAL_UART_IRQHandler+0x51e>
    return;
 80051e0:	bf00      	nop
 80051e2:	e002      	b.n	80051ea <HAL_UART_IRQHandler+0x51e>
      return;
 80051e4:	bf00      	nop
 80051e6:	e000      	b.n	80051ea <HAL_UART_IRQHandler+0x51e>
      return;
 80051e8:	bf00      	nop
  }
}
 80051ea:	37e8      	adds	r7, #232	@ 0xe8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b09c      	sub	sp, #112	@ 0x70
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800524c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005258:	2b00      	cmp	r3, #0
 800525a:	d172      	bne.n	8005342 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800525c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800525e:	2200      	movs	r2, #0
 8005260:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	330c      	adds	r3, #12
 8005268:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005272:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005278:	66bb      	str	r3, [r7, #104]	@ 0x68
 800527a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	330c      	adds	r3, #12
 8005280:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005282:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005284:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e5      	bne.n	8005262 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3314      	adds	r3, #20
 800529c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80052a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a8:	f023 0301 	bic.w	r3, r3, #1
 80052ac:	667b      	str	r3, [r7, #100]	@ 0x64
 80052ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3314      	adds	r3, #20
 80052b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80052b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80052b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80052bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80052c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	623b      	str	r3, [r7, #32]
   return(result);
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80052e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80052ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005300:	2220      	movs	r2, #32
 8005302:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	2b01      	cmp	r3, #1
 800530c:	d119      	bne.n	8005342 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800530e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	330c      	adds	r3, #12
 8005314:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	60fb      	str	r3, [r7, #12]
   return(result);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	330c      	adds	r3, #12
 800532c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800532e:	61fa      	str	r2, [r7, #28]
 8005330:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	69b9      	ldr	r1, [r7, #24]
 8005334:	69fa      	ldr	r2, [r7, #28]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	617b      	str	r3, [r7, #20]
   return(result);
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e5      	bne.n	800530e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005344:	2200      	movs	r2, #0
 8005346:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d106      	bne.n	800535e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005350:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005352:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005354:	4619      	mov	r1, r3
 8005356:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005358:	f7fc f9be 	bl	80016d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800535c:	e002      	b.n	8005364 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800535e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005360:	f7ff ff50 	bl	8005204 <HAL_UART_RxCpltCallback>
}
 8005364:	bf00      	nop
 8005366:	3770      	adds	r7, #112	@ 0x70
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005384:	2b01      	cmp	r3, #1
 8005386:	d108      	bne.n	800539a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800538c:	085b      	lsrs	r3, r3, #1
 800538e:	b29b      	uxth	r3, r3
 8005390:	4619      	mov	r1, r3
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7fc f9a0 	bl	80016d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005398:	e002      	b.n	80053a0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff ff3c 	bl	8005218 <HAL_UART_RxHalfCpltCallback>
}
 80053a0:	bf00      	nop
 80053a2:	3710      	adds	r7, #16
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c4:	2b80      	cmp	r3, #128	@ 0x80
 80053c6:	bf0c      	ite	eq
 80053c8:	2301      	moveq	r3, #1
 80053ca:	2300      	movne	r3, #0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b21      	cmp	r3, #33	@ 0x21
 80053da:	d108      	bne.n	80053ee <UART_DMAError+0x46>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d005      	beq.n	80053ee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2200      	movs	r2, #0
 80053e6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80053e8:	68b8      	ldr	r0, [r7, #8]
 80053ea:	f000 f91b 	bl	8005624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f8:	2b40      	cmp	r3, #64	@ 0x40
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b22      	cmp	r3, #34	@ 0x22
 800540e:	d108      	bne.n	8005422 <UART_DMAError+0x7a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2200      	movs	r2, #0
 800541a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800541c:	68b8      	ldr	r0, [r7, #8]
 800541e:	f000 f929 	bl	8005674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005426:	f043 0210 	orr.w	r2, r3, #16
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800542e:	68b8      	ldr	r0, [r7, #8]
 8005430:	f7ff fefc 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005434:	bf00      	nop
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	e03b      	b.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d037      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fd f8a1 	bl	800259c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	6a3a      	ldr	r2, [r7, #32]
 8005462:	429a      	cmp	r2, r3
 8005464:	d302      	bcc.n	800546c <UART_WaitOnFlagUntilTimeout+0x30>
 8005466:	6a3b      	ldr	r3, [r7, #32]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e03a      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b80      	cmp	r3, #128	@ 0x80
 8005482:	d020      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d01d      	beq.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d116      	bne.n	80054c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005498:	2300      	movs	r3, #0
 800549a:	617b      	str	r3, [r7, #20]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f8e0 	bl	8005674 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2208      	movs	r2, #8
 80054b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e00f      	b.n	80054e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4013      	ands	r3, r2
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d0b4      	beq.n	800544e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b098      	sub	sp, #96	@ 0x60
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2222      	movs	r2, #34	@ 0x22
 8005514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551c:	4a3e      	ldr	r2, [pc, #248]	@ (8005618 <UART_Start_Receive_DMA+0x128>)
 800551e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	4a3d      	ldr	r2, [pc, #244]	@ (800561c <UART_Start_Receive_DMA+0x12c>)
 8005526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	4a3c      	ldr	r2, [pc, #240]	@ (8005620 <UART_Start_Receive_DMA+0x130>)
 800552e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005534:	2200      	movs	r2, #0
 8005536:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005538:	f107 0308 	add.w	r3, r7, #8
 800553c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	f7fd fa14 	bl	800297c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005592:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005594:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80055a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	e853 3f00 	ldrex	r3, [r3]
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3314      	adds	r3, #20
 80055c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80055cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ce:	e841 2300 	strex	r3, r2, [r1]
 80055d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1e5      	bne.n	80055a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	3314      	adds	r3, #20
 80055e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	e853 3f00 	ldrex	r3, [r3]
 80055e8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3314      	adds	r3, #20
 80055f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80055fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fe:	6a39      	ldr	r1, [r7, #32]
 8005600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	61fb      	str	r3, [r7, #28]
   return(result);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1e5      	bne.n	80055da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3760      	adds	r7, #96	@ 0x60
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08005241 	.word	0x08005241
 800561c:	0800536d 	.word	0x0800536d
 8005620:	080053a9 	.word	0x080053a9

08005624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	330c      	adds	r3, #12
 8005632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	60bb      	str	r3, [r7, #8]
   return(result);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	330c      	adds	r3, #12
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	61ba      	str	r2, [r7, #24]
 800564e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6979      	ldr	r1, [r7, #20]
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	613b      	str	r3, [r7, #16]
   return(result);
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005668:	bf00      	nop
 800566a:	3724      	adds	r7, #36	@ 0x24
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b095      	sub	sp, #84	@ 0x54
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	330c      	adds	r3, #12
 800569a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800569c:	643a      	str	r2, [r7, #64]	@ 0x40
 800569e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056a4:	e841 2300 	strex	r3, r2, [r1]
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e5      	bne.n	800567c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	3314      	adds	r3, #20
 80056b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	f023 0301 	bic.w	r3, r3, #1
 80056c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d119      	bne.n	8005720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e853 3f00 	ldrex	r3, [r3]
 80056fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	f023 0310 	bic.w	r3, r3, #16
 8005702:	647b      	str	r3, [r7, #68]	@ 0x44
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	330c      	adds	r3, #12
 800570a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800570c:	61ba      	str	r2, [r7, #24]
 800570e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	6979      	ldr	r1, [r7, #20]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	e841 2300 	strex	r3, r2, [r1]
 8005718:	613b      	str	r3, [r7, #16]
   return(result);
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e5      	bne.n	80056ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800572e:	bf00      	nop
 8005730:	3754      	adds	r7, #84	@ 0x54
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2200      	movs	r2, #0
 800574c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fd69 	bl	800522c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b21      	cmp	r3, #33	@ 0x21
 8005774:	d13e      	bne.n	80057f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577e:	d114      	bne.n	80057aa <UART_Transmit_IT+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d110      	bne.n	80057aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	621a      	str	r2, [r3, #32]
 80057a8:	e008      	b.n	80057bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6211      	str	r1, [r2, #32]
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff fce4 	bl	80051f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08c      	sub	sp, #48	@ 0x30
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b22      	cmp	r3, #34	@ 0x22
 8005844:	f040 80ae 	bne.w	80059a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005850:	d117      	bne.n	8005882 <UART_Receive_IT+0x50>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d113      	bne.n	8005882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585a:	2300      	movs	r3, #0
 800585c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	b29b      	uxth	r3, r3
 800586c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005870:	b29a      	uxth	r2, r3
 8005872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587a:	1c9a      	adds	r2, r3, #2
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005880:	e026      	b.n	80058d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005894:	d007      	beq.n	80058a6 <UART_Receive_IT+0x74>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <UART_Receive_IT+0x82>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e008      	b.n	80058c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	b29b      	uxth	r3, r3
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d15d      	bne.n	80059a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 0220 	bic.w	r2, r2, #32
 80058f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695a      	ldr	r2, [r3, #20]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 0201 	bic.w	r2, r2, #1
 8005912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005926:	2b01      	cmp	r3, #1
 8005928:	d135      	bne.n	8005996 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	613b      	str	r3, [r7, #16]
   return(result);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	627b      	str	r3, [r7, #36]	@ 0x24
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005950:	623a      	str	r2, [r7, #32]
 8005952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	69f9      	ldr	r1, [r7, #28]
 8005956:	6a3a      	ldr	r2, [r7, #32]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	61bb      	str	r3, [r7, #24]
   return(result);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0310 	and.w	r3, r3, #16
 800596e:	2b10      	cmp	r3, #16
 8005970:	d10a      	bne.n	8005988 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	60fb      	str	r3, [r7, #12]
 8005986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7fb fea2 	bl	80016d8 <HAL_UARTEx_RxEventCallback>
 8005994:	e002      	b.n	800599c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fc34 	bl	8005204 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e002      	b.n	80059a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3730      	adds	r7, #48	@ 0x30
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b4:	b0c0      	sub	sp, #256	@ 0x100
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	ea40 0301 	orr.w	r3, r0, r1
 80059d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a08:	f021 010c 	bic.w	r1, r1, #12
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a16:	430b      	orrs	r3, r1
 8005a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2a:	6999      	ldr	r1, [r3, #24]
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	ea40 0301 	orr.w	r3, r0, r1
 8005a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c7c <UART_SetConfig+0x2cc>)
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d005      	beq.n	8005a50 <UART_SetConfig+0xa0>
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c80 <UART_SetConfig+0x2d0>)
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d104      	bne.n	8005a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fe f92e 	bl	8003cb0 <HAL_RCC_GetPCLK2Freq>
 8005a54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a58:	e003      	b.n	8005a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fe f915 	bl	8003c88 <HAL_RCC_GetPCLK1Freq>
 8005a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a6c:	f040 810c 	bne.w	8005c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a82:	4622      	mov	r2, r4
 8005a84:	462b      	mov	r3, r5
 8005a86:	1891      	adds	r1, r2, r2
 8005a88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a92:	4621      	mov	r1, r4
 8005a94:	eb12 0801 	adds.w	r8, r2, r1
 8005a98:	4629      	mov	r1, r5
 8005a9a:	eb43 0901 	adc.w	r9, r3, r1
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab2:	4690      	mov	r8, r2
 8005ab4:	4699      	mov	r9, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	eb18 0303 	adds.w	r3, r8, r3
 8005abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ac0:	462b      	mov	r3, r5
 8005ac2:	eb49 0303 	adc.w	r3, r9, r3
 8005ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ade:	460b      	mov	r3, r1
 8005ae0:	18db      	adds	r3, r3, r3
 8005ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	eb42 0303 	adc.w	r3, r2, r3
 8005aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8005aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005af4:	f7fb f8d0 	bl	8000c98 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4b61      	ldr	r3, [pc, #388]	@ (8005c84 <UART_SetConfig+0x2d4>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	011c      	lsls	r4, r3, #4
 8005b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	1891      	adds	r1, r2, r2
 8005b1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b20:	415b      	adcs	r3, r3
 8005b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b28:	4641      	mov	r1, r8
 8005b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b2e:	4649      	mov	r1, r9
 8005b30:	eb43 0b01 	adc.w	fp, r3, r1
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	f04f 0300 	mov.w	r3, #0
 8005b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b48:	4692      	mov	sl, r2
 8005b4a:	469b      	mov	fp, r3
 8005b4c:	4643      	mov	r3, r8
 8005b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b56:	464b      	mov	r3, r9
 8005b58:	eb4b 0303 	adc.w	r3, fp, r3
 8005b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b74:	460b      	mov	r3, r1
 8005b76:	18db      	adds	r3, r3, r3
 8005b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	eb42 0303 	adc.w	r3, r2, r3
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b8a:	f7fb f885 	bl	8000c98 <__aeabi_uldivmod>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4611      	mov	r1, r2
 8005b94:	4b3b      	ldr	r3, [pc, #236]	@ (8005c84 <UART_SetConfig+0x2d4>)
 8005b96:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2264      	movs	r2, #100	@ 0x64
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	1acb      	subs	r3, r1, r3
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005baa:	4b36      	ldr	r3, [pc, #216]	@ (8005c84 <UART_SetConfig+0x2d4>)
 8005bac:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	005b      	lsls	r3, r3, #1
 8005bb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bb8:	441c      	add	r4, r3
 8005bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bcc:	4642      	mov	r2, r8
 8005bce:	464b      	mov	r3, r9
 8005bd0:	1891      	adds	r1, r2, r2
 8005bd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bd4:	415b      	adcs	r3, r3
 8005bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bdc:	4641      	mov	r1, r8
 8005bde:	1851      	adds	r1, r2, r1
 8005be0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005be2:	4649      	mov	r1, r9
 8005be4:	414b      	adcs	r3, r1
 8005be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005be8:	f04f 0200 	mov.w	r2, #0
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	00cb      	lsls	r3, r1, #3
 8005bf8:	4651      	mov	r1, sl
 8005bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bfe:	4651      	mov	r1, sl
 8005c00:	00ca      	lsls	r2, r1, #3
 8005c02:	4610      	mov	r0, r2
 8005c04:	4619      	mov	r1, r3
 8005c06:	4603      	mov	r3, r0
 8005c08:	4642      	mov	r2, r8
 8005c0a:	189b      	adds	r3, r3, r2
 8005c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c10:	464b      	mov	r3, r9
 8005c12:	460a      	mov	r2, r1
 8005c14:	eb42 0303 	adc.w	r3, r2, r3
 8005c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c30:	460b      	mov	r3, r1
 8005c32:	18db      	adds	r3, r3, r3
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c36:	4613      	mov	r3, r2
 8005c38:	eb42 0303 	adc.w	r3, r2, r3
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c46:	f7fb f827 	bl	8000c98 <__aeabi_uldivmod>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <UART_SetConfig+0x2d4>)
 8005c50:	fba3 1302 	umull	r1, r3, r3, r2
 8005c54:	095b      	lsrs	r3, r3, #5
 8005c56:	2164      	movs	r1, #100	@ 0x64
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	3332      	adds	r3, #50	@ 0x32
 8005c62:	4a08      	ldr	r2, [pc, #32]	@ (8005c84 <UART_SetConfig+0x2d4>)
 8005c64:	fba2 2303 	umull	r2, r3, r2, r3
 8005c68:	095b      	lsrs	r3, r3, #5
 8005c6a:	f003 0207 	and.w	r2, r3, #7
 8005c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4422      	add	r2, r4
 8005c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c78:	e106      	b.n	8005e88 <UART_SetConfig+0x4d8>
 8005c7a:	bf00      	nop
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	40011400 	.word	0x40011400
 8005c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c9a:	4642      	mov	r2, r8
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	1891      	adds	r1, r2, r2
 8005ca0:	6239      	str	r1, [r7, #32]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005caa:	4641      	mov	r1, r8
 8005cac:	1854      	adds	r4, r2, r1
 8005cae:	4649      	mov	r1, r9
 8005cb0:	eb43 0501 	adc.w	r5, r3, r1
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	f04f 0300 	mov.w	r3, #0
 8005cbc:	00eb      	lsls	r3, r5, #3
 8005cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc2:	00e2      	lsls	r2, r4, #3
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	461d      	mov	r5, r3
 8005cc8:	4643      	mov	r3, r8
 8005cca:	18e3      	adds	r3, r4, r3
 8005ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	eb45 0303 	adc.w	r3, r5, r3
 8005cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	008b      	lsls	r3, r1, #2
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d00:	4621      	mov	r1, r4
 8005d02:	008a      	lsls	r2, r1, #2
 8005d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d08:	f7fa ffc6 	bl	8000c98 <__aeabi_uldivmod>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4b60      	ldr	r3, [pc, #384]	@ (8005e94 <UART_SetConfig+0x4e4>)
 8005d12:	fba3 2302 	umull	r2, r3, r3, r2
 8005d16:	095b      	lsrs	r3, r3, #5
 8005d18:	011c      	lsls	r4, r3, #4
 8005d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d2c:	4642      	mov	r2, r8
 8005d2e:	464b      	mov	r3, r9
 8005d30:	1891      	adds	r1, r2, r2
 8005d32:	61b9      	str	r1, [r7, #24]
 8005d34:	415b      	adcs	r3, r3
 8005d36:	61fb      	str	r3, [r7, #28]
 8005d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	1851      	adds	r1, r2, r1
 8005d40:	6139      	str	r1, [r7, #16]
 8005d42:	4649      	mov	r1, r9
 8005d44:	414b      	adcs	r3, r1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	f04f 0300 	mov.w	r3, #0
 8005d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d54:	4659      	mov	r1, fp
 8005d56:	00cb      	lsls	r3, r1, #3
 8005d58:	4651      	mov	r1, sl
 8005d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d5e:	4651      	mov	r1, sl
 8005d60:	00ca      	lsls	r2, r1, #3
 8005d62:	4610      	mov	r0, r2
 8005d64:	4619      	mov	r1, r3
 8005d66:	4603      	mov	r3, r0
 8005d68:	4642      	mov	r2, r8
 8005d6a:	189b      	adds	r3, r3, r2
 8005d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d70:	464b      	mov	r3, r9
 8005d72:	460a      	mov	r2, r1
 8005d74:	eb42 0303 	adc.w	r3, r2, r3
 8005d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d94:	4649      	mov	r1, r9
 8005d96:	008b      	lsls	r3, r1, #2
 8005d98:	4641      	mov	r1, r8
 8005d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d9e:	4641      	mov	r1, r8
 8005da0:	008a      	lsls	r2, r1, #2
 8005da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005da6:	f7fa ff77 	bl	8000c98 <__aeabi_uldivmod>
 8005daa:	4602      	mov	r2, r0
 8005dac:	460b      	mov	r3, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	4b38      	ldr	r3, [pc, #224]	@ (8005e94 <UART_SetConfig+0x4e4>)
 8005db2:	fba3 2301 	umull	r2, r3, r3, r1
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	2264      	movs	r2, #100	@ 0x64
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	1acb      	subs	r3, r1, r3
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	3332      	adds	r3, #50	@ 0x32
 8005dc4:	4a33      	ldr	r2, [pc, #204]	@ (8005e94 <UART_SetConfig+0x4e4>)
 8005dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dca:	095b      	lsrs	r3, r3, #5
 8005dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd0:	441c      	add	r4, r3
 8005dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dda:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ddc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005de0:	4642      	mov	r2, r8
 8005de2:	464b      	mov	r3, r9
 8005de4:	1891      	adds	r1, r2, r2
 8005de6:	60b9      	str	r1, [r7, #8]
 8005de8:	415b      	adcs	r3, r3
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df0:	4641      	mov	r1, r8
 8005df2:	1851      	adds	r1, r2, r1
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	4649      	mov	r1, r9
 8005df8:	414b      	adcs	r3, r1
 8005dfa:	607b      	str	r3, [r7, #4]
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	f04f 0300 	mov.w	r3, #0
 8005e04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e08:	4659      	mov	r1, fp
 8005e0a:	00cb      	lsls	r3, r1, #3
 8005e0c:	4651      	mov	r1, sl
 8005e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e12:	4651      	mov	r1, sl
 8005e14:	00ca      	lsls	r2, r1, #3
 8005e16:	4610      	mov	r0, r2
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4642      	mov	r2, r8
 8005e1e:	189b      	adds	r3, r3, r2
 8005e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e22:	464b      	mov	r3, r9
 8005e24:	460a      	mov	r2, r1
 8005e26:	eb42 0303 	adc.w	r3, r2, r3
 8005e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e36:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e44:	4649      	mov	r1, r9
 8005e46:	008b      	lsls	r3, r1, #2
 8005e48:	4641      	mov	r1, r8
 8005e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4e:	4641      	mov	r1, r8
 8005e50:	008a      	lsls	r2, r1, #2
 8005e52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e56:	f7fa ff1f 	bl	8000c98 <__aeabi_uldivmod>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e94 <UART_SetConfig+0x4e4>)
 8005e60:	fba3 1302 	umull	r1, r3, r3, r2
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	2164      	movs	r1, #100	@ 0x64
 8005e68:	fb01 f303 	mul.w	r3, r1, r3
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	011b      	lsls	r3, r3, #4
 8005e70:	3332      	adds	r3, #50	@ 0x32
 8005e72:	4a08      	ldr	r2, [pc, #32]	@ (8005e94 <UART_SetConfig+0x4e4>)
 8005e74:	fba2 2303 	umull	r2, r3, r2, r3
 8005e78:	095b      	lsrs	r3, r3, #5
 8005e7a:	f003 020f 	and.w	r2, r3, #15
 8005e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4422      	add	r2, r4
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e94:	51eb851f 	.word	0x51eb851f

08005e98 <std>:
 8005e98:	2300      	movs	r3, #0
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea6:	6083      	str	r3, [r0, #8]
 8005ea8:	8181      	strh	r1, [r0, #12]
 8005eaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005eac:	81c2      	strh	r2, [r0, #14]
 8005eae:	6183      	str	r3, [r0, #24]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	305c      	adds	r0, #92	@ 0x5c
 8005eb6:	f000 f940 	bl	800613a <memset>
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x58>)
 8005ebc:	6223      	str	r3, [r4, #32]
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <std+0x5c>)
 8005ec0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <std+0x60>)
 8005ec4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <std+0x64>)
 8005ec8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <std+0x68>)
 8005ecc:	61e4      	str	r4, [r4, #28]
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d006      	beq.n	8005ee0 <std+0x48>
 8005ed2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ed6:	4294      	cmp	r4, r2
 8005ed8:	d002      	beq.n	8005ee0 <std+0x48>
 8005eda:	33d0      	adds	r3, #208	@ 0xd0
 8005edc:	429c      	cmp	r4, r3
 8005ede:	d105      	bne.n	8005eec <std+0x54>
 8005ee0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f000 b9a0 	b.w	800622c <__retarget_lock_init_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	080060b1 	.word	0x080060b1
 8005ef4:	080060d7 	.word	0x080060d7
 8005ef8:	0800610f 	.word	0x0800610f
 8005efc:	08006133 	.word	0x08006133
 8005f00:	20000988 	.word	0x20000988

08005f04 <stdio_exit_handler>:
 8005f04:	4a02      	ldr	r2, [pc, #8]	@ (8005f10 <stdio_exit_handler+0xc>)
 8005f06:	4903      	ldr	r1, [pc, #12]	@ (8005f14 <stdio_exit_handler+0x10>)
 8005f08:	4803      	ldr	r0, [pc, #12]	@ (8005f18 <stdio_exit_handler+0x14>)
 8005f0a:	f000 b869 	b.w	8005fe0 <_fwalk_sglue>
 8005f0e:	bf00      	nop
 8005f10:	2000000c 	.word	0x2000000c
 8005f14:	08008fc9 	.word	0x08008fc9
 8005f18:	20000020 	.word	0x20000020

08005f1c <cleanup_stdio>:
 8005f1c:	6841      	ldr	r1, [r0, #4]
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <cleanup_stdio+0x34>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	d001      	beq.n	8005f2c <cleanup_stdio+0x10>
 8005f28:	f003 f84e 	bl	8008fc8 <_fclose_r>
 8005f2c:	68a1      	ldr	r1, [r4, #8]
 8005f2e:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <cleanup_stdio+0x38>)
 8005f30:	4299      	cmp	r1, r3
 8005f32:	d002      	beq.n	8005f3a <cleanup_stdio+0x1e>
 8005f34:	4620      	mov	r0, r4
 8005f36:	f003 f847 	bl	8008fc8 <_fclose_r>
 8005f3a:	68e1      	ldr	r1, [r4, #12]
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <cleanup_stdio+0x3c>)
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	d004      	beq.n	8005f4c <cleanup_stdio+0x30>
 8005f42:	4620      	mov	r0, r4
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f003 b83e 	b.w	8008fc8 <_fclose_r>
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000988 	.word	0x20000988
 8005f54:	200009f0 	.word	0x200009f0
 8005f58:	20000a58 	.word	0x20000a58

08005f5c <global_stdio_init.part.0>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <global_stdio_init.part.0+0x30>)
 8005f60:	4c0b      	ldr	r4, [pc, #44]	@ (8005f90 <global_stdio_init.part.0+0x34>)
 8005f62:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <global_stdio_init.part.0+0x38>)
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	f7ff ff94 	bl	8005e98 <std>
 8005f70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f74:	2201      	movs	r2, #1
 8005f76:	2109      	movs	r1, #9
 8005f78:	f7ff ff8e 	bl	8005e98 <std>
 8005f7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f80:	2202      	movs	r2, #2
 8005f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f86:	2112      	movs	r1, #18
 8005f88:	f7ff bf86 	b.w	8005e98 <std>
 8005f8c:	20000ac0 	.word	0x20000ac0
 8005f90:	20000988 	.word	0x20000988
 8005f94:	08005f05 	.word	0x08005f05

08005f98 <__sfp_lock_acquire>:
 8005f98:	4801      	ldr	r0, [pc, #4]	@ (8005fa0 <__sfp_lock_acquire+0x8>)
 8005f9a:	f000 b949 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000aca 	.word	0x20000aca

08005fa4 <__sfp_lock_release>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	@ (8005fac <__sfp_lock_release+0x8>)
 8005fa6:	f000 b944 	b.w	8006232 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000aca 	.word	0x20000aca

08005fb0 <__sinit>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	f7ff fff0 	bl	8005f98 <__sfp_lock_acquire>
 8005fb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fba:	b11b      	cbz	r3, 8005fc4 <__sinit+0x14>
 8005fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc0:	f7ff bff0 	b.w	8005fa4 <__sfp_lock_release>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <__sinit+0x28>)
 8005fc6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005fc8:	4b04      	ldr	r3, [pc, #16]	@ (8005fdc <__sinit+0x2c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f5      	bne.n	8005fbc <__sinit+0xc>
 8005fd0:	f7ff ffc4 	bl	8005f5c <global_stdio_init.part.0>
 8005fd4:	e7f2      	b.n	8005fbc <__sinit+0xc>
 8005fd6:	bf00      	nop
 8005fd8:	08005f1d 	.word	0x08005f1d
 8005fdc:	20000ac0 	.word	0x20000ac0

08005fe0 <_fwalk_sglue>:
 8005fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	4688      	mov	r8, r1
 8005fe8:	4614      	mov	r4, r2
 8005fea:	2600      	movs	r6, #0
 8005fec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ff0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ff4:	d505      	bpl.n	8006002 <_fwalk_sglue+0x22>
 8005ff6:	6824      	ldr	r4, [r4, #0]
 8005ff8:	2c00      	cmp	r4, #0
 8005ffa:	d1f7      	bne.n	8005fec <_fwalk_sglue+0xc>
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006002:	89ab      	ldrh	r3, [r5, #12]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d907      	bls.n	8006018 <_fwalk_sglue+0x38>
 8006008:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800600c:	3301      	adds	r3, #1
 800600e:	d003      	beq.n	8006018 <_fwalk_sglue+0x38>
 8006010:	4629      	mov	r1, r5
 8006012:	4638      	mov	r0, r7
 8006014:	47c0      	blx	r8
 8006016:	4306      	orrs	r6, r0
 8006018:	3568      	adds	r5, #104	@ 0x68
 800601a:	e7e9      	b.n	8005ff0 <_fwalk_sglue+0x10>

0800601c <sprintf>:
 800601c:	b40e      	push	{r1, r2, r3}
 800601e:	b500      	push	{lr}
 8006020:	b09c      	sub	sp, #112	@ 0x70
 8006022:	ab1d      	add	r3, sp, #116	@ 0x74
 8006024:	9002      	str	r0, [sp, #8]
 8006026:	9006      	str	r0, [sp, #24]
 8006028:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800602c:	4809      	ldr	r0, [pc, #36]	@ (8006054 <sprintf+0x38>)
 800602e:	9107      	str	r1, [sp, #28]
 8006030:	9104      	str	r1, [sp, #16]
 8006032:	4909      	ldr	r1, [pc, #36]	@ (8006058 <sprintf+0x3c>)
 8006034:	f853 2b04 	ldr.w	r2, [r3], #4
 8006038:	9105      	str	r1, [sp, #20]
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	9301      	str	r3, [sp, #4]
 800603e:	a902      	add	r1, sp, #8
 8006040:	f000 fc72 	bl	8006928 <_svfprintf_r>
 8006044:	9b02      	ldr	r3, [sp, #8]
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	b01c      	add	sp, #112	@ 0x70
 800604c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006050:	b003      	add	sp, #12
 8006052:	4770      	bx	lr
 8006054:	20000018 	.word	0x20000018
 8006058:	ffff0208 	.word	0xffff0208

0800605c <sscanf>:
 800605c:	b40e      	push	{r1, r2, r3}
 800605e:	b530      	push	{r4, r5, lr}
 8006060:	b09c      	sub	sp, #112	@ 0x70
 8006062:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006064:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006068:	f854 5b04 	ldr.w	r5, [r4], #4
 800606c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	9006      	str	r0, [sp, #24]
 8006074:	f7fa f8b4 	bl	80001e0 <strlen>
 8006078:	4b0b      	ldr	r3, [pc, #44]	@ (80060a8 <sscanf+0x4c>)
 800607a:	9003      	str	r0, [sp, #12]
 800607c:	9007      	str	r0, [sp, #28]
 800607e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006080:	480a      	ldr	r0, [pc, #40]	@ (80060ac <sscanf+0x50>)
 8006082:	9401      	str	r4, [sp, #4]
 8006084:	2300      	movs	r3, #0
 8006086:	930e      	str	r3, [sp, #56]	@ 0x38
 8006088:	9313      	str	r3, [sp, #76]	@ 0x4c
 800608a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800608e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006092:	462a      	mov	r2, r5
 8006094:	4623      	mov	r3, r4
 8006096:	a902      	add	r1, sp, #8
 8006098:	6800      	ldr	r0, [r0, #0]
 800609a:	f001 fe23 	bl	8007ce4 <__ssvfscanf_r>
 800609e:	b01c      	add	sp, #112	@ 0x70
 80060a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060a4:	b003      	add	sp, #12
 80060a6:	4770      	bx	lr
 80060a8:	080060d3 	.word	0x080060d3
 80060ac:	20000018 	.word	0x20000018

080060b0 <__sread>:
 80060b0:	b510      	push	{r4, lr}
 80060b2:	460c      	mov	r4, r1
 80060b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b8:	f000 f86a 	bl	8006190 <_read_r>
 80060bc:	2800      	cmp	r0, #0
 80060be:	bfab      	itete	ge
 80060c0:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80060c2:	89a3      	ldrhlt	r3, [r4, #12]
 80060c4:	181b      	addge	r3, r3, r0
 80060c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060ca:	bfac      	ite	ge
 80060cc:	6523      	strge	r3, [r4, #80]	@ 0x50
 80060ce:	81a3      	strhlt	r3, [r4, #12]
 80060d0:	bd10      	pop	{r4, pc}

080060d2 <__seofread>:
 80060d2:	2000      	movs	r0, #0
 80060d4:	4770      	bx	lr

080060d6 <__swrite>:
 80060d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060da:	461f      	mov	r7, r3
 80060dc:	898b      	ldrh	r3, [r1, #12]
 80060de:	05db      	lsls	r3, r3, #23
 80060e0:	4605      	mov	r5, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	4616      	mov	r6, r2
 80060e6:	d505      	bpl.n	80060f4 <__swrite+0x1e>
 80060e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ec:	2302      	movs	r3, #2
 80060ee:	2200      	movs	r2, #0
 80060f0:	f000 f83c 	bl	800616c <_lseek_r>
 80060f4:	89a3      	ldrh	r3, [r4, #12]
 80060f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060fe:	81a3      	strh	r3, [r4, #12]
 8006100:	4632      	mov	r2, r6
 8006102:	463b      	mov	r3, r7
 8006104:	4628      	mov	r0, r5
 8006106:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610a:	f000 b853 	b.w	80061b4 <_write_r>

0800610e <__sseek>:
 800610e:	b510      	push	{r4, lr}
 8006110:	460c      	mov	r4, r1
 8006112:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006116:	f000 f829 	bl	800616c <_lseek_r>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	89a3      	ldrh	r3, [r4, #12]
 800611e:	bf15      	itete	ne
 8006120:	6520      	strne	r0, [r4, #80]	@ 0x50
 8006122:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006126:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800612a:	81a3      	strheq	r3, [r4, #12]
 800612c:	bf18      	it	ne
 800612e:	81a3      	strhne	r3, [r4, #12]
 8006130:	bd10      	pop	{r4, pc}

08006132 <__sclose>:
 8006132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006136:	f000 b809 	b.w	800614c <_close_r>

0800613a <memset>:
 800613a:	4402      	add	r2, r0
 800613c:	4603      	mov	r3, r0
 800613e:	4293      	cmp	r3, r2
 8006140:	d100      	bne.n	8006144 <memset+0xa>
 8006142:	4770      	bx	lr
 8006144:	f803 1b01 	strb.w	r1, [r3], #1
 8006148:	e7f9      	b.n	800613e <memset+0x4>
	...

0800614c <_close_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	4d06      	ldr	r5, [pc, #24]	@ (8006168 <_close_r+0x1c>)
 8006150:	2300      	movs	r3, #0
 8006152:	4604      	mov	r4, r0
 8006154:	4608      	mov	r0, r1
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	f7fc f914 	bl	8002384 <_close>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_close_r+0x1a>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_close_r+0x1a>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000ac4 	.word	0x20000ac4

0800616c <_lseek_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d07      	ldr	r5, [pc, #28]	@ (800618c <_lseek_r+0x20>)
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	2200      	movs	r2, #0
 8006178:	602a      	str	r2, [r5, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	f7fc f929 	bl	80023d2 <_lseek>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_lseek_r+0x1e>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_lseek_r+0x1e>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000ac4 	.word	0x20000ac4

08006190 <_read_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	@ (80061b0 <_read_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fc f8b7 	bl	8002312 <_read>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_read_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_read_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000ac4 	.word	0x20000ac4

080061b4 <_write_r>:
 80061b4:	b538      	push	{r3, r4, r5, lr}
 80061b6:	4d07      	ldr	r5, [pc, #28]	@ (80061d4 <_write_r+0x20>)
 80061b8:	4604      	mov	r4, r0
 80061ba:	4608      	mov	r0, r1
 80061bc:	4611      	mov	r1, r2
 80061be:	2200      	movs	r2, #0
 80061c0:	602a      	str	r2, [r5, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f7fc f8c2 	bl	800234c <_write>
 80061c8:	1c43      	adds	r3, r0, #1
 80061ca:	d102      	bne.n	80061d2 <_write_r+0x1e>
 80061cc:	682b      	ldr	r3, [r5, #0]
 80061ce:	b103      	cbz	r3, 80061d2 <_write_r+0x1e>
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	bd38      	pop	{r3, r4, r5, pc}
 80061d4:	20000ac4 	.word	0x20000ac4

080061d8 <__errno>:
 80061d8:	4b01      	ldr	r3, [pc, #4]	@ (80061e0 <__errno+0x8>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000018 	.word	0x20000018

080061e4 <__libc_init_array>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	4d0d      	ldr	r5, [pc, #52]	@ (800621c <__libc_init_array+0x38>)
 80061e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006220 <__libc_init_array+0x3c>)
 80061ea:	1b64      	subs	r4, r4, r5
 80061ec:	10a4      	asrs	r4, r4, #2
 80061ee:	2600      	movs	r6, #0
 80061f0:	42a6      	cmp	r6, r4
 80061f2:	d109      	bne.n	8006208 <__libc_init_array+0x24>
 80061f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006224 <__libc_init_array+0x40>)
 80061f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006228 <__libc_init_array+0x44>)
 80061f8:	f007 fafc 	bl	800d7f4 <_init>
 80061fc:	1b64      	subs	r4, r4, r5
 80061fe:	10a4      	asrs	r4, r4, #2
 8006200:	2600      	movs	r6, #0
 8006202:	42a6      	cmp	r6, r4
 8006204:	d105      	bne.n	8006212 <__libc_init_array+0x2e>
 8006206:	bd70      	pop	{r4, r5, r6, pc}
 8006208:	f855 3b04 	ldr.w	r3, [r5], #4
 800620c:	4798      	blx	r3
 800620e:	3601      	adds	r6, #1
 8006210:	e7ee      	b.n	80061f0 <__libc_init_array+0xc>
 8006212:	f855 3b04 	ldr.w	r3, [r5], #4
 8006216:	4798      	blx	r3
 8006218:	3601      	adds	r6, #1
 800621a:	e7f2      	b.n	8006202 <__libc_init_array+0x1e>
 800621c:	0800dcc8 	.word	0x0800dcc8
 8006220:	0800dcc8 	.word	0x0800dcc8
 8006224:	0800dcc8 	.word	0x0800dcc8
 8006228:	0800dcd0 	.word	0x0800dcd0

0800622c <__retarget_lock_init_recursive>:
 800622c:	4770      	bx	lr

0800622e <__retarget_lock_close_recursive>:
 800622e:	4770      	bx	lr

08006230 <__retarget_lock_acquire_recursive>:
 8006230:	4770      	bx	lr

08006232 <__retarget_lock_release_recursive>:
 8006232:	4770      	bx	lr

08006234 <memcpy>:
 8006234:	440a      	add	r2, r1
 8006236:	4291      	cmp	r1, r2
 8006238:	f100 33ff 	add.w	r3, r0, #4294967295
 800623c:	d100      	bne.n	8006240 <memcpy+0xc>
 800623e:	4770      	bx	lr
 8006240:	b510      	push	{r4, lr}
 8006242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006246:	f803 4f01 	strb.w	r4, [r3, #1]!
 800624a:	4291      	cmp	r1, r2
 800624c:	d1f9      	bne.n	8006242 <memcpy+0xe>
 800624e:	bd10      	pop	{r4, pc}

08006250 <register_fini>:
 8006250:	4b02      	ldr	r3, [pc, #8]	@ (800625c <register_fini+0xc>)
 8006252:	b113      	cbz	r3, 800625a <register_fini+0xa>
 8006254:	4802      	ldr	r0, [pc, #8]	@ (8006260 <register_fini+0x10>)
 8006256:	f000 b805 	b.w	8006264 <atexit>
 800625a:	4770      	bx	lr
 800625c:	00000000 	.word	0x00000000
 8006260:	0800929d 	.word	0x0800929d

08006264 <atexit>:
 8006264:	2300      	movs	r3, #0
 8006266:	4601      	mov	r1, r0
 8006268:	461a      	mov	r2, r3
 800626a:	4618      	mov	r0, r3
 800626c:	f003 b872 	b.w	8009354 <__register_exitproc>

08006270 <_malloc_trim_r>:
 8006270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006274:	4606      	mov	r6, r0
 8006276:	2008      	movs	r0, #8
 8006278:	4689      	mov	r9, r1
 800627a:	f003 f823 	bl	80092c4 <sysconf>
 800627e:	4f24      	ldr	r7, [pc, #144]	@ (8006310 <_malloc_trim_r+0xa0>)
 8006280:	4680      	mov	r8, r0
 8006282:	4630      	mov	r0, r6
 8006284:	f000 fb44 	bl	8006910 <__malloc_lock>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	685d      	ldr	r5, [r3, #4]
 800628c:	f025 0503 	bic.w	r5, r5, #3
 8006290:	f1a5 0411 	sub.w	r4, r5, #17
 8006294:	eba4 0409 	sub.w	r4, r4, r9
 8006298:	4444      	add	r4, r8
 800629a:	fbb4 f4f8 	udiv	r4, r4, r8
 800629e:	3c01      	subs	r4, #1
 80062a0:	fb08 f404 	mul.w	r4, r8, r4
 80062a4:	45a0      	cmp	r8, r4
 80062a6:	dd05      	ble.n	80062b4 <_malloc_trim_r+0x44>
 80062a8:	4630      	mov	r0, r6
 80062aa:	f000 fb37 	bl	800691c <__malloc_unlock>
 80062ae:	2000      	movs	r0, #0
 80062b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062b4:	2100      	movs	r1, #0
 80062b6:	4630      	mov	r0, r6
 80062b8:	f002 ffe0 	bl	800927c <_sbrk_r>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	442b      	add	r3, r5
 80062c0:	4298      	cmp	r0, r3
 80062c2:	d1f1      	bne.n	80062a8 <_malloc_trim_r+0x38>
 80062c4:	4261      	negs	r1, r4
 80062c6:	4630      	mov	r0, r6
 80062c8:	f002 ffd8 	bl	800927c <_sbrk_r>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d110      	bne.n	80062f2 <_malloc_trim_r+0x82>
 80062d0:	2100      	movs	r1, #0
 80062d2:	4630      	mov	r0, r6
 80062d4:	f002 ffd2 	bl	800927c <_sbrk_r>
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	1a83      	subs	r3, r0, r2
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	dde3      	ble.n	80062a8 <_malloc_trim_r+0x38>
 80062e0:	490c      	ldr	r1, [pc, #48]	@ (8006314 <_malloc_trim_r+0xa4>)
 80062e2:	6809      	ldr	r1, [r1, #0]
 80062e4:	1a40      	subs	r0, r0, r1
 80062e6:	490c      	ldr	r1, [pc, #48]	@ (8006318 <_malloc_trim_r+0xa8>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	6008      	str	r0, [r1, #0]
 80062ee:	6053      	str	r3, [r2, #4]
 80062f0:	e7da      	b.n	80062a8 <_malloc_trim_r+0x38>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a08      	ldr	r2, [pc, #32]	@ (8006318 <_malloc_trim_r+0xa8>)
 80062f6:	1b2d      	subs	r5, r5, r4
 80062f8:	f045 0501 	orr.w	r5, r5, #1
 80062fc:	605d      	str	r5, [r3, #4]
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	4630      	mov	r0, r6
 8006302:	1b1b      	subs	r3, r3, r4
 8006304:	6013      	str	r3, [r2, #0]
 8006306:	f000 fb09 	bl	800691c <__malloc_unlock>
 800630a:	2001      	movs	r0, #1
 800630c:	e7d0      	b.n	80062b0 <_malloc_trim_r+0x40>
 800630e:	bf00      	nop
 8006310:	2000014c 	.word	0x2000014c
 8006314:	20000144 	.word	0x20000144
 8006318:	20000ad0 	.word	0x20000ad0

0800631c <_free_r>:
 800631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631e:	4604      	mov	r4, r0
 8006320:	460f      	mov	r7, r1
 8006322:	2900      	cmp	r1, #0
 8006324:	f000 80b1 	beq.w	800648a <_free_r+0x16e>
 8006328:	f000 faf2 	bl	8006910 <__malloc_lock>
 800632c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006330:	4d56      	ldr	r5, [pc, #344]	@ (800648c <_free_r+0x170>)
 8006332:	f022 0001 	bic.w	r0, r2, #1
 8006336:	f1a7 0308 	sub.w	r3, r7, #8
 800633a:	eb03 0c00 	add.w	ip, r3, r0
 800633e:	68a9      	ldr	r1, [r5, #8]
 8006340:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006344:	4561      	cmp	r1, ip
 8006346:	f026 0603 	bic.w	r6, r6, #3
 800634a:	f002 0201 	and.w	r2, r2, #1
 800634e:	d11b      	bne.n	8006388 <_free_r+0x6c>
 8006350:	4406      	add	r6, r0
 8006352:	b93a      	cbnz	r2, 8006364 <_free_r+0x48>
 8006354:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8006358:	1a9b      	subs	r3, r3, r2
 800635a:	4416      	add	r6, r2
 800635c:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8006360:	60ca      	str	r2, [r1, #12]
 8006362:	6091      	str	r1, [r2, #8]
 8006364:	f046 0201 	orr.w	r2, r6, #1
 8006368:	605a      	str	r2, [r3, #4]
 800636a:	60ab      	str	r3, [r5, #8]
 800636c:	4b48      	ldr	r3, [pc, #288]	@ (8006490 <_free_r+0x174>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	42b3      	cmp	r3, r6
 8006372:	d804      	bhi.n	800637e <_free_r+0x62>
 8006374:	4b47      	ldr	r3, [pc, #284]	@ (8006494 <_free_r+0x178>)
 8006376:	4620      	mov	r0, r4
 8006378:	6819      	ldr	r1, [r3, #0]
 800637a:	f7ff ff79 	bl	8006270 <_malloc_trim_r>
 800637e:	4620      	mov	r0, r4
 8006380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006384:	f000 baca 	b.w	800691c <__malloc_unlock>
 8006388:	f8cc 6004 	str.w	r6, [ip, #4]
 800638c:	2a00      	cmp	r2, #0
 800638e:	d138      	bne.n	8006402 <_free_r+0xe6>
 8006390:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8006394:	1a5b      	subs	r3, r3, r1
 8006396:	4408      	add	r0, r1
 8006398:	6899      	ldr	r1, [r3, #8]
 800639a:	f105 0708 	add.w	r7, r5, #8
 800639e:	42b9      	cmp	r1, r7
 80063a0:	d031      	beq.n	8006406 <_free_r+0xea>
 80063a2:	68df      	ldr	r7, [r3, #12]
 80063a4:	60cf      	str	r7, [r1, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	eb0c 0106 	add.w	r1, ip, r6
 80063ac:	6849      	ldr	r1, [r1, #4]
 80063ae:	07c9      	lsls	r1, r1, #31
 80063b0:	d40b      	bmi.n	80063ca <_free_r+0xae>
 80063b2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80063b6:	4430      	add	r0, r6
 80063b8:	bb3a      	cbnz	r2, 800640a <_free_r+0xee>
 80063ba:	4e37      	ldr	r6, [pc, #220]	@ (8006498 <_free_r+0x17c>)
 80063bc:	42b1      	cmp	r1, r6
 80063be:	d124      	bne.n	800640a <_free_r+0xee>
 80063c0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80063c4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f040 0101 	orr.w	r1, r0, #1
 80063ce:	6059      	str	r1, [r3, #4]
 80063d0:	5018      	str	r0, [r3, r0]
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d1d3      	bne.n	800637e <_free_r+0x62>
 80063d6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80063da:	d21b      	bcs.n	8006414 <_free_r+0xf8>
 80063dc:	08c2      	lsrs	r2, r0, #3
 80063de:	2101      	movs	r1, #1
 80063e0:	0940      	lsrs	r0, r0, #5
 80063e2:	4081      	lsls	r1, r0
 80063e4:	6868      	ldr	r0, [r5, #4]
 80063e6:	3201      	adds	r2, #1
 80063e8:	4301      	orrs	r1, r0
 80063ea:	6069      	str	r1, [r5, #4]
 80063ec:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80063f0:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80063f4:	3908      	subs	r1, #8
 80063f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80063fa:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80063fe:	60c3      	str	r3, [r0, #12]
 8006400:	e7bd      	b.n	800637e <_free_r+0x62>
 8006402:	2200      	movs	r2, #0
 8006404:	e7d0      	b.n	80063a8 <_free_r+0x8c>
 8006406:	2201      	movs	r2, #1
 8006408:	e7ce      	b.n	80063a8 <_free_r+0x8c>
 800640a:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800640e:	60ce      	str	r6, [r1, #12]
 8006410:	60b1      	str	r1, [r6, #8]
 8006412:	e7da      	b.n	80063ca <_free_r+0xae>
 8006414:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8006418:	ea4f 2250 	mov.w	r2, r0, lsr #9
 800641c:	d214      	bcs.n	8006448 <_free_r+0x12c>
 800641e:	0982      	lsrs	r2, r0, #6
 8006420:	3238      	adds	r2, #56	@ 0x38
 8006422:	1c51      	adds	r1, r2, #1
 8006424:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8006428:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800642c:	428e      	cmp	r6, r1
 800642e:	d125      	bne.n	800647c <_free_r+0x160>
 8006430:	2001      	movs	r0, #1
 8006432:	1092      	asrs	r2, r2, #2
 8006434:	fa00 f202 	lsl.w	r2, r0, r2
 8006438:	6868      	ldr	r0, [r5, #4]
 800643a:	4302      	orrs	r2, r0
 800643c:	606a      	str	r2, [r5, #4]
 800643e:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8006442:	60b3      	str	r3, [r6, #8]
 8006444:	60cb      	str	r3, [r1, #12]
 8006446:	e79a      	b.n	800637e <_free_r+0x62>
 8006448:	2a14      	cmp	r2, #20
 800644a:	d801      	bhi.n	8006450 <_free_r+0x134>
 800644c:	325b      	adds	r2, #91	@ 0x5b
 800644e:	e7e8      	b.n	8006422 <_free_r+0x106>
 8006450:	2a54      	cmp	r2, #84	@ 0x54
 8006452:	d802      	bhi.n	800645a <_free_r+0x13e>
 8006454:	0b02      	lsrs	r2, r0, #12
 8006456:	326e      	adds	r2, #110	@ 0x6e
 8006458:	e7e3      	b.n	8006422 <_free_r+0x106>
 800645a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800645e:	d802      	bhi.n	8006466 <_free_r+0x14a>
 8006460:	0bc2      	lsrs	r2, r0, #15
 8006462:	3277      	adds	r2, #119	@ 0x77
 8006464:	e7dd      	b.n	8006422 <_free_r+0x106>
 8006466:	f240 5154 	movw	r1, #1364	@ 0x554
 800646a:	428a      	cmp	r2, r1
 800646c:	bf9a      	itte	ls
 800646e:	0c82      	lsrls	r2, r0, #18
 8006470:	327c      	addls	r2, #124	@ 0x7c
 8006472:	227e      	movhi	r2, #126	@ 0x7e
 8006474:	e7d5      	b.n	8006422 <_free_r+0x106>
 8006476:	6889      	ldr	r1, [r1, #8]
 8006478:	428e      	cmp	r6, r1
 800647a:	d004      	beq.n	8006486 <_free_r+0x16a>
 800647c:	684a      	ldr	r2, [r1, #4]
 800647e:	f022 0203 	bic.w	r2, r2, #3
 8006482:	4282      	cmp	r2, r0
 8006484:	d8f7      	bhi.n	8006476 <_free_r+0x15a>
 8006486:	68ce      	ldr	r6, [r1, #12]
 8006488:	e7d9      	b.n	800643e <_free_r+0x122>
 800648a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800648c:	2000014c 	.word	0x2000014c
 8006490:	20000148 	.word	0x20000148
 8006494:	20000b00 	.word	0x20000b00
 8006498:	20000154 	.word	0x20000154

0800649c <_malloc_r>:
 800649c:	f101 030b 	add.w	r3, r1, #11
 80064a0:	2b16      	cmp	r3, #22
 80064a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a6:	4605      	mov	r5, r0
 80064a8:	d906      	bls.n	80064b8 <_malloc_r+0x1c>
 80064aa:	f033 0707 	bics.w	r7, r3, #7
 80064ae:	d504      	bpl.n	80064ba <_malloc_r+0x1e>
 80064b0:	230c      	movs	r3, #12
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	2400      	movs	r4, #0
 80064b6:	e1a3      	b.n	8006800 <_malloc_r+0x364>
 80064b8:	2710      	movs	r7, #16
 80064ba:	42b9      	cmp	r1, r7
 80064bc:	d8f8      	bhi.n	80064b0 <_malloc_r+0x14>
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 fa26 	bl	8006910 <__malloc_lock>
 80064c4:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80064c8:	4eaf      	ldr	r6, [pc, #700]	@ (8006788 <_malloc_r+0x2ec>)
 80064ca:	d237      	bcs.n	800653c <_malloc_r+0xa0>
 80064cc:	f107 0208 	add.w	r2, r7, #8
 80064d0:	4432      	add	r2, r6
 80064d2:	f1a2 0108 	sub.w	r1, r2, #8
 80064d6:	6854      	ldr	r4, [r2, #4]
 80064d8:	428c      	cmp	r4, r1
 80064da:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80064de:	d102      	bne.n	80064e6 <_malloc_r+0x4a>
 80064e0:	68d4      	ldr	r4, [r2, #12]
 80064e2:	42a2      	cmp	r2, r4
 80064e4:	d010      	beq.n	8006508 <_malloc_r+0x6c>
 80064e6:	6863      	ldr	r3, [r4, #4]
 80064e8:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80064ec:	f023 0303 	bic.w	r3, r3, #3
 80064f0:	60ca      	str	r2, [r1, #12]
 80064f2:	4423      	add	r3, r4
 80064f4:	6091      	str	r1, [r2, #8]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 fa0c 	bl	800691c <__malloc_unlock>
 8006504:	3408      	adds	r4, #8
 8006506:	e17b      	b.n	8006800 <_malloc_r+0x364>
 8006508:	3302      	adds	r3, #2
 800650a:	6934      	ldr	r4, [r6, #16]
 800650c:	499f      	ldr	r1, [pc, #636]	@ (800678c <_malloc_r+0x2f0>)
 800650e:	428c      	cmp	r4, r1
 8006510:	d077      	beq.n	8006602 <_malloc_r+0x166>
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	f022 0c03 	bic.w	ip, r2, #3
 8006518:	ebac 0007 	sub.w	r0, ip, r7
 800651c:	280f      	cmp	r0, #15
 800651e:	dd48      	ble.n	80065b2 <_malloc_r+0x116>
 8006520:	19e2      	adds	r2, r4, r7
 8006522:	f040 0301 	orr.w	r3, r0, #1
 8006526:	f047 0701 	orr.w	r7, r7, #1
 800652a:	6067      	str	r7, [r4, #4]
 800652c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8006530:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8006534:	6053      	str	r3, [r2, #4]
 8006536:	f844 000c 	str.w	r0, [r4, ip]
 800653a:	e7e0      	b.n	80064fe <_malloc_r+0x62>
 800653c:	0a7b      	lsrs	r3, r7, #9
 800653e:	d02a      	beq.n	8006596 <_malloc_r+0xfa>
 8006540:	2b04      	cmp	r3, #4
 8006542:	d812      	bhi.n	800656a <_malloc_r+0xce>
 8006544:	09bb      	lsrs	r3, r7, #6
 8006546:	3338      	adds	r3, #56	@ 0x38
 8006548:	1c5a      	adds	r2, r3, #1
 800654a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800654e:	f1a2 0c08 	sub.w	ip, r2, #8
 8006552:	6854      	ldr	r4, [r2, #4]
 8006554:	4564      	cmp	r4, ip
 8006556:	d006      	beq.n	8006566 <_malloc_r+0xca>
 8006558:	6862      	ldr	r2, [r4, #4]
 800655a:	f022 0203 	bic.w	r2, r2, #3
 800655e:	1bd0      	subs	r0, r2, r7
 8006560:	280f      	cmp	r0, #15
 8006562:	dd1c      	ble.n	800659e <_malloc_r+0x102>
 8006564:	3b01      	subs	r3, #1
 8006566:	3301      	adds	r3, #1
 8006568:	e7cf      	b.n	800650a <_malloc_r+0x6e>
 800656a:	2b14      	cmp	r3, #20
 800656c:	d801      	bhi.n	8006572 <_malloc_r+0xd6>
 800656e:	335b      	adds	r3, #91	@ 0x5b
 8006570:	e7ea      	b.n	8006548 <_malloc_r+0xac>
 8006572:	2b54      	cmp	r3, #84	@ 0x54
 8006574:	d802      	bhi.n	800657c <_malloc_r+0xe0>
 8006576:	0b3b      	lsrs	r3, r7, #12
 8006578:	336e      	adds	r3, #110	@ 0x6e
 800657a:	e7e5      	b.n	8006548 <_malloc_r+0xac>
 800657c:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8006580:	d802      	bhi.n	8006588 <_malloc_r+0xec>
 8006582:	0bfb      	lsrs	r3, r7, #15
 8006584:	3377      	adds	r3, #119	@ 0x77
 8006586:	e7df      	b.n	8006548 <_malloc_r+0xac>
 8006588:	f240 5254 	movw	r2, #1364	@ 0x554
 800658c:	4293      	cmp	r3, r2
 800658e:	d804      	bhi.n	800659a <_malloc_r+0xfe>
 8006590:	0cbb      	lsrs	r3, r7, #18
 8006592:	337c      	adds	r3, #124	@ 0x7c
 8006594:	e7d8      	b.n	8006548 <_malloc_r+0xac>
 8006596:	233f      	movs	r3, #63	@ 0x3f
 8006598:	e7d6      	b.n	8006548 <_malloc_r+0xac>
 800659a:	237e      	movs	r3, #126	@ 0x7e
 800659c:	e7d4      	b.n	8006548 <_malloc_r+0xac>
 800659e:	2800      	cmp	r0, #0
 80065a0:	68e1      	ldr	r1, [r4, #12]
 80065a2:	db04      	blt.n	80065ae <_malloc_r+0x112>
 80065a4:	68a3      	ldr	r3, [r4, #8]
 80065a6:	60d9      	str	r1, [r3, #12]
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	18a3      	adds	r3, r4, r2
 80065ac:	e7a3      	b.n	80064f6 <_malloc_r+0x5a>
 80065ae:	460c      	mov	r4, r1
 80065b0:	e7d0      	b.n	8006554 <_malloc_r+0xb8>
 80065b2:	2800      	cmp	r0, #0
 80065b4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80065b8:	db07      	blt.n	80065ca <_malloc_r+0x12e>
 80065ba:	44a4      	add	ip, r4
 80065bc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80065c0:	f043 0301 	orr.w	r3, r3, #1
 80065c4:	f8cc 3004 	str.w	r3, [ip, #4]
 80065c8:	e799      	b.n	80064fe <_malloc_r+0x62>
 80065ca:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80065ce:	6870      	ldr	r0, [r6, #4]
 80065d0:	f080 8095 	bcs.w	80066fe <_malloc_r+0x262>
 80065d4:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80065d8:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80065dc:	f04f 0c01 	mov.w	ip, #1
 80065e0:	3201      	adds	r2, #1
 80065e2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80065e6:	ea4c 0000 	orr.w	r0, ip, r0
 80065ea:	6070      	str	r0, [r6, #4]
 80065ec:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80065f0:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80065f4:	3808      	subs	r0, #8
 80065f6:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80065fa:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80065fe:	f8cc 400c 	str.w	r4, [ip, #12]
 8006602:	1098      	asrs	r0, r3, #2
 8006604:	2201      	movs	r2, #1
 8006606:	4082      	lsls	r2, r0
 8006608:	6870      	ldr	r0, [r6, #4]
 800660a:	4290      	cmp	r0, r2
 800660c:	d326      	bcc.n	800665c <_malloc_r+0x1c0>
 800660e:	4210      	tst	r0, r2
 8006610:	d106      	bne.n	8006620 <_malloc_r+0x184>
 8006612:	f023 0303 	bic.w	r3, r3, #3
 8006616:	0052      	lsls	r2, r2, #1
 8006618:	4210      	tst	r0, r2
 800661a:	f103 0304 	add.w	r3, r3, #4
 800661e:	d0fa      	beq.n	8006616 <_malloc_r+0x17a>
 8006620:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8006624:	46c1      	mov	r9, r8
 8006626:	469e      	mov	lr, r3
 8006628:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800662c:	454c      	cmp	r4, r9
 800662e:	f040 80b9 	bne.w	80067a4 <_malloc_r+0x308>
 8006632:	f10e 0e01 	add.w	lr, lr, #1
 8006636:	f01e 0f03 	tst.w	lr, #3
 800663a:	f109 0908 	add.w	r9, r9, #8
 800663e:	d1f3      	bne.n	8006628 <_malloc_r+0x18c>
 8006640:	0798      	lsls	r0, r3, #30
 8006642:	f040 80e3 	bne.w	800680c <_malloc_r+0x370>
 8006646:	6873      	ldr	r3, [r6, #4]
 8006648:	ea23 0302 	bic.w	r3, r3, r2
 800664c:	6073      	str	r3, [r6, #4]
 800664e:	6870      	ldr	r0, [r6, #4]
 8006650:	0052      	lsls	r2, r2, #1
 8006652:	4290      	cmp	r0, r2
 8006654:	d302      	bcc.n	800665c <_malloc_r+0x1c0>
 8006656:	2a00      	cmp	r2, #0
 8006658:	f040 80e5 	bne.w	8006826 <_malloc_r+0x38a>
 800665c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006660:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006664:	f023 0903 	bic.w	r9, r3, #3
 8006668:	45b9      	cmp	r9, r7
 800666a:	d304      	bcc.n	8006676 <_malloc_r+0x1da>
 800666c:	eba9 0207 	sub.w	r2, r9, r7
 8006670:	2a0f      	cmp	r2, #15
 8006672:	f300 8141 	bgt.w	80068f8 <_malloc_r+0x45c>
 8006676:	4b46      	ldr	r3, [pc, #280]	@ (8006790 <_malloc_r+0x2f4>)
 8006678:	6819      	ldr	r1, [r3, #0]
 800667a:	3110      	adds	r1, #16
 800667c:	4439      	add	r1, r7
 800667e:	2008      	movs	r0, #8
 8006680:	9101      	str	r1, [sp, #4]
 8006682:	f002 fe1f 	bl	80092c4 <sysconf>
 8006686:	4a43      	ldr	r2, [pc, #268]	@ (8006794 <_malloc_r+0x2f8>)
 8006688:	9901      	ldr	r1, [sp, #4]
 800668a:	6813      	ldr	r3, [r2, #0]
 800668c:	3301      	adds	r3, #1
 800668e:	bf1f      	itttt	ne
 8006690:	f101 31ff 	addne.w	r1, r1, #4294967295
 8006694:	1809      	addne	r1, r1, r0
 8006696:	4243      	negne	r3, r0
 8006698:	4019      	andne	r1, r3
 800669a:	4680      	mov	r8, r0
 800669c:	4628      	mov	r0, r5
 800669e:	9101      	str	r1, [sp, #4]
 80066a0:	f002 fdec 	bl	800927c <_sbrk_r>
 80066a4:	1c42      	adds	r2, r0, #1
 80066a6:	eb0a 0b09 	add.w	fp, sl, r9
 80066aa:	4604      	mov	r4, r0
 80066ac:	f000 80f7 	beq.w	800689e <_malloc_r+0x402>
 80066b0:	4583      	cmp	fp, r0
 80066b2:	9901      	ldr	r1, [sp, #4]
 80066b4:	4a37      	ldr	r2, [pc, #220]	@ (8006794 <_malloc_r+0x2f8>)
 80066b6:	d902      	bls.n	80066be <_malloc_r+0x222>
 80066b8:	45b2      	cmp	sl, r6
 80066ba:	f040 80f0 	bne.w	800689e <_malloc_r+0x402>
 80066be:	4b36      	ldr	r3, [pc, #216]	@ (8006798 <_malloc_r+0x2fc>)
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	45a3      	cmp	fp, r4
 80066c4:	eb00 0e01 	add.w	lr, r0, r1
 80066c8:	f8c3 e000 	str.w	lr, [r3]
 80066cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80066d0:	f040 80ab 	bne.w	800682a <_malloc_r+0x38e>
 80066d4:	ea1b 0f0c 	tst.w	fp, ip
 80066d8:	f040 80a7 	bne.w	800682a <_malloc_r+0x38e>
 80066dc:	68b2      	ldr	r2, [r6, #8]
 80066de:	4449      	add	r1, r9
 80066e0:	f041 0101 	orr.w	r1, r1, #1
 80066e4:	6051      	str	r1, [r2, #4]
 80066e6:	4a2d      	ldr	r2, [pc, #180]	@ (800679c <_malloc_r+0x300>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6811      	ldr	r1, [r2, #0]
 80066ec:	428b      	cmp	r3, r1
 80066ee:	bf88      	it	hi
 80066f0:	6013      	strhi	r3, [r2, #0]
 80066f2:	4a2b      	ldr	r2, [pc, #172]	@ (80067a0 <_malloc_r+0x304>)
 80066f4:	6811      	ldr	r1, [r2, #0]
 80066f6:	428b      	cmp	r3, r1
 80066f8:	bf88      	it	hi
 80066fa:	6013      	strhi	r3, [r2, #0]
 80066fc:	e0cf      	b.n	800689e <_malloc_r+0x402>
 80066fe:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 8006702:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8006706:	d218      	bcs.n	800673a <_malloc_r+0x29e>
 8006708:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800670c:	3238      	adds	r2, #56	@ 0x38
 800670e:	f102 0e01 	add.w	lr, r2, #1
 8006712:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8006716:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800671a:	45f0      	cmp	r8, lr
 800671c:	d12b      	bne.n	8006776 <_malloc_r+0x2da>
 800671e:	1092      	asrs	r2, r2, #2
 8006720:	f04f 0c01 	mov.w	ip, #1
 8006724:	fa0c f202 	lsl.w	r2, ip, r2
 8006728:	4302      	orrs	r2, r0
 800672a:	6072      	str	r2, [r6, #4]
 800672c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8006730:	f8c8 4008 	str.w	r4, [r8, #8]
 8006734:	f8ce 400c 	str.w	r4, [lr, #12]
 8006738:	e763      	b.n	8006602 <_malloc_r+0x166>
 800673a:	2a14      	cmp	r2, #20
 800673c:	d801      	bhi.n	8006742 <_malloc_r+0x2a6>
 800673e:	325b      	adds	r2, #91	@ 0x5b
 8006740:	e7e5      	b.n	800670e <_malloc_r+0x272>
 8006742:	2a54      	cmp	r2, #84	@ 0x54
 8006744:	d803      	bhi.n	800674e <_malloc_r+0x2b2>
 8006746:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800674a:	326e      	adds	r2, #110	@ 0x6e
 800674c:	e7df      	b.n	800670e <_malloc_r+0x272>
 800674e:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 8006752:	d803      	bhi.n	800675c <_malloc_r+0x2c0>
 8006754:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8006758:	3277      	adds	r2, #119	@ 0x77
 800675a:	e7d8      	b.n	800670e <_malloc_r+0x272>
 800675c:	f240 5e54 	movw	lr, #1364	@ 0x554
 8006760:	4572      	cmp	r2, lr
 8006762:	bf9a      	itte	ls
 8006764:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8006768:	327c      	addls	r2, #124	@ 0x7c
 800676a:	227e      	movhi	r2, #126	@ 0x7e
 800676c:	e7cf      	b.n	800670e <_malloc_r+0x272>
 800676e:	f8de e008 	ldr.w	lr, [lr, #8]
 8006772:	45f0      	cmp	r8, lr
 8006774:	d005      	beq.n	8006782 <_malloc_r+0x2e6>
 8006776:	f8de 2004 	ldr.w	r2, [lr, #4]
 800677a:	f022 0203 	bic.w	r2, r2, #3
 800677e:	4562      	cmp	r2, ip
 8006780:	d8f5      	bhi.n	800676e <_malloc_r+0x2d2>
 8006782:	f8de 800c 	ldr.w	r8, [lr, #12]
 8006786:	e7d1      	b.n	800672c <_malloc_r+0x290>
 8006788:	2000014c 	.word	0x2000014c
 800678c:	20000154 	.word	0x20000154
 8006790:	20000b00 	.word	0x20000b00
 8006794:	20000144 	.word	0x20000144
 8006798:	20000ad0 	.word	0x20000ad0
 800679c:	20000afc 	.word	0x20000afc
 80067a0:	20000af8 	.word	0x20000af8
 80067a4:	6860      	ldr	r0, [r4, #4]
 80067a6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80067aa:	f020 0003 	bic.w	r0, r0, #3
 80067ae:	eba0 0a07 	sub.w	sl, r0, r7
 80067b2:	f1ba 0f0f 	cmp.w	sl, #15
 80067b6:	dd12      	ble.n	80067de <_malloc_r+0x342>
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	19e2      	adds	r2, r4, r7
 80067bc:	f047 0701 	orr.w	r7, r7, #1
 80067c0:	6067      	str	r7, [r4, #4]
 80067c2:	f8c3 c00c 	str.w	ip, [r3, #12]
 80067c6:	f8cc 3008 	str.w	r3, [ip, #8]
 80067ca:	f04a 0301 	orr.w	r3, sl, #1
 80067ce:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80067d2:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80067d6:	6053      	str	r3, [r2, #4]
 80067d8:	f844 a000 	str.w	sl, [r4, r0]
 80067dc:	e68f      	b.n	80064fe <_malloc_r+0x62>
 80067de:	f1ba 0f00 	cmp.w	sl, #0
 80067e2:	db11      	blt.n	8006808 <_malloc_r+0x36c>
 80067e4:	4420      	add	r0, r4
 80067e6:	6843      	ldr	r3, [r0, #4]
 80067e8:	f043 0301 	orr.w	r3, r3, #1
 80067ec:	6043      	str	r3, [r0, #4]
 80067ee:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80067f2:	4628      	mov	r0, r5
 80067f4:	f8c3 c00c 	str.w	ip, [r3, #12]
 80067f8:	f8cc 3008 	str.w	r3, [ip, #8]
 80067fc:	f000 f88e 	bl	800691c <__malloc_unlock>
 8006800:	4620      	mov	r0, r4
 8006802:	b003      	add	sp, #12
 8006804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006808:	4664      	mov	r4, ip
 800680a:	e70f      	b.n	800662c <_malloc_r+0x190>
 800680c:	f858 0908 	ldr.w	r0, [r8], #-8
 8006810:	4540      	cmp	r0, r8
 8006812:	f103 33ff 	add.w	r3, r3, #4294967295
 8006816:	f43f af13 	beq.w	8006640 <_malloc_r+0x1a4>
 800681a:	e718      	b.n	800664e <_malloc_r+0x1b2>
 800681c:	3304      	adds	r3, #4
 800681e:	0052      	lsls	r2, r2, #1
 8006820:	4210      	tst	r0, r2
 8006822:	d0fb      	beq.n	800681c <_malloc_r+0x380>
 8006824:	e6fc      	b.n	8006620 <_malloc_r+0x184>
 8006826:	4673      	mov	r3, lr
 8006828:	e7fa      	b.n	8006820 <_malloc_r+0x384>
 800682a:	6810      	ldr	r0, [r2, #0]
 800682c:	3001      	adds	r0, #1
 800682e:	bf1b      	ittet	ne
 8006830:	eba4 0b0b 	subne.w	fp, r4, fp
 8006834:	eb0b 020e 	addne.w	r2, fp, lr
 8006838:	6014      	streq	r4, [r2, #0]
 800683a:	601a      	strne	r2, [r3, #0]
 800683c:	f014 0b07 	ands.w	fp, r4, #7
 8006840:	bf1a      	itte	ne
 8006842:	f1cb 0008 	rsbne	r0, fp, #8
 8006846:	1824      	addne	r4, r4, r0
 8006848:	4658      	moveq	r0, fp
 800684a:	1862      	adds	r2, r4, r1
 800684c:	ea02 010c 	and.w	r1, r2, ip
 8006850:	4480      	add	r8, r0
 8006852:	eba8 0801 	sub.w	r8, r8, r1
 8006856:	ea08 080c 	and.w	r8, r8, ip
 800685a:	4641      	mov	r1, r8
 800685c:	4628      	mov	r0, r5
 800685e:	9201      	str	r2, [sp, #4]
 8006860:	f002 fd0c 	bl	800927c <_sbrk_r>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	9a01      	ldr	r2, [sp, #4]
 8006868:	4b28      	ldr	r3, [pc, #160]	@ (800690c <_malloc_r+0x470>)
 800686a:	d107      	bne.n	800687c <_malloc_r+0x3e0>
 800686c:	f1bb 0f00 	cmp.w	fp, #0
 8006870:	d023      	beq.n	80068ba <_malloc_r+0x41e>
 8006872:	f1ab 0008 	sub.w	r0, fp, #8
 8006876:	4410      	add	r0, r2
 8006878:	f04f 0800 	mov.w	r8, #0
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	60b4      	str	r4, [r6, #8]
 8006880:	1b00      	subs	r0, r0, r4
 8006882:	4440      	add	r0, r8
 8006884:	4442      	add	r2, r8
 8006886:	f040 0001 	orr.w	r0, r0, #1
 800688a:	45b2      	cmp	sl, r6
 800688c:	601a      	str	r2, [r3, #0]
 800688e:	6060      	str	r0, [r4, #4]
 8006890:	f43f af29 	beq.w	80066e6 <_malloc_r+0x24a>
 8006894:	f1b9 0f0f 	cmp.w	r9, #15
 8006898:	d812      	bhi.n	80068c0 <_malloc_r+0x424>
 800689a:	2301      	movs	r3, #1
 800689c:	6063      	str	r3, [r4, #4]
 800689e:	68b3      	ldr	r3, [r6, #8]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f023 0303 	bic.w	r3, r3, #3
 80068a6:	42bb      	cmp	r3, r7
 80068a8:	eba3 0207 	sub.w	r2, r3, r7
 80068ac:	d301      	bcc.n	80068b2 <_malloc_r+0x416>
 80068ae:	2a0f      	cmp	r2, #15
 80068b0:	dc22      	bgt.n	80068f8 <_malloc_r+0x45c>
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f832 	bl	800691c <__malloc_unlock>
 80068b8:	e5fc      	b.n	80064b4 <_malloc_r+0x18>
 80068ba:	4610      	mov	r0, r2
 80068bc:	46d8      	mov	r8, fp
 80068be:	e7dd      	b.n	800687c <_malloc_r+0x3e0>
 80068c0:	f8da 2004 	ldr.w	r2, [sl, #4]
 80068c4:	f1a9 090c 	sub.w	r9, r9, #12
 80068c8:	f029 0907 	bic.w	r9, r9, #7
 80068cc:	f002 0201 	and.w	r2, r2, #1
 80068d0:	ea42 0209 	orr.w	r2, r2, r9
 80068d4:	f8ca 2004 	str.w	r2, [sl, #4]
 80068d8:	2105      	movs	r1, #5
 80068da:	eb0a 0209 	add.w	r2, sl, r9
 80068de:	f1b9 0f0f 	cmp.w	r9, #15
 80068e2:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80068e6:	f67f aefe 	bls.w	80066e6 <_malloc_r+0x24a>
 80068ea:	f10a 0108 	add.w	r1, sl, #8
 80068ee:	4628      	mov	r0, r5
 80068f0:	f7ff fd14 	bl	800631c <_free_r>
 80068f4:	4b05      	ldr	r3, [pc, #20]	@ (800690c <_malloc_r+0x470>)
 80068f6:	e6f6      	b.n	80066e6 <_malloc_r+0x24a>
 80068f8:	68b4      	ldr	r4, [r6, #8]
 80068fa:	f047 0301 	orr.w	r3, r7, #1
 80068fe:	4427      	add	r7, r4
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	6063      	str	r3, [r4, #4]
 8006906:	60b7      	str	r7, [r6, #8]
 8006908:	607a      	str	r2, [r7, #4]
 800690a:	e5f8      	b.n	80064fe <_malloc_r+0x62>
 800690c:	20000ad0 	.word	0x20000ad0

08006910 <__malloc_lock>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__malloc_lock+0x8>)
 8006912:	f7ff bc8d 	b.w	8006230 <__retarget_lock_acquire_recursive>
 8006916:	bf00      	nop
 8006918:	20000ac8 	.word	0x20000ac8

0800691c <__malloc_unlock>:
 800691c:	4801      	ldr	r0, [pc, #4]	@ (8006924 <__malloc_unlock+0x8>)
 800691e:	f7ff bc88 	b.w	8006232 <__retarget_lock_release_recursive>
 8006922:	bf00      	nop
 8006924:	20000ac8 	.word	0x20000ac8

08006928 <_svfprintf_r>:
 8006928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	b0d3      	sub	sp, #332	@ 0x14c
 800692e:	468b      	mov	fp, r1
 8006930:	4691      	mov	r9, r2
 8006932:	461e      	mov	r6, r3
 8006934:	9003      	str	r0, [sp, #12]
 8006936:	f002 fc9d 	bl	8009274 <_localeconv_r>
 800693a:	6803      	ldr	r3, [r0, #0]
 800693c:	9316      	str	r3, [sp, #88]	@ 0x58
 800693e:	4618      	mov	r0, r3
 8006940:	f7f9 fc4e 	bl	80001e0 <strlen>
 8006944:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006948:	900d      	str	r0, [sp, #52]	@ 0x34
 800694a:	061b      	lsls	r3, r3, #24
 800694c:	d515      	bpl.n	800697a <_svfprintf_r+0x52>
 800694e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8006952:	b993      	cbnz	r3, 800697a <_svfprintf_r+0x52>
 8006954:	9803      	ldr	r0, [sp, #12]
 8006956:	2140      	movs	r1, #64	@ 0x40
 8006958:	f7ff fda0 	bl	800649c <_malloc_r>
 800695c:	f8cb 0000 	str.w	r0, [fp]
 8006960:	f8cb 0010 	str.w	r0, [fp, #16]
 8006964:	b930      	cbnz	r0, 8006974 <_svfprintf_r+0x4c>
 8006966:	9a03      	ldr	r2, [sp, #12]
 8006968:	230c      	movs	r3, #12
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	f04f 33ff 	mov.w	r3, #4294967295
 8006970:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006972:	e1f7      	b.n	8006d64 <_svfprintf_r+0x43c>
 8006974:	2340      	movs	r3, #64	@ 0x40
 8006976:	f8cb 3014 	str.w	r3, [fp, #20]
 800697a:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8006bc8 <_svfprintf_r+0x2a0>
 800697e:	2300      	movs	r3, #0
 8006980:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8006984:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006988:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 800698c:	ac29      	add	r4, sp, #164	@ 0xa4
 800698e:	9426      	str	r4, [sp, #152]	@ 0x98
 8006990:	9304      	str	r3, [sp, #16]
 8006992:	9309      	str	r3, [sp, #36]	@ 0x24
 8006994:	9312      	str	r3, [sp, #72]	@ 0x48
 8006996:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006998:	930f      	str	r3, [sp, #60]	@ 0x3c
 800699a:	464b      	mov	r3, r9
 800699c:	461d      	mov	r5, r3
 800699e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a2:	b10a      	cbz	r2, 80069a8 <_svfprintf_r+0x80>
 80069a4:	2a25      	cmp	r2, #37	@ 0x25
 80069a6:	d1f9      	bne.n	800699c <_svfprintf_r+0x74>
 80069a8:	ebb5 0709 	subs.w	r7, r5, r9
 80069ac:	d00d      	beq.n	80069ca <_svfprintf_r+0xa2>
 80069ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80069b0:	443b      	add	r3, r7
 80069b2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80069b4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80069b6:	3301      	adds	r3, #1
 80069b8:	2b07      	cmp	r3, #7
 80069ba:	e9c4 9700 	strd	r9, r7, [r4]
 80069be:	9327      	str	r3, [sp, #156]	@ 0x9c
 80069c0:	dc75      	bgt.n	8006aae <_svfprintf_r+0x186>
 80069c2:	3408      	adds	r4, #8
 80069c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069c6:	443b      	add	r3, r7
 80069c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069ca:	782b      	ldrb	r3, [r5, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f001 8148 	beq.w	8007c62 <_svfprintf_r+0x133a>
 80069d2:	2200      	movs	r2, #0
 80069d4:	1c6b      	adds	r3, r5, #1
 80069d6:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 80069da:	f04f 38ff 	mov.w	r8, #4294967295
 80069de:	920e      	str	r2, [sp, #56]	@ 0x38
 80069e0:	4615      	mov	r5, r2
 80069e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069e6:	9206      	str	r2, [sp, #24]
 80069e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80069ea:	9b06      	ldr	r3, [sp, #24]
 80069ec:	3b20      	subs	r3, #32
 80069ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80069f0:	f200 85a4 	bhi.w	800753c <_svfprintf_r+0xc14>
 80069f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069f8:	05a2009d 	.word	0x05a2009d
 80069fc:	00a505a2 	.word	0x00a505a2
 8006a00:	05a205a2 	.word	0x05a205a2
 8006a04:	008505a2 	.word	0x008505a2
 8006a08:	05a205a2 	.word	0x05a205a2
 8006a0c:	00b200a8 	.word	0x00b200a8
 8006a10:	00af05a2 	.word	0x00af05a2
 8006a14:	05a200b4 	.word	0x05a200b4
 8006a18:	00d100ce 	.word	0x00d100ce
 8006a1c:	00d100d1 	.word	0x00d100d1
 8006a20:	00d100d1 	.word	0x00d100d1
 8006a24:	00d100d1 	.word	0x00d100d1
 8006a28:	00d100d1 	.word	0x00d100d1
 8006a2c:	05a205a2 	.word	0x05a205a2
 8006a30:	05a205a2 	.word	0x05a205a2
 8006a34:	05a205a2 	.word	0x05a205a2
 8006a38:	014705a2 	.word	0x014705a2
 8006a3c:	010805a2 	.word	0x010805a2
 8006a40:	0147011b 	.word	0x0147011b
 8006a44:	01470147 	.word	0x01470147
 8006a48:	05a205a2 	.word	0x05a205a2
 8006a4c:	05a205a2 	.word	0x05a205a2
 8006a50:	05a200e2 	.word	0x05a200e2
 8006a54:	049d05a2 	.word	0x049d05a2
 8006a58:	05a205a2 	.word	0x05a205a2
 8006a5c:	04e705a2 	.word	0x04e705a2
 8006a60:	050805a2 	.word	0x050805a2
 8006a64:	05a205a2 	.word	0x05a205a2
 8006a68:	05a2052a 	.word	0x05a2052a
 8006a6c:	05a205a2 	.word	0x05a205a2
 8006a70:	05a205a2 	.word	0x05a205a2
 8006a74:	05a205a2 	.word	0x05a205a2
 8006a78:	014705a2 	.word	0x014705a2
 8006a7c:	010805a2 	.word	0x010805a2
 8006a80:	0147011d 	.word	0x0147011d
 8006a84:	01470147 	.word	0x01470147
 8006a88:	011d00ee 	.word	0x011d00ee
 8006a8c:	05a20102 	.word	0x05a20102
 8006a90:	05a200fb 	.word	0x05a200fb
 8006a94:	049f047e 	.word	0x049f047e
 8006a98:	010204d6 	.word	0x010204d6
 8006a9c:	04e705a2 	.word	0x04e705a2
 8006aa0:	050a009b 	.word	0x050a009b
 8006aa4:	05a205a2 	.word	0x05a205a2
 8006aa8:	05a20065 	.word	0x05a20065
 8006aac:	009b      	.short	0x009b
 8006aae:	9803      	ldr	r0, [sp, #12]
 8006ab0:	aa26      	add	r2, sp, #152	@ 0x98
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	f005 f94c 	bl	800bd50 <__ssprint_r>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	f040 814e 	bne.w	8006d5a <_svfprintf_r+0x432>
 8006abe:	ac29      	add	r4, sp, #164	@ 0xa4
 8006ac0:	e780      	b.n	80069c4 <_svfprintf_r+0x9c>
 8006ac2:	4b43      	ldr	r3, [pc, #268]	@ (8006bd0 <_svfprintf_r+0x2a8>)
 8006ac4:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ac6:	f015 0320 	ands.w	r3, r5, #32
 8006aca:	f000 84c2 	beq.w	8007452 <_svfprintf_r+0xb2a>
 8006ace:	3607      	adds	r6, #7
 8006ad0:	f026 0307 	bic.w	r3, r6, #7
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	685f      	ldr	r7, [r3, #4]
 8006ad8:	f852 6b08 	ldr.w	r6, [r2], #8
 8006adc:	9207      	str	r2, [sp, #28]
 8006ade:	07eb      	lsls	r3, r5, #31
 8006ae0:	d50a      	bpl.n	8006af8 <_svfprintf_r+0x1d0>
 8006ae2:	ea56 0307 	orrs.w	r3, r6, r7
 8006ae6:	d007      	beq.n	8006af8 <_svfprintf_r+0x1d0>
 8006ae8:	2330      	movs	r3, #48	@ 0x30
 8006aea:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8006aee:	9b06      	ldr	r3, [sp, #24]
 8006af0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8006af4:	f045 0502 	orr.w	r5, r5, #2
 8006af8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8006afc:	2302      	movs	r3, #2
 8006afe:	f000 bc28 	b.w	8007352 <_svfprintf_r+0xa2a>
 8006b02:	9803      	ldr	r0, [sp, #12]
 8006b04:	f002 fbb6 	bl	8009274 <_localeconv_r>
 8006b08:	6843      	ldr	r3, [r0, #4]
 8006b0a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7f9 fb67 	bl	80001e0 <strlen>
 8006b12:	9012      	str	r0, [sp, #72]	@ 0x48
 8006b14:	9803      	ldr	r0, [sp, #12]
 8006b16:	f002 fbad 	bl	8009274 <_localeconv_r>
 8006b1a:	6883      	ldr	r3, [r0, #8]
 8006b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b1e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b20:	b12b      	cbz	r3, 8006b2e <_svfprintf_r+0x206>
 8006b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b24:	b11b      	cbz	r3, 8006b2e <_svfprintf_r+0x206>
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b10b      	cbz	r3, 8006b2e <_svfprintf_r+0x206>
 8006b2a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8006b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b30:	e757      	b.n	80069e2 <_svfprintf_r+0xba>
 8006b32:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1f9      	bne.n	8006b2e <_svfprintf_r+0x206>
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006b40:	e7f5      	b.n	8006b2e <_svfprintf_r+0x206>
 8006b42:	f045 0501 	orr.w	r5, r5, #1
 8006b46:	e7f2      	b.n	8006b2e <_svfprintf_r+0x206>
 8006b48:	f856 3b04 	ldr.w	r3, [r6], #4
 8006b4c:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	daed      	bge.n	8006b2e <_svfprintf_r+0x206>
 8006b52:	425b      	negs	r3, r3
 8006b54:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b56:	f045 0504 	orr.w	r5, r5, #4
 8006b5a:	e7e8      	b.n	8006b2e <_svfprintf_r+0x206>
 8006b5c:	232b      	movs	r3, #43	@ 0x2b
 8006b5e:	e7ed      	b.n	8006b3c <_svfprintf_r+0x214>
 8006b60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b66:	9206      	str	r2, [sp, #24]
 8006b68:	2a2a      	cmp	r2, #42	@ 0x2a
 8006b6a:	d10f      	bne.n	8006b8c <_svfprintf_r+0x264>
 8006b6c:	f856 2b04 	ldr.w	r2, [r6], #4
 8006b70:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b72:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8006b76:	e7da      	b.n	8006b2e <_svfprintf_r+0x206>
 8006b78:	fb01 2808 	mla	r8, r1, r8, r2
 8006b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b80:	9206      	str	r2, [sp, #24]
 8006b82:	9a06      	ldr	r2, [sp, #24]
 8006b84:	3a30      	subs	r2, #48	@ 0x30
 8006b86:	2a09      	cmp	r2, #9
 8006b88:	d9f6      	bls.n	8006b78 <_svfprintf_r+0x250>
 8006b8a:	e72d      	b.n	80069e8 <_svfprintf_r+0xc0>
 8006b8c:	f04f 0800 	mov.w	r8, #0
 8006b90:	210a      	movs	r1, #10
 8006b92:	e7f6      	b.n	8006b82 <_svfprintf_r+0x25a>
 8006b94:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8006b98:	e7c9      	b.n	8006b2e <_svfprintf_r+0x206>
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ba0:	210a      	movs	r1, #10
 8006ba2:	9a06      	ldr	r2, [sp, #24]
 8006ba4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8006ba6:	3a30      	subs	r2, #48	@ 0x30
 8006ba8:	fb01 2200 	mla	r2, r1, r0, r2
 8006bac:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bb2:	9206      	str	r2, [sp, #24]
 8006bb4:	3a30      	subs	r2, #48	@ 0x30
 8006bb6:	2a09      	cmp	r2, #9
 8006bb8:	d9f3      	bls.n	8006ba2 <_svfprintf_r+0x27a>
 8006bba:	e715      	b.n	80069e8 <_svfprintf_r+0xc0>
 8006bbc:	f045 0508 	orr.w	r5, r5, #8
 8006bc0:	e7b5      	b.n	8006b2e <_svfprintf_r+0x206>
 8006bc2:	bf00      	nop
 8006bc4:	f3af 8000 	nop.w
	...
 8006bd0:	0800d868 	.word	0x0800d868
 8006bd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	2b68      	cmp	r3, #104	@ 0x68
 8006bda:	bf01      	itttt	eq
 8006bdc:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8006bde:	3301      	addeq	r3, #1
 8006be0:	930c      	streq	r3, [sp, #48]	@ 0x30
 8006be2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8006be6:	bf18      	it	ne
 8006be8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8006bec:	e79f      	b.n	8006b2e <_svfprintf_r+0x206>
 8006bee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b6c      	cmp	r3, #108	@ 0x6c
 8006bf4:	d105      	bne.n	8006c02 <_svfprintf_r+0x2da>
 8006bf6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bfc:	f045 0520 	orr.w	r5, r5, #32
 8006c00:	e795      	b.n	8006b2e <_svfprintf_r+0x206>
 8006c02:	f045 0510 	orr.w	r5, r5, #16
 8006c06:	e792      	b.n	8006b2e <_svfprintf_r+0x206>
 8006c08:	4632      	mov	r2, r6
 8006c0a:	f852 3b04 	ldr.w	r3, [r2], #4
 8006c0e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8006c12:	2300      	movs	r3, #0
 8006c14:	9207      	str	r2, [sp, #28]
 8006c16:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006c1a:	469a      	mov	sl, r3
 8006c1c:	f04f 0801 	mov.w	r8, #1
 8006c20:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c22:	461f      	mov	r7, r3
 8006c24:	9308      	str	r3, [sp, #32]
 8006c26:	461e      	mov	r6, r3
 8006c28:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8006c2c:	e1d2      	b.n	8006fd4 <_svfprintf_r+0x6ac>
 8006c2e:	f045 0510 	orr.w	r5, r5, #16
 8006c32:	06af      	lsls	r7, r5, #26
 8006c34:	d512      	bpl.n	8006c5c <_svfprintf_r+0x334>
 8006c36:	3607      	adds	r6, #7
 8006c38:	f026 0307 	bic.w	r3, r6, #7
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	685f      	ldr	r7, [r3, #4]
 8006c40:	f852 6b08 	ldr.w	r6, [r2], #8
 8006c44:	9207      	str	r2, [sp, #28]
 8006c46:	2f00      	cmp	r7, #0
 8006c48:	da06      	bge.n	8006c58 <_svfprintf_r+0x330>
 8006c4a:	4276      	negs	r6, r6
 8006c4c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8006c50:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006c54:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e37d      	b.n	8007358 <_svfprintf_r+0xa30>
 8006c5c:	4633      	mov	r3, r6
 8006c5e:	06ee      	lsls	r6, r5, #27
 8006c60:	f853 7b04 	ldr.w	r7, [r3], #4
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	d502      	bpl.n	8006c6e <_svfprintf_r+0x346>
 8006c68:	463e      	mov	r6, r7
 8006c6a:	17ff      	asrs	r7, r7, #31
 8006c6c:	e7eb      	b.n	8006c46 <_svfprintf_r+0x31e>
 8006c6e:	0668      	lsls	r0, r5, #25
 8006c70:	d503      	bpl.n	8006c7a <_svfprintf_r+0x352>
 8006c72:	b23e      	sxth	r6, r7
 8006c74:	f347 37c0 	sbfx	r7, r7, #15, #1
 8006c78:	e7e5      	b.n	8006c46 <_svfprintf_r+0x31e>
 8006c7a:	05a9      	lsls	r1, r5, #22
 8006c7c:	d5f4      	bpl.n	8006c68 <_svfprintf_r+0x340>
 8006c7e:	b27e      	sxtb	r6, r7
 8006c80:	f347 17c0 	sbfx	r7, r7, #7, #1
 8006c84:	e7df      	b.n	8006c46 <_svfprintf_r+0x31e>
 8006c86:	3607      	adds	r6, #7
 8006c88:	f026 0307 	bic.w	r3, r6, #7
 8006c8c:	ecb3 7b02 	vldmia	r3!, {d7}
 8006c90:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006c94:	9307      	str	r3, [sp, #28]
 8006c96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c98:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c9c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ca0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006ca2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8006ca6:	4b81      	ldr	r3, [pc, #516]	@ (8006eac <_svfprintf_r+0x584>)
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	f7f9 ff46 	bl	8000b3c <__aeabi_dcmpun>
 8006cb0:	bb10      	cbnz	r0, 8006cf8 <_svfprintf_r+0x3d0>
 8006cb2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8006cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8006eac <_svfprintf_r+0x584>)
 8006cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbc:	f7f9 ff20 	bl	8000b00 <__aeabi_dcmple>
 8006cc0:	b9d0      	cbnz	r0, 8006cf8 <_svfprintf_r+0x3d0>
 8006cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f7f9 ff0f 	bl	8000aec <__aeabi_dcmplt>
 8006cce:	b110      	cbz	r0, 8006cd6 <_svfprintf_r+0x3ae>
 8006cd0:	232d      	movs	r3, #45	@ 0x2d
 8006cd2:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8006cd6:	4a76      	ldr	r2, [pc, #472]	@ (8006eb0 <_svfprintf_r+0x588>)
 8006cd8:	4b76      	ldr	r3, [pc, #472]	@ (8006eb4 <_svfprintf_r+0x58c>)
 8006cda:	9906      	ldr	r1, [sp, #24]
 8006cdc:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8006ce0:	2947      	cmp	r1, #71	@ 0x47
 8006ce2:	bfd4      	ite	le
 8006ce4:	4691      	movle	r9, r2
 8006ce6:	4699      	movgt	r9, r3
 8006ce8:	f04f 0a00 	mov.w	sl, #0
 8006cec:	f04f 0803 	mov.w	r8, #3
 8006cf0:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8006cf4:	f000 bfec 	b.w	8007cd0 <_svfprintf_r+0x13a8>
 8006cf8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f7f9 ff1c 	bl	8000b3c <__aeabi_dcmpun>
 8006d04:	4682      	mov	sl, r0
 8006d06:	b140      	cbz	r0, 8006d1a <_svfprintf_r+0x3f2>
 8006d08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d0a:	4a6b      	ldr	r2, [pc, #428]	@ (8006eb8 <_svfprintf_r+0x590>)
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfbc      	itt	lt
 8006d10:	232d      	movlt	r3, #45	@ 0x2d
 8006d12:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8006d16:	4b69      	ldr	r3, [pc, #420]	@ (8006ebc <_svfprintf_r+0x594>)
 8006d18:	e7df      	b.n	8006cda <_svfprintf_r+0x3b2>
 8006d1a:	9b06      	ldr	r3, [sp, #24]
 8006d1c:	2b61      	cmp	r3, #97	@ 0x61
 8006d1e:	d025      	beq.n	8006d6c <_svfprintf_r+0x444>
 8006d20:	2b41      	cmp	r3, #65	@ 0x41
 8006d22:	d125      	bne.n	8006d70 <_svfprintf_r+0x448>
 8006d24:	2358      	movs	r3, #88	@ 0x58
 8006d26:	2230      	movs	r2, #48	@ 0x30
 8006d28:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8006d2c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8006d30:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8006d34:	f045 0502 	orr.w	r5, r5, #2
 8006d38:	f340 80a5 	ble.w	8006e86 <_svfprintf_r+0x55e>
 8006d3c:	9803      	ldr	r0, [sp, #12]
 8006d3e:	f108 0101 	add.w	r1, r8, #1
 8006d42:	f7ff fbab 	bl	800649c <_malloc_r>
 8006d46:	4681      	mov	r9, r0
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	f040 80a1 	bne.w	8006e90 <_svfprintf_r+0x568>
 8006d4e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d56:	f8ab 300c 	strh.w	r3, [fp, #12]
 8006d5a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8006d5e:	065b      	lsls	r3, r3, #25
 8006d60:	f53f ae04 	bmi.w	800696c <_svfprintf_r+0x44>
 8006d64:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006d66:	b053      	add	sp, #332	@ 0x14c
 8006d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6c:	2378      	movs	r3, #120	@ 0x78
 8006d6e:	e7da      	b.n	8006d26 <_svfprintf_r+0x3fe>
 8006d70:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006d74:	f000 808e 	beq.w	8006e94 <_svfprintf_r+0x56c>
 8006d78:	9b06      	ldr	r3, [sp, #24]
 8006d7a:	f023 0320 	bic.w	r3, r3, #32
 8006d7e:	2b47      	cmp	r3, #71	@ 0x47
 8006d80:	d105      	bne.n	8006d8e <_svfprintf_r+0x466>
 8006d82:	f1b8 0f00 	cmp.w	r8, #0
 8006d86:	d102      	bne.n	8006d8e <_svfprintf_r+0x466>
 8006d88:	46c2      	mov	sl, r8
 8006d8a:	f04f 0801 	mov.w	r8, #1
 8006d8e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8006d92:	9311      	str	r3, [sp, #68]	@ 0x44
 8006d94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	da7f      	bge.n	8006e9a <_svfprintf_r+0x572>
 8006d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006da0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8006da4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006da6:	232d      	movs	r3, #45	@ 0x2d
 8006da8:	931c      	str	r3, [sp, #112]	@ 0x70
 8006daa:	9b06      	ldr	r3, [sp, #24]
 8006dac:	f023 0320 	bic.w	r3, r3, #32
 8006db0:	2b41      	cmp	r3, #65	@ 0x41
 8006db2:	9308      	str	r3, [sp, #32]
 8006db4:	f040 81e6 	bne.w	8007184 <_svfprintf_r+0x85c>
 8006db8:	a820      	add	r0, sp, #128	@ 0x80
 8006dba:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8006dbe:	f002 fa93 	bl	80092e8 <frexp>
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006dc8:	ec51 0b10 	vmov	r0, r1, d0
 8006dcc:	f7f9 fc1c 	bl	8000608 <__aeabi_dmul>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f7f9 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006de0:	b108      	cbz	r0, 8006de6 <_svfprintf_r+0x4be>
 8006de2:	2301      	movs	r3, #1
 8006de4:	9320      	str	r3, [sp, #128]	@ 0x80
 8006de6:	4a36      	ldr	r2, [pc, #216]	@ (8006ec0 <_svfprintf_r+0x598>)
 8006de8:	4b36      	ldr	r3, [pc, #216]	@ (8006ec4 <_svfprintf_r+0x59c>)
 8006dea:	9906      	ldr	r1, [sp, #24]
 8006dec:	2961      	cmp	r1, #97	@ 0x61
 8006dee:	bf18      	it	ne
 8006df0:	461a      	movne	r2, r3
 8006df2:	9210      	str	r2, [sp, #64]	@ 0x40
 8006df4:	f108 37ff 	add.w	r7, r8, #4294967295
 8006df8:	464e      	mov	r6, r9
 8006dfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dfe:	4b32      	ldr	r3, [pc, #200]	@ (8006ec8 <_svfprintf_r+0x5a0>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	f7f9 fc01 	bl	8000608 <__aeabi_dmul>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e0e:	f7f9 feab 	bl	8000b68 <__aeabi_d2iz>
 8006e12:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006e14:	f7f9 fb8e 	bl	8000534 <__aeabi_i2d>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e20:	f7f9 fa3a 	bl	8000298 <__aeabi_dsub>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e2c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e2e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e30:	5c9b      	ldrb	r3, [r3, r2]
 8006e32:	f806 3b01 	strb.w	r3, [r6], #1
 8006e36:	1c7a      	adds	r2, r7, #1
 8006e38:	d006      	beq.n	8006e48 <_svfprintf_r+0x520>
 8006e3a:	1e7b      	subs	r3, r7, #1
 8006e3c:	931d      	str	r3, [sp, #116]	@ 0x74
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2300      	movs	r3, #0
 8006e42:	f7f9 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e46:	b370      	cbz	r0, 8006ea6 <_svfprintf_r+0x57e>
 8006e48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8006ecc <_svfprintf_r+0x5a4>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f7f9 fe6a 	bl	8000b28 <__aeabi_dcmpgt>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d13b      	bne.n	8006ed0 <_svfprintf_r+0x5a8>
 8006e58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ecc <_svfprintf_r+0x5a4>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f7f9 fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e64:	b110      	cbz	r0, 8006e6c <_svfprintf_r+0x544>
 8006e66:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e68:	07db      	lsls	r3, r3, #31
 8006e6a:	d431      	bmi.n	8006ed0 <_svfprintf_r+0x5a8>
 8006e6c:	4633      	mov	r3, r6
 8006e6e:	19f1      	adds	r1, r6, r7
 8006e70:	2030      	movs	r0, #48	@ 0x30
 8006e72:	1aca      	subs	r2, r1, r3
 8006e74:	2a00      	cmp	r2, #0
 8006e76:	f280 8182 	bge.w	800717e <_svfprintf_r+0x856>
 8006e7a:	1c7b      	adds	r3, r7, #1
 8006e7c:	3701      	adds	r7, #1
 8006e7e:	bfb8      	it	lt
 8006e80:	2300      	movlt	r3, #0
 8006e82:	441e      	add	r6, r3
 8006e84:	e038      	b.n	8006ef8 <_svfprintf_r+0x5d0>
 8006e86:	f04f 0a00 	mov.w	sl, #0
 8006e8a:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8006e8e:	e77e      	b.n	8006d8e <_svfprintf_r+0x466>
 8006e90:	4682      	mov	sl, r0
 8006e92:	e77c      	b.n	8006d8e <_svfprintf_r+0x466>
 8006e94:	f04f 0806 	mov.w	r8, #6
 8006e98:	e779      	b.n	8006d8e <_svfprintf_r+0x466>
 8006e9a:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8006ea4:	e780      	b.n	8006da8 <_svfprintf_r+0x480>
 8006ea6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8006ea8:	e7a7      	b.n	8006dfa <_svfprintf_r+0x4d2>
 8006eaa:	bf00      	nop
 8006eac:	7fefffff 	.word	0x7fefffff
 8006eb0:	0800d858 	.word	0x0800d858
 8006eb4:	0800d85c 	.word	0x0800d85c
 8006eb8:	0800d860 	.word	0x0800d860
 8006ebc:	0800d864 	.word	0x0800d864
 8006ec0:	0800d868 	.word	0x0800d868
 8006ec4:	0800d879 	.word	0x0800d879
 8006ec8:	40300000 	.word	0x40300000
 8006ecc:	3fe00000 	.word	0x3fe00000
 8006ed0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ed2:	9624      	str	r6, [sp, #144]	@ 0x90
 8006ed4:	7bd9      	ldrb	r1, [r3, #15]
 8006ed6:	2030      	movs	r0, #48	@ 0x30
 8006ed8:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006eda:	1e53      	subs	r3, r2, #1
 8006edc:	9324      	str	r3, [sp, #144]	@ 0x90
 8006ede:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8006ee2:	428b      	cmp	r3, r1
 8006ee4:	f000 8148 	beq.w	8007178 <_svfprintf_r+0x850>
 8006ee8:	2b39      	cmp	r3, #57	@ 0x39
 8006eea:	bf0b      	itete	eq
 8006eec:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8006eee:	3301      	addne	r3, #1
 8006ef0:	7a9b      	ldrbeq	r3, [r3, #10]
 8006ef2:	b2db      	uxtbne	r3, r3
 8006ef4:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006ef8:	eba6 0309 	sub.w	r3, r6, r9
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006f02:	2b47      	cmp	r3, #71	@ 0x47
 8006f04:	f040 8187 	bne.w	8007216 <_svfprintf_r+0x8ee>
 8006f08:	1cf1      	adds	r1, r6, #3
 8006f0a:	db02      	blt.n	8006f12 <_svfprintf_r+0x5ea>
 8006f0c:	4546      	cmp	r6, r8
 8006f0e:	f340 81a5 	ble.w	800725c <_svfprintf_r+0x934>
 8006f12:	9b06      	ldr	r3, [sp, #24]
 8006f14:	3b02      	subs	r3, #2
 8006f16:	9306      	str	r3, [sp, #24]
 8006f18:	9906      	ldr	r1, [sp, #24]
 8006f1a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8006f1e:	f021 0120 	bic.w	r1, r1, #32
 8006f22:	2941      	cmp	r1, #65	@ 0x41
 8006f24:	bf08      	it	eq
 8006f26:	320f      	addeq	r2, #15
 8006f28:	f106 33ff 	add.w	r3, r6, #4294967295
 8006f2c:	bf06      	itte	eq
 8006f2e:	b2d2      	uxtbeq	r2, r2
 8006f30:	2101      	moveq	r1, #1
 8006f32:	2100      	movne	r1, #0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f38:	bfb8      	it	lt
 8006f3a:	f1c6 0301 	rsblt	r3, r6, #1
 8006f3e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8006f42:	bfb4      	ite	lt
 8006f44:	222d      	movlt	r2, #45	@ 0x2d
 8006f46:	222b      	movge	r2, #43	@ 0x2b
 8006f48:	2b09      	cmp	r3, #9
 8006f4a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8006f4e:	f340 8178 	ble.w	8007242 <_svfprintf_r+0x91a>
 8006f52:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8006f56:	270a      	movs	r7, #10
 8006f58:	4602      	mov	r2, r0
 8006f5a:	fbb3 f6f7 	udiv	r6, r3, r7
 8006f5e:	fb07 3116 	mls	r1, r7, r6, r3
 8006f62:	3130      	adds	r1, #48	@ 0x30
 8006f64:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	2963      	cmp	r1, #99	@ 0x63
 8006f6c:	f100 30ff 	add.w	r0, r0, #4294967295
 8006f70:	4633      	mov	r3, r6
 8006f72:	dcf1      	bgt.n	8006f58 <_svfprintf_r+0x630>
 8006f74:	3330      	adds	r3, #48	@ 0x30
 8006f76:	1e91      	subs	r1, r2, #2
 8006f78:	f800 3c01 	strb.w	r3, [r0, #-1]
 8006f7c:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8006f80:	460b      	mov	r3, r1
 8006f82:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8006f86:	4283      	cmp	r3, r0
 8006f88:	f0c0 8156 	bcc.w	8007238 <_svfprintf_r+0x910>
 8006f8c:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	4281      	cmp	r1, r0
 8006f94:	bf88      	it	hi
 8006f96:	2300      	movhi	r3, #0
 8006f98:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8006f9c:	441a      	add	r2, r3
 8006f9e:	ab22      	add	r3, sp, #136	@ 0x88
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	9a04      	ldr	r2, [sp, #16]
 8006fa4:	9318      	str	r3, [sp, #96]	@ 0x60
 8006fa6:	2a01      	cmp	r2, #1
 8006fa8:	eb03 0802 	add.w	r8, r3, r2
 8006fac:	dc01      	bgt.n	8006fb2 <_svfprintf_r+0x68a>
 8006fae:	07ea      	lsls	r2, r5, #31
 8006fb0:	d501      	bpl.n	8006fb6 <_svfprintf_r+0x68e>
 8006fb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fb4:	4498      	add	r8, r3
 8006fb6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8006fba:	2700      	movs	r7, #0
 8006fbc:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8006fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fc2:	9708      	str	r7, [sp, #32]
 8006fc4:	463e      	mov	r6, r7
 8006fc6:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 818f 	bne.w	80072ec <_svfprintf_r+0x9c4>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8006fd2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fd6:	4543      	cmp	r3, r8
 8006fd8:	bfb8      	it	lt
 8006fda:	4643      	movlt	r3, r8
 8006fdc:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fde:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8006fe2:	b113      	cbz	r3, 8006fea <_svfprintf_r+0x6c2>
 8006fe4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006fea:	f015 0302 	ands.w	r3, r5, #2
 8006fee:	931c      	str	r3, [sp, #112]	@ 0x70
 8006ff0:	bf1e      	ittt	ne
 8006ff2:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8006ff4:	3302      	addne	r3, #2
 8006ff6:	9311      	strne	r3, [sp, #68]	@ 0x44
 8006ff8:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8006ffc:	931d      	str	r3, [sp, #116]	@ 0x74
 8006ffe:	d122      	bne.n	8007046 <_svfprintf_r+0x71e>
 8007000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007002:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	2b00      	cmp	r3, #0
 8007008:	9313      	str	r3, [sp, #76]	@ 0x4c
 800700a:	dd1c      	ble.n	8007046 <_svfprintf_r+0x71e>
 800700c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800700e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8007012:	2810      	cmp	r0, #16
 8007014:	489e      	ldr	r0, [pc, #632]	@ (8007290 <_svfprintf_r+0x968>)
 8007016:	6020      	str	r0, [r4, #0]
 8007018:	f102 0201 	add.w	r2, r2, #1
 800701c:	f104 0108 	add.w	r1, r4, #8
 8007020:	f300 8298 	bgt.w	8007554 <_svfprintf_r+0xc2c>
 8007024:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007026:	6060      	str	r0, [r4, #4]
 8007028:	4403      	add	r3, r0
 800702a:	2a07      	cmp	r2, #7
 800702c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007030:	f340 82a5 	ble.w	800757e <_svfprintf_r+0xc56>
 8007034:	9803      	ldr	r0, [sp, #12]
 8007036:	aa26      	add	r2, sp, #152	@ 0x98
 8007038:	4659      	mov	r1, fp
 800703a:	f004 fe89 	bl	800bd50 <__ssprint_r>
 800703e:	2800      	cmp	r0, #0
 8007040:	f040 85ed 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007044:	ac29      	add	r4, sp, #164	@ 0xa4
 8007046:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 800704a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800704c:	b16a      	cbz	r2, 800706a <_svfprintf_r+0x742>
 800704e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8007052:	6022      	str	r2, [r4, #0]
 8007054:	2201      	movs	r2, #1
 8007056:	4413      	add	r3, r2
 8007058:	9328      	str	r3, [sp, #160]	@ 0xa0
 800705a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800705c:	6062      	str	r2, [r4, #4]
 800705e:	4413      	add	r3, r2
 8007060:	2b07      	cmp	r3, #7
 8007062:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007064:	f300 828d 	bgt.w	8007582 <_svfprintf_r+0xc5a>
 8007068:	3408      	adds	r4, #8
 800706a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800706c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800706e:	b162      	cbz	r2, 800708a <_svfprintf_r+0x762>
 8007070:	aa1f      	add	r2, sp, #124	@ 0x7c
 8007072:	6022      	str	r2, [r4, #0]
 8007074:	2202      	movs	r2, #2
 8007076:	4413      	add	r3, r2
 8007078:	9328      	str	r3, [sp, #160]	@ 0xa0
 800707a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800707c:	6062      	str	r2, [r4, #4]
 800707e:	3301      	adds	r3, #1
 8007080:	2b07      	cmp	r3, #7
 8007082:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007084:	f300 8287 	bgt.w	8007596 <_svfprintf_r+0xc6e>
 8007088:	3408      	adds	r4, #8
 800708a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800708c:	2b80      	cmp	r3, #128	@ 0x80
 800708e:	d122      	bne.n	80070d6 <_svfprintf_r+0x7ae>
 8007090:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007092:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	2b00      	cmp	r3, #0
 8007098:	9313      	str	r3, [sp, #76]	@ 0x4c
 800709a:	dd1c      	ble.n	80070d6 <_svfprintf_r+0x7ae>
 800709c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800709e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80070a2:	2810      	cmp	r0, #16
 80070a4:	487b      	ldr	r0, [pc, #492]	@ (8007294 <_svfprintf_r+0x96c>)
 80070a6:	6020      	str	r0, [r4, #0]
 80070a8:	f102 0201 	add.w	r2, r2, #1
 80070ac:	f104 0108 	add.w	r1, r4, #8
 80070b0:	f300 827b 	bgt.w	80075aa <_svfprintf_r+0xc82>
 80070b4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80070b6:	6060      	str	r0, [r4, #4]
 80070b8:	4403      	add	r3, r0
 80070ba:	2a07      	cmp	r2, #7
 80070bc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80070c0:	f340 8288 	ble.w	80075d4 <_svfprintf_r+0xcac>
 80070c4:	9803      	ldr	r0, [sp, #12]
 80070c6:	aa26      	add	r2, sp, #152	@ 0x98
 80070c8:	4659      	mov	r1, fp
 80070ca:	f004 fe41 	bl	800bd50 <__ssprint_r>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	f040 85a5 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80070d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80070d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80070d8:	eba3 0308 	sub.w	r3, r3, r8
 80070dc:	2b00      	cmp	r3, #0
 80070de:	9310      	str	r3, [sp, #64]	@ 0x40
 80070e0:	dd1c      	ble.n	800711c <_svfprintf_r+0x7f4>
 80070e2:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80070e4:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 80070e8:	2810      	cmp	r0, #16
 80070ea:	486a      	ldr	r0, [pc, #424]	@ (8007294 <_svfprintf_r+0x96c>)
 80070ec:	6020      	str	r0, [r4, #0]
 80070ee:	f102 0201 	add.w	r2, r2, #1
 80070f2:	f104 0108 	add.w	r1, r4, #8
 80070f6:	f300 826f 	bgt.w	80075d8 <_svfprintf_r+0xcb0>
 80070fa:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80070fc:	6060      	str	r0, [r4, #4]
 80070fe:	4403      	add	r3, r0
 8007100:	2a07      	cmp	r2, #7
 8007102:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007106:	f340 827c 	ble.w	8007602 <_svfprintf_r+0xcda>
 800710a:	9803      	ldr	r0, [sp, #12]
 800710c:	aa26      	add	r2, sp, #152	@ 0x98
 800710e:	4659      	mov	r1, fp
 8007110:	f004 fe1e 	bl	800bd50 <__ssprint_r>
 8007114:	2800      	cmp	r0, #0
 8007116:	f040 8582 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 800711a:	ac29      	add	r4, sp, #164	@ 0xa4
 800711c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800711e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007120:	05ea      	lsls	r2, r5, #23
 8007122:	f100 8275 	bmi.w	8007610 <_svfprintf_r+0xce8>
 8007126:	4443      	add	r3, r8
 8007128:	9328      	str	r3, [sp, #160]	@ 0xa0
 800712a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800712c:	3301      	adds	r3, #1
 800712e:	2b07      	cmp	r3, #7
 8007130:	e9c4 9800 	strd	r9, r8, [r4]
 8007134:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007136:	f300 82b1 	bgt.w	800769c <_svfprintf_r+0xd74>
 800713a:	3408      	adds	r4, #8
 800713c:	076a      	lsls	r2, r5, #29
 800713e:	f100 8550 	bmi.w	8007be2 <_svfprintf_r+0x12ba>
 8007142:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007146:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007148:	428a      	cmp	r2, r1
 800714a:	bfac      	ite	ge
 800714c:	189b      	addge	r3, r3, r2
 800714e:	185b      	addlt	r3, r3, r1
 8007150:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007152:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007154:	b13b      	cbz	r3, 8007166 <_svfprintf_r+0x83e>
 8007156:	9803      	ldr	r0, [sp, #12]
 8007158:	aa26      	add	r2, sp, #152	@ 0x98
 800715a:	4659      	mov	r1, fp
 800715c:	f004 fdf8 	bl	800bd50 <__ssprint_r>
 8007160:	2800      	cmp	r0, #0
 8007162:	f040 855c 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007166:	2300      	movs	r3, #0
 8007168:	9327      	str	r3, [sp, #156]	@ 0x9c
 800716a:	f1ba 0f00 	cmp.w	sl, #0
 800716e:	f040 8572 	bne.w	8007c56 <_svfprintf_r+0x132e>
 8007172:	9e07      	ldr	r6, [sp, #28]
 8007174:	ac29      	add	r4, sp, #164	@ 0xa4
 8007176:	e0c6      	b.n	8007306 <_svfprintf_r+0x9de>
 8007178:	f802 0c01 	strb.w	r0, [r2, #-1]
 800717c:	e6ac      	b.n	8006ed8 <_svfprintf_r+0x5b0>
 800717e:	f803 0b01 	strb.w	r0, [r3], #1
 8007182:	e676      	b.n	8006e72 <_svfprintf_r+0x54a>
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	2b46      	cmp	r3, #70	@ 0x46
 8007188:	d005      	beq.n	8007196 <_svfprintf_r+0x86e>
 800718a:	2b45      	cmp	r3, #69	@ 0x45
 800718c:	d11a      	bne.n	80071c4 <_svfprintf_r+0x89c>
 800718e:	f108 0601 	add.w	r6, r8, #1
 8007192:	2102      	movs	r1, #2
 8007194:	e001      	b.n	800719a <_svfprintf_r+0x872>
 8007196:	4646      	mov	r6, r8
 8007198:	2103      	movs	r1, #3
 800719a:	ab24      	add	r3, sp, #144	@ 0x90
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	ab21      	add	r3, sp, #132	@ 0x84
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 80071a6:	ab20      	add	r3, sp, #128	@ 0x80
 80071a8:	9803      	ldr	r0, [sp, #12]
 80071aa:	4632      	mov	r2, r6
 80071ac:	f002 f99c 	bl	80094e8 <_dtoa_r>
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	2b47      	cmp	r3, #71	@ 0x47
 80071b4:	4681      	mov	r9, r0
 80071b6:	d119      	bne.n	80071ec <_svfprintf_r+0x8c4>
 80071b8:	07e8      	lsls	r0, r5, #31
 80071ba:	d405      	bmi.n	80071c8 <_svfprintf_r+0x8a0>
 80071bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071be:	eba3 0309 	sub.w	r3, r3, r9
 80071c2:	e69b      	b.n	8006efc <_svfprintf_r+0x5d4>
 80071c4:	4646      	mov	r6, r8
 80071c6:	e7e4      	b.n	8007192 <_svfprintf_r+0x86a>
 80071c8:	eb09 0706 	add.w	r7, r9, r6
 80071cc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 80071d0:	2200      	movs	r2, #0
 80071d2:	2300      	movs	r3, #0
 80071d4:	f7f9 fc80 	bl	8000ad8 <__aeabi_dcmpeq>
 80071d8:	b100      	cbz	r0, 80071dc <_svfprintf_r+0x8b4>
 80071da:	9724      	str	r7, [sp, #144]	@ 0x90
 80071dc:	2230      	movs	r2, #48	@ 0x30
 80071de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80071e0:	429f      	cmp	r7, r3
 80071e2:	d9eb      	bls.n	80071bc <_svfprintf_r+0x894>
 80071e4:	1c59      	adds	r1, r3, #1
 80071e6:	9124      	str	r1, [sp, #144]	@ 0x90
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e7f8      	b.n	80071de <_svfprintf_r+0x8b6>
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	2b46      	cmp	r3, #70	@ 0x46
 80071f0:	eb00 0706 	add.w	r7, r0, r6
 80071f4:	d1ea      	bne.n	80071cc <_svfprintf_r+0x8a4>
 80071f6:	7803      	ldrb	r3, [r0, #0]
 80071f8:	2b30      	cmp	r3, #48	@ 0x30
 80071fa:	d109      	bne.n	8007210 <_svfprintf_r+0x8e8>
 80071fc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 8007200:	2200      	movs	r2, #0
 8007202:	2300      	movs	r3, #0
 8007204:	f7f9 fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8007208:	b910      	cbnz	r0, 8007210 <_svfprintf_r+0x8e8>
 800720a:	f1c6 0601 	rsb	r6, r6, #1
 800720e:	9620      	str	r6, [sp, #128]	@ 0x80
 8007210:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007212:	441f      	add	r7, r3
 8007214:	e7da      	b.n	80071cc <_svfprintf_r+0x8a4>
 8007216:	9b08      	ldr	r3, [sp, #32]
 8007218:	2b46      	cmp	r3, #70	@ 0x46
 800721a:	f47f ae7d 	bne.w	8006f18 <_svfprintf_r+0x5f0>
 800721e:	f005 0301 	and.w	r3, r5, #1
 8007222:	2e00      	cmp	r6, #0
 8007224:	ea43 0308 	orr.w	r3, r3, r8
 8007228:	dd25      	ble.n	8007276 <_svfprintf_r+0x94e>
 800722a:	b37b      	cbz	r3, 800728c <_svfprintf_r+0x964>
 800722c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800722e:	18f3      	adds	r3, r6, r3
 8007230:	4498      	add	r8, r3
 8007232:	2366      	movs	r3, #102	@ 0x66
 8007234:	9306      	str	r3, [sp, #24]
 8007236:	e033      	b.n	80072a0 <_svfprintf_r+0x978>
 8007238:	f813 7b01 	ldrb.w	r7, [r3], #1
 800723c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8007240:	e6a1      	b.n	8006f86 <_svfprintf_r+0x65e>
 8007242:	b941      	cbnz	r1, 8007256 <_svfprintf_r+0x92e>
 8007244:	2230      	movs	r2, #48	@ 0x30
 8007246:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800724a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800724e:	3330      	adds	r3, #48	@ 0x30
 8007250:	f802 3b01 	strb.w	r3, [r2], #1
 8007254:	e6a3      	b.n	8006f9e <_svfprintf_r+0x676>
 8007256:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800725a:	e7f8      	b.n	800724e <_svfprintf_r+0x926>
 800725c:	9b04      	ldr	r3, [sp, #16]
 800725e:	429e      	cmp	r6, r3
 8007260:	da0d      	bge.n	800727e <_svfprintf_r+0x956>
 8007262:	9b04      	ldr	r3, [sp, #16]
 8007264:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007266:	2e00      	cmp	r6, #0
 8007268:	eb03 0802 	add.w	r8, r3, r2
 800726c:	dc0c      	bgt.n	8007288 <_svfprintf_r+0x960>
 800726e:	f1c6 0301 	rsb	r3, r6, #1
 8007272:	4498      	add	r8, r3
 8007274:	e008      	b.n	8007288 <_svfprintf_r+0x960>
 8007276:	b17b      	cbz	r3, 8007298 <_svfprintf_r+0x970>
 8007278:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800727a:	3301      	adds	r3, #1
 800727c:	e7d8      	b.n	8007230 <_svfprintf_r+0x908>
 800727e:	07eb      	lsls	r3, r5, #31
 8007280:	d521      	bpl.n	80072c6 <_svfprintf_r+0x99e>
 8007282:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007284:	eb06 0803 	add.w	r8, r6, r3
 8007288:	2367      	movs	r3, #103	@ 0x67
 800728a:	e7d3      	b.n	8007234 <_svfprintf_r+0x90c>
 800728c:	46b0      	mov	r8, r6
 800728e:	e7d0      	b.n	8007232 <_svfprintf_r+0x90a>
 8007290:	0800d89c 	.word	0x0800d89c
 8007294:	0800d88c 	.word	0x0800d88c
 8007298:	2366      	movs	r3, #102	@ 0x66
 800729a:	9306      	str	r3, [sp, #24]
 800729c:	f04f 0801 	mov.w	r8, #1
 80072a0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 80072a4:	9308      	str	r3, [sp, #32]
 80072a6:	d01f      	beq.n	80072e8 <_svfprintf_r+0x9c0>
 80072a8:	2700      	movs	r7, #0
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	9708      	str	r7, [sp, #32]
 80072ae:	f77f ae8a 	ble.w	8006fc6 <_svfprintf_r+0x69e>
 80072b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2bff      	cmp	r3, #255	@ 0xff
 80072b8:	d107      	bne.n	80072ca <_svfprintf_r+0x9a2>
 80072ba:	9b08      	ldr	r3, [sp, #32]
 80072bc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80072be:	443b      	add	r3, r7
 80072c0:	fb02 8803 	mla	r8, r2, r3, r8
 80072c4:	e67f      	b.n	8006fc6 <_svfprintf_r+0x69e>
 80072c6:	46b0      	mov	r8, r6
 80072c8:	e7de      	b.n	8007288 <_svfprintf_r+0x960>
 80072ca:	42b3      	cmp	r3, r6
 80072cc:	daf5      	bge.n	80072ba <_svfprintf_r+0x992>
 80072ce:	1af6      	subs	r6, r6, r3
 80072d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d2:	785b      	ldrb	r3, [r3, #1]
 80072d4:	b133      	cbz	r3, 80072e4 <_svfprintf_r+0x9bc>
 80072d6:	9b08      	ldr	r3, [sp, #32]
 80072d8:	3301      	adds	r3, #1
 80072da:	9308      	str	r3, [sp, #32]
 80072dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072de:	3301      	adds	r3, #1
 80072e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e2:	e7e6      	b.n	80072b2 <_svfprintf_r+0x98a>
 80072e4:	3701      	adds	r7, #1
 80072e6:	e7e4      	b.n	80072b2 <_svfprintf_r+0x98a>
 80072e8:	9f08      	ldr	r7, [sp, #32]
 80072ea:	e66c      	b.n	8006fc6 <_svfprintf_r+0x69e>
 80072ec:	232d      	movs	r3, #45	@ 0x2d
 80072ee:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80072f2:	e66c      	b.n	8006fce <_svfprintf_r+0x6a6>
 80072f4:	06af      	lsls	r7, r5, #26
 80072f6:	d50a      	bpl.n	800730e <_svfprintf_r+0x9e6>
 80072f8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80072fa:	6833      	ldr	r3, [r6, #0]
 80072fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80072fe:	17d2      	asrs	r2, r2, #31
 8007300:	e9c3 1200 	strd	r1, r2, [r3]
 8007304:	3604      	adds	r6, #4
 8007306:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800730a:	f7ff bb46 	b.w	800699a <_svfprintf_r+0x72>
 800730e:	06e8      	lsls	r0, r5, #27
 8007310:	d503      	bpl.n	800731a <_svfprintf_r+0x9f2>
 8007312:	6833      	ldr	r3, [r6, #0]
 8007314:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	e7f4      	b.n	8007304 <_svfprintf_r+0x9dc>
 800731a:	0669      	lsls	r1, r5, #25
 800731c:	d503      	bpl.n	8007326 <_svfprintf_r+0x9fe>
 800731e:	6833      	ldr	r3, [r6, #0]
 8007320:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007322:	801a      	strh	r2, [r3, #0]
 8007324:	e7ee      	b.n	8007304 <_svfprintf_r+0x9dc>
 8007326:	05aa      	lsls	r2, r5, #22
 8007328:	d5f3      	bpl.n	8007312 <_svfprintf_r+0x9ea>
 800732a:	6833      	ldr	r3, [r6, #0]
 800732c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800732e:	701a      	strb	r2, [r3, #0]
 8007330:	e7e8      	b.n	8007304 <_svfprintf_r+0x9dc>
 8007332:	f045 0510 	orr.w	r5, r5, #16
 8007336:	f015 0320 	ands.w	r3, r5, #32
 800733a:	d020      	beq.n	800737e <_svfprintf_r+0xa56>
 800733c:	3607      	adds	r6, #7
 800733e:	f026 0307 	bic.w	r3, r6, #7
 8007342:	461a      	mov	r2, r3
 8007344:	685f      	ldr	r7, [r3, #4]
 8007346:	f852 6b08 	ldr.w	r6, [r2], #8
 800734a:	9207      	str	r2, [sp, #28]
 800734c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8007350:	2300      	movs	r3, #0
 8007352:	2200      	movs	r2, #0
 8007354:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8007358:	f1b8 3fff 	cmp.w	r8, #4294967295
 800735c:	f000 848c 	beq.w	8007c78 <_svfprintf_r+0x1350>
 8007360:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8007364:	9208      	str	r2, [sp, #32]
 8007366:	ea56 0207 	orrs.w	r2, r6, r7
 800736a:	f040 848a 	bne.w	8007c82 <_svfprintf_r+0x135a>
 800736e:	f1b8 0f00 	cmp.w	r8, #0
 8007372:	f000 80db 	beq.w	800752c <_svfprintf_r+0xc04>
 8007376:	2b01      	cmp	r3, #1
 8007378:	f040 8486 	bne.w	8007c88 <_svfprintf_r+0x1360>
 800737c:	e083      	b.n	8007486 <_svfprintf_r+0xb5e>
 800737e:	4632      	mov	r2, r6
 8007380:	f015 0710 	ands.w	r7, r5, #16
 8007384:	f852 6b04 	ldr.w	r6, [r2], #4
 8007388:	9207      	str	r2, [sp, #28]
 800738a:	d001      	beq.n	8007390 <_svfprintf_r+0xa68>
 800738c:	461f      	mov	r7, r3
 800738e:	e7dd      	b.n	800734c <_svfprintf_r+0xa24>
 8007390:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8007394:	d001      	beq.n	800739a <_svfprintf_r+0xa72>
 8007396:	b2b6      	uxth	r6, r6
 8007398:	e7d8      	b.n	800734c <_svfprintf_r+0xa24>
 800739a:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800739e:	d0d5      	beq.n	800734c <_svfprintf_r+0xa24>
 80073a0:	b2f6      	uxtb	r6, r6
 80073a2:	e7f3      	b.n	800738c <_svfprintf_r+0xa64>
 80073a4:	4633      	mov	r3, r6
 80073a6:	2278      	movs	r2, #120	@ 0x78
 80073a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80073ac:	9307      	str	r3, [sp, #28]
 80073ae:	f647 0330 	movw	r3, #30768	@ 0x7830
 80073b2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 80073b6:	4b94      	ldr	r3, [pc, #592]	@ (8007608 <_svfprintf_r+0xce0>)
 80073b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80073ba:	2700      	movs	r7, #0
 80073bc:	f045 0502 	orr.w	r5, r5, #2
 80073c0:	2302      	movs	r3, #2
 80073c2:	9206      	str	r2, [sp, #24]
 80073c4:	e7c5      	b.n	8007352 <_svfprintf_r+0xa2a>
 80073c6:	4633      	mov	r3, r6
 80073c8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80073cc:	f853 9b04 	ldr.w	r9, [r3], #4
 80073d0:	9307      	str	r3, [sp, #28]
 80073d2:	f04f 0600 	mov.w	r6, #0
 80073d6:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 80073da:	d00f      	beq.n	80073fc <_svfprintf_r+0xad4>
 80073dc:	4642      	mov	r2, r8
 80073de:	4631      	mov	r1, r6
 80073e0:	4648      	mov	r0, r9
 80073e2:	f7f8 ff05 	bl	80001f0 <memchr>
 80073e6:	4682      	mov	sl, r0
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f43f ac81 	beq.w	8006cf0 <_svfprintf_r+0x3c8>
 80073ee:	eba0 0809 	sub.w	r8, r0, r9
 80073f2:	46b2      	mov	sl, r6
 80073f4:	9610      	str	r6, [sp, #64]	@ 0x40
 80073f6:	4637      	mov	r7, r6
 80073f8:	9608      	str	r6, [sp, #32]
 80073fa:	e5eb      	b.n	8006fd4 <_svfprintf_r+0x6ac>
 80073fc:	4648      	mov	r0, r9
 80073fe:	f7f8 feef 	bl	80001e0 <strlen>
 8007402:	46b2      	mov	sl, r6
 8007404:	4680      	mov	r8, r0
 8007406:	e473      	b.n	8006cf0 <_svfprintf_r+0x3c8>
 8007408:	f045 0510 	orr.w	r5, r5, #16
 800740c:	f015 0320 	ands.w	r3, r5, #32
 8007410:	d009      	beq.n	8007426 <_svfprintf_r+0xafe>
 8007412:	3607      	adds	r6, #7
 8007414:	f026 0307 	bic.w	r3, r6, #7
 8007418:	461a      	mov	r2, r3
 800741a:	685f      	ldr	r7, [r3, #4]
 800741c:	f852 6b08 	ldr.w	r6, [r2], #8
 8007420:	9207      	str	r2, [sp, #28]
 8007422:	2301      	movs	r3, #1
 8007424:	e795      	b.n	8007352 <_svfprintf_r+0xa2a>
 8007426:	4632      	mov	r2, r6
 8007428:	f015 0710 	ands.w	r7, r5, #16
 800742c:	f852 6b04 	ldr.w	r6, [r2], #4
 8007430:	9207      	str	r2, [sp, #28]
 8007432:	d001      	beq.n	8007438 <_svfprintf_r+0xb10>
 8007434:	461f      	mov	r7, r3
 8007436:	e7f4      	b.n	8007422 <_svfprintf_r+0xafa>
 8007438:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800743c:	d001      	beq.n	8007442 <_svfprintf_r+0xb1a>
 800743e:	b2b6      	uxth	r6, r6
 8007440:	e7ef      	b.n	8007422 <_svfprintf_r+0xafa>
 8007442:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8007446:	d0ec      	beq.n	8007422 <_svfprintf_r+0xafa>
 8007448:	b2f6      	uxtb	r6, r6
 800744a:	e7f3      	b.n	8007434 <_svfprintf_r+0xb0c>
 800744c:	4b6f      	ldr	r3, [pc, #444]	@ (800760c <_svfprintf_r+0xce4>)
 800744e:	f7ff bb39 	b.w	8006ac4 <_svfprintf_r+0x19c>
 8007452:	4632      	mov	r2, r6
 8007454:	f015 0710 	ands.w	r7, r5, #16
 8007458:	f852 6b04 	ldr.w	r6, [r2], #4
 800745c:	9207      	str	r2, [sp, #28]
 800745e:	d002      	beq.n	8007466 <_svfprintf_r+0xb3e>
 8007460:	461f      	mov	r7, r3
 8007462:	f7ff bb3c 	b.w	8006ade <_svfprintf_r+0x1b6>
 8007466:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800746a:	d002      	beq.n	8007472 <_svfprintf_r+0xb4a>
 800746c:	b2b6      	uxth	r6, r6
 800746e:	f7ff bb36 	b.w	8006ade <_svfprintf_r+0x1b6>
 8007472:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 8007476:	f43f ab32 	beq.w	8006ade <_svfprintf_r+0x1b6>
 800747a:	b2f6      	uxtb	r6, r6
 800747c:	e7f0      	b.n	8007460 <_svfprintf_r+0xb38>
 800747e:	2e0a      	cmp	r6, #10
 8007480:	f177 0300 	sbcs.w	r3, r7, #0
 8007484:	d207      	bcs.n	8007496 <_svfprintf_r+0xb6e>
 8007486:	3630      	adds	r6, #48	@ 0x30
 8007488:	b2f6      	uxtb	r6, r6
 800748a:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800748e:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 8007492:	f000 bc15 	b.w	8007cc0 <_svfprintf_r+0x1398>
 8007496:	2300      	movs	r3, #0
 8007498:	9304      	str	r3, [sp, #16]
 800749a:	9b08      	ldr	r3, [sp, #32]
 800749c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074a0:	ad52      	add	r5, sp, #328	@ 0x148
 80074a2:	9310      	str	r3, [sp, #64]	@ 0x40
 80074a4:	220a      	movs	r2, #10
 80074a6:	2300      	movs	r3, #0
 80074a8:	4630      	mov	r0, r6
 80074aa:	4639      	mov	r1, r7
 80074ac:	f7f9 fbf4 	bl	8000c98 <__aeabi_uldivmod>
 80074b0:	9b04      	ldr	r3, [sp, #16]
 80074b2:	9011      	str	r0, [sp, #68]	@ 0x44
 80074b4:	3301      	adds	r3, #1
 80074b6:	9304      	str	r3, [sp, #16]
 80074b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80074ba:	3230      	adds	r2, #48	@ 0x30
 80074bc:	468a      	mov	sl, r1
 80074be:	f105 39ff 	add.w	r9, r5, #4294967295
 80074c2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80074c6:	b1d3      	cbz	r3, 80074fe <_svfprintf_r+0xbd6>
 80074c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ca:	9a04      	ldr	r2, [sp, #16]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d115      	bne.n	80074fe <_svfprintf_r+0xbd6>
 80074d2:	2aff      	cmp	r2, #255	@ 0xff
 80074d4:	d013      	beq.n	80074fe <_svfprintf_r+0xbd6>
 80074d6:	2e0a      	cmp	r6, #10
 80074d8:	f177 0300 	sbcs.w	r3, r7, #0
 80074dc:	d30f      	bcc.n	80074fe <_svfprintf_r+0xbd6>
 80074de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074e0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80074e2:	eba9 0903 	sub.w	r9, r9, r3
 80074e6:	461a      	mov	r2, r3
 80074e8:	4648      	mov	r0, r9
 80074ea:	f001 fea9 	bl	8009240 <strncpy>
 80074ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f0:	785b      	ldrb	r3, [r3, #1]
 80074f2:	b11b      	cbz	r3, 80074fc <_svfprintf_r+0xbd4>
 80074f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f6:	3301      	adds	r3, #1
 80074f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fa:	2300      	movs	r3, #0
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	2e0a      	cmp	r6, #10
 8007500:	f177 0700 	sbcs.w	r7, r7, #0
 8007504:	f0c0 83dc 	bcc.w	8007cc0 <_svfprintf_r+0x1398>
 8007508:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800750a:	4657      	mov	r7, sl
 800750c:	464d      	mov	r5, r9
 800750e:	e7c9      	b.n	80074a4 <_svfprintf_r+0xb7c>
 8007510:	f006 030f 	and.w	r3, r6, #15
 8007514:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007516:	0936      	lsrs	r6, r6, #4
 8007518:	5cd3      	ldrb	r3, [r2, r3]
 800751a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800751e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 8007522:	093f      	lsrs	r7, r7, #4
 8007524:	ea56 0307 	orrs.w	r3, r6, r7
 8007528:	d1f2      	bne.n	8007510 <_svfprintf_r+0xbe8>
 800752a:	e3c9      	b.n	8007cc0 <_svfprintf_r+0x1398>
 800752c:	b91b      	cbnz	r3, 8007536 <_svfprintf_r+0xc0e>
 800752e:	07e9      	lsls	r1, r5, #31
 8007530:	d501      	bpl.n	8007536 <_svfprintf_r+0xc0e>
 8007532:	2630      	movs	r6, #48	@ 0x30
 8007534:	e7a9      	b.n	800748a <_svfprintf_r+0xb62>
 8007536:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800753a:	e3c1      	b.n	8007cc0 <_svfprintf_r+0x1398>
 800753c:	9b06      	ldr	r3, [sp, #24]
 800753e:	2b00      	cmp	r3, #0
 8007540:	f000 838f 	beq.w	8007c62 <_svfprintf_r+0x133a>
 8007544:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8007548:	2300      	movs	r3, #0
 800754a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800754e:	9607      	str	r6, [sp, #28]
 8007550:	f7ff bb63 	b.w	8006c1a <_svfprintf_r+0x2f2>
 8007554:	2010      	movs	r0, #16
 8007556:	4403      	add	r3, r0
 8007558:	2a07      	cmp	r2, #7
 800755a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800755e:	6060      	str	r0, [r4, #4]
 8007560:	dd08      	ble.n	8007574 <_svfprintf_r+0xc4c>
 8007562:	9803      	ldr	r0, [sp, #12]
 8007564:	aa26      	add	r2, sp, #152	@ 0x98
 8007566:	4659      	mov	r1, fp
 8007568:	f004 fbf2 	bl	800bd50 <__ssprint_r>
 800756c:	2800      	cmp	r0, #0
 800756e:	f040 8356 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007572:	a929      	add	r1, sp, #164	@ 0xa4
 8007574:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007576:	3b10      	subs	r3, #16
 8007578:	9313      	str	r3, [sp, #76]	@ 0x4c
 800757a:	460c      	mov	r4, r1
 800757c:	e546      	b.n	800700c <_svfprintf_r+0x6e4>
 800757e:	460c      	mov	r4, r1
 8007580:	e561      	b.n	8007046 <_svfprintf_r+0x71e>
 8007582:	9803      	ldr	r0, [sp, #12]
 8007584:	aa26      	add	r2, sp, #152	@ 0x98
 8007586:	4659      	mov	r1, fp
 8007588:	f004 fbe2 	bl	800bd50 <__ssprint_r>
 800758c:	2800      	cmp	r0, #0
 800758e:	f040 8346 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007592:	ac29      	add	r4, sp, #164	@ 0xa4
 8007594:	e569      	b.n	800706a <_svfprintf_r+0x742>
 8007596:	9803      	ldr	r0, [sp, #12]
 8007598:	aa26      	add	r2, sp, #152	@ 0x98
 800759a:	4659      	mov	r1, fp
 800759c:	f004 fbd8 	bl	800bd50 <__ssprint_r>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f040 833c 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80075a6:	ac29      	add	r4, sp, #164	@ 0xa4
 80075a8:	e56f      	b.n	800708a <_svfprintf_r+0x762>
 80075aa:	2010      	movs	r0, #16
 80075ac:	4403      	add	r3, r0
 80075ae:	2a07      	cmp	r2, #7
 80075b0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80075b4:	6060      	str	r0, [r4, #4]
 80075b6:	dd08      	ble.n	80075ca <_svfprintf_r+0xca2>
 80075b8:	9803      	ldr	r0, [sp, #12]
 80075ba:	aa26      	add	r2, sp, #152	@ 0x98
 80075bc:	4659      	mov	r1, fp
 80075be:	f004 fbc7 	bl	800bd50 <__ssprint_r>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	f040 832b 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80075c8:	a929      	add	r1, sp, #164	@ 0xa4
 80075ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075cc:	3b10      	subs	r3, #16
 80075ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075d0:	460c      	mov	r4, r1
 80075d2:	e563      	b.n	800709c <_svfprintf_r+0x774>
 80075d4:	460c      	mov	r4, r1
 80075d6:	e57e      	b.n	80070d6 <_svfprintf_r+0x7ae>
 80075d8:	2010      	movs	r0, #16
 80075da:	4403      	add	r3, r0
 80075dc:	2a07      	cmp	r2, #7
 80075de:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80075e2:	6060      	str	r0, [r4, #4]
 80075e4:	dd08      	ble.n	80075f8 <_svfprintf_r+0xcd0>
 80075e6:	9803      	ldr	r0, [sp, #12]
 80075e8:	aa26      	add	r2, sp, #152	@ 0x98
 80075ea:	4659      	mov	r1, fp
 80075ec:	f004 fbb0 	bl	800bd50 <__ssprint_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f040 8314 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80075f6:	a929      	add	r1, sp, #164	@ 0xa4
 80075f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075fa:	3b10      	subs	r3, #16
 80075fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80075fe:	460c      	mov	r4, r1
 8007600:	e56f      	b.n	80070e2 <_svfprintf_r+0x7ba>
 8007602:	460c      	mov	r4, r1
 8007604:	e58a      	b.n	800711c <_svfprintf_r+0x7f4>
 8007606:	bf00      	nop
 8007608:	0800d868 	.word	0x0800d868
 800760c:	0800d879 	.word	0x0800d879
 8007610:	9b06      	ldr	r3, [sp, #24]
 8007612:	2b65      	cmp	r3, #101	@ 0x65
 8007614:	f340 8246 	ble.w	8007aa4 <_svfprintf_r+0x117c>
 8007618:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	f7f9 fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007624:	2800      	cmp	r0, #0
 8007626:	d06a      	beq.n	80076fe <_svfprintf_r+0xdd6>
 8007628:	4b73      	ldr	r3, [pc, #460]	@ (80077f8 <_svfprintf_r+0xed0>)
 800762a:	6023      	str	r3, [r4, #0]
 800762c:	2301      	movs	r3, #1
 800762e:	6063      	str	r3, [r4, #4]
 8007630:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007632:	3301      	adds	r3, #1
 8007634:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007636:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007638:	3301      	adds	r3, #1
 800763a:	2b07      	cmp	r3, #7
 800763c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800763e:	dc37      	bgt.n	80076b0 <_svfprintf_r+0xd88>
 8007640:	3408      	adds	r4, #8
 8007642:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007644:	9a04      	ldr	r2, [sp, #16]
 8007646:	4293      	cmp	r3, r2
 8007648:	db02      	blt.n	8007650 <_svfprintf_r+0xd28>
 800764a:	07ef      	lsls	r7, r5, #31
 800764c:	f57f ad76 	bpl.w	800713c <_svfprintf_r+0x814>
 8007650:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007656:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007658:	6063      	str	r3, [r4, #4]
 800765a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800765c:	4413      	add	r3, r2
 800765e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007660:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007662:	3301      	adds	r3, #1
 8007664:	2b07      	cmp	r3, #7
 8007666:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007668:	dc2c      	bgt.n	80076c4 <_svfprintf_r+0xd9c>
 800766a:	3408      	adds	r4, #8
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	1e5e      	subs	r6, r3, #1
 8007670:	2e00      	cmp	r6, #0
 8007672:	f77f ad63 	ble.w	800713c <_svfprintf_r+0x814>
 8007676:	4f61      	ldr	r7, [pc, #388]	@ (80077fc <_svfprintf_r+0xed4>)
 8007678:	f04f 0810 	mov.w	r8, #16
 800767c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007680:	2e10      	cmp	r6, #16
 8007682:	f103 0301 	add.w	r3, r3, #1
 8007686:	f104 0108 	add.w	r1, r4, #8
 800768a:	6027      	str	r7, [r4, #0]
 800768c:	dc24      	bgt.n	80076d8 <_svfprintf_r+0xdb0>
 800768e:	6066      	str	r6, [r4, #4]
 8007690:	2b07      	cmp	r3, #7
 8007692:	4416      	add	r6, r2
 8007694:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8007698:	f340 82a0 	ble.w	8007bdc <_svfprintf_r+0x12b4>
 800769c:	9803      	ldr	r0, [sp, #12]
 800769e:	aa26      	add	r2, sp, #152	@ 0x98
 80076a0:	4659      	mov	r1, fp
 80076a2:	f004 fb55 	bl	800bd50 <__ssprint_r>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f040 82b9 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80076ac:	ac29      	add	r4, sp, #164	@ 0xa4
 80076ae:	e545      	b.n	800713c <_svfprintf_r+0x814>
 80076b0:	9803      	ldr	r0, [sp, #12]
 80076b2:	aa26      	add	r2, sp, #152	@ 0x98
 80076b4:	4659      	mov	r1, fp
 80076b6:	f004 fb4b 	bl	800bd50 <__ssprint_r>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f040 82af 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80076c0:	ac29      	add	r4, sp, #164	@ 0xa4
 80076c2:	e7be      	b.n	8007642 <_svfprintf_r+0xd1a>
 80076c4:	9803      	ldr	r0, [sp, #12]
 80076c6:	aa26      	add	r2, sp, #152	@ 0x98
 80076c8:	4659      	mov	r1, fp
 80076ca:	f004 fb41 	bl	800bd50 <__ssprint_r>
 80076ce:	2800      	cmp	r0, #0
 80076d0:	f040 82a5 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80076d4:	ac29      	add	r4, sp, #164	@ 0xa4
 80076d6:	e7c9      	b.n	800766c <_svfprintf_r+0xd44>
 80076d8:	3210      	adds	r2, #16
 80076da:	2b07      	cmp	r3, #7
 80076dc:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80076e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80076e4:	dd08      	ble.n	80076f8 <_svfprintf_r+0xdd0>
 80076e6:	9803      	ldr	r0, [sp, #12]
 80076e8:	aa26      	add	r2, sp, #152	@ 0x98
 80076ea:	4659      	mov	r1, fp
 80076ec:	f004 fb30 	bl	800bd50 <__ssprint_r>
 80076f0:	2800      	cmp	r0, #0
 80076f2:	f040 8294 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80076f6:	a929      	add	r1, sp, #164	@ 0xa4
 80076f8:	3e10      	subs	r6, #16
 80076fa:	460c      	mov	r4, r1
 80076fc:	e7be      	b.n	800767c <_svfprintf_r+0xd54>
 80076fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007700:	2b00      	cmp	r3, #0
 8007702:	dc7d      	bgt.n	8007800 <_svfprintf_r+0xed8>
 8007704:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <_svfprintf_r+0xed0>)
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	2301      	movs	r3, #1
 800770a:	6063      	str	r3, [r4, #4]
 800770c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800770e:	3301      	adds	r3, #1
 8007710:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007712:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007714:	3301      	adds	r3, #1
 8007716:	2b07      	cmp	r3, #7
 8007718:	9327      	str	r3, [sp, #156]	@ 0x9c
 800771a:	dc46      	bgt.n	80077aa <_svfprintf_r+0xe82>
 800771c:	3408      	adds	r4, #8
 800771e:	9904      	ldr	r1, [sp, #16]
 8007720:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007722:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007724:	430b      	orrs	r3, r1
 8007726:	f005 0101 	and.w	r1, r5, #1
 800772a:	430b      	orrs	r3, r1
 800772c:	f43f ad06 	beq.w	800713c <_svfprintf_r+0x814>
 8007730:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007732:	6023      	str	r3, [r4, #0]
 8007734:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007736:	6063      	str	r3, [r4, #4]
 8007738:	441a      	add	r2, r3
 800773a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800773c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800773e:	3301      	adds	r3, #1
 8007740:	2b07      	cmp	r3, #7
 8007742:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007744:	dc3b      	bgt.n	80077be <_svfprintf_r+0xe96>
 8007746:	f104 0308 	add.w	r3, r4, #8
 800774a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800774c:	2e00      	cmp	r6, #0
 800774e:	da1b      	bge.n	8007788 <_svfprintf_r+0xe60>
 8007750:	4f2a      	ldr	r7, [pc, #168]	@ (80077fc <_svfprintf_r+0xed4>)
 8007752:	4276      	negs	r6, r6
 8007754:	461a      	mov	r2, r3
 8007756:	2410      	movs	r4, #16
 8007758:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800775c:	2e10      	cmp	r6, #16
 800775e:	f101 0101 	add.w	r1, r1, #1
 8007762:	f103 0308 	add.w	r3, r3, #8
 8007766:	6017      	str	r7, [r2, #0]
 8007768:	dc33      	bgt.n	80077d2 <_svfprintf_r+0xeaa>
 800776a:	6056      	str	r6, [r2, #4]
 800776c:	2907      	cmp	r1, #7
 800776e:	4406      	add	r6, r0
 8007770:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 8007774:	dd08      	ble.n	8007788 <_svfprintf_r+0xe60>
 8007776:	9803      	ldr	r0, [sp, #12]
 8007778:	aa26      	add	r2, sp, #152	@ 0x98
 800777a:	4659      	mov	r1, fp
 800777c:	f004 fae8 	bl	800bd50 <__ssprint_r>
 8007780:	2800      	cmp	r0, #0
 8007782:	f040 824c 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007786:	ab29      	add	r3, sp, #164	@ 0xa4
 8007788:	9a04      	ldr	r2, [sp, #16]
 800778a:	9904      	ldr	r1, [sp, #16]
 800778c:	605a      	str	r2, [r3, #4]
 800778e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8007790:	f8c3 9000 	str.w	r9, [r3]
 8007794:	440a      	add	r2, r1
 8007796:	9228      	str	r2, [sp, #160]	@ 0xa0
 8007798:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800779a:	3201      	adds	r2, #1
 800779c:	2a07      	cmp	r2, #7
 800779e:	9227      	str	r2, [sp, #156]	@ 0x9c
 80077a0:	f73f af7c 	bgt.w	800769c <_svfprintf_r+0xd74>
 80077a4:	f103 0408 	add.w	r4, r3, #8
 80077a8:	e4c8      	b.n	800713c <_svfprintf_r+0x814>
 80077aa:	9803      	ldr	r0, [sp, #12]
 80077ac:	aa26      	add	r2, sp, #152	@ 0x98
 80077ae:	4659      	mov	r1, fp
 80077b0:	f004 face 	bl	800bd50 <__ssprint_r>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f040 8232 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80077ba:	ac29      	add	r4, sp, #164	@ 0xa4
 80077bc:	e7af      	b.n	800771e <_svfprintf_r+0xdf6>
 80077be:	9803      	ldr	r0, [sp, #12]
 80077c0:	aa26      	add	r2, sp, #152	@ 0x98
 80077c2:	4659      	mov	r1, fp
 80077c4:	f004 fac4 	bl	800bd50 <__ssprint_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f040 8228 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80077ce:	ab29      	add	r3, sp, #164	@ 0xa4
 80077d0:	e7bb      	b.n	800774a <_svfprintf_r+0xe22>
 80077d2:	3010      	adds	r0, #16
 80077d4:	2907      	cmp	r1, #7
 80077d6:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 80077da:	6054      	str	r4, [r2, #4]
 80077dc:	dd08      	ble.n	80077f0 <_svfprintf_r+0xec8>
 80077de:	9803      	ldr	r0, [sp, #12]
 80077e0:	aa26      	add	r2, sp, #152	@ 0x98
 80077e2:	4659      	mov	r1, fp
 80077e4:	f004 fab4 	bl	800bd50 <__ssprint_r>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	f040 8218 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 80077ee:	ab29      	add	r3, sp, #164	@ 0xa4
 80077f0:	3e10      	subs	r6, #16
 80077f2:	461a      	mov	r2, r3
 80077f4:	e7b0      	b.n	8007758 <_svfprintf_r+0xe30>
 80077f6:	bf00      	nop
 80077f8:	0800d88a 	.word	0x0800d88a
 80077fc:	0800d88c 	.word	0x0800d88c
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	444b      	add	r3, r9
 8007804:	9306      	str	r3, [sp, #24]
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	42b3      	cmp	r3, r6
 800780a:	bfa8      	it	ge
 800780c:	4633      	movge	r3, r6
 800780e:	2b00      	cmp	r3, #0
 8007810:	4698      	mov	r8, r3
 8007812:	dd0b      	ble.n	800782c <_svfprintf_r+0xf04>
 8007814:	e9c4 9300 	strd	r9, r3, [r4]
 8007818:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800781a:	4443      	add	r3, r8
 800781c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800781e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007820:	3301      	adds	r3, #1
 8007822:	2b07      	cmp	r3, #7
 8007824:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007826:	f300 8089 	bgt.w	800793c <_svfprintf_r+0x1014>
 800782a:	3408      	adds	r4, #8
 800782c:	4643      	mov	r3, r8
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfac      	ite	ge
 8007832:	eba6 0808 	subge.w	r8, r6, r8
 8007836:	46b0      	movlt	r8, r6
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	dd1b      	ble.n	8007876 <_svfprintf_r+0xf4e>
 800783e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8007842:	4897      	ldr	r0, [pc, #604]	@ (8007aa0 <_svfprintf_r+0x1178>)
 8007844:	6020      	str	r0, [r4, #0]
 8007846:	f1b8 0f10 	cmp.w	r8, #16
 800784a:	f102 0201 	add.w	r2, r2, #1
 800784e:	f104 0108 	add.w	r1, r4, #8
 8007852:	dc7d      	bgt.n	8007950 <_svfprintf_r+0x1028>
 8007854:	4443      	add	r3, r8
 8007856:	2a07      	cmp	r2, #7
 8007858:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800785c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007860:	f340 808a 	ble.w	8007978 <_svfprintf_r+0x1050>
 8007864:	9803      	ldr	r0, [sp, #12]
 8007866:	aa26      	add	r2, sp, #152	@ 0x98
 8007868:	4659      	mov	r1, fp
 800786a:	f004 fa71 	bl	800bd50 <__ssprint_r>
 800786e:	2800      	cmp	r0, #0
 8007870:	f040 81d5 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007874:	ac29      	add	r4, sp, #164	@ 0xa4
 8007876:	eb09 0806 	add.w	r8, r9, r6
 800787a:	056e      	lsls	r6, r5, #21
 800787c:	d508      	bpl.n	8007890 <_svfprintf_r+0xf68>
 800787e:	9b08      	ldr	r3, [sp, #32]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d17b      	bne.n	800797c <_svfprintf_r+0x1054>
 8007884:	2f00      	cmp	r7, #0
 8007886:	d17b      	bne.n	8007980 <_svfprintf_r+0x1058>
 8007888:	9b06      	ldr	r3, [sp, #24]
 800788a:	4598      	cmp	r8, r3
 800788c:	bf28      	it	cs
 800788e:	4698      	movcs	r8, r3
 8007890:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007892:	9a04      	ldr	r2, [sp, #16]
 8007894:	4293      	cmp	r3, r2
 8007896:	db01      	blt.n	800789c <_svfprintf_r+0xf74>
 8007898:	07e8      	lsls	r0, r5, #31
 800789a:	d50e      	bpl.n	80078ba <_svfprintf_r+0xf92>
 800789c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078a2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80078a8:	4413      	add	r3, r2
 80078aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80078ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80078ae:	3301      	adds	r3, #1
 80078b0:	2b07      	cmp	r3, #7
 80078b2:	9327      	str	r3, [sp, #156]	@ 0x9c
 80078b4:	f300 80df 	bgt.w	8007a76 <_svfprintf_r+0x114e>
 80078b8:	3408      	adds	r4, #8
 80078ba:	9b04      	ldr	r3, [sp, #16]
 80078bc:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 80078be:	1bdf      	subs	r7, r3, r7
 80078c0:	9b06      	ldr	r3, [sp, #24]
 80078c2:	eba3 0308 	sub.w	r3, r3, r8
 80078c6:	429f      	cmp	r7, r3
 80078c8:	bfa8      	it	ge
 80078ca:	461f      	movge	r7, r3
 80078cc:	2f00      	cmp	r7, #0
 80078ce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80078d0:	dd0a      	ble.n	80078e8 <_svfprintf_r+0xfc0>
 80078d2:	443b      	add	r3, r7
 80078d4:	9328      	str	r3, [sp, #160]	@ 0xa0
 80078d6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80078d8:	3301      	adds	r3, #1
 80078da:	2b07      	cmp	r3, #7
 80078dc:	e9c4 8700 	strd	r8, r7, [r4]
 80078e0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80078e2:	f300 80d2 	bgt.w	8007a8a <_svfprintf_r+0x1162>
 80078e6:	3408      	adds	r4, #8
 80078e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	eba3 0606 	sub.w	r6, r3, r6
 80078f2:	bfa8      	it	ge
 80078f4:	1bf6      	subge	r6, r6, r7
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	f77f ac20 	ble.w	800713c <_svfprintf_r+0x814>
 80078fc:	4f68      	ldr	r7, [pc, #416]	@ (8007aa0 <_svfprintf_r+0x1178>)
 80078fe:	f04f 0810 	mov.w	r8, #16
 8007902:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007906:	2e10      	cmp	r6, #16
 8007908:	f103 0301 	add.w	r3, r3, #1
 800790c:	f104 0108 	add.w	r1, r4, #8
 8007910:	6027      	str	r7, [r4, #0]
 8007912:	f77f aebc 	ble.w	800768e <_svfprintf_r+0xd66>
 8007916:	3210      	adds	r2, #16
 8007918:	2b07      	cmp	r3, #7
 800791a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800791e:	f8c4 8004 	str.w	r8, [r4, #4]
 8007922:	dd08      	ble.n	8007936 <_svfprintf_r+0x100e>
 8007924:	9803      	ldr	r0, [sp, #12]
 8007926:	aa26      	add	r2, sp, #152	@ 0x98
 8007928:	4659      	mov	r1, fp
 800792a:	f004 fa11 	bl	800bd50 <__ssprint_r>
 800792e:	2800      	cmp	r0, #0
 8007930:	f040 8175 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007934:	a929      	add	r1, sp, #164	@ 0xa4
 8007936:	3e10      	subs	r6, #16
 8007938:	460c      	mov	r4, r1
 800793a:	e7e2      	b.n	8007902 <_svfprintf_r+0xfda>
 800793c:	9803      	ldr	r0, [sp, #12]
 800793e:	aa26      	add	r2, sp, #152	@ 0x98
 8007940:	4659      	mov	r1, fp
 8007942:	f004 fa05 	bl	800bd50 <__ssprint_r>
 8007946:	2800      	cmp	r0, #0
 8007948:	f040 8169 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 800794c:	ac29      	add	r4, sp, #164	@ 0xa4
 800794e:	e76d      	b.n	800782c <_svfprintf_r+0xf04>
 8007950:	2010      	movs	r0, #16
 8007952:	4403      	add	r3, r0
 8007954:	2a07      	cmp	r2, #7
 8007956:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800795a:	6060      	str	r0, [r4, #4]
 800795c:	dd08      	ble.n	8007970 <_svfprintf_r+0x1048>
 800795e:	9803      	ldr	r0, [sp, #12]
 8007960:	aa26      	add	r2, sp, #152	@ 0x98
 8007962:	4659      	mov	r1, fp
 8007964:	f004 f9f4 	bl	800bd50 <__ssprint_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	f040 8158 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 800796e:	a929      	add	r1, sp, #164	@ 0xa4
 8007970:	f1a8 0810 	sub.w	r8, r8, #16
 8007974:	460c      	mov	r4, r1
 8007976:	e762      	b.n	800783e <_svfprintf_r+0xf16>
 8007978:	460c      	mov	r4, r1
 800797a:	e77c      	b.n	8007876 <_svfprintf_r+0xf4e>
 800797c:	2f00      	cmp	r7, #0
 800797e:	d04a      	beq.n	8007a16 <_svfprintf_r+0x10ee>
 8007980:	3f01      	subs	r7, #1
 8007982:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007988:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800798e:	4413      	add	r3, r2
 8007990:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007992:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007994:	3301      	adds	r3, #1
 8007996:	2b07      	cmp	r3, #7
 8007998:	9327      	str	r3, [sp, #156]	@ 0x9c
 800799a:	dc43      	bgt.n	8007a24 <_svfprintf_r+0x10fc>
 800799c:	3408      	adds	r4, #8
 800799e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079a0:	781a      	ldrb	r2, [r3, #0]
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	eba3 0308 	sub.w	r3, r3, r8
 80079a8:	429a      	cmp	r2, r3
 80079aa:	bfa8      	it	ge
 80079ac:	461a      	movge	r2, r3
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80079b2:	4691      	mov	r9, r2
 80079b4:	dd09      	ble.n	80079ca <_svfprintf_r+0x10a2>
 80079b6:	4413      	add	r3, r2
 80079b8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80079ba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80079bc:	3301      	adds	r3, #1
 80079be:	2b07      	cmp	r3, #7
 80079c0:	e9c4 8200 	strd	r8, r2, [r4]
 80079c4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80079c6:	dc37      	bgt.n	8007a38 <_svfprintf_r+0x1110>
 80079c8:	3408      	adds	r4, #8
 80079ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079cc:	781e      	ldrb	r6, [r3, #0]
 80079ce:	f1b9 0f00 	cmp.w	r9, #0
 80079d2:	bfa8      	it	ge
 80079d4:	eba6 0609 	subge.w	r6, r6, r9
 80079d8:	2e00      	cmp	r6, #0
 80079da:	dd18      	ble.n	8007a0e <_svfprintf_r+0x10e6>
 80079dc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80079e0:	482f      	ldr	r0, [pc, #188]	@ (8007aa0 <_svfprintf_r+0x1178>)
 80079e2:	6020      	str	r0, [r4, #0]
 80079e4:	2e10      	cmp	r6, #16
 80079e6:	f103 0301 	add.w	r3, r3, #1
 80079ea:	f104 0108 	add.w	r1, r4, #8
 80079ee:	dc2d      	bgt.n	8007a4c <_svfprintf_r+0x1124>
 80079f0:	6066      	str	r6, [r4, #4]
 80079f2:	2b07      	cmp	r3, #7
 80079f4:	4416      	add	r6, r2
 80079f6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 80079fa:	dd3a      	ble.n	8007a72 <_svfprintf_r+0x114a>
 80079fc:	9803      	ldr	r0, [sp, #12]
 80079fe:	aa26      	add	r2, sp, #152	@ 0x98
 8007a00:	4659      	mov	r1, fp
 8007a02:	f004 f9a5 	bl	800bd50 <__ssprint_r>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f040 8109 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a0c:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	4498      	add	r8, r3
 8007a14:	e733      	b.n	800787e <_svfprintf_r+0xf56>
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	9308      	str	r3, [sp, #32]
 8007a22:	e7ae      	b.n	8007982 <_svfprintf_r+0x105a>
 8007a24:	9803      	ldr	r0, [sp, #12]
 8007a26:	aa26      	add	r2, sp, #152	@ 0x98
 8007a28:	4659      	mov	r1, fp
 8007a2a:	f004 f991 	bl	800bd50 <__ssprint_r>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f040 80f5 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a34:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a36:	e7b2      	b.n	800799e <_svfprintf_r+0x1076>
 8007a38:	9803      	ldr	r0, [sp, #12]
 8007a3a:	aa26      	add	r2, sp, #152	@ 0x98
 8007a3c:	4659      	mov	r1, fp
 8007a3e:	f004 f987 	bl	800bd50 <__ssprint_r>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	f040 80eb 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a48:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a4a:	e7be      	b.n	80079ca <_svfprintf_r+0x10a2>
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	4402      	add	r2, r0
 8007a50:	2b07      	cmp	r3, #7
 8007a52:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007a56:	6060      	str	r0, [r4, #4]
 8007a58:	dd08      	ble.n	8007a6c <_svfprintf_r+0x1144>
 8007a5a:	9803      	ldr	r0, [sp, #12]
 8007a5c:	aa26      	add	r2, sp, #152	@ 0x98
 8007a5e:	4659      	mov	r1, fp
 8007a60:	f004 f976 	bl	800bd50 <__ssprint_r>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 80da 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a6a:	a929      	add	r1, sp, #164	@ 0xa4
 8007a6c:	3e10      	subs	r6, #16
 8007a6e:	460c      	mov	r4, r1
 8007a70:	e7b4      	b.n	80079dc <_svfprintf_r+0x10b4>
 8007a72:	460c      	mov	r4, r1
 8007a74:	e7cb      	b.n	8007a0e <_svfprintf_r+0x10e6>
 8007a76:	9803      	ldr	r0, [sp, #12]
 8007a78:	aa26      	add	r2, sp, #152	@ 0x98
 8007a7a:	4659      	mov	r1, fp
 8007a7c:	f004 f968 	bl	800bd50 <__ssprint_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f040 80cc 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a86:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a88:	e717      	b.n	80078ba <_svfprintf_r+0xf92>
 8007a8a:	9803      	ldr	r0, [sp, #12]
 8007a8c:	aa26      	add	r2, sp, #152	@ 0x98
 8007a8e:	4659      	mov	r1, fp
 8007a90:	f004 f95e 	bl	800bd50 <__ssprint_r>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	f040 80c2 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007a9a:	ac29      	add	r4, sp, #164	@ 0xa4
 8007a9c:	e724      	b.n	80078e8 <_svfprintf_r+0xfc0>
 8007a9e:	bf00      	nop
 8007aa0:	0800d88c 	.word	0x0800d88c
 8007aa4:	9904      	ldr	r1, [sp, #16]
 8007aa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007aa8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8007aaa:	2901      	cmp	r1, #1
 8007aac:	f103 0301 	add.w	r3, r3, #1
 8007ab0:	f102 0201 	add.w	r2, r2, #1
 8007ab4:	f104 0608 	add.w	r6, r4, #8
 8007ab8:	dc02      	bgt.n	8007ac0 <_svfprintf_r+0x1198>
 8007aba:	07e9      	lsls	r1, r5, #31
 8007abc:	f140 8083 	bpl.w	8007bc6 <_svfprintf_r+0x129e>
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	2a07      	cmp	r2, #7
 8007ac4:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007ac8:	f8c4 9000 	str.w	r9, [r4]
 8007acc:	6061      	str	r1, [r4, #4]
 8007ace:	dd08      	ble.n	8007ae2 <_svfprintf_r+0x11ba>
 8007ad0:	9803      	ldr	r0, [sp, #12]
 8007ad2:	aa26      	add	r2, sp, #152	@ 0x98
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	f004 f93b 	bl	800bd50 <__ssprint_r>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f040 809f 	bne.w	8007c1e <_svfprintf_r+0x12f6>
 8007ae0:	ae29      	add	r6, sp, #164	@ 0xa4
 8007ae2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ae4:	6033      	str	r3, [r6, #0]
 8007ae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ae8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007aea:	6073      	str	r3, [r6, #4]
 8007aec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007aee:	4413      	add	r3, r2
 8007af0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007af2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007af4:	3301      	adds	r3, #1
 8007af6:	2b07      	cmp	r3, #7
 8007af8:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007afa:	dc33      	bgt.n	8007b64 <_svfprintf_r+0x123c>
 8007afc:	3608      	adds	r6, #8
 8007afe:	9b04      	ldr	r3, [sp, #16]
 8007b00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b04:	1e5c      	subs	r4, r3, #1
 8007b06:	2200      	movs	r2, #0
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8007b0e:	f7f8 ffe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d12f      	bne.n	8007b76 <_svfprintf_r+0x124e>
 8007b16:	f109 0201 	add.w	r2, r9, #1
 8007b1a:	e9c6 2400 	strd	r2, r4, [r6]
 8007b1e:	9a04      	ldr	r2, [sp, #16]
 8007b20:	f108 0301 	add.w	r3, r8, #1
 8007b24:	3f01      	subs	r7, #1
 8007b26:	4417      	add	r7, r2
 8007b28:	2b07      	cmp	r3, #7
 8007b2a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8007b2e:	dd53      	ble.n	8007bd8 <_svfprintf_r+0x12b0>
 8007b30:	9803      	ldr	r0, [sp, #12]
 8007b32:	aa26      	add	r2, sp, #152	@ 0x98
 8007b34:	4659      	mov	r1, fp
 8007b36:	f004 f90b 	bl	800bd50 <__ssprint_r>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d16f      	bne.n	8007c1e <_svfprintf_r+0x12f6>
 8007b3e:	ae29      	add	r6, sp, #164	@ 0xa4
 8007b40:	ab22      	add	r3, sp, #136	@ 0x88
 8007b42:	6033      	str	r3, [r6, #0]
 8007b44:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007b46:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007b48:	6073      	str	r3, [r6, #4]
 8007b4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007b4c:	4413      	add	r3, r2
 8007b4e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007b50:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8007b52:	3301      	adds	r3, #1
 8007b54:	2b07      	cmp	r3, #7
 8007b56:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007b58:	f73f ada0 	bgt.w	800769c <_svfprintf_r+0xd74>
 8007b5c:	f106 0408 	add.w	r4, r6, #8
 8007b60:	f7ff baec 	b.w	800713c <_svfprintf_r+0x814>
 8007b64:	9803      	ldr	r0, [sp, #12]
 8007b66:	aa26      	add	r2, sp, #152	@ 0x98
 8007b68:	4659      	mov	r1, fp
 8007b6a:	f004 f8f1 	bl	800bd50 <__ssprint_r>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d155      	bne.n	8007c1e <_svfprintf_r+0x12f6>
 8007b72:	ae29      	add	r6, sp, #164	@ 0xa4
 8007b74:	e7c3      	b.n	8007afe <_svfprintf_r+0x11d6>
 8007b76:	9b04      	ldr	r3, [sp, #16]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	dde1      	ble.n	8007b40 <_svfprintf_r+0x1218>
 8007b7c:	4f57      	ldr	r7, [pc, #348]	@ (8007cdc <_svfprintf_r+0x13b4>)
 8007b7e:	f04f 0810 	mov.w	r8, #16
 8007b82:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007b86:	2c10      	cmp	r4, #16
 8007b88:	f103 0301 	add.w	r3, r3, #1
 8007b8c:	f106 0108 	add.w	r1, r6, #8
 8007b90:	6037      	str	r7, [r6, #0]
 8007b92:	dc07      	bgt.n	8007ba4 <_svfprintf_r+0x127c>
 8007b94:	6074      	str	r4, [r6, #4]
 8007b96:	2b07      	cmp	r3, #7
 8007b98:	4414      	add	r4, r2
 8007b9a:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8007b9e:	dcc7      	bgt.n	8007b30 <_svfprintf_r+0x1208>
 8007ba0:	460e      	mov	r6, r1
 8007ba2:	e7cd      	b.n	8007b40 <_svfprintf_r+0x1218>
 8007ba4:	3210      	adds	r2, #16
 8007ba6:	2b07      	cmp	r3, #7
 8007ba8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007bac:	f8c6 8004 	str.w	r8, [r6, #4]
 8007bb0:	dd06      	ble.n	8007bc0 <_svfprintf_r+0x1298>
 8007bb2:	9803      	ldr	r0, [sp, #12]
 8007bb4:	aa26      	add	r2, sp, #152	@ 0x98
 8007bb6:	4659      	mov	r1, fp
 8007bb8:	f004 f8ca 	bl	800bd50 <__ssprint_r>
 8007bbc:	bb78      	cbnz	r0, 8007c1e <_svfprintf_r+0x12f6>
 8007bbe:	a929      	add	r1, sp, #164	@ 0xa4
 8007bc0:	3c10      	subs	r4, #16
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	e7dd      	b.n	8007b82 <_svfprintf_r+0x125a>
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	2a07      	cmp	r2, #7
 8007bca:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8007bce:	f8c4 9000 	str.w	r9, [r4]
 8007bd2:	6061      	str	r1, [r4, #4]
 8007bd4:	ddb4      	ble.n	8007b40 <_svfprintf_r+0x1218>
 8007bd6:	e7ab      	b.n	8007b30 <_svfprintf_r+0x1208>
 8007bd8:	3608      	adds	r6, #8
 8007bda:	e7b1      	b.n	8007b40 <_svfprintf_r+0x1218>
 8007bdc:	460c      	mov	r4, r1
 8007bde:	f7ff baad 	b.w	800713c <_svfprintf_r+0x814>
 8007be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007be4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007be6:	1a9d      	subs	r5, r3, r2
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	f77f aaaa 	ble.w	8007142 <_svfprintf_r+0x81a>
 8007bee:	4e3c      	ldr	r6, [pc, #240]	@ (8007ce0 <_svfprintf_r+0x13b8>)
 8007bf0:	2710      	movs	r7, #16
 8007bf2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8007bf6:	2d10      	cmp	r5, #16
 8007bf8:	f103 0301 	add.w	r3, r3, #1
 8007bfc:	6026      	str	r6, [r4, #0]
 8007bfe:	dc18      	bgt.n	8007c32 <_svfprintf_r+0x130a>
 8007c00:	442a      	add	r2, r5
 8007c02:	2b07      	cmp	r3, #7
 8007c04:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007c08:	6065      	str	r5, [r4, #4]
 8007c0a:	f77f aa9a 	ble.w	8007142 <_svfprintf_r+0x81a>
 8007c0e:	9803      	ldr	r0, [sp, #12]
 8007c10:	aa26      	add	r2, sp, #152	@ 0x98
 8007c12:	4659      	mov	r1, fp
 8007c14:	f004 f89c 	bl	800bd50 <__ssprint_r>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f43f aa92 	beq.w	8007142 <_svfprintf_r+0x81a>
 8007c1e:	f1ba 0f00 	cmp.w	sl, #0
 8007c22:	f43f a89a 	beq.w	8006d5a <_svfprintf_r+0x432>
 8007c26:	9803      	ldr	r0, [sp, #12]
 8007c28:	4651      	mov	r1, sl
 8007c2a:	f7fe fb77 	bl	800631c <_free_r>
 8007c2e:	f7ff b894 	b.w	8006d5a <_svfprintf_r+0x432>
 8007c32:	3210      	adds	r2, #16
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8007c3a:	6067      	str	r7, [r4, #4]
 8007c3c:	dc02      	bgt.n	8007c44 <_svfprintf_r+0x131c>
 8007c3e:	3408      	adds	r4, #8
 8007c40:	3d10      	subs	r5, #16
 8007c42:	e7d6      	b.n	8007bf2 <_svfprintf_r+0x12ca>
 8007c44:	9803      	ldr	r0, [sp, #12]
 8007c46:	aa26      	add	r2, sp, #152	@ 0x98
 8007c48:	4659      	mov	r1, fp
 8007c4a:	f004 f881 	bl	800bd50 <__ssprint_r>
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d1e5      	bne.n	8007c1e <_svfprintf_r+0x12f6>
 8007c52:	ac29      	add	r4, sp, #164	@ 0xa4
 8007c54:	e7f4      	b.n	8007c40 <_svfprintf_r+0x1318>
 8007c56:	9803      	ldr	r0, [sp, #12]
 8007c58:	4651      	mov	r1, sl
 8007c5a:	f7fe fb5f 	bl	800631c <_free_r>
 8007c5e:	f7ff ba88 	b.w	8007172 <_svfprintf_r+0x84a>
 8007c62:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f43f a878 	beq.w	8006d5a <_svfprintf_r+0x432>
 8007c6a:	9803      	ldr	r0, [sp, #12]
 8007c6c:	aa26      	add	r2, sp, #152	@ 0x98
 8007c6e:	4659      	mov	r1, fp
 8007c70:	f004 f86e 	bl	800bd50 <__ssprint_r>
 8007c74:	f7ff b871 	b.w	8006d5a <_svfprintf_r+0x432>
 8007c78:	ea56 0207 	orrs.w	r2, r6, r7
 8007c7c:	9508      	str	r5, [sp, #32]
 8007c7e:	f43f ab7a 	beq.w	8007376 <_svfprintf_r+0xa4e>
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	f43f abfb 	beq.w	800747e <_svfprintf_r+0xb56>
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 8007c8e:	f43f ac3f 	beq.w	8007510 <_svfprintf_r+0xbe8>
 8007c92:	f006 0307 	and.w	r3, r6, #7
 8007c96:	08f6      	lsrs	r6, r6, #3
 8007c98:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 8007c9c:	08ff      	lsrs	r7, r7, #3
 8007c9e:	3330      	adds	r3, #48	@ 0x30
 8007ca0:	ea56 0107 	orrs.w	r1, r6, r7
 8007ca4:	464a      	mov	r2, r9
 8007ca6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8007caa:	d1f2      	bne.n	8007c92 <_svfprintf_r+0x136a>
 8007cac:	9908      	ldr	r1, [sp, #32]
 8007cae:	07c8      	lsls	r0, r1, #31
 8007cb0:	d506      	bpl.n	8007cc0 <_svfprintf_r+0x1398>
 8007cb2:	2b30      	cmp	r3, #48	@ 0x30
 8007cb4:	d004      	beq.n	8007cc0 <_svfprintf_r+0x1398>
 8007cb6:	2330      	movs	r3, #48	@ 0x30
 8007cb8:	f809 3c01 	strb.w	r3, [r9, #-1]
 8007cbc:	f1a2 0902 	sub.w	r9, r2, #2
 8007cc0:	ab52      	add	r3, sp, #328	@ 0x148
 8007cc2:	9d08      	ldr	r5, [sp, #32]
 8007cc4:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 8007cc8:	f04f 0a00 	mov.w	sl, #0
 8007ccc:	eba3 0809 	sub.w	r8, r3, r9
 8007cd0:	4657      	mov	r7, sl
 8007cd2:	f8cd a020 	str.w	sl, [sp, #32]
 8007cd6:	4656      	mov	r6, sl
 8007cd8:	f7ff b97c 	b.w	8006fd4 <_svfprintf_r+0x6ac>
 8007cdc:	0800d88c 	.word	0x0800d88c
 8007ce0:	0800d89c 	.word	0x0800d89c

08007ce4 <__ssvfscanf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8007cec:	461d      	mov	r5, r3
 8007cee:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8007cf2:	af02      	add	r7, sp, #8
 8007cf4:	049e      	lsls	r6, r3, #18
 8007cf6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	617a      	str	r2, [r7, #20]
 8007cfc:	d406      	bmi.n	8007d0c <__ssvfscanf_r+0x28>
 8007cfe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007d02:	818b      	strh	r3, [r1, #12]
 8007d04:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007d06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007d0a:	664b      	str	r3, [r1, #100]	@ 0x64
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	e9c7 3307 	strd	r3, r3, [r7, #28]
 8007d12:	61bb      	str	r3, [r7, #24]
 8007d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d1a:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007d1e:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 80d3 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8007d2a:	4a84      	ldr	r2, [pc, #528]	@ (8007f3c <__ssvfscanf_r+0x258>)
 8007d2c:	5cd6      	ldrb	r6, [r2, r3]
 8007d2e:	f016 0608 	ands.w	r6, r6, #8
 8007d32:	d01b      	beq.n	8007d6c <__ssvfscanf_r+0x88>
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	dd08      	ble.n	8007d4c <__ssvfscanf_r+0x68>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	497f      	ldr	r1, [pc, #508]	@ (8007f3c <__ssvfscanf_r+0x258>)
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	5c8a      	ldrb	r2, [r1, r2]
 8007d42:	0710      	lsls	r0, r2, #28
 8007d44:	d409      	bmi.n	8007d5a <__ssvfscanf_r+0x76>
 8007d46:	f8c7 8014 	str.w	r8, [r7, #20]
 8007d4a:	e7e6      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8007d4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d4e:	4621      	mov	r1, r4
 8007d50:	f004 f8b6 	bl	800bec0 <__ssrefill_r>
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d0f0      	beq.n	8007d3a <__ssvfscanf_r+0x56>
 8007d58:	e7f5      	b.n	8007d46 <__ssvfscanf_r+0x62>
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d5c:	3201      	adds	r2, #1
 8007d5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d60:	6862      	ldr	r2, [r4, #4]
 8007d62:	3301      	adds	r3, #1
 8007d64:	3a01      	subs	r2, #1
 8007d66:	6062      	str	r2, [r4, #4]
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	e7e3      	b.n	8007d34 <__ssvfscanf_r+0x50>
 8007d6c:	2b25      	cmp	r3, #37	@ 0x25
 8007d6e:	d163      	bne.n	8007e38 <__ssvfscanf_r+0x154>
 8007d70:	62fe      	str	r6, [r7, #44]	@ 0x2c
 8007d72:	4642      	mov	r2, r8
 8007d74:	f812 3b01 	ldrb.w	r3, [r2], #1
 8007d78:	617a      	str	r2, [r7, #20]
 8007d7a:	f1a3 0225 	sub.w	r2, r3, #37	@ 0x25
 8007d7e:	2a55      	cmp	r2, #85	@ 0x55
 8007d80:	f200 816e 	bhi.w	8008060 <__ssvfscanf_r+0x37c>
 8007d84:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007d88:	016c0056 	.word	0x016c0056
 8007d8c:	016c016c 	.word	0x016c016c
 8007d90:	007d016c 	.word	0x007d016c
 8007d94:	016c016c 	.word	0x016c016c
 8007d98:	016c016c 	.word	0x016c016c
 8007d9c:	00b9016c 	.word	0x00b9016c
 8007da0:	00b900b9 	.word	0x00b900b9
 8007da4:	00b900b9 	.word	0x00b900b9
 8007da8:	00b900b9 	.word	0x00b900b9
 8007dac:	00b900b9 	.word	0x00b900b9
 8007db0:	016c00b9 	.word	0x016c00b9
 8007db4:	016c016c 	.word	0x016c016c
 8007db8:	016c016c 	.word	0x016c016c
 8007dbc:	016c016c 	.word	0x016c016c
 8007dc0:	016c00e0 	.word	0x016c00e0
 8007dc4:	00c3010a 	.word	0x00c3010a
 8007dc8:	00e000e0 	.word	0x00e000e0
 8007dcc:	016c00e0 	.word	0x016c00e0
 8007dd0:	016c016c 	.word	0x016c016c
 8007dd4:	00a2016c 	.word	0x00a2016c
 8007dd8:	016c016c 	.word	0x016c016c
 8007ddc:	016c00c7 	.word	0x016c00c7
 8007de0:	016c016c 	.word	0x016c016c
 8007de4:	016c00fa 	.word	0x016c00fa
 8007de8:	016c016c 	.word	0x016c016c
 8007dec:	00d4016c 	.word	0x00d4016c
 8007df0:	016c016c 	.word	0x016c016c
 8007df4:	016c00ff 	.word	0x016c00ff
 8007df8:	016c016c 	.word	0x016c016c
 8007dfc:	016c016c 	.word	0x016c016c
 8007e00:	016c00e0 	.word	0x016c00e0
 8007e04:	00c5010c 	.word	0x00c5010c
 8007e08:	00e000e0 	.word	0x00e000e0
 8007e0c:	009400e0 	.word	0x009400e0
 8007e10:	00a20130 	.word	0x00a20130
 8007e14:	0085016c 	.word	0x0085016c
 8007e18:	011400ac 	.word	0x011400ac
 8007e1c:	011100c9 	.word	0x011100c9
 8007e20:	016c016c 	.word	0x016c016c
 8007e24:	00a900fc 	.word	0x00a900fc
 8007e28:	016c00d0 	.word	0x016c00d0
 8007e2c:	00d4016c 	.word	0x00d4016c
 8007e30:	00a9016c 	.word	0x00a9016c
 8007e34:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	dd0e      	ble.n	8007e5c <__ssvfscanf_r+0x178>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007e44:	7819      	ldrb	r1, [r3, #0]
 8007e46:	4291      	cmp	r1, r2
 8007e48:	d142      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	6862      	ldr	r2, [r4, #4]
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e52:	3a01      	subs	r2, #1
 8007e54:	3301      	adds	r3, #1
 8007e56:	6062      	str	r2, [r4, #4]
 8007e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e5a:	e774      	b.n	8007d46 <__ssvfscanf_r+0x62>
 8007e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e5e:	4621      	mov	r1, r4
 8007e60:	f004 f82e 	bl	800bec0 <__ssrefill_r>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d0ea      	beq.n	8007e3e <__ssvfscanf_r+0x15a>
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	b113      	cbz	r3, 8007e72 <__ssvfscanf_r+0x18e>
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	065b      	lsls	r3, r3, #25
 8007e70:	d52e      	bpl.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f041 809d 	bne.w	8008fb4 <__ssvfscanf_r+0x12d0>
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e80:	e0f9      	b.n	8008076 <__ssvfscanf_r+0x392>
 8007e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e84:	4333      	orrs	r3, r6
 8007e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e88:	d122      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007e8a:	2610      	movs	r6, #16
 8007e8c:	f8d7 8014 	ldr.w	r8, [r7, #20]
 8007e90:	e76f      	b.n	8007d72 <__ssvfscanf_r+0x8e>
 8007e92:	0731      	lsls	r1, r6, #28
 8007e94:	d11c      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007e96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007e9a:	2b6c      	cmp	r3, #108	@ 0x6c
 8007e9c:	d105      	bne.n	8007eaa <__ssvfscanf_r+0x1c6>
 8007e9e:	f108 0302 	add.w	r3, r8, #2
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	f046 0602 	orr.w	r6, r6, #2
 8007ea8:	e7f0      	b.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007eaa:	f046 0601 	orr.w	r6, r6, #1
 8007eae:	e7ed      	b.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007eb0:	0732      	lsls	r2, r6, #28
 8007eb2:	d10d      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007eb4:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007eb8:	2b68      	cmp	r3, #104	@ 0x68
 8007eba:	bf03      	ittte	eq
 8007ebc:	f108 0302 	addeq.w	r3, r8, #2
 8007ec0:	617b      	streq	r3, [r7, #20]
 8007ec2:	f046 0608 	orreq.w	r6, r6, #8
 8007ec6:	f046 0604 	orrne.w	r6, r6, #4
 8007eca:	e7df      	b.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007ecc:	0733      	lsls	r3, r6, #28
 8007ece:	d0e9      	beq.n	8007ea4 <__ssvfscanf_r+0x1c0>
 8007ed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 80cf 	beq.w	8008076 <__ssvfscanf_r+0x392>
 8007ed8:	e0c8      	b.n	800806c <__ssvfscanf_r+0x388>
 8007eda:	0730      	lsls	r0, r6, #28
 8007edc:	d0d6      	beq.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007ede:	e7f7      	b.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007ee0:	f016 038f 	ands.w	r3, r6, #143	@ 0x8f
 8007ee4:	d1f4      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007ee6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ee8:	b922      	cbnz	r2, 8007ef4 <__ssvfscanf_r+0x210>
 8007eea:	b082      	sub	sp, #8
 8007eec:	aa02      	add	r2, sp, #8
 8007eee:	e9c2 3300 	strd	r3, r3, [r2]
 8007ef2:	637a      	str	r2, [r7, #52]	@ 0x34
 8007ef4:	f046 0680 	orr.w	r6, r6, #128	@ 0x80
 8007ef8:	e7c8      	b.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007efa:	f016 0f8f 	tst.w	r6, #143	@ 0x8f
 8007efe:	d1e7      	bne.n	8007ed0 <__ssvfscanf_r+0x1ec>
 8007f00:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f02:	220a      	movs	r2, #10
 8007f04:	fb02 3301 	mla	r3, r2, r1, r3
 8007f08:	3b30      	subs	r3, #48	@ 0x30
 8007f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f0c:	e7be      	b.n	8007e8c <__ssvfscanf_r+0x1a8>
 8007f0e:	f046 0601 	orr.w	r6, r6, #1
 8007f12:	4b0b      	ldr	r3, [pc, #44]	@ (8007f40 <__ssvfscanf_r+0x25c>)
 8007f14:	e009      	b.n	8007f2a <__ssvfscanf_r+0x246>
 8007f16:	f046 0601 	orr.w	r6, r6, #1
 8007f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f44 <__ssvfscanf_r+0x260>)
 8007f1c:	61bb      	str	r3, [r7, #24]
 8007f1e:	2308      	movs	r3, #8
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	f04f 0803 	mov.w	r8, #3
 8007f26:	e011      	b.n	8007f4c <__ssvfscanf_r+0x268>
 8007f28:	4b06      	ldr	r3, [pc, #24]	@ (8007f44 <__ssvfscanf_r+0x260>)
 8007f2a:	61bb      	str	r3, [r7, #24]
 8007f2c:	230a      	movs	r3, #10
 8007f2e:	e7f7      	b.n	8007f20 <__ssvfscanf_r+0x23c>
 8007f30:	f446 7600 	orr.w	r6, r6, #512	@ 0x200
 8007f34:	4b03      	ldr	r3, [pc, #12]	@ (8007f44 <__ssvfscanf_r+0x260>)
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	2310      	movs	r3, #16
 8007f3a:	e7f1      	b.n	8007f20 <__ssvfscanf_r+0x23c>
 8007f3c:	0800db01 	.word	0x0800db01
 8007f40:	0800b9b1 	.word	0x0800b9b1
 8007f44:	0800ba91 	.word	0x0800ba91
 8007f48:	f04f 0804 	mov.w	r8, #4
 8007f4c:	6863      	ldr	r3, [r4, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	dd4e      	ble.n	8007ff0 <__ssvfscanf_r+0x30c>
 8007f52:	0673      	lsls	r3, r6, #25
 8007f54:	d407      	bmi.n	8007f66 <__ssvfscanf_r+0x282>
 8007f56:	f8df 92fc 	ldr.w	r9, [pc, #764]	@ 8008254 <__ssvfscanf_r+0x570>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	f819 2002 	ldrb.w	r2, [r9, r2]
 8007f62:	0710      	lsls	r0, r2, #28
 8007f64:	d44b      	bmi.n	8007ffe <__ssvfscanf_r+0x31a>
 8007f66:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f6a:	f1b8 0f03 	cmp.w	r8, #3
 8007f6e:	d858      	bhi.n	8008022 <__ssvfscanf_r+0x33e>
 8007f70:	e8df f018 	tbh	[pc, r8, lsl #1]
 8007f74:	037801c1 	.word	0x037801c1
 8007f78:	05f30514 	.word	0x05f30514
 8007f7c:	f046 0601 	orr.w	r6, r6, #1
 8007f80:	f04f 0802 	mov.w	r8, #2
 8007f84:	e7e2      	b.n	8007f4c <__ssvfscanf_r+0x268>
 8007f86:	6979      	ldr	r1, [r7, #20]
 8007f88:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8007f8c:	f001 f91f 	bl	80091ce <__sccl>
 8007f90:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8007f94:	6178      	str	r0, [r7, #20]
 8007f96:	f04f 0801 	mov.w	r8, #1
 8007f9a:	e7d7      	b.n	8007f4c <__ssvfscanf_r+0x268>
 8007f9c:	f046 0601 	orr.w	r6, r6, #1
 8007fa0:	f046 0640 	orr.w	r6, r6, #64	@ 0x40
 8007fa4:	f04f 0800 	mov.w	r8, #0
 8007fa8:	e7d0      	b.n	8007f4c <__ssvfscanf_r+0x268>
 8007faa:	f446 7608 	orr.w	r6, r6, #544	@ 0x220
 8007fae:	e7c1      	b.n	8007f34 <__ssvfscanf_r+0x250>
 8007fb0:	06f1      	lsls	r1, r6, #27
 8007fb2:	f53f aeb2 	bmi.w	8007d1a <__ssvfscanf_r+0x36>
 8007fb6:	0732      	lsls	r2, r6, #28
 8007fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fbc:	d502      	bpl.n	8007fc4 <__ssvfscanf_r+0x2e0>
 8007fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc0:	701a      	strb	r2, [r3, #0]
 8007fc2:	e6aa      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8007fc4:	0770      	lsls	r0, r6, #29
 8007fc6:	d502      	bpl.n	8007fce <__ssvfscanf_r+0x2ea>
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fca:	801a      	strh	r2, [r3, #0]
 8007fcc:	e6a5      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8007fce:	07f1      	lsls	r1, r6, #31
 8007fd0:	d502      	bpl.n	8007fd8 <__ssvfscanf_r+0x2f4>
 8007fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	e6a0      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8007fd8:	07b2      	lsls	r2, r6, #30
 8007fda:	d5fa      	bpl.n	8007fd2 <__ssvfscanf_r+0x2ee>
 8007fdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fe0:	17d2      	asrs	r2, r2, #31
 8007fe2:	e9c3 1200 	strd	r1, r2, [r3]
 8007fe6:	e698      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8007fe8:	4b99      	ldr	r3, [pc, #612]	@ (8008250 <__ssvfscanf_r+0x56c>)
 8007fea:	61bb      	str	r3, [r7, #24]
 8007fec:	2300      	movs	r3, #0
 8007fee:	e797      	b.n	8007f20 <__ssvfscanf_r+0x23c>
 8007ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	f003 ff64 	bl	800bec0 <__ssrefill_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0aa      	beq.n	8007f52 <__ssvfscanf_r+0x26e>
 8007ffc:	e734      	b.n	8007e68 <__ssvfscanf_r+0x184>
 8007ffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008000:	3201      	adds	r2, #1
 8008002:	633a      	str	r2, [r7, #48]	@ 0x30
 8008004:	6862      	ldr	r2, [r4, #4]
 8008006:	3a01      	subs	r2, #1
 8008008:	2a00      	cmp	r2, #0
 800800a:	6062      	str	r2, [r4, #4]
 800800c:	dd02      	ble.n	8008014 <__ssvfscanf_r+0x330>
 800800e:	3301      	adds	r3, #1
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	e7a2      	b.n	8007f5a <__ssvfscanf_r+0x276>
 8008014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008016:	4621      	mov	r1, r4
 8008018:	f003 ff52 	bl	800bec0 <__ssrefill_r>
 800801c:	2800      	cmp	r0, #0
 800801e:	d09c      	beq.n	8007f5a <__ssvfscanf_r+0x276>
 8008020:	e722      	b.n	8007e68 <__ssvfscanf_r+0x184>
 8008022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008024:	2b01      	cmp	r3, #1
 8008026:	bf38      	it	cc
 8008028:	2301      	movcc	r3, #1
 800802a:	4698      	mov	r8, r3
 800802c:	f016 0301 	ands.w	r3, r6, #1
 8008030:	f006 0b10 	and.w	fp, r6, #16
 8008034:	f000 80eb 	beq.w	800820e <__ssvfscanf_r+0x52a>
 8008038:	f1bb 0f00 	cmp.w	fp, #0
 800803c:	f040 8085 	bne.w	800814a <__ssvfscanf_r+0x466>
 8008040:	462b      	mov	r3, r5
 8008042:	0631      	lsls	r1, r6, #24
 8008044:	f853 5b04 	ldr.w	r5, [r3], #4
 8008048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800804a:	f140 8085 	bpl.w	8008158 <__ssvfscanf_r+0x474>
 800804e:	b13d      	cbz	r5, 8008060 <__ssvfscanf_r+0x37c>
 8008050:	2080      	movs	r0, #128	@ 0x80
 8008052:	f001 fff5 	bl	800a040 <malloc>
 8008056:	4606      	mov	r6, r0
 8008058:	b998      	cbnz	r0, 8008082 <__ssvfscanf_r+0x39e>
 800805a:	f04f 33ff 	mov.w	r3, #4294967295
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	b143      	cbz	r3, 8008076 <__ssvfscanf_r+0x392>
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	3301      	adds	r3, #1
 8008068:	f000 87a4 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 800806c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	b108      	cbz	r0, 8008076 <__ssvfscanf_r+0x392>
 8008072:	f001 ffed 	bl	800a050 <free>
 8008076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008078:	f507 772d 	add.w	r7, r7, #692	@ 0x2b4
 800807c:	46bd      	mov	sp, r7
 800807e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	6028      	str	r0, [r5, #0]
 8008086:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 800808a:	889b      	ldrh	r3, [r3, #4]
 800808c:	4599      	cmp	r9, r3
 800808e:	d314      	bcc.n	80080ba <__ssvfscanf_r+0x3d6>
 8008090:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8008094:	4293      	cmp	r3, r2
 8008096:	f200 878d 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 800809a:	3308      	adds	r3, #8
 800809c:	fa1f fa83 	uxth.w	sl, r3
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80080a6:	6818      	ldr	r0, [r3, #0]
 80080a8:	f002 fc50 	bl	800a94c <realloc>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	f000 8781 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80080b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080b4:	6018      	str	r0, [r3, #0]
 80080b6:	f8a3 a004 	strh.w	sl, [r3, #4]
 80080ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f109 0201 	add.w	r2, r9, #1
 80080c4:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80080c8:	46aa      	mov	sl, r5
 80080ca:	80ca      	strh	r2, [r1, #6]
 80080cc:	4635      	mov	r5, r6
 80080ce:	f04f 0920 	mov.w	r9, #32
 80080d2:	2200      	movs	r2, #0
 80080d4:	613a      	str	r2, [r7, #16]
 80080d6:	f001 f8c7 	bl	8009268 <__locale_mb_cur_max>
 80080da:	693a      	ldr	r2, [r7, #16]
 80080dc:	4290      	cmp	r0, r2
 80080de:	f43f aec3 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 80080e2:	6821      	ldr	r1, [r4, #0]
 80080e4:	f507 7ca8 	add.w	ip, r7, #336	@ 0x150
 80080e8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80080ec:	f80c 0002 	strb.w	r0, [ip, r2]
 80080f0:	1c53      	adds	r3, r2, #1
 80080f2:	6862      	ldr	r2, [r4, #4]
 80080f4:	3a01      	subs	r2, #1
 80080f6:	e9c4 1200 	strd	r1, r2, [r4]
 80080fa:	6a3a      	ldr	r2, [r7, #32]
 80080fc:	2a03      	cmp	r2, #3
 80080fe:	d102      	bne.n	8008106 <__ssvfscanf_r+0x422>
 8008100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008102:	2a04      	cmp	r2, #4
 8008104:	d007      	beq.n	8008116 <__ssvfscanf_r+0x432>
 8008106:	2208      	movs	r2, #8
 8008108:	2100      	movs	r1, #0
 800810a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800810e:	623b      	str	r3, [r7, #32]
 8008110:	f7fe f813 	bl	800613a <memset>
 8008114:	6a3b      	ldr	r3, [r7, #32]
 8008116:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800811a:	9200      	str	r2, [sp, #0]
 800811c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8008124:	4629      	mov	r1, r5
 8008126:	f003 fdeb 	bl	800bd00 <_mbrtowc_r>
 800812a:	1c42      	adds	r2, r0, #1
 800812c:	6238      	str	r0, [r7, #32]
 800812e:	f43f ae9b 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	b9b8      	cbnz	r0, 8008166 <__ssvfscanf_r+0x482>
 8008136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008138:	441a      	add	r2, r3
 800813a:	4613      	mov	r3, r2
 800813c:	f1bb 0f00 	cmp.w	fp, #0
 8008140:	d00e      	beq.n	8008160 <__ssvfscanf_r+0x47c>
 8008142:	633b      	str	r3, [r7, #48]	@ 0x30
 8008144:	f108 38ff 	add.w	r8, r8, #4294967295
 8008148:	e019      	b.n	800817e <__ssvfscanf_r+0x49a>
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8008150:	464e      	mov	r6, r9
 8008152:	46ca      	mov	sl, r9
 8008154:	464d      	mov	r5, r9
 8008156:	e7bc      	b.n	80080d2 <__ssvfscanf_r+0x3ee>
 8008158:	46d9      	mov	r9, fp
 800815a:	465e      	mov	r6, fp
 800815c:	46da      	mov	sl, fp
 800815e:	e7b8      	b.n	80080d2 <__ssvfscanf_r+0x3ee>
 8008160:	f8c5 b000 	str.w	fp, [r5]
 8008164:	e7ed      	b.n	8008142 <__ssvfscanf_r+0x45e>
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	3202      	adds	r2, #2
 800816a:	d025      	beq.n	80081b8 <__ssvfscanf_r+0x4d4>
 800816c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800816e:	441a      	add	r2, r3
 8008170:	6a3b      	ldr	r3, [r7, #32]
 8008172:	633a      	str	r2, [r7, #48]	@ 0x30
 8008174:	2b03      	cmp	r3, #3
 8008176:	d1e5      	bne.n	8008144 <__ssvfscanf_r+0x460>
 8008178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800817a:	2b04      	cmp	r3, #4
 800817c:	d1e2      	bne.n	8008144 <__ssvfscanf_r+0x460>
 800817e:	f1bb 0f00 	cmp.w	fp, #0
 8008182:	d117      	bne.n	80081b4 <__ssvfscanf_r+0x4d0>
 8008184:	f1ba 0f00 	cmp.w	sl, #0
 8008188:	d013      	beq.n	80081b2 <__ssvfscanf_r+0x4ce>
 800818a:	1bab      	subs	r3, r5, r6
 800818c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008190:	d80f      	bhi.n	80081b2 <__ssvfscanf_r+0x4ce>
 8008192:	4630      	mov	r0, r6
 8008194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008198:	613b      	str	r3, [r7, #16]
 800819a:	f002 fbd7 	bl	800a94c <realloc>
 800819e:	4606      	mov	r6, r0
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f43f af5a 	beq.w	800805a <__ssvfscanf_r+0x376>
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	f8ca 0000 	str.w	r0, [sl]
 80081ac:	18c5      	adds	r5, r0, r3
 80081ae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80081b2:	3504      	adds	r5, #4
 80081b4:	2200      	movs	r2, #0
 80081b6:	e000      	b.n	80081ba <__ssvfscanf_r+0x4d6>
 80081b8:	461a      	mov	r2, r3
 80081ba:	6863      	ldr	r3, [r4, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	dc14      	bgt.n	80081ea <__ssvfscanf_r+0x506>
 80081c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081c2:	613a      	str	r2, [r7, #16]
 80081c4:	4621      	mov	r1, r4
 80081c6:	f003 fe7b 	bl	800bec0 <__ssrefill_r>
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	b168      	cbz	r0, 80081ea <__ssvfscanf_r+0x506>
 80081ce:	2a00      	cmp	r2, #0
 80081d0:	f47f ae4a 	bne.w	8007e68 <__ssvfscanf_r+0x184>
 80081d4:	f1ba 0f00 	cmp.w	sl, #0
 80081d8:	d10c      	bne.n	80081f4 <__ssvfscanf_r+0x510>
 80081da:	f1bb 0f00 	cmp.w	fp, #0
 80081de:	d102      	bne.n	80081e6 <__ssvfscanf_r+0x502>
 80081e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e2:	3301      	adds	r3, #1
 80081e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80081e6:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80081e8:	e597      	b.n	8007d1a <__ssvfscanf_r+0x36>
 80081ea:	f1b8 0f00 	cmp.w	r8, #0
 80081ee:	f47f af71 	bne.w	80080d4 <__ssvfscanf_r+0x3f0>
 80081f2:	e7ef      	b.n	80081d4 <__ssvfscanf_r+0x4f0>
 80081f4:	1ba9      	subs	r1, r5, r6
 80081f6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80081fa:	d9ee      	bls.n	80081da <__ssvfscanf_r+0x4f6>
 80081fc:	f8da 0000 	ldr.w	r0, [sl]
 8008200:	f002 fba4 	bl	800a94c <realloc>
 8008204:	2800      	cmp	r0, #0
 8008206:	d0e8      	beq.n	80081da <__ssvfscanf_r+0x4f6>
 8008208:	f8ca 0000 	str.w	r0, [sl]
 800820c:	e7e5      	b.n	80081da <__ssvfscanf_r+0x4f6>
 800820e:	f1bb 0f00 	cmp.w	fp, #0
 8008212:	d021      	beq.n	8008258 <__ssvfscanf_r+0x574>
 8008214:	461e      	mov	r6, r3
 8008216:	e9d4 2300 	ldrd	r2, r3, [r4]
 800821a:	4598      	cmp	r8, r3
 800821c:	dd11      	ble.n	8008242 <__ssvfscanf_r+0x55e>
 800821e:	441a      	add	r2, r3
 8008220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008222:	6022      	str	r2, [r4, #0]
 8008224:	4621      	mov	r1, r4
 8008226:	441e      	add	r6, r3
 8008228:	eba8 0803 	sub.w	r8, r8, r3
 800822c:	f003 fe48 	bl	800bec0 <__ssrefill_r>
 8008230:	2800      	cmp	r0, #0
 8008232:	d0f0      	beq.n	8008216 <__ssvfscanf_r+0x532>
 8008234:	2e00      	cmp	r6, #0
 8008236:	f43f ae17 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 800823a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823c:	4433      	add	r3, r6
 800823e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008240:	e56b      	b.n	8007d1a <__ssvfscanf_r+0x36>
 8008242:	eba3 0308 	sub.w	r3, r3, r8
 8008246:	4442      	add	r2, r8
 8008248:	4446      	add	r6, r8
 800824a:	6063      	str	r3, [r4, #4]
 800824c:	6022      	str	r2, [r4, #0]
 800824e:	e7f4      	b.n	800823a <__ssvfscanf_r+0x556>
 8008250:	0800b9b1 	.word	0x0800b9b1
 8008254:	0800db01 	.word	0x0800db01
 8008258:	46a9      	mov	r9, r5
 800825a:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800825e:	f859 5b04 	ldr.w	r5, [r9], #4
 8008262:	d02c      	beq.n	80082be <__ssvfscanf_r+0x5da>
 8008264:	2d00      	cmp	r5, #0
 8008266:	f43f ae33 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 800826a:	4640      	mov	r0, r8
 800826c:	f001 fee8 	bl	800a040 <malloc>
 8008270:	4682      	mov	sl, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	f43f adfd 	beq.w	8007e72 <__ssvfscanf_r+0x18e>
 8008278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008280:	889e      	ldrh	r6, [r3, #4]
 8008282:	45b3      	cmp	fp, r6
 8008284:	d311      	bcc.n	80082aa <__ssvfscanf_r+0x5c6>
 8008286:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800828a:	429e      	cmp	r6, r3
 800828c:	f200 8692 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 8008290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008292:	3608      	adds	r6, #8
 8008294:	b2b6      	uxth	r6, r6
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	00b1      	lsls	r1, r6, #2
 800829a:	f002 fb57 	bl	800a94c <realloc>
 800829e:	2800      	cmp	r0, #0
 80082a0:	f000 8688 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80082a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a6:	6018      	str	r0, [r3, #0]
 80082a8:	809e      	strh	r6, [r3, #4]
 80082aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f10b 0201 	add.w	r2, fp, #1
 80082b4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80082b8:	462e      	mov	r6, r5
 80082ba:	80ca      	strh	r2, [r1, #6]
 80082bc:	4655      	mov	r5, sl
 80082be:	9400      	str	r4, [sp, #0]
 80082c0:	4629      	mov	r1, r5
 80082c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082c4:	4643      	mov	r3, r8
 80082c6:	2201      	movs	r2, #1
 80082c8:	f003 fe17 	bl	800befa <_sfread_r>
 80082cc:	4605      	mov	r5, r0
 80082ce:	2800      	cmp	r0, #0
 80082d0:	f43f adca 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 80082d4:	b13e      	cbz	r6, 80082e6 <__ssvfscanf_r+0x602>
 80082d6:	4580      	cmp	r8, r0
 80082d8:	d905      	bls.n	80082e6 <__ssvfscanf_r+0x602>
 80082da:	4601      	mov	r1, r0
 80082dc:	6830      	ldr	r0, [r6, #0]
 80082de:	f002 fb35 	bl	800a94c <realloc>
 80082e2:	b100      	cbz	r0, 80082e6 <__ssvfscanf_r+0x602>
 80082e4:	6030      	str	r0, [r6, #0]
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	442b      	add	r3, r5
 80082ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	3301      	adds	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80082f2:	464d      	mov	r5, r9
 80082f4:	e511      	b.n	8007d1a <__ssvfscanf_r+0x36>
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	bf08      	it	eq
 80082fc:	f04f 33ff 	moveq.w	r3, #4294967295
 8008300:	f016 0801 	ands.w	r8, r6, #1
 8008304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008306:	f006 0a10 	and.w	sl, r6, #16
 800830a:	f000 8101 	beq.w	8008510 <__ssvfscanf_r+0x82c>
 800830e:	f1ba 0f00 	cmp.w	sl, #0
 8008312:	f040 80a4 	bne.w	800845e <__ssvfscanf_r+0x77a>
 8008316:	462b      	mov	r3, r5
 8008318:	f853 5b04 	ldr.w	r5, [r3], #4
 800831c:	60fb      	str	r3, [r7, #12]
 800831e:	0633      	lsls	r3, r6, #24
 8008320:	f140 80a5 	bpl.w	800846e <__ssvfscanf_r+0x78a>
 8008324:	2d00      	cmp	r5, #0
 8008326:	f43f ae9b 	beq.w	8008060 <__ssvfscanf_r+0x37c>
 800832a:	2080      	movs	r0, #128	@ 0x80
 800832c:	f001 fe88 	bl	800a040 <malloc>
 8008330:	4680      	mov	r8, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	f43f ae91 	beq.w	800805a <__ssvfscanf_r+0x376>
 8008338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800833a:	6028      	str	r0, [r5, #0]
 800833c:	88de      	ldrh	r6, [r3, #6]
 800833e:	889b      	ldrh	r3, [r3, #4]
 8008340:	429e      	cmp	r6, r3
 8008342:	d314      	bcc.n	800836e <__ssvfscanf_r+0x68a>
 8008344:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 8008348:	4293      	cmp	r3, r2
 800834a:	f200 8633 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 800834e:	3308      	adds	r3, #8
 8008350:	fa1f f983 	uxth.w	r9, r3
 8008354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008356:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	f002 faf6 	bl	800a94c <realloc>
 8008360:	2800      	cmp	r0, #0
 8008362:	f000 8627 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 8008366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008368:	6018      	str	r0, [r3, #0]
 800836a:	f8a3 9004 	strh.w	r9, [r3, #4]
 800836e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008370:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	1c72      	adds	r2, r6, #1
 8008376:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
 800837a:	46ab      	mov	fp, r5
 800837c:	80ca      	strh	r2, [r1, #6]
 800837e:	4645      	mov	r5, r8
 8008380:	f04f 0920 	mov.w	r9, #32
 8008384:	2600      	movs	r6, #0
 8008386:	f000 ff6f 	bl	8009268 <__locale_mb_cur_max>
 800838a:	42b0      	cmp	r0, r6
 800838c:	f43f ad6c 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 8008390:	1c73      	adds	r3, r6, #1
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800839a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800839e:	558a      	strb	r2, [r1, r6]
 80083a0:	6862      	ldr	r2, [r4, #4]
 80083a2:	3a01      	subs	r2, #1
 80083a4:	e9c4 3200 	strd	r3, r2, [r4]
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	2b03      	cmp	r3, #3
 80083ac:	d102      	bne.n	80083b4 <__ssvfscanf_r+0x6d0>
 80083ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b0:	2b04      	cmp	r3, #4
 80083b2:	d005      	beq.n	80083c0 <__ssvfscanf_r+0x6dc>
 80083b4:	2208      	movs	r2, #8
 80083b6:	2100      	movs	r1, #0
 80083b8:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80083bc:	f7fd febd 	bl	800613a <memset>
 80083c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083ca:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80083ce:	4629      	mov	r1, r5
 80083d0:	f003 fc96 	bl	800bd00 <_mbrtowc_r>
 80083d4:	1c46      	adds	r6, r0, #1
 80083d6:	6238      	str	r0, [r7, #32]
 80083d8:	f43f ad46 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 80083dc:	2800      	cmp	r0, #0
 80083de:	d14a      	bne.n	8008476 <__ssvfscanf_r+0x792>
 80083e0:	6028      	str	r0, [r5, #0]
 80083e2:	682e      	ldr	r6, [r5, #0]
 80083e4:	1c70      	adds	r0, r6, #1
 80083e6:	d056      	beq.n	8008496 <__ssvfscanf_r+0x7b2>
 80083e8:	2208      	movs	r2, #8
 80083ea:	2100      	movs	r1, #0
 80083ec:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80083f0:	f7fd fea3 	bl	800613a <memset>
 80083f4:	4b9a      	ldr	r3, [pc, #616]	@ (8008660 <__ssvfscanf_r+0x97c>)
 80083f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	4632      	mov	r2, r6
 8008400:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008404:	68be      	ldr	r6, [r7, #8]
 8008406:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800840a:	47b0      	blx	r6
 800840c:	2801      	cmp	r0, #1
 800840e:	d144      	bne.n	800849a <__ssvfscanf_r+0x7b6>
 8008410:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008414:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008418:	5c9b      	ldrb	r3, [r3, r2]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d148      	bne.n	80084b0 <__ssvfscanf_r+0x7cc>
 800841e:	f507 76a8 	add.w	r6, r7, #336	@ 0x150
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d13a      	bne.n	800849e <__ssvfscanf_r+0x7ba>
 8008428:	f1ba 0f00 	cmp.w	sl, #0
 800842c:	d115      	bne.n	800845a <__ssvfscanf_r+0x776>
 800842e:	f8c5 a000 	str.w	sl, [r5]
 8008432:	f1bb 0f00 	cmp.w	fp, #0
 8008436:	d00d      	beq.n	8008454 <__ssvfscanf_r+0x770>
 8008438:	eba5 0108 	sub.w	r1, r5, r8
 800843c:	108b      	asrs	r3, r1, #2
 800843e:	3301      	adds	r3, #1
 8008440:	4599      	cmp	r9, r3
 8008442:	d907      	bls.n	8008454 <__ssvfscanf_r+0x770>
 8008444:	f8db 0000 	ldr.w	r0, [fp]
 8008448:	3104      	adds	r1, #4
 800844a:	f002 fa7f 	bl	800a94c <realloc>
 800844e:	b108      	cbz	r0, 8008454 <__ssvfscanf_r+0x770>
 8008450:	f8cb 0000 	str.w	r0, [fp]
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	3301      	adds	r3, #1
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
 800845a:	68fd      	ldr	r5, [r7, #12]
 800845c:	e45d      	b.n	8007d1a <__ssvfscanf_r+0x36>
 800845e:	f04f 0900 	mov.w	r9, #0
 8008462:	60fd      	str	r5, [r7, #12]
 8008464:	46c8      	mov	r8, r9
 8008466:	46cb      	mov	fp, r9
 8008468:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 800846c:	e78a      	b.n	8008384 <__ssvfscanf_r+0x6a0>
 800846e:	46d1      	mov	r9, sl
 8008470:	46d0      	mov	r8, sl
 8008472:	46d3      	mov	fp, sl
 8008474:	e786      	b.n	8008384 <__ssvfscanf_r+0x6a0>
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	3302      	adds	r3, #2
 800847a:	d1b2      	bne.n	80083e2 <__ssvfscanf_r+0x6fe>
 800847c:	693e      	ldr	r6, [r7, #16]
 800847e:	6863      	ldr	r3, [r4, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc40      	bgt.n	8008506 <__ssvfscanf_r+0x822>
 8008484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008486:	4621      	mov	r1, r4
 8008488:	f003 fd1a 	bl	800bec0 <__ssrefill_r>
 800848c:	2800      	cmp	r0, #0
 800848e:	d03a      	beq.n	8008506 <__ssvfscanf_r+0x822>
 8008490:	2e00      	cmp	r6, #0
 8008492:	d0c9      	beq.n	8008428 <__ssvfscanf_r+0x744>
 8008494:	e4e8      	b.n	8007e68 <__ssvfscanf_r+0x184>
 8008496:	4632      	mov	r2, r6
 8008498:	e7bc      	b.n	8008414 <__ssvfscanf_r+0x730>
 800849a:	2200      	movs	r2, #0
 800849c:	e7ba      	b.n	8008414 <__ssvfscanf_r+0x730>
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a2:	3b01      	subs	r3, #1
 80084a4:	4622      	mov	r2, r4
 80084a6:	5cf1      	ldrb	r1, [r6, r3]
 80084a8:	613b      	str	r3, [r7, #16]
 80084aa:	f003 fcce 	bl	800be4a <_sungetc_r>
 80084ae:	e7b8      	b.n	8008422 <__ssvfscanf_r+0x73e>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4413      	add	r3, r2
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	2b03      	cmp	r3, #3
 80084bc:	d102      	bne.n	80084c4 <__ssvfscanf_r+0x7e0>
 80084be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084c0:	2b04      	cmp	r3, #4
 80084c2:	d002      	beq.n	80084ca <__ssvfscanf_r+0x7e6>
 80084c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c6:	3b01      	subs	r3, #1
 80084c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084ca:	f1ba 0f00 	cmp.w	sl, #0
 80084ce:	d118      	bne.n	8008502 <__ssvfscanf_r+0x81e>
 80084d0:	3504      	adds	r5, #4
 80084d2:	f1bb 0f00 	cmp.w	fp, #0
 80084d6:	d014      	beq.n	8008502 <__ssvfscanf_r+0x81e>
 80084d8:	eba5 0608 	sub.w	r6, r5, r8
 80084dc:	ebb9 0fa6 	cmp.w	r9, r6, asr #2
 80084e0:	d80d      	bhi.n	80084fe <__ssvfscanf_r+0x81a>
 80084e2:	4640      	mov	r0, r8
 80084e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084e8:	f002 fa30 	bl	800a94c <realloc>
 80084ec:	4680      	mov	r8, r0
 80084ee:	2800      	cmp	r0, #0
 80084f0:	f43f adb3 	beq.w	800805a <__ssvfscanf_r+0x376>
 80084f4:	1985      	adds	r5, r0, r6
 80084f6:	f8cb 0000 	str.w	r0, [fp]
 80084fa:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80084fe:	4656      	mov	r6, sl
 8008500:	e7bd      	b.n	800847e <__ssvfscanf_r+0x79a>
 8008502:	2600      	movs	r6, #0
 8008504:	e7bb      	b.n	800847e <__ssvfscanf_r+0x79a>
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	f47f af3c 	bne.w	8008386 <__ssvfscanf_r+0x6a2>
 800850e:	e78b      	b.n	8008428 <__ssvfscanf_r+0x744>
 8008510:	f1ba 0f00 	cmp.w	sl, #0
 8008514:	d01e      	beq.n	8008554 <__ssvfscanf_r+0x870>
 8008516:	f107 0650 	add.w	r6, r7, #80	@ 0x50
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	781a      	ldrb	r2, [r3, #0]
 800851e:	5cb2      	ldrb	r2, [r6, r2]
 8008520:	b91a      	cbnz	r2, 800852a <__ssvfscanf_r+0x846>
 8008522:	f1b8 0f00 	cmp.w	r8, #0
 8008526:	d112      	bne.n	800854e <__ssvfscanf_r+0x86a>
 8008528:	e4d2      	b.n	8007ed0 <__ssvfscanf_r+0x1ec>
 800852a:	3301      	adds	r3, #1
 800852c:	6862      	ldr	r2, [r4, #4]
 800852e:	6023      	str	r3, [r4, #0]
 8008530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008532:	f108 0801 	add.w	r8, r8, #1
 8008536:	3a01      	subs	r2, #1
 8008538:	4543      	cmp	r3, r8
 800853a:	6062      	str	r2, [r4, #4]
 800853c:	d007      	beq.n	800854e <__ssvfscanf_r+0x86a>
 800853e:	2a00      	cmp	r2, #0
 8008540:	dceb      	bgt.n	800851a <__ssvfscanf_r+0x836>
 8008542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008544:	4621      	mov	r1, r4
 8008546:	f003 fcbb 	bl	800bec0 <__ssrefill_r>
 800854a:	2800      	cmp	r0, #0
 800854c:	d0e5      	beq.n	800851a <__ssvfscanf_r+0x836>
 800854e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008550:	4443      	add	r3, r8
 8008552:	e674      	b.n	800823e <__ssvfscanf_r+0x55a>
 8008554:	46a9      	mov	r9, r5
 8008556:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800855a:	f859 8b04 	ldr.w	r8, [r9], #4
 800855e:	d07d      	beq.n	800865c <__ssvfscanf_r+0x978>
 8008560:	f1b8 0f00 	cmp.w	r8, #0
 8008564:	f43f acb4 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8008568:	2020      	movs	r0, #32
 800856a:	f001 fd69 	bl	800a040 <malloc>
 800856e:	4606      	mov	r6, r0
 8008570:	2800      	cmp	r0, #0
 8008572:	f43f ac7e 	beq.w	8007e72 <__ssvfscanf_r+0x18e>
 8008576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008578:	f8c8 0000 	str.w	r0, [r8]
 800857c:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8008580:	889d      	ldrh	r5, [r3, #4]
 8008582:	45aa      	cmp	sl, r5
 8008584:	d311      	bcc.n	80085aa <__ssvfscanf_r+0x8c6>
 8008586:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 800858a:	429d      	cmp	r5, r3
 800858c:	f200 8512 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 8008590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008592:	3508      	adds	r5, #8
 8008594:	b2ad      	uxth	r5, r5
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	00a9      	lsls	r1, r5, #2
 800859a:	f002 f9d7 	bl	800a94c <realloc>
 800859e:	2800      	cmp	r0, #0
 80085a0:	f000 8508 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80085a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a6:	6018      	str	r0, [r3, #0]
 80085a8:	809d      	strh	r5, [r3, #4]
 80085aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f10a 0201 	add.w	r2, sl, #1
 80085b4:	f843 802a 	str.w	r8, [r3, sl, lsl #2]
 80085b8:	80ca      	strh	r2, [r1, #6]
 80085ba:	46c2      	mov	sl, r8
 80085bc:	46b0      	mov	r8, r6
 80085be:	2620      	movs	r6, #32
 80085c0:	4645      	mov	r5, r8
 80085c2:	6823      	ldr	r3, [r4, #0]
 80085c4:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	5c8a      	ldrb	r2, [r1, r2]
 80085cc:	b35a      	cbz	r2, 8008626 <__ssvfscanf_r+0x942>
 80085ce:	6862      	ldr	r2, [r4, #4]
 80085d0:	3a01      	subs	r2, #1
 80085d2:	6062      	str	r2, [r4, #4]
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	6022      	str	r2, [r4, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f808 3b01 	strb.w	r3, [r8], #1
 80085de:	f1ba 0f00 	cmp.w	sl, #0
 80085e2:	d010      	beq.n	8008606 <__ssvfscanf_r+0x922>
 80085e4:	eba8 0b05 	sub.w	fp, r8, r5
 80085e8:	45b3      	cmp	fp, r6
 80085ea:	d30c      	bcc.n	8008606 <__ssvfscanf_r+0x922>
 80085ec:	0076      	lsls	r6, r6, #1
 80085ee:	4628      	mov	r0, r5
 80085f0:	4631      	mov	r1, r6
 80085f2:	f002 f9ab 	bl	800a94c <realloc>
 80085f6:	4605      	mov	r5, r0
 80085f8:	2800      	cmp	r0, #0
 80085fa:	f43f ac3a 	beq.w	8007e72 <__ssvfscanf_r+0x18e>
 80085fe:	eb00 080b 	add.w	r8, r0, fp
 8008602:	f8ca 0000 	str.w	r0, [sl]
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	3b01      	subs	r3, #1
 800860a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800860c:	d00b      	beq.n	8008626 <__ssvfscanf_r+0x942>
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	2b00      	cmp	r3, #0
 8008612:	dcd6      	bgt.n	80085c2 <__ssvfscanf_r+0x8de>
 8008614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008616:	4621      	mov	r1, r4
 8008618:	f003 fc52 	bl	800bec0 <__ssrefill_r>
 800861c:	2800      	cmp	r0, #0
 800861e:	d0d0      	beq.n	80085c2 <__ssvfscanf_r+0x8de>
 8008620:	45a8      	cmp	r8, r5
 8008622:	f43f ac21 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 8008626:	ebb8 0505 	subs.w	r5, r8, r5
 800862a:	f43f ac51 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 800862e:	2300      	movs	r3, #0
 8008630:	f888 3000 	strb.w	r3, [r8]
 8008634:	f1ba 0f00 	cmp.w	sl, #0
 8008638:	d009      	beq.n	800864e <__ssvfscanf_r+0x96a>
 800863a:	1c69      	adds	r1, r5, #1
 800863c:	428e      	cmp	r6, r1
 800863e:	d906      	bls.n	800864e <__ssvfscanf_r+0x96a>
 8008640:	f8da 0000 	ldr.w	r0, [sl]
 8008644:	f002 f982 	bl	800a94c <realloc>
 8008648:	b108      	cbz	r0, 800864e <__ssvfscanf_r+0x96a>
 800864a:	f8ca 0000 	str.w	r0, [sl]
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	3301      	adds	r3, #1
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
 8008654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008656:	442b      	add	r3, r5
 8008658:	633b      	str	r3, [r7, #48]	@ 0x30
 800865a:	e64a      	b.n	80082f2 <__ssvfscanf_r+0x60e>
 800865c:	46b2      	mov	sl, r6
 800865e:	e7af      	b.n	80085c0 <__ssvfscanf_r+0x8dc>
 8008660:	20000554 	.word	0x20000554
 8008664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008666:	2b00      	cmp	r3, #0
 8008668:	bf08      	it	eq
 800866a:	f04f 33ff 	moveq.w	r3, #4294967295
 800866e:	f016 0901 	ands.w	r9, r6, #1
 8008672:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008674:	f006 0810 	and.w	r8, r6, #16
 8008678:	f000 80ef 	beq.w	800885a <__ssvfscanf_r+0xb76>
 800867c:	f1b8 0f00 	cmp.w	r8, #0
 8008680:	f040 8098 	bne.w	80087b4 <__ssvfscanf_r+0xad0>
 8008684:	462b      	mov	r3, r5
 8008686:	0631      	lsls	r1, r6, #24
 8008688:	f853 5b04 	ldr.w	r5, [r3], #4
 800868c:	613b      	str	r3, [r7, #16]
 800868e:	f140 8099 	bpl.w	80087c4 <__ssvfscanf_r+0xae0>
 8008692:	2d00      	cmp	r5, #0
 8008694:	f43f ace4 	beq.w	8008060 <__ssvfscanf_r+0x37c>
 8008698:	2080      	movs	r0, #128	@ 0x80
 800869a:	f001 fcd1 	bl	800a040 <malloc>
 800869e:	4606      	mov	r6, r0
 80086a0:	2800      	cmp	r0, #0
 80086a2:	f43f acda 	beq.w	800805a <__ssvfscanf_r+0x376>
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	6028      	str	r0, [r5, #0]
 80086aa:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80086ae:	889b      	ldrh	r3, [r3, #4]
 80086b0:	4599      	cmp	r9, r3
 80086b2:	d314      	bcc.n	80086de <__ssvfscanf_r+0x9fa>
 80086b4:	f64f 72f6 	movw	r2, #65526	@ 0xfff6
 80086b8:	4293      	cmp	r3, r2
 80086ba:	f200 847b 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80086be:	3308      	adds	r3, #8
 80086c0:	fa1f fa83 	uxth.w	sl, r3
 80086c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c6:	ea4f 018a 	mov.w	r1, sl, lsl #2
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	f002 f93e 	bl	800a94c <realloc>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	f000 846f 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	6018      	str	r0, [r3, #0]
 80086da:	f8a3 a004 	strh.w	sl, [r3, #4]
 80086de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f109 0201 	add.w	r2, r9, #1
 80086e8:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 80086ec:	46aa      	mov	sl, r5
 80086ee:	80ca      	strh	r2, [r1, #6]
 80086f0:	4635      	mov	r5, r6
 80086f2:	f04f 0920 	mov.w	r9, #32
 80086f6:	2300      	movs	r3, #0
 80086f8:	6822      	ldr	r2, [r4, #0]
 80086fa:	49a7      	ldr	r1, [pc, #668]	@ (8008998 <__ssvfscanf_r+0xcb4>)
 80086fc:	7812      	ldrb	r2, [r2, #0]
 80086fe:	5c8a      	ldrb	r2, [r1, r2]
 8008700:	0710      	lsls	r0, r2, #28
 8008702:	d43c      	bmi.n	800877e <__ssvfscanf_r+0xa9a>
 8008704:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008706:	2a00      	cmp	r2, #0
 8008708:	d039      	beq.n	800877e <__ssvfscanf_r+0xa9a>
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	f000 fdac 	bl	8009268 <__locale_mb_cur_max>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4298      	cmp	r0, r3
 8008714:	f43f aba8 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 8008718:	6822      	ldr	r2, [r4, #0]
 800871a:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 800871e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8008722:	54c8      	strb	r0, [r1, r3]
 8008724:	f103 0b01 	add.w	fp, r3, #1
 8008728:	6863      	ldr	r3, [r4, #4]
 800872a:	3b01      	subs	r3, #1
 800872c:	e9c4 2300 	strd	r2, r3, [r4]
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d102      	bne.n	800873c <__ssvfscanf_r+0xa58>
 8008736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008738:	2b04      	cmp	r3, #4
 800873a:	d005      	beq.n	8008748 <__ssvfscanf_r+0xa64>
 800873c:	2208      	movs	r2, #8
 800873e:	2100      	movs	r1, #0
 8008740:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8008744:	f7fd fcf9 	bl	800613a <memset>
 8008748:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800874c:	9300      	str	r3, [sp, #0]
 800874e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8008752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008754:	465b      	mov	r3, fp
 8008756:	4629      	mov	r1, r5
 8008758:	f003 fad2 	bl	800bd00 <_mbrtowc_r>
 800875c:	1c42      	adds	r2, r0, #1
 800875e:	6238      	str	r0, [r7, #32]
 8008760:	f43f ab82 	beq.w	8007e68 <__ssvfscanf_r+0x184>
 8008764:	bb90      	cbnz	r0, 80087cc <__ssvfscanf_r+0xae8>
 8008766:	6028      	str	r0, [r5, #0]
 8008768:	6828      	ldr	r0, [r5, #0]
 800876a:	f003 fae3 	bl	800bd34 <iswspace>
 800876e:	4603      	mov	r3, r0
 8008770:	2800      	cmp	r0, #0
 8008772:	d047      	beq.n	8008804 <__ssvfscanf_r+0xb20>
 8008774:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008778:	f1bb 0f00 	cmp.w	fp, #0
 800877c:	d139      	bne.n	80087f2 <__ssvfscanf_r+0xb0e>
 800877e:	f1b8 0f00 	cmp.w	r8, #0
 8008782:	d114      	bne.n	80087ae <__ssvfscanf_r+0xaca>
 8008784:	f8c5 8000 	str.w	r8, [r5]
 8008788:	f1ba 0f00 	cmp.w	sl, #0
 800878c:	d00c      	beq.n	80087a8 <__ssvfscanf_r+0xac4>
 800878e:	1ba9      	subs	r1, r5, r6
 8008790:	108b      	asrs	r3, r1, #2
 8008792:	3301      	adds	r3, #1
 8008794:	4599      	cmp	r9, r3
 8008796:	d907      	bls.n	80087a8 <__ssvfscanf_r+0xac4>
 8008798:	f8da 0000 	ldr.w	r0, [sl]
 800879c:	3104      	adds	r1, #4
 800879e:	f002 f8d5 	bl	800a94c <realloc>
 80087a2:	b108      	cbz	r0, 80087a8 <__ssvfscanf_r+0xac4>
 80087a4:	f8ca 0000 	str.w	r0, [sl]
 80087a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087aa:	3301      	adds	r3, #1
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80087ae:	693d      	ldr	r5, [r7, #16]
 80087b0:	f7ff bab3 	b.w	8007d1a <__ssvfscanf_r+0x36>
 80087b4:	f04f 0900 	mov.w	r9, #0
 80087b8:	613d      	str	r5, [r7, #16]
 80087ba:	464e      	mov	r6, r9
 80087bc:	46ca      	mov	sl, r9
 80087be:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 80087c2:	e798      	b.n	80086f6 <__ssvfscanf_r+0xa12>
 80087c4:	46c1      	mov	r9, r8
 80087c6:	4646      	mov	r6, r8
 80087c8:	46c2      	mov	sl, r8
 80087ca:	e794      	b.n	80086f6 <__ssvfscanf_r+0xa12>
 80087cc:	6a3b      	ldr	r3, [r7, #32]
 80087ce:	3302      	adds	r3, #2
 80087d0:	d1ca      	bne.n	8008768 <__ssvfscanf_r+0xa84>
 80087d2:	465b      	mov	r3, fp
 80087d4:	6862      	ldr	r2, [r4, #4]
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	dc8e      	bgt.n	80086f8 <__ssvfscanf_r+0xa14>
 80087da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087dc:	60fb      	str	r3, [r7, #12]
 80087de:	4621      	mov	r1, r4
 80087e0:	f003 fb6e 	bl	800bec0 <__ssrefill_r>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d086      	beq.n	80086f8 <__ssvfscanf_r+0xa14>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f47f ab3c 	bne.w	8007e68 <__ssvfscanf_r+0x184>
 80087f0:	e7c5      	b.n	800877e <__ssvfscanf_r+0xa9a>
 80087f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087f8:	f813 100b 	ldrb.w	r1, [r3, fp]
 80087fc:	4622      	mov	r2, r4
 80087fe:	f003 fb24 	bl	800be4a <_sungetc_r>
 8008802:	e7b7      	b.n	8008774 <__ssvfscanf_r+0xa90>
 8008804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008806:	445a      	add	r2, fp
 8008808:	633a      	str	r2, [r7, #48]	@ 0x30
 800880a:	6a3a      	ldr	r2, [r7, #32]
 800880c:	2a03      	cmp	r2, #3
 800880e:	d102      	bne.n	8008816 <__ssvfscanf_r+0xb32>
 8008810:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008812:	2a04      	cmp	r2, #4
 8008814:	d002      	beq.n	800881c <__ssvfscanf_r+0xb38>
 8008816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008818:	3a01      	subs	r2, #1
 800881a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800881c:	f1b8 0f00 	cmp.w	r8, #0
 8008820:	d1d8      	bne.n	80087d4 <__ssvfscanf_r+0xaf0>
 8008822:	3504      	adds	r5, #4
 8008824:	f1ba 0f00 	cmp.w	sl, #0
 8008828:	d015      	beq.n	8008856 <__ssvfscanf_r+0xb72>
 800882a:	eba5 0b06 	sub.w	fp, r5, r6
 800882e:	ebb9 0fab 	cmp.w	r9, fp, asr #2
 8008832:	d80e      	bhi.n	8008852 <__ssvfscanf_r+0xb6e>
 8008834:	4630      	mov	r0, r6
 8008836:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800883a:	f002 f887 	bl	800a94c <realloc>
 800883e:	4606      	mov	r6, r0
 8008840:	2800      	cmp	r0, #0
 8008842:	f43f ac0a 	beq.w	800805a <__ssvfscanf_r+0x376>
 8008846:	eb00 050b 	add.w	r5, r0, fp
 800884a:	f8ca 0000 	str.w	r0, [sl]
 800884e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008852:	4643      	mov	r3, r8
 8008854:	e7be      	b.n	80087d4 <__ssvfscanf_r+0xaf0>
 8008856:	4653      	mov	r3, sl
 8008858:	e7bc      	b.n	80087d4 <__ssvfscanf_r+0xaf0>
 800885a:	f1b8 0f00 	cmp.w	r8, #0
 800885e:	d01a      	beq.n	8008896 <__ssvfscanf_r+0xbb2>
 8008860:	4e4d      	ldr	r6, [pc, #308]	@ (8008998 <__ssvfscanf_r+0xcb4>)
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	781a      	ldrb	r2, [r3, #0]
 8008866:	5cb2      	ldrb	r2, [r6, r2]
 8008868:	0711      	lsls	r1, r2, #28
 800886a:	d411      	bmi.n	8008890 <__ssvfscanf_r+0xbac>
 800886c:	3301      	adds	r3, #1
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008874:	f109 0901 	add.w	r9, r9, #1
 8008878:	3a01      	subs	r2, #1
 800887a:	454b      	cmp	r3, r9
 800887c:	6062      	str	r2, [r4, #4]
 800887e:	d007      	beq.n	8008890 <__ssvfscanf_r+0xbac>
 8008880:	2a00      	cmp	r2, #0
 8008882:	dcee      	bgt.n	8008862 <__ssvfscanf_r+0xb7e>
 8008884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008886:	4621      	mov	r1, r4
 8008888:	f003 fb1a 	bl	800bec0 <__ssrefill_r>
 800888c:	2800      	cmp	r0, #0
 800888e:	d0e8      	beq.n	8008862 <__ssvfscanf_r+0xb7e>
 8008890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008892:	444b      	add	r3, r9
 8008894:	e4d3      	b.n	800823e <__ssvfscanf_r+0x55a>
 8008896:	46a8      	mov	r8, r5
 8008898:	f016 0680 	ands.w	r6, r6, #128	@ 0x80
 800889c:	f858 5b04 	ldr.w	r5, [r8], #4
 80088a0:	d077      	beq.n	8008992 <__ssvfscanf_r+0xcae>
 80088a2:	2d00      	cmp	r5, #0
 80088a4:	f43f ab14 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 80088a8:	2020      	movs	r0, #32
 80088aa:	f001 fbc9 	bl	800a040 <malloc>
 80088ae:	4681      	mov	r9, r0
 80088b0:	2800      	cmp	r0, #0
 80088b2:	f43f aade 	beq.w	8007e72 <__ssvfscanf_r+0x18e>
 80088b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b8:	6028      	str	r0, [r5, #0]
 80088ba:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 80088be:	889e      	ldrh	r6, [r3, #4]
 80088c0:	45b2      	cmp	sl, r6
 80088c2:	d311      	bcc.n	80088e8 <__ssvfscanf_r+0xc04>
 80088c4:	f64f 73f6 	movw	r3, #65526	@ 0xfff6
 80088c8:	429e      	cmp	r6, r3
 80088ca:	f200 8373 	bhi.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80088ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088d0:	3608      	adds	r6, #8
 80088d2:	b2b6      	uxth	r6, r6
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	00b1      	lsls	r1, r6, #2
 80088d8:	f002 f838 	bl	800a94c <realloc>
 80088dc:	2800      	cmp	r0, #0
 80088de:	f000 8369 	beq.w	8008fb4 <__ssvfscanf_r+0x12d0>
 80088e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088e4:	6018      	str	r0, [r3, #0]
 80088e6:	809e      	strh	r6, [r3, #4]
 80088e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f10a 0201 	add.w	r2, sl, #1
 80088f2:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 80088f6:	80ca      	strh	r2, [r1, #6]
 80088f8:	46aa      	mov	sl, r5
 80088fa:	2620      	movs	r6, #32
 80088fc:	464d      	mov	r5, r9
 80088fe:	46a9      	mov	r9, r5
 8008900:	6823      	ldr	r3, [r4, #0]
 8008902:	4925      	ldr	r1, [pc, #148]	@ (8008998 <__ssvfscanf_r+0xcb4>)
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	5c8a      	ldrb	r2, [r1, r2]
 8008908:	0712      	lsls	r2, r2, #28
 800890a:	d428      	bmi.n	800895e <__ssvfscanf_r+0xc7a>
 800890c:	6862      	ldr	r2, [r4, #4]
 800890e:	3a01      	subs	r2, #1
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	1c5a      	adds	r2, r3, #1
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	f805 3b01 	strb.w	r3, [r5], #1
 800891c:	f1ba 0f00 	cmp.w	sl, #0
 8008920:	d010      	beq.n	8008944 <__ssvfscanf_r+0xc60>
 8008922:	eba5 0b09 	sub.w	fp, r5, r9
 8008926:	45b3      	cmp	fp, r6
 8008928:	d30c      	bcc.n	8008944 <__ssvfscanf_r+0xc60>
 800892a:	0076      	lsls	r6, r6, #1
 800892c:	4648      	mov	r0, r9
 800892e:	4631      	mov	r1, r6
 8008930:	f002 f80c 	bl	800a94c <realloc>
 8008934:	4681      	mov	r9, r0
 8008936:	2800      	cmp	r0, #0
 8008938:	f43f aa9b 	beq.w	8007e72 <__ssvfscanf_r+0x18e>
 800893c:	eb00 050b 	add.w	r5, r0, fp
 8008940:	f8ca 0000 	str.w	r0, [sl]
 8008944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008946:	3b01      	subs	r3, #1
 8008948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800894a:	d008      	beq.n	800895e <__ssvfscanf_r+0xc7a>
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	2b00      	cmp	r3, #0
 8008950:	dcd6      	bgt.n	8008900 <__ssvfscanf_r+0xc1c>
 8008952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008954:	4621      	mov	r1, r4
 8008956:	f003 fab3 	bl	800bec0 <__ssrefill_r>
 800895a:	2800      	cmp	r0, #0
 800895c:	d0d0      	beq.n	8008900 <__ssvfscanf_r+0xc1c>
 800895e:	2300      	movs	r3, #0
 8008960:	702b      	strb	r3, [r5, #0]
 8008962:	eba5 0509 	sub.w	r5, r5, r9
 8008966:	f1ba 0f00 	cmp.w	sl, #0
 800896a:	d009      	beq.n	8008980 <__ssvfscanf_r+0xc9c>
 800896c:	1c69      	adds	r1, r5, #1
 800896e:	428e      	cmp	r6, r1
 8008970:	d906      	bls.n	8008980 <__ssvfscanf_r+0xc9c>
 8008972:	f8da 0000 	ldr.w	r0, [sl]
 8008976:	f001 ffe9 	bl	800a94c <realloc>
 800897a:	b108      	cbz	r0, 8008980 <__ssvfscanf_r+0xc9c>
 800897c:	f8ca 0000 	str.w	r0, [sl]
 8008980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008982:	442b      	add	r3, r5
 8008984:	633b      	str	r3, [r7, #48]	@ 0x30
 8008986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008988:	3301      	adds	r3, #1
 800898a:	627b      	str	r3, [r7, #36]	@ 0x24
 800898c:	4645      	mov	r5, r8
 800898e:	f7ff b9c4 	b.w	8007d1a <__ssvfscanf_r+0x36>
 8008992:	46b2      	mov	sl, r6
 8008994:	e7b3      	b.n	80088fe <__ssvfscanf_r+0xc1a>
 8008996:	bf00      	nop
 8008998:	0800db01 	.word	0x0800db01
 800899c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899e:	3b01      	subs	r3, #1
 80089a0:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 80089a4:	bf81      	itttt	hi
 80089a6:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 80089a8:	f46f 7cae 	mvnhi.w	ip, #348	@ 0x15c
 80089ac:	eb03 090c 	addhi.w	r9, r3, ip
 80089b0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80089b4:	bf8c      	ite	hi
 80089b6:	62fb      	strhi	r3, [r7, #44]	@ 0x2c
 80089b8:	f04f 0900 	movls.w	r9, #0
 80089bc:	f446 6b58 	orr.w	fp, r6, #3456	@ 0xd80
 80089c0:	f04f 0a00 	mov.w	sl, #0
 80089c4:	f507 78a8 	add.w	r8, r7, #336	@ 0x150
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	7813      	ldrb	r3, [r2, #0]
 80089cc:	2b39      	cmp	r3, #57	@ 0x39
 80089ce:	d80f      	bhi.n	80089f0 <__ssvfscanf_r+0xd0c>
 80089d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80089d2:	d91a      	bls.n	8008a0a <__ssvfscanf_r+0xd26>
 80089d4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80089d8:	290e      	cmp	r1, #14
 80089da:	d816      	bhi.n	8008a0a <__ssvfscanf_r+0xd26>
 80089dc:	e8df f001 	tbb	[pc, r1]
 80089e0:	15781578 	.word	0x15781578
 80089e4:	68683f15 	.word	0x68683f15
 80089e8:	68686868 	.word	0x68686868
 80089ec:	7068      	.short	0x7068
 80089ee:	70          	.byte	0x70
 80089ef:	00          	.byte	0x00
 80089f0:	2b66      	cmp	r3, #102	@ 0x66
 80089f2:	d832      	bhi.n	8008a5a <__ssvfscanf_r+0xd76>
 80089f4:	2b60      	cmp	r3, #96	@ 0x60
 80089f6:	d803      	bhi.n	8008a00 <__ssvfscanf_r+0xd1c>
 80089f8:	2b46      	cmp	r3, #70	@ 0x46
 80089fa:	d804      	bhi.n	8008a06 <__ssvfscanf_r+0xd22>
 80089fc:	2b40      	cmp	r3, #64	@ 0x40
 80089fe:	d904      	bls.n	8008a0a <__ssvfscanf_r+0xd26>
 8008a00:	69f9      	ldr	r1, [r7, #28]
 8008a02:	290a      	cmp	r1, #10
 8008a04:	e062      	b.n	8008acc <__ssvfscanf_r+0xde8>
 8008a06:	2b58      	cmp	r3, #88	@ 0x58
 8008a08:	d068      	beq.n	8008adc <__ssvfscanf_r+0xdf8>
 8008a0a:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8008a0e:	d011      	beq.n	8008a34 <__ssvfscanf_r+0xd50>
 8008a10:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008a14:	4598      	cmp	r8, r3
 8008a16:	d908      	bls.n	8008a2a <__ssvfscanf_r+0xd46>
 8008a18:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a1e:	4622      	mov	r2, r4
 8008a20:	f003 fa13 	bl	800be4a <_sungetc_r>
 8008a24:	f108 39ff 	add.w	r9, r8, #4294967295
 8008a28:	46c8      	mov	r8, r9
 8008a2a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008a2e:	4598      	cmp	r8, r3
 8008a30:	f43f aa4e 	beq.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8008a34:	f01b 0210 	ands.w	r2, fp, #16
 8008a38:	d16c      	bne.n	8008b14 <__ssvfscanf_r+0xe30>
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a3e:	69be      	ldr	r6, [r7, #24]
 8008a40:	f888 2000 	strb.w	r2, [r8]
 8008a44:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008a48:	47b0      	blx	r6
 8008a4a:	f01b 0f20 	tst.w	fp, #32
 8008a4e:	f105 0904 	add.w	r9, r5, #4
 8008a52:	d056      	beq.n	8008b02 <__ssvfscanf_r+0xe1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	6018      	str	r0, [r3, #0]
 8008a58:	e058      	b.n	8008b0c <__ssvfscanf_r+0xe28>
 8008a5a:	2b78      	cmp	r3, #120	@ 0x78
 8008a5c:	e7d4      	b.n	8008a08 <__ssvfscanf_r+0xd24>
 8008a5e:	f41b 6f00 	tst.w	fp, #2048	@ 0x800
 8008a62:	d00a      	beq.n	8008a7a <__ssvfscanf_r+0xd96>
 8008a64:	69f9      	ldr	r1, [r7, #28]
 8008a66:	b919      	cbnz	r1, 8008a70 <__ssvfscanf_r+0xd8c>
 8008a68:	2108      	movs	r1, #8
 8008a6a:	f44b 7b00 	orr.w	fp, fp, #512	@ 0x200
 8008a6e:	61f9      	str	r1, [r7, #28]
 8008a70:	f41b 6f80 	tst.w	fp, #1024	@ 0x400
 8008a74:	d004      	beq.n	8008a80 <__ssvfscanf_r+0xd9c>
 8008a76:	f42b 6bb0 	bic.w	fp, fp, #1408	@ 0x580
 8008a7a:	f808 3b01 	strb.w	r3, [r8], #1
 8008a7e:	e00b      	b.n	8008a98 <__ssvfscanf_r+0xdb4>
 8008a80:	f42b 7b60 	bic.w	fp, fp, #896	@ 0x380
 8008a84:	f1b9 0f00 	cmp.w	r9, #0
 8008a88:	d004      	beq.n	8008a94 <__ssvfscanf_r+0xdb0>
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a94:	f10a 0a01 	add.w	sl, sl, #1
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	6063      	str	r3, [r4, #4]
 8008aa0:	dd28      	ble.n	8008af4 <__ssvfscanf_r+0xe10>
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	6022      	str	r2, [r4, #0]
 8008aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aac:	d18c      	bne.n	80089c8 <__ssvfscanf_r+0xce4>
 8008aae:	e7ac      	b.n	8008a0a <__ssvfscanf_r+0xd26>
 8008ab0:	69f8      	ldr	r0, [r7, #28]
 8008ab2:	499b      	ldr	r1, [pc, #620]	@ (8008d20 <__ssvfscanf_r+0x103c>)
 8008ab4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8008ab8:	61f9      	str	r1, [r7, #28]
 8008aba:	f42b 6b38 	bic.w	fp, fp, #2944	@ 0xb80
 8008abe:	e7dc      	b.n	8008a7a <__ssvfscanf_r+0xd96>
 8008ac0:	69f8      	ldr	r0, [r7, #28]
 8008ac2:	4997      	ldr	r1, [pc, #604]	@ (8008d20 <__ssvfscanf_r+0x103c>)
 8008ac4:	f931 1010 	ldrsh.w	r1, [r1, r0, lsl #1]
 8008ac8:	61f9      	str	r1, [r7, #28]
 8008aca:	2908      	cmp	r1, #8
 8008acc:	dcf5      	bgt.n	8008aba <__ssvfscanf_r+0xdd6>
 8008ace:	e79c      	b.n	8008a0a <__ssvfscanf_r+0xd26>
 8008ad0:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8008ad4:	d099      	beq.n	8008a0a <__ssvfscanf_r+0xd26>
 8008ad6:	f02b 0b80 	bic.w	fp, fp, #128	@ 0x80
 8008ada:	e7ce      	b.n	8008a7a <__ssvfscanf_r+0xd96>
 8008adc:	f40b 61c0 	and.w	r1, fp, #1536	@ 0x600
 8008ae0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008ae4:	d191      	bne.n	8008a0a <__ssvfscanf_r+0xd26>
 8008ae6:	f42b 7600 	bic.w	r6, fp, #512	@ 0x200
 8008aea:	2110      	movs	r1, #16
 8008aec:	f446 6ba0 	orr.w	fp, r6, #1280	@ 0x500
 8008af0:	61f9      	str	r1, [r7, #28]
 8008af2:	e7c2      	b.n	8008a7a <__ssvfscanf_r+0xd96>
 8008af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008af6:	4621      	mov	r1, r4
 8008af8:	f003 f9e2 	bl	800bec0 <__ssrefill_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0d2      	beq.n	8008aa6 <__ssvfscanf_r+0xdc2>
 8008b00:	e783      	b.n	8008a0a <__ssvfscanf_r+0xd26>
 8008b02:	f01b 0f08 	tst.w	fp, #8
 8008b06:	d00b      	beq.n	8008b20 <__ssvfscanf_r+0xe3c>
 8008b08:	682b      	ldr	r3, [r5, #0]
 8008b0a:	7018      	strb	r0, [r3, #0]
 8008b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0e:	3301      	adds	r3, #1
 8008b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b12:	464d      	mov	r5, r9
 8008b14:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8008b18:	eba8 0803 	sub.w	r8, r8, r3
 8008b1c:	44d0      	add	r8, sl
 8008b1e:	e516      	b.n	800854e <__ssvfscanf_r+0x86a>
 8008b20:	f01b 0f04 	tst.w	fp, #4
 8008b24:	d002      	beq.n	8008b2c <__ssvfscanf_r+0xe48>
 8008b26:	682b      	ldr	r3, [r5, #0]
 8008b28:	8018      	strh	r0, [r3, #0]
 8008b2a:	e7ef      	b.n	8008b0c <__ssvfscanf_r+0xe28>
 8008b2c:	f01b 0201 	ands.w	r2, fp, #1
 8008b30:	d190      	bne.n	8008a54 <__ssvfscanf_r+0xd70>
 8008b32:	f01b 0f02 	tst.w	fp, #2
 8008b36:	d08d      	beq.n	8008a54 <__ssvfscanf_r+0xd70>
 8008b38:	4b7a      	ldr	r3, [pc, #488]	@ (8008d24 <__ssvfscanf_r+0x1040>)
 8008b3a:	69b9      	ldr	r1, [r7, #24]
 8008b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008b46:	d105      	bne.n	8008b54 <__ssvfscanf_r+0xe70>
 8008b48:	f003 f8d8 	bl	800bcfc <_strtoull_r>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	e9c3 0100 	strd	r0, r1, [r3]
 8008b52:	e7db      	b.n	8008b0c <__ssvfscanf_r+0xe28>
 8008b54:	f003 f83a 	bl	800bbcc <_strtoll_r>
 8008b58:	e7f8      	b.n	8008b4c <__ssvfscanf_r+0xe68>
 8008b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b5c:	f000 fb8a 	bl	8009274 <_localeconv_r>
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	6802      	ldr	r2, [r0, #0]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	f5b3 7fae 	cmp.w	r3, #348	@ 0x15c
 8008b6a:	f04f 0800 	mov.w	r8, #0
 8008b6e:	bf88      	it	hi
 8008b70:	6afb      	ldrhi	r3, [r7, #44]	@ 0x2c
 8008b72:	f8c7 8010 	str.w	r8, [r7, #16]
 8008b76:	e9c7 8802 	strd	r8, r8, [r7, #8]
 8008b7a:	bf81      	itttt	hi
 8008b7c:	f46f 70ae 	mvnhi.w	r0, #348	@ 0x15c
 8008b80:	f240 115d 	movwhi	r1, #349	@ 0x15d
 8008b84:	181b      	addhi	r3, r3, r0
 8008b86:	62f9      	strhi	r1, [r7, #44]	@ 0x2c
 8008b88:	bf98      	it	ls
 8008b8a:	2300      	movls	r3, #0
 8008b8c:	f446 66f0 	orr.w	r6, r6, #1920	@ 0x780
 8008b90:	46c3      	mov	fp, r8
 8008b92:	46c2      	mov	sl, r8
 8008b94:	f507 79a8 	add.w	r9, r7, #336	@ 0x150
 8008b98:	6821      	ldr	r1, [r4, #0]
 8008b9a:	6079      	str	r1, [r7, #4]
 8008b9c:	7808      	ldrb	r0, [r1, #0]
 8008b9e:	f1a0 0c2b 	sub.w	ip, r0, #43	@ 0x2b
 8008ba2:	f1bc 0f4e 	cmp.w	ip, #78	@ 0x4e
 8008ba6:	f200 8123 	bhi.w	8008df0 <__ssvfscanf_r+0x110c>
 8008baa:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8008bae:	0089      	.short	0x0089
 8008bb0:	00890121 	.word	0x00890121
 8008bb4:	01210121 	.word	0x01210121
 8008bb8:	006f004f 	.word	0x006f004f
 8008bbc:	006f006f 	.word	0x006f006f
 8008bc0:	006f006f 	.word	0x006f006f
 8008bc4:	006f006f 	.word	0x006f006f
 8008bc8:	006f006f 	.word	0x006f006f
 8008bcc:	01210121 	.word	0x01210121
 8008bd0:	01210121 	.word	0x01210121
 8008bd4:	01210121 	.word	0x01210121
 8008bd8:	00af0121 	.word	0x00af0121
 8008bdc:	006d006d 	.word	0x006d006d
 8008be0:	011e006d 	.word	0x011e006d
 8008be4:	012100ed 	.word	0x012100ed
 8008be8:	00d60121 	.word	0x00d60121
 8008bec:	01210121 	.word	0x01210121
 8008bf0:	01210121 	.word	0x01210121
 8008bf4:	01210090 	.word	0x01210090
 8008bf8:	01210104 	.word	0x01210104
 8008bfc:	01210121 	.word	0x01210121
 8008c00:	012100f8 	.word	0x012100f8
 8008c04:	01210121 	.word	0x01210121
 8008c08:	00fe0073 	.word	0x00fe0073
 8008c0c:	01210121 	.word	0x01210121
 8008c10:	01210121 	.word	0x01210121
 8008c14:	01210121 	.word	0x01210121
 8008c18:	00af0121 	.word	0x00af0121
 8008c1c:	006d006d 	.word	0x006d006d
 8008c20:	011e006d 	.word	0x011e006d
 8008c24:	012100ed 	.word	0x012100ed
 8008c28:	00d60121 	.word	0x00d60121
 8008c2c:	01210121 	.word	0x01210121
 8008c30:	01210121 	.word	0x01210121
 8008c34:	01210090 	.word	0x01210090
 8008c38:	01210104 	.word	0x01210104
 8008c3c:	01210121 	.word	0x01210121
 8008c40:	012100f8 	.word	0x012100f8
 8008c44:	01210121 	.word	0x01210121
 8008c48:	00fe0073 	.word	0x00fe0073
 8008c4c:	05f1      	lsls	r1, r6, #23
 8008c4e:	d51d      	bpl.n	8008c8c <__ssvfscanf_r+0xfa8>
 8008c50:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8008c54:	f10a 0a01 	add.w	sl, sl, #1
 8008c58:	b11b      	cbz	r3, 8008c62 <__ssvfscanf_r+0xf7e>
 8008c5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c66:	3001      	adds	r0, #1
 8008c68:	6338      	str	r0, [r7, #48]	@ 0x30
 8008c6a:	6860      	ldr	r0, [r4, #4]
 8008c6c:	3801      	subs	r0, #1
 8008c6e:	3901      	subs	r1, #1
 8008c70:	2800      	cmp	r0, #0
 8008c72:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008c74:	6060      	str	r0, [r4, #4]
 8008c76:	f340 80cc 	ble.w	8008e12 <__ssvfscanf_r+0x112e>
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	3101      	adds	r1, #1
 8008c7e:	6021      	str	r1, [r4, #0]
 8008c80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c82:	2900      	cmp	r1, #0
 8008c84:	d188      	bne.n	8008b98 <__ssvfscanf_r+0xeb4>
 8008c86:	e052      	b.n	8008d2e <__ssvfscanf_r+0x104a>
 8008c88:	0531      	lsls	r1, r6, #20
 8008c8a:	d550      	bpl.n	8008d2e <__ssvfscanf_r+0x104a>
 8008c8c:	eb1b 0c08 	adds.w	ip, fp, r8
 8008c90:	d041      	beq.n	8008d16 <__ssvfscanf_r+0x1032>
 8008c92:	e04c      	b.n	8008d2e <__ssvfscanf_r+0x104a>
 8008c94:	f406 6c18 	and.w	ip, r6, #2432	@ 0x980
 8008c98:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8008c9c:	d147      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008c9e:	f1ba 0f01 	cmp.w	sl, #1
 8008ca2:	d144      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008ca4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ca6:	f04f 0c30 	mov.w	ip, #48	@ 0x30
 8008caa:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8008cae:	3901      	subs	r1, #1
 8008cb0:	f809 cb01 	strb.w	ip, [r9], #1
 8008cb4:	f446 6600 	orr.w	r6, r6, #2048	@ 0x800
 8008cb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8008cba:	f04f 0a00 	mov.w	sl, #0
 8008cbe:	e003      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008cc0:	0631      	lsls	r1, r6, #24
 8008cc2:	d534      	bpl.n	8008d2e <__ssvfscanf_r+0x104a>
 8008cc4:	f026 0680 	bic.w	r6, r6, #128	@ 0x80
 8008cc8:	f809 0b01 	strb.w	r0, [r9], #1
 8008ccc:	e7c9      	b.n	8008c62 <__ssvfscanf_r+0xf7e>
 8008cce:	f1bb 0f00 	cmp.w	fp, #0
 8008cd2:	d10c      	bne.n	8008cee <__ssvfscanf_r+0x100a>
 8008cd4:	f1ba 0f00 	cmp.w	sl, #0
 8008cd8:	d10d      	bne.n	8008cf6 <__ssvfscanf_r+0x1012>
 8008cda:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8008cde:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8008ce2:	d108      	bne.n	8008cf6 <__ssvfscanf_r+0x1012>
 8008ce4:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8008ce8:	f04f 0b01 	mov.w	fp, #1
 8008cec:	e7ec      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008cee:	f1bb 0f02 	cmp.w	fp, #2
 8008cf2:	f000 8088 	beq.w	8008e06 <__ssvfscanf_r+0x1122>
 8008cf6:	f1b8 0f01 	cmp.w	r8, #1
 8008cfa:	d002      	beq.n	8008d02 <__ssvfscanf_r+0x101e>
 8008cfc:	f1b8 0f04 	cmp.w	r8, #4
 8008d00:	d115      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008d02:	f108 0801 	add.w	r8, r8, #1
 8008d06:	fa5f f888 	uxtb.w	r8, r8
 8008d0a:	e7dd      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008d0c:	0531      	lsls	r1, r6, #20
 8008d0e:	d50b      	bpl.n	8008d28 <__ssvfscanf_r+0x1044>
 8008d10:	eb1b 0c08 	adds.w	ip, fp, r8
 8008d14:	d108      	bne.n	8008d28 <__ssvfscanf_r+0x1044>
 8008d16:	f426 76c0 	bic.w	r6, r6, #384	@ 0x180
 8008d1a:	46e0      	mov	r8, ip
 8008d1c:	46e3      	mov	fp, ip
 8008d1e:	e7d3      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008d20:	0800d8b2 	.word	0x0800d8b2
 8008d24:	0800ba91 	.word	0x0800ba91
 8008d28:	f1bb 0f01 	cmp.w	fp, #1
 8008d2c:	d06e      	beq.n	8008e0c <__ssvfscanf_r+0x1128>
 8008d2e:	f1ba 0f00 	cmp.w	sl, #0
 8008d32:	d001      	beq.n	8008d38 <__ssvfscanf_r+0x1054>
 8008d34:	f426 7680 	bic.w	r6, r6, #256	@ 0x100
 8008d38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d3c:	f1bb 0f01 	cmp.w	fp, #1
 8008d40:	d873      	bhi.n	8008e2a <__ssvfscanf_r+0x1146>
 8008d42:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008d46:	45a9      	cmp	r9, r5
 8008d48:	f67f a8c2 	bls.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8008d4c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008d50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d52:	4622      	mov	r2, r4
 8008d54:	f003 f879 	bl	800be4a <_sungetc_r>
 8008d58:	e7f5      	b.n	8008d46 <__ssvfscanf_r+0x1062>
 8008d5a:	f1b8 0f00 	cmp.w	r8, #0
 8008d5e:	d10d      	bne.n	8008d7c <__ssvfscanf_r+0x1098>
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	d1e6      	bne.n	8008d34 <__ssvfscanf_r+0x1050>
 8008d66:	f406 6ce0 	and.w	ip, r6, #1792	@ 0x700
 8008d6a:	f5bc 6fe0 	cmp.w	ip, #1792	@ 0x700
 8008d6e:	f040 8124 	bne.w	8008fba <__ssvfscanf_r+0x12d6>
 8008d72:	f426 66f0 	bic.w	r6, r6, #1920	@ 0x780
 8008d76:	f04f 0801 	mov.w	r8, #1
 8008d7a:	e7a5      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008d7c:	f1b8 0f03 	cmp.w	r8, #3
 8008d80:	d0bf      	beq.n	8008d02 <__ssvfscanf_r+0x101e>
 8008d82:	f1b8 0f05 	cmp.w	r8, #5
 8008d86:	e7bb      	b.n	8008d00 <__ssvfscanf_r+0x101c>
 8008d88:	0531      	lsls	r1, r6, #20
 8008d8a:	d502      	bpl.n	8008d92 <__ssvfscanf_r+0x10ae>
 8008d8c:	eb1b 0c08 	adds.w	ip, fp, r8
 8008d90:	d0c1      	beq.n	8008d16 <__ssvfscanf_r+0x1032>
 8008d92:	f1b8 0f02 	cmp.w	r8, #2
 8008d96:	d1ca      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008d98:	f04f 0803 	mov.w	r8, #3
 8008d9c:	e794      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008d9e:	f1b8 0f06 	cmp.w	r8, #6
 8008da2:	d1c4      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008da4:	f04f 0807 	mov.w	r8, #7
 8008da8:	e78e      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008daa:	f1b8 0f07 	cmp.w	r8, #7
 8008dae:	d1be      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008db0:	f04f 0808 	mov.w	r8, #8
 8008db4:	e788      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008db6:	0531      	lsls	r1, r6, #20
 8008db8:	d5b9      	bpl.n	8008d2e <__ssvfscanf_r+0x104a>
 8008dba:	f406 6ca0 	and.w	ip, r6, #1280	@ 0x500
 8008dbe:	f5bc 6f80 	cmp.w	ip, #1024	@ 0x400
 8008dc2:	d005      	beq.n	8008dd0 <__ssvfscanf_r+0x10ec>
 8008dc4:	0571      	lsls	r1, r6, #21
 8008dc6:	d5b2      	bpl.n	8008d2e <__ssvfscanf_r+0x104a>
 8008dc8:	f1ba 0f00 	cmp.w	sl, #0
 8008dcc:	f000 80f5 	beq.w	8008fba <__ssvfscanf_r+0x12d6>
 8008dd0:	05b1      	lsls	r1, r6, #22
 8008dd2:	bf58      	it	pl
 8008dd4:	6939      	ldrpl	r1, [r7, #16]
 8008dd6:	f426 6678 	bic.w	r6, r6, #3968	@ 0xf80
 8008dda:	bf5c      	itt	pl
 8008ddc:	ebaa 0101 	subpl.w	r1, sl, r1
 8008de0:	e9c7 9102 	strdpl	r9, r1, [r7, #8]
 8008de4:	f446 76c0 	orr.w	r6, r6, #384	@ 0x180
 8008de8:	e767      	b.n	8008cba <__ssvfscanf_r+0xfd6>
 8008dea:	0531      	lsls	r1, r6, #20
 8008dec:	d5e5      	bpl.n	8008dba <__ssvfscanf_r+0x10d6>
 8008dee:	e74d      	b.n	8008c8c <__ssvfscanf_r+0xfa8>
 8008df0:	f892 c000 	ldrb.w	ip, [r2]
 8008df4:	4584      	cmp	ip, r0
 8008df6:	d19a      	bne.n	8008d2e <__ssvfscanf_r+0x104a>
 8008df8:	05b1      	lsls	r1, r6, #22
 8008dfa:	d598      	bpl.n	8008d2e <__ssvfscanf_r+0x104a>
 8008dfc:	f426 7620 	bic.w	r6, r6, #640	@ 0x280
 8008e00:	f8c7 a010 	str.w	sl, [r7, #16]
 8008e04:	e760      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008e06:	f04f 0b03 	mov.w	fp, #3
 8008e0a:	e75d      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008e0c:	f04f 0b02 	mov.w	fp, #2
 8008e10:	e75a      	b.n	8008cc8 <__ssvfscanf_r+0xfe4>
 8008e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e14:	4621      	mov	r1, r4
 8008e16:	e9c7 2300 	strd	r2, r3, [r7]
 8008e1a:	f003 f851 	bl	800bec0 <__ssrefill_r>
 8008e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f43f af2c 	beq.w	8008c80 <__ssvfscanf_r+0xf9c>
 8008e28:	e781      	b.n	8008d2e <__ssvfscanf_r+0x104a>
 8008e2a:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e2e:	2b06      	cmp	r3, #6
 8008e30:	d827      	bhi.n	8008e82 <__ssvfscanf_r+0x119e>
 8008e32:	f1b8 0f02 	cmp.w	r8, #2
 8008e36:	d834      	bhi.n	8008ea2 <__ssvfscanf_r+0x11be>
 8008e38:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008e3c:	45a9      	cmp	r9, r5
 8008e3e:	f67f a847 	bls.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8008e42:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008e46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e48:	4622      	mov	r2, r4
 8008e4a:	f002 fffe 	bl	800be4a <_sungetc_r>
 8008e4e:	e7f5      	b.n	8008e3c <__ssvfscanf_r+0x1158>
 8008e50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8008e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e58:	4622      	mov	r2, r4
 8008e5a:	f002 fff6 	bl	800be4a <_sungetc_r>
 8008e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e64:	fa5f fb8b 	uxtb.w	fp, fp
 8008e68:	f1bb 0f02 	cmp.w	fp, #2
 8008e6c:	d1f0      	bne.n	8008e50 <__ssvfscanf_r+0x116c>
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	f1a8 0803 	sub.w	r8, r8, #3
 8008e74:	fa5f f888 	uxtb.w	r8, r8
 8008e78:	eba3 0308 	sub.w	r3, r3, r8
 8008e7c:	eba9 0908 	sub.w	r9, r9, r8
 8008e80:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e82:	05f3      	lsls	r3, r6, #23
 8008e84:	d52d      	bpl.n	8008ee2 <__ssvfscanf_r+0x11fe>
 8008e86:	0570      	lsls	r0, r6, #21
 8008e88:	d50e      	bpl.n	8008ea8 <__ssvfscanf_r+0x11c4>
 8008e8a:	f507 75a8 	add.w	r5, r7, #336	@ 0x150
 8008e8e:	45a9      	cmp	r9, r5
 8008e90:	f67f a81e 	bls.w	8007ed0 <__ssvfscanf_r+0x1ec>
 8008e94:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8008e98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	f002 ffd5 	bl	800be4a <_sungetc_r>
 8008ea0:	e7f5      	b.n	8008e8e <__ssvfscanf_r+0x11aa>
 8008ea2:	46c3      	mov	fp, r8
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	e7db      	b.n	8008e60 <__ssvfscanf_r+0x117c>
 8008ea8:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	2965      	cmp	r1, #101	@ 0x65
 8008eb0:	f109 38ff 	add.w	r8, r9, #4294967295
 8008eb4:	f103 3bff 	add.w	fp, r3, #4294967295
 8008eb8:	d00c      	beq.n	8008ed4 <__ssvfscanf_r+0x11f0>
 8008eba:	2945      	cmp	r1, #69	@ 0x45
 8008ebc:	d00a      	beq.n	8008ed4 <__ssvfscanf_r+0x11f0>
 8008ebe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ec0:	4622      	mov	r2, r4
 8008ec2:	f002 ffc2 	bl	800be4a <_sungetc_r>
 8008ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec8:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 8008ecc:	f1a9 0802 	sub.w	r8, r9, #2
 8008ed0:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ed6:	4622      	mov	r2, r4
 8008ed8:	f002 ffb7 	bl	800be4a <_sungetc_r>
 8008edc:	46c1      	mov	r9, r8
 8008ede:	f8c7 b030 	str.w	fp, [r7, #48]	@ 0x30
 8008ee2:	f016 0210 	ands.w	r2, r6, #16
 8008ee6:	f47e af18 	bne.w	8007d1a <__ssvfscanf_r+0x36>
 8008eea:	f406 63c0 	and.w	r3, r6, #1536	@ 0x600
 8008eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ef2:	f889 2000 	strb.w	r2, [r9]
 8008ef6:	d119      	bne.n	8008f2c <__ssvfscanf_r+0x1248>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	4553      	cmp	r3, sl
 8008efc:	eba3 020a 	sub.w	r2, r3, sl
 8008f00:	d121      	bne.n	8008f46 <__ssvfscanf_r+0x1262>
 8008f02:	f507 71a8 	add.w	r1, r7, #336	@ 0x150
 8008f06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f002 fcd1 	bl	800b8b0 <_strtod_r>
 8008f0e:	07f1      	lsls	r1, r6, #31
 8008f10:	ec59 8b10 	vmov	r8, r9, d0
 8008f14:	f105 0a04 	add.w	sl, r5, #4
 8008f18:	d520      	bpl.n	8008f5c <__ssvfscanf_r+0x1278>
 8008f1a:	682b      	ldr	r3, [r5, #0]
 8008f1c:	ed83 0b00 	vstr	d0, [r3]
 8008f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f22:	3301      	adds	r3, #1
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f26:	4655      	mov	r5, sl
 8008f28:	f7fe bef7 	b.w	8007d1a <__ssvfscanf_r+0x36>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0e7      	beq.n	8008f02 <__ssvfscanf_r+0x121e>
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f36:	230a      	movs	r3, #10
 8008f38:	3101      	adds	r1, #1
 8008f3a:	f002 fd39 	bl	800b9b0 <_strtol_r>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8008f44:	1ac2      	subs	r2, r0, r3
 8008f46:	f207 23a3 	addw	r3, r7, #675	@ 0x2a3
 8008f4a:	4599      	cmp	r9, r3
 8008f4c:	bf28      	it	cs
 8008f4e:	f207 29a2 	addwcs	r9, r7, #674	@ 0x2a2
 8008f52:	491b      	ldr	r1, [pc, #108]	@ (8008fc0 <__ssvfscanf_r+0x12dc>)
 8008f54:	4648      	mov	r0, r9
 8008f56:	f7fd f861 	bl	800601c <sprintf>
 8008f5a:	e7d2      	b.n	8008f02 <__ssvfscanf_r+0x121e>
 8008f5c:	07b2      	lsls	r2, r6, #30
 8008f5e:	682d      	ldr	r5, [r5, #0]
 8008f60:	d502      	bpl.n	8008f68 <__ssvfscanf_r+0x1284>
 8008f62:	ed85 0b00 	vstr	d0, [r5]
 8008f66:	e7db      	b.n	8008f20 <__ssvfscanf_r+0x123c>
 8008f68:	4642      	mov	r2, r8
 8008f6a:	464b      	mov	r3, r9
 8008f6c:	4640      	mov	r0, r8
 8008f6e:	4649      	mov	r1, r9
 8008f70:	f7f7 fde4 	bl	8000b3c <__aeabi_dcmpun>
 8008f74:	b128      	cbz	r0, 8008f82 <__ssvfscanf_r+0x129e>
 8008f76:	4813      	ldr	r0, [pc, #76]	@ (8008fc4 <__ssvfscanf_r+0x12e0>)
 8008f78:	f000 f9b0 	bl	80092dc <nanf>
 8008f7c:	ed85 0a00 	vstr	s0, [r5]
 8008f80:	e7ce      	b.n	8008f20 <__ssvfscanf_r+0x123c>
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fe37 	bl	8000bf8 <__aeabi_d2f>
 8008f8a:	6028      	str	r0, [r5, #0]
 8008f8c:	e7c8      	b.n	8008f20 <__ssvfscanf_r+0x123c>
 8008f8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	f001 f85c 	bl	800a050 <free>
 8008f98:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008f9c:	3401      	adds	r4, #1
 8008f9e:	601e      	str	r6, [r3, #0]
 8008fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fa2:	681d      	ldr	r5, [r3, #0]
 8008fa4:	88db      	ldrh	r3, [r3, #6]
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	dcf1      	bgt.n	8008f8e <__ssvfscanf_r+0x12aa>
 8008faa:	f04f 33ff 	mov.w	r3, #4294967295
 8008fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008fb0:	f7ff b85c 	b.w	800806c <__ssvfscanf_r+0x388>
 8008fb4:	2400      	movs	r4, #0
 8008fb6:	4626      	mov	r6, r4
 8008fb8:	e7f2      	b.n	8008fa0 <__ssvfscanf_r+0x12bc>
 8008fba:	f04f 0a00 	mov.w	sl, #0
 8008fbe:	e6bb      	b.n	8008d38 <__ssvfscanf_r+0x1054>
 8008fc0:	0800d8ac 	.word	0x0800d8ac
 8008fc4:	0800dc3c 	.word	0x0800dc3c

08008fc8 <_fclose_r>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	4605      	mov	r5, r0
 8008fcc:	460c      	mov	r4, r1
 8008fce:	b1b1      	cbz	r1, 8008ffe <_fclose_r+0x36>
 8008fd0:	b118      	cbz	r0, 8008fda <_fclose_r+0x12>
 8008fd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008fd4:	b90b      	cbnz	r3, 8008fda <_fclose_r+0x12>
 8008fd6:	f7fc ffeb 	bl	8005fb0 <__sinit>
 8008fda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fdc:	07de      	lsls	r6, r3, #31
 8008fde:	d405      	bmi.n	8008fec <_fclose_r+0x24>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	0598      	lsls	r0, r3, #22
 8008fe4:	d402      	bmi.n	8008fec <_fclose_r+0x24>
 8008fe6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fe8:	f7fd f922 	bl	8006230 <__retarget_lock_acquire_recursive>
 8008fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ff0:	b943      	cbnz	r3, 8009004 <_fclose_r+0x3c>
 8008ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ff4:	07d9      	lsls	r1, r3, #31
 8008ff6:	d402      	bmi.n	8008ffe <_fclose_r+0x36>
 8008ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ffa:	f7fd f91a 	bl	8006232 <__retarget_lock_release_recursive>
 8008ffe:	2600      	movs	r6, #0
 8009000:	4630      	mov	r0, r6
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	4621      	mov	r1, r4
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f834 	bl	8009074 <__sflush_r>
 800900c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800900e:	4606      	mov	r6, r0
 8009010:	b133      	cbz	r3, 8009020 <_fclose_r+0x58>
 8009012:	69e1      	ldr	r1, [r4, #28]
 8009014:	4628      	mov	r0, r5
 8009016:	4798      	blx	r3
 8009018:	2800      	cmp	r0, #0
 800901a:	bfb8      	it	lt
 800901c:	f04f 36ff 	movlt.w	r6, #4294967295
 8009020:	89a3      	ldrh	r3, [r4, #12]
 8009022:	061a      	lsls	r2, r3, #24
 8009024:	d503      	bpl.n	800902e <_fclose_r+0x66>
 8009026:	6921      	ldr	r1, [r4, #16]
 8009028:	4628      	mov	r0, r5
 800902a:	f7fd f977 	bl	800631c <_free_r>
 800902e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009030:	b141      	cbz	r1, 8009044 <_fclose_r+0x7c>
 8009032:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009036:	4299      	cmp	r1, r3
 8009038:	d002      	beq.n	8009040 <_fclose_r+0x78>
 800903a:	4628      	mov	r0, r5
 800903c:	f7fd f96e 	bl	800631c <_free_r>
 8009040:	2300      	movs	r3, #0
 8009042:	6323      	str	r3, [r4, #48]	@ 0x30
 8009044:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009046:	b121      	cbz	r1, 8009052 <_fclose_r+0x8a>
 8009048:	4628      	mov	r0, r5
 800904a:	f7fd f967 	bl	800631c <_free_r>
 800904e:	2300      	movs	r3, #0
 8009050:	6463      	str	r3, [r4, #68]	@ 0x44
 8009052:	f7fc ffa1 	bl	8005f98 <__sfp_lock_acquire>
 8009056:	2300      	movs	r3, #0
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800905c:	07db      	lsls	r3, r3, #31
 800905e:	d402      	bmi.n	8009066 <_fclose_r+0x9e>
 8009060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009062:	f7fd f8e6 	bl	8006232 <__retarget_lock_release_recursive>
 8009066:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009068:	f7fd f8e1 	bl	800622e <__retarget_lock_close_recursive>
 800906c:	f7fc ff9a 	bl	8005fa4 <__sfp_lock_release>
 8009070:	e7c6      	b.n	8009000 <_fclose_r+0x38>
	...

08009074 <__sflush_r>:
 8009074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009078:	4605      	mov	r5, r0
 800907a:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800907e:	0706      	lsls	r6, r0, #28
 8009080:	460c      	mov	r4, r1
 8009082:	d457      	bmi.n	8009134 <__sflush_r+0xc0>
 8009084:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8009088:	818b      	strh	r3, [r1, #12]
 800908a:	684b      	ldr	r3, [r1, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	dc02      	bgt.n	8009096 <__sflush_r+0x22>
 8009090:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	dd4c      	ble.n	8009130 <__sflush_r+0xbc>
 8009096:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009098:	2e00      	cmp	r6, #0
 800909a:	d049      	beq.n	8009130 <__sflush_r+0xbc>
 800909c:	2300      	movs	r3, #0
 800909e:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 80090a2:	682f      	ldr	r7, [r5, #0]
 80090a4:	69e1      	ldr	r1, [r4, #28]
 80090a6:	602b      	str	r3, [r5, #0]
 80090a8:	d034      	beq.n	8009114 <__sflush_r+0xa0>
 80090aa:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	0759      	lsls	r1, r3, #29
 80090b0:	d505      	bpl.n	80090be <__sflush_r+0x4a>
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	1ad2      	subs	r2, r2, r3
 80090b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80090b8:	b10b      	cbz	r3, 80090be <__sflush_r+0x4a>
 80090ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80090bc:	1ad2      	subs	r2, r2, r3
 80090be:	2300      	movs	r3, #0
 80090c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80090c2:	69e1      	ldr	r1, [r4, #28]
 80090c4:	4628      	mov	r0, r5
 80090c6:	47b0      	blx	r6
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d106      	bne.n	80090da <__sflush_r+0x66>
 80090cc:	682a      	ldr	r2, [r5, #0]
 80090ce:	2a1d      	cmp	r2, #29
 80090d0:	d848      	bhi.n	8009164 <__sflush_r+0xf0>
 80090d2:	4b2b      	ldr	r3, [pc, #172]	@ (8009180 <__sflush_r+0x10c>)
 80090d4:	4113      	asrs	r3, r2
 80090d6:	07de      	lsls	r6, r3, #31
 80090d8:	d444      	bmi.n	8009164 <__sflush_r+0xf0>
 80090da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090de:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80090e2:	81a2      	strh	r2, [r4, #12]
 80090e4:	2200      	movs	r2, #0
 80090e6:	6062      	str	r2, [r4, #4]
 80090e8:	04d9      	lsls	r1, r3, #19
 80090ea:	6922      	ldr	r2, [r4, #16]
 80090ec:	6022      	str	r2, [r4, #0]
 80090ee:	d504      	bpl.n	80090fa <__sflush_r+0x86>
 80090f0:	1c42      	adds	r2, r0, #1
 80090f2:	d101      	bne.n	80090f8 <__sflush_r+0x84>
 80090f4:	682b      	ldr	r3, [r5, #0]
 80090f6:	b903      	cbnz	r3, 80090fa <__sflush_r+0x86>
 80090f8:	6520      	str	r0, [r4, #80]	@ 0x50
 80090fa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090fc:	602f      	str	r7, [r5, #0]
 80090fe:	b1b9      	cbz	r1, 8009130 <__sflush_r+0xbc>
 8009100:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009104:	4299      	cmp	r1, r3
 8009106:	d002      	beq.n	800910e <__sflush_r+0x9a>
 8009108:	4628      	mov	r0, r5
 800910a:	f7fd f907 	bl	800631c <_free_r>
 800910e:	2300      	movs	r3, #0
 8009110:	6323      	str	r3, [r4, #48]	@ 0x30
 8009112:	e00d      	b.n	8009130 <__sflush_r+0xbc>
 8009114:	2301      	movs	r3, #1
 8009116:	4628      	mov	r0, r5
 8009118:	47b0      	blx	r6
 800911a:	4602      	mov	r2, r0
 800911c:	1c50      	adds	r0, r2, #1
 800911e:	d1c5      	bne.n	80090ac <__sflush_r+0x38>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0c2      	beq.n	80090ac <__sflush_r+0x38>
 8009126:	2b1d      	cmp	r3, #29
 8009128:	d001      	beq.n	800912e <__sflush_r+0xba>
 800912a:	2b16      	cmp	r3, #22
 800912c:	d11a      	bne.n	8009164 <__sflush_r+0xf0>
 800912e:	602f      	str	r7, [r5, #0]
 8009130:	2000      	movs	r0, #0
 8009132:	e01e      	b.n	8009172 <__sflush_r+0xfe>
 8009134:	690f      	ldr	r7, [r1, #16]
 8009136:	2f00      	cmp	r7, #0
 8009138:	d0fa      	beq.n	8009130 <__sflush_r+0xbc>
 800913a:	0783      	lsls	r3, r0, #30
 800913c:	680e      	ldr	r6, [r1, #0]
 800913e:	bf08      	it	eq
 8009140:	694b      	ldreq	r3, [r1, #20]
 8009142:	600f      	str	r7, [r1, #0]
 8009144:	bf18      	it	ne
 8009146:	2300      	movne	r3, #0
 8009148:	eba6 0807 	sub.w	r8, r6, r7
 800914c:	608b      	str	r3, [r1, #8]
 800914e:	f1b8 0f00 	cmp.w	r8, #0
 8009152:	dded      	ble.n	8009130 <__sflush_r+0xbc>
 8009154:	69e1      	ldr	r1, [r4, #28]
 8009156:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8009158:	4643      	mov	r3, r8
 800915a:	463a      	mov	r2, r7
 800915c:	4628      	mov	r0, r5
 800915e:	47b0      	blx	r6
 8009160:	2800      	cmp	r0, #0
 8009162:	dc08      	bgt.n	8009176 <__sflush_r+0x102>
 8009164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800916c:	81a3      	strh	r3, [r4, #12]
 800916e:	f04f 30ff 	mov.w	r0, #4294967295
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009176:	4407      	add	r7, r0
 8009178:	eba8 0800 	sub.w	r8, r8, r0
 800917c:	e7e7      	b.n	800914e <__sflush_r+0xda>
 800917e:	bf00      	nop
 8009180:	dfbffffe 	.word	0xdfbffffe

08009184 <_fflush_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	460c      	mov	r4, r1
 8009188:	4605      	mov	r5, r0
 800918a:	b118      	cbz	r0, 8009194 <_fflush_r+0x10>
 800918c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800918e:	b90b      	cbnz	r3, 8009194 <_fflush_r+0x10>
 8009190:	f7fc ff0e 	bl	8005fb0 <__sinit>
 8009194:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8009198:	b1b8      	cbz	r0, 80091ca <_fflush_r+0x46>
 800919a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800919c:	07db      	lsls	r3, r3, #31
 800919e:	d404      	bmi.n	80091aa <_fflush_r+0x26>
 80091a0:	0581      	lsls	r1, r0, #22
 80091a2:	d402      	bmi.n	80091aa <_fflush_r+0x26>
 80091a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091a6:	f7fd f843 	bl	8006230 <__retarget_lock_acquire_recursive>
 80091aa:	4628      	mov	r0, r5
 80091ac:	4621      	mov	r1, r4
 80091ae:	f7ff ff61 	bl	8009074 <__sflush_r>
 80091b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091b4:	07da      	lsls	r2, r3, #31
 80091b6:	4605      	mov	r5, r0
 80091b8:	d405      	bmi.n	80091c6 <_fflush_r+0x42>
 80091ba:	89a3      	ldrh	r3, [r4, #12]
 80091bc:	059b      	lsls	r3, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_fflush_r+0x42>
 80091c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c2:	f7fd f836 	bl	8006232 <__retarget_lock_release_recursive>
 80091c6:	4628      	mov	r0, r5
 80091c8:	bd38      	pop	{r3, r4, r5, pc}
 80091ca:	4605      	mov	r5, r0
 80091cc:	e7fb      	b.n	80091c6 <_fflush_r+0x42>

080091ce <__sccl>:
 80091ce:	b570      	push	{r4, r5, r6, lr}
 80091d0:	780b      	ldrb	r3, [r1, #0]
 80091d2:	4604      	mov	r4, r0
 80091d4:	2b5e      	cmp	r3, #94	@ 0x5e
 80091d6:	bf0b      	itete	eq
 80091d8:	784b      	ldrbeq	r3, [r1, #1]
 80091da:	1c4a      	addne	r2, r1, #1
 80091dc:	1c8a      	addeq	r2, r1, #2
 80091de:	2100      	movne	r1, #0
 80091e0:	bf08      	it	eq
 80091e2:	2101      	moveq	r1, #1
 80091e4:	3801      	subs	r0, #1
 80091e6:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80091ea:	f800 1f01 	strb.w	r1, [r0, #1]!
 80091ee:	42a8      	cmp	r0, r5
 80091f0:	d1fb      	bne.n	80091ea <__sccl+0x1c>
 80091f2:	b90b      	cbnz	r3, 80091f8 <__sccl+0x2a>
 80091f4:	1e50      	subs	r0, r2, #1
 80091f6:	bd70      	pop	{r4, r5, r6, pc}
 80091f8:	f081 0101 	eor.w	r1, r1, #1
 80091fc:	54e1      	strb	r1, [r4, r3]
 80091fe:	4610      	mov	r0, r2
 8009200:	4602      	mov	r2, r0
 8009202:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009206:	2d2d      	cmp	r5, #45	@ 0x2d
 8009208:	d005      	beq.n	8009216 <__sccl+0x48>
 800920a:	2d5d      	cmp	r5, #93	@ 0x5d
 800920c:	d016      	beq.n	800923c <__sccl+0x6e>
 800920e:	2d00      	cmp	r5, #0
 8009210:	d0f1      	beq.n	80091f6 <__sccl+0x28>
 8009212:	462b      	mov	r3, r5
 8009214:	e7f2      	b.n	80091fc <__sccl+0x2e>
 8009216:	7846      	ldrb	r6, [r0, #1]
 8009218:	2e5d      	cmp	r6, #93	@ 0x5d
 800921a:	d0fa      	beq.n	8009212 <__sccl+0x44>
 800921c:	42b3      	cmp	r3, r6
 800921e:	dcf8      	bgt.n	8009212 <__sccl+0x44>
 8009220:	3002      	adds	r0, #2
 8009222:	461a      	mov	r2, r3
 8009224:	3201      	adds	r2, #1
 8009226:	4296      	cmp	r6, r2
 8009228:	54a1      	strb	r1, [r4, r2]
 800922a:	dcfb      	bgt.n	8009224 <__sccl+0x56>
 800922c:	1af2      	subs	r2, r6, r3
 800922e:	3a01      	subs	r2, #1
 8009230:	1c5d      	adds	r5, r3, #1
 8009232:	42b3      	cmp	r3, r6
 8009234:	bfa8      	it	ge
 8009236:	2200      	movge	r2, #0
 8009238:	18ab      	adds	r3, r5, r2
 800923a:	e7e1      	b.n	8009200 <__sccl+0x32>
 800923c:	4610      	mov	r0, r2
 800923e:	e7da      	b.n	80091f6 <__sccl+0x28>

08009240 <strncpy>:
 8009240:	b510      	push	{r4, lr}
 8009242:	3901      	subs	r1, #1
 8009244:	4603      	mov	r3, r0
 8009246:	b132      	cbz	r2, 8009256 <strncpy+0x16>
 8009248:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800924c:	f803 4b01 	strb.w	r4, [r3], #1
 8009250:	3a01      	subs	r2, #1
 8009252:	2c00      	cmp	r4, #0
 8009254:	d1f7      	bne.n	8009246 <strncpy+0x6>
 8009256:	441a      	add	r2, r3
 8009258:	2100      	movs	r1, #0
 800925a:	4293      	cmp	r3, r2
 800925c:	d100      	bne.n	8009260 <strncpy+0x20>
 800925e:	bd10      	pop	{r4, pc}
 8009260:	f803 1b01 	strb.w	r1, [r3], #1
 8009264:	e7f9      	b.n	800925a <strncpy+0x1a>
	...

08009268 <__locale_mb_cur_max>:
 8009268:	4b01      	ldr	r3, [pc, #4]	@ (8009270 <__locale_mb_cur_max+0x8>)
 800926a:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800926e:	4770      	bx	lr
 8009270:	20000554 	.word	0x20000554

08009274 <_localeconv_r>:
 8009274:	4800      	ldr	r0, [pc, #0]	@ (8009278 <_localeconv_r+0x4>)
 8009276:	4770      	bx	lr
 8009278:	20000644 	.word	0x20000644

0800927c <_sbrk_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d06      	ldr	r5, [pc, #24]	@ (8009298 <_sbrk_r+0x1c>)
 8009280:	2300      	movs	r3, #0
 8009282:	4604      	mov	r4, r0
 8009284:	4608      	mov	r0, r1
 8009286:	602b      	str	r3, [r5, #0]
 8009288:	f7f9 f8b0 	bl	80023ec <_sbrk>
 800928c:	1c43      	adds	r3, r0, #1
 800928e:	d102      	bne.n	8009296 <_sbrk_r+0x1a>
 8009290:	682b      	ldr	r3, [r5, #0]
 8009292:	b103      	cbz	r3, 8009296 <_sbrk_r+0x1a>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	bd38      	pop	{r3, r4, r5, pc}
 8009298:	20000ac4 	.word	0x20000ac4

0800929c <__libc_fini_array>:
 800929c:	b538      	push	{r3, r4, r5, lr}
 800929e:	4d07      	ldr	r5, [pc, #28]	@ (80092bc <__libc_fini_array+0x20>)
 80092a0:	4c07      	ldr	r4, [pc, #28]	@ (80092c0 <__libc_fini_array+0x24>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	b91c      	cbnz	r4, 80092b0 <__libc_fini_array+0x14>
 80092a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ac:	f004 baa8 	b.w	800d800 <_fini>
 80092b0:	3c01      	subs	r4, #1
 80092b2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80092b6:	4798      	blx	r3
 80092b8:	e7f5      	b.n	80092a6 <__libc_fini_array+0xa>
 80092ba:	bf00      	nop
 80092bc:	0800dcd0 	.word	0x0800dcd0
 80092c0:	0800dcd4 	.word	0x0800dcd4

080092c4 <sysconf>:
 80092c4:	2808      	cmp	r0, #8
 80092c6:	b508      	push	{r3, lr}
 80092c8:	d006      	beq.n	80092d8 <sysconf+0x14>
 80092ca:	f7fc ff85 	bl	80061d8 <__errno>
 80092ce:	2316      	movs	r3, #22
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	bd08      	pop	{r3, pc}
 80092d8:	2080      	movs	r0, #128	@ 0x80
 80092da:	e7fc      	b.n	80092d6 <sysconf+0x12>

080092dc <nanf>:
 80092dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092e4 <nanf+0x8>
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	7fc00000 	.word	0x7fc00000

080092e8 <frexp>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	2100      	movs	r1, #0
 80092ec:	ec55 4b10 	vmov	r4, r5, d0
 80092f0:	6001      	str	r1, [r0, #0]
 80092f2:	4915      	ldr	r1, [pc, #84]	@ (8009348 <frexp+0x60>)
 80092f4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80092f8:	428a      	cmp	r2, r1
 80092fa:	4606      	mov	r6, r0
 80092fc:	462b      	mov	r3, r5
 80092fe:	d820      	bhi.n	8009342 <frexp+0x5a>
 8009300:	4621      	mov	r1, r4
 8009302:	4311      	orrs	r1, r2
 8009304:	d01d      	beq.n	8009342 <frexp+0x5a>
 8009306:	4911      	ldr	r1, [pc, #68]	@ (800934c <frexp+0x64>)
 8009308:	4029      	ands	r1, r5
 800930a:	b961      	cbnz	r1, 8009326 <frexp+0x3e>
 800930c:	4b10      	ldr	r3, [pc, #64]	@ (8009350 <frexp+0x68>)
 800930e:	2200      	movs	r2, #0
 8009310:	4620      	mov	r0, r4
 8009312:	4629      	mov	r1, r5
 8009314:	f7f7 f978 	bl	8000608 <__aeabi_dmul>
 8009318:	460b      	mov	r3, r1
 800931a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800931e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8009322:	4604      	mov	r4, r0
 8009324:	6031      	str	r1, [r6, #0]
 8009326:	6831      	ldr	r1, [r6, #0]
 8009328:	1512      	asrs	r2, r2, #20
 800932a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800932e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8009332:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009336:	4411      	add	r1, r2
 8009338:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800933c:	6031      	str	r1, [r6, #0]
 800933e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8009342:	ec45 4b10 	vmov	d0, r4, r5
 8009346:	bd70      	pop	{r4, r5, r6, pc}
 8009348:	7fefffff 	.word	0x7fefffff
 800934c:	7ff00000 	.word	0x7ff00000
 8009350:	43500000 	.word	0x43500000

08009354 <__register_exitproc>:
 8009354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	f8df a074 	ldr.w	sl, [pc, #116]	@ 80093d0 <__register_exitproc+0x7c>
 800935c:	4606      	mov	r6, r0
 800935e:	f8da 0000 	ldr.w	r0, [sl]
 8009362:	4698      	mov	r8, r3
 8009364:	460f      	mov	r7, r1
 8009366:	4691      	mov	r9, r2
 8009368:	f7fc ff62 	bl	8006230 <__retarget_lock_acquire_recursive>
 800936c:	4b16      	ldr	r3, [pc, #88]	@ (80093c8 <__register_exitproc+0x74>)
 800936e:	681c      	ldr	r4, [r3, #0]
 8009370:	b90c      	cbnz	r4, 8009376 <__register_exitproc+0x22>
 8009372:	4c16      	ldr	r4, [pc, #88]	@ (80093cc <__register_exitproc+0x78>)
 8009374:	601c      	str	r4, [r3, #0]
 8009376:	6865      	ldr	r5, [r4, #4]
 8009378:	f8da 0000 	ldr.w	r0, [sl]
 800937c:	2d1f      	cmp	r5, #31
 800937e:	dd05      	ble.n	800938c <__register_exitproc+0x38>
 8009380:	f7fc ff57 	bl	8006232 <__retarget_lock_release_recursive>
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800938c:	b19e      	cbz	r6, 80093b6 <__register_exitproc+0x62>
 800938e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8009392:	2201      	movs	r2, #1
 8009394:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8009398:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800939c:	40aa      	lsls	r2, r5
 800939e:	4313      	orrs	r3, r2
 80093a0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 80093a4:	2e02      	cmp	r6, #2
 80093a6:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 80093aa:	bf02      	ittt	eq
 80093ac:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 80093b0:	4313      	orreq	r3, r2
 80093b2:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 80093b6:	1c6b      	adds	r3, r5, #1
 80093b8:	3502      	adds	r5, #2
 80093ba:	6063      	str	r3, [r4, #4]
 80093bc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 80093c0:	f7fc ff37 	bl	8006232 <__retarget_lock_release_recursive>
 80093c4:	2000      	movs	r0, #0
 80093c6:	e7df      	b.n	8009388 <__register_exitproc+0x34>
 80093c8:	20000acc 	.word	0x20000acc
 80093cc:	20000b04 	.word	0x20000b04
 80093d0:	20000140 	.word	0x20000140

080093d4 <quorem>:
 80093d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	6903      	ldr	r3, [r0, #16]
 80093da:	690c      	ldr	r4, [r1, #16]
 80093dc:	42a3      	cmp	r3, r4
 80093de:	4607      	mov	r7, r0
 80093e0:	db7e      	blt.n	80094e0 <quorem+0x10c>
 80093e2:	3c01      	subs	r4, #1
 80093e4:	f101 0814 	add.w	r8, r1, #20
 80093e8:	00a3      	lsls	r3, r4, #2
 80093ea:	f100 0514 	add.w	r5, r0, #20
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80093fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093fe:	3301      	adds	r3, #1
 8009400:	429a      	cmp	r2, r3
 8009402:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009406:	fbb2 f6f3 	udiv	r6, r2, r3
 800940a:	d32e      	bcc.n	800946a <quorem+0x96>
 800940c:	f04f 0a00 	mov.w	sl, #0
 8009410:	46c4      	mov	ip, r8
 8009412:	46ae      	mov	lr, r5
 8009414:	46d3      	mov	fp, sl
 8009416:	f85c 3b04 	ldr.w	r3, [ip], #4
 800941a:	b298      	uxth	r0, r3
 800941c:	fb06 a000 	mla	r0, r6, r0, sl
 8009420:	0c02      	lsrs	r2, r0, #16
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	fb06 2303 	mla	r3, r6, r3, r2
 8009428:	f8de 2000 	ldr.w	r2, [lr]
 800942c:	b280      	uxth	r0, r0
 800942e:	b292      	uxth	r2, r2
 8009430:	1a12      	subs	r2, r2, r0
 8009432:	445a      	add	r2, fp
 8009434:	f8de 0000 	ldr.w	r0, [lr]
 8009438:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800943c:	b29b      	uxth	r3, r3
 800943e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009442:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009446:	b292      	uxth	r2, r2
 8009448:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800944c:	45e1      	cmp	r9, ip
 800944e:	f84e 2b04 	str.w	r2, [lr], #4
 8009452:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009456:	d2de      	bcs.n	8009416 <quorem+0x42>
 8009458:	9b00      	ldr	r3, [sp, #0]
 800945a:	58eb      	ldr	r3, [r5, r3]
 800945c:	b92b      	cbnz	r3, 800946a <quorem+0x96>
 800945e:	9b01      	ldr	r3, [sp, #4]
 8009460:	3b04      	subs	r3, #4
 8009462:	429d      	cmp	r5, r3
 8009464:	461a      	mov	r2, r3
 8009466:	d32f      	bcc.n	80094c8 <quorem+0xf4>
 8009468:	613c      	str	r4, [r7, #16]
 800946a:	4638      	mov	r0, r7
 800946c:	f001 f880 	bl	800a570 <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	db25      	blt.n	80094c0 <quorem+0xec>
 8009474:	4629      	mov	r1, r5
 8009476:	2000      	movs	r0, #0
 8009478:	f858 2b04 	ldr.w	r2, [r8], #4
 800947c:	f8d1 c000 	ldr.w	ip, [r1]
 8009480:	fa1f fe82 	uxth.w	lr, r2
 8009484:	fa1f f38c 	uxth.w	r3, ip
 8009488:	eba3 030e 	sub.w	r3, r3, lr
 800948c:	4403      	add	r3, r0
 800948e:	0c12      	lsrs	r2, r2, #16
 8009490:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009494:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800949e:	45c1      	cmp	r9, r8
 80094a0:	f841 3b04 	str.w	r3, [r1], #4
 80094a4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094a8:	d2e6      	bcs.n	8009478 <quorem+0xa4>
 80094aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b2:	b922      	cbnz	r2, 80094be <quorem+0xea>
 80094b4:	3b04      	subs	r3, #4
 80094b6:	429d      	cmp	r5, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	d30b      	bcc.n	80094d4 <quorem+0x100>
 80094bc:	613c      	str	r4, [r7, #16]
 80094be:	3601      	adds	r6, #1
 80094c0:	4630      	mov	r0, r6
 80094c2:	b003      	add	sp, #12
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	6812      	ldr	r2, [r2, #0]
 80094ca:	3b04      	subs	r3, #4
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	d1cb      	bne.n	8009468 <quorem+0x94>
 80094d0:	3c01      	subs	r4, #1
 80094d2:	e7c6      	b.n	8009462 <quorem+0x8e>
 80094d4:	6812      	ldr	r2, [r2, #0]
 80094d6:	3b04      	subs	r3, #4
 80094d8:	2a00      	cmp	r2, #0
 80094da:	d1ef      	bne.n	80094bc <quorem+0xe8>
 80094dc:	3c01      	subs	r4, #1
 80094de:	e7ea      	b.n	80094b6 <quorem+0xe2>
 80094e0:	2000      	movs	r0, #0
 80094e2:	e7ee      	b.n	80094c2 <quorem+0xee>
 80094e4:	0000      	movs	r0, r0
	...

080094e8 <_dtoa_r>:
 80094e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ec:	b099      	sub	sp, #100	@ 0x64
 80094ee:	ed8d 0b02 	vstr	d0, [sp, #8]
 80094f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80094f4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80094f6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80094f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80094fa:	ec55 4b10 	vmov	r4, r5, d0
 80094fe:	4683      	mov	fp, r0
 8009500:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009502:	b149      	cbz	r1, 8009518 <_dtoa_r+0x30>
 8009504:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009506:	604a      	str	r2, [r1, #4]
 8009508:	2301      	movs	r3, #1
 800950a:	4093      	lsls	r3, r2
 800950c:	608b      	str	r3, [r1, #8]
 800950e:	f000 fdde 	bl	800a0ce <_Bfree>
 8009512:	2300      	movs	r3, #0
 8009514:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 8009518:	1e2b      	subs	r3, r5, #0
 800951a:	bfb9      	ittee	lt
 800951c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009520:	9303      	strlt	r3, [sp, #12]
 8009522:	2300      	movge	r3, #0
 8009524:	6033      	strge	r3, [r6, #0]
 8009526:	9f03      	ldr	r7, [sp, #12]
 8009528:	4b97      	ldr	r3, [pc, #604]	@ (8009788 <_dtoa_r+0x2a0>)
 800952a:	bfbc      	itt	lt
 800952c:	2201      	movlt	r2, #1
 800952e:	6032      	strlt	r2, [r6, #0]
 8009530:	43bb      	bics	r3, r7
 8009532:	d114      	bne.n	800955e <_dtoa_r+0x76>
 8009534:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009536:	f242 730f 	movw	r3, #9999	@ 0x270f
 800953a:	6013      	str	r3, [r2, #0]
 800953c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009540:	4323      	orrs	r3, r4
 8009542:	f000 854c 	beq.w	8009fde <_dtoa_r+0xaf6>
 8009546:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009548:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80097a0 <_dtoa_r+0x2b8>
 800954c:	b11b      	cbz	r3, 8009556 <_dtoa_r+0x6e>
 800954e:	f10a 0303 	add.w	r3, sl, #3
 8009552:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4650      	mov	r0, sl
 8009558:	b019      	add	sp, #100	@ 0x64
 800955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009562:	2200      	movs	r2, #0
 8009564:	ec51 0b17 	vmov	r0, r1, d7
 8009568:	2300      	movs	r3, #0
 800956a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800956e:	f7f7 fab3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009572:	4680      	mov	r8, r0
 8009574:	b150      	cbz	r0, 800958c <_dtoa_r+0xa4>
 8009576:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009578:	2301      	movs	r3, #1
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800957e:	b113      	cbz	r3, 8009586 <_dtoa_r+0x9e>
 8009580:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009582:	4b82      	ldr	r3, [pc, #520]	@ (800978c <_dtoa_r+0x2a4>)
 8009584:	6013      	str	r3, [r2, #0]
 8009586:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 80097a4 <_dtoa_r+0x2bc>
 800958a:	e7e4      	b.n	8009556 <_dtoa_r+0x6e>
 800958c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009590:	aa16      	add	r2, sp, #88	@ 0x58
 8009592:	a917      	add	r1, sp, #92	@ 0x5c
 8009594:	4658      	mov	r0, fp
 8009596:	f001 f90b 	bl	800a7b0 <__d2b>
 800959a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800959e:	4681      	mov	r9, r0
 80095a0:	2e00      	cmp	r6, #0
 80095a2:	d077      	beq.n	8009694 <_dtoa_r+0x1ac>
 80095a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095a6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80095aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095b2:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80095b6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80095ba:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80095be:	4619      	mov	r1, r3
 80095c0:	2200      	movs	r2, #0
 80095c2:	4b73      	ldr	r3, [pc, #460]	@ (8009790 <_dtoa_r+0x2a8>)
 80095c4:	f7f6 fe68 	bl	8000298 <__aeabi_dsub>
 80095c8:	a369      	add	r3, pc, #420	@ (adr r3, 8009770 <_dtoa_r+0x288>)
 80095ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ce:	f7f7 f81b 	bl	8000608 <__aeabi_dmul>
 80095d2:	a369      	add	r3, pc, #420	@ (adr r3, 8009778 <_dtoa_r+0x290>)
 80095d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d8:	f7f6 fe60 	bl	800029c <__adddf3>
 80095dc:	4604      	mov	r4, r0
 80095de:	4630      	mov	r0, r6
 80095e0:	460d      	mov	r5, r1
 80095e2:	f7f6 ffa7 	bl	8000534 <__aeabi_i2d>
 80095e6:	a366      	add	r3, pc, #408	@ (adr r3, 8009780 <_dtoa_r+0x298>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f7 f80c 	bl	8000608 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 fe50 	bl	800029c <__adddf3>
 80095fc:	4604      	mov	r4, r0
 80095fe:	460d      	mov	r5, r1
 8009600:	f7f7 fab2 	bl	8000b68 <__aeabi_d2iz>
 8009604:	2200      	movs	r2, #0
 8009606:	4607      	mov	r7, r0
 8009608:	2300      	movs	r3, #0
 800960a:	4620      	mov	r0, r4
 800960c:	4629      	mov	r1, r5
 800960e:	f7f7 fa6d 	bl	8000aec <__aeabi_dcmplt>
 8009612:	b140      	cbz	r0, 8009626 <_dtoa_r+0x13e>
 8009614:	4638      	mov	r0, r7
 8009616:	f7f6 ff8d 	bl	8000534 <__aeabi_i2d>
 800961a:	4622      	mov	r2, r4
 800961c:	462b      	mov	r3, r5
 800961e:	f7f7 fa5b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009622:	b900      	cbnz	r0, 8009626 <_dtoa_r+0x13e>
 8009624:	3f01      	subs	r7, #1
 8009626:	2f16      	cmp	r7, #22
 8009628:	d851      	bhi.n	80096ce <_dtoa_r+0x1e6>
 800962a:	4b5a      	ldr	r3, [pc, #360]	@ (8009794 <_dtoa_r+0x2ac>)
 800962c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009638:	f7f7 fa58 	bl	8000aec <__aeabi_dcmplt>
 800963c:	2800      	cmp	r0, #0
 800963e:	d048      	beq.n	80096d2 <_dtoa_r+0x1ea>
 8009640:	3f01      	subs	r7, #1
 8009642:	2300      	movs	r3, #0
 8009644:	9312      	str	r3, [sp, #72]	@ 0x48
 8009646:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009648:	1b9b      	subs	r3, r3, r6
 800964a:	1e5a      	subs	r2, r3, #1
 800964c:	bf44      	itt	mi
 800964e:	f1c3 0801 	rsbmi	r8, r3, #1
 8009652:	2300      	movmi	r3, #0
 8009654:	9208      	str	r2, [sp, #32]
 8009656:	bf54      	ite	pl
 8009658:	f04f 0800 	movpl.w	r8, #0
 800965c:	9308      	strmi	r3, [sp, #32]
 800965e:	2f00      	cmp	r7, #0
 8009660:	db39      	blt.n	80096d6 <_dtoa_r+0x1ee>
 8009662:	9b08      	ldr	r3, [sp, #32]
 8009664:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009666:	443b      	add	r3, r7
 8009668:	9308      	str	r3, [sp, #32]
 800966a:	2300      	movs	r3, #0
 800966c:	930a      	str	r3, [sp, #40]	@ 0x28
 800966e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009670:	2b09      	cmp	r3, #9
 8009672:	d865      	bhi.n	8009740 <_dtoa_r+0x258>
 8009674:	2b05      	cmp	r3, #5
 8009676:	bfc4      	itt	gt
 8009678:	3b04      	subgt	r3, #4
 800967a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800967c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967e:	f1a3 0302 	sub.w	r3, r3, #2
 8009682:	bfcc      	ite	gt
 8009684:	2400      	movgt	r4, #0
 8009686:	2401      	movle	r4, #1
 8009688:	2b03      	cmp	r3, #3
 800968a:	d864      	bhi.n	8009756 <_dtoa_r+0x26e>
 800968c:	e8df f003 	tbb	[pc, r3]
 8009690:	5635372a 	.word	0x5635372a
 8009694:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009698:	441e      	add	r6, r3
 800969a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800969e:	2b20      	cmp	r3, #32
 80096a0:	bfc1      	itttt	gt
 80096a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80096a6:	409f      	lslgt	r7, r3
 80096a8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80096ac:	fa24 f303 	lsrgt.w	r3, r4, r3
 80096b0:	bfd6      	itet	le
 80096b2:	f1c3 0320 	rsble	r3, r3, #32
 80096b6:	ea47 0003 	orrgt.w	r0, r7, r3
 80096ba:	fa04 f003 	lslle.w	r0, r4, r3
 80096be:	f7f6 ff29 	bl	8000514 <__aeabi_ui2d>
 80096c2:	2201      	movs	r2, #1
 80096c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80096c8:	3e01      	subs	r6, #1
 80096ca:	9214      	str	r2, [sp, #80]	@ 0x50
 80096cc:	e777      	b.n	80095be <_dtoa_r+0xd6>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7b8      	b.n	8009644 <_dtoa_r+0x15c>
 80096d2:	9012      	str	r0, [sp, #72]	@ 0x48
 80096d4:	e7b7      	b.n	8009646 <_dtoa_r+0x15e>
 80096d6:	427b      	negs	r3, r7
 80096d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80096da:	2300      	movs	r3, #0
 80096dc:	eba8 0807 	sub.w	r8, r8, r7
 80096e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096e2:	e7c4      	b.n	800966e <_dtoa_r+0x186>
 80096e4:	2300      	movs	r3, #0
 80096e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	dc36      	bgt.n	800975c <_dtoa_r+0x274>
 80096ee:	2301      	movs	r3, #1
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	9307      	str	r3, [sp, #28]
 80096f4:	461a      	mov	r2, r3
 80096f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80096f8:	e00b      	b.n	8009712 <_dtoa_r+0x22a>
 80096fa:	2301      	movs	r3, #1
 80096fc:	e7f3      	b.n	80096e6 <_dtoa_r+0x1fe>
 80096fe:	2300      	movs	r3, #0
 8009700:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009704:	18fb      	adds	r3, r7, r3
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	3301      	adds	r3, #1
 800970a:	2b01      	cmp	r3, #1
 800970c:	9307      	str	r3, [sp, #28]
 800970e:	bfb8      	it	lt
 8009710:	2301      	movlt	r3, #1
 8009712:	2100      	movs	r1, #0
 8009714:	2204      	movs	r2, #4
 8009716:	f102 0014 	add.w	r0, r2, #20
 800971a:	4298      	cmp	r0, r3
 800971c:	d922      	bls.n	8009764 <_dtoa_r+0x27c>
 800971e:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 8009722:	4658      	mov	r0, fp
 8009724:	f000 fcae 	bl	800a084 <_Balloc>
 8009728:	4682      	mov	sl, r0
 800972a:	2800      	cmp	r0, #0
 800972c:	d13c      	bne.n	80097a8 <_dtoa_r+0x2c0>
 800972e:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <_dtoa_r+0x2b0>)
 8009730:	4602      	mov	r2, r0
 8009732:	f240 11af 	movw	r1, #431	@ 0x1af
 8009736:	4819      	ldr	r0, [pc, #100]	@ (800979c <_dtoa_r+0x2b4>)
 8009738:	f002 fc86 	bl	800c048 <__assert_func>
 800973c:	2301      	movs	r3, #1
 800973e:	e7df      	b.n	8009700 <_dtoa_r+0x218>
 8009740:	2401      	movs	r4, #1
 8009742:	2300      	movs	r3, #0
 8009744:	9309      	str	r3, [sp, #36]	@ 0x24
 8009746:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009748:	f04f 33ff 	mov.w	r3, #4294967295
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	9307      	str	r3, [sp, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	2312      	movs	r3, #18
 8009754:	e7cf      	b.n	80096f6 <_dtoa_r+0x20e>
 8009756:	2301      	movs	r3, #1
 8009758:	930b      	str	r3, [sp, #44]	@ 0x2c
 800975a:	e7f5      	b.n	8009748 <_dtoa_r+0x260>
 800975c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	e7d6      	b.n	8009712 <_dtoa_r+0x22a>
 8009764:	3101      	adds	r1, #1
 8009766:	0052      	lsls	r2, r2, #1
 8009768:	e7d5      	b.n	8009716 <_dtoa_r+0x22e>
 800976a:	bf00      	nop
 800976c:	f3af 8000 	nop.w
 8009770:	636f4361 	.word	0x636f4361
 8009774:	3fd287a7 	.word	0x3fd287a7
 8009778:	8b60c8b3 	.word	0x8b60c8b3
 800977c:	3fc68a28 	.word	0x3fc68a28
 8009780:	509f79fb 	.word	0x509f79fb
 8009784:	3fd34413 	.word	0x3fd34413
 8009788:	7ff00000 	.word	0x7ff00000
 800978c:	0800d88b 	.word	0x0800d88b
 8009790:	3ff80000 	.word	0x3ff80000
 8009794:	0800d9e8 	.word	0x0800d9e8
 8009798:	0800d8eb 	.word	0x0800d8eb
 800979c:	0800d8fc 	.word	0x0800d8fc
 80097a0:	0800d8e7 	.word	0x0800d8e7
 80097a4:	0800d88a 	.word	0x0800d88a
 80097a8:	9b07      	ldr	r3, [sp, #28]
 80097aa:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 80097ae:	2b0e      	cmp	r3, #14
 80097b0:	f200 80a4 	bhi.w	80098fc <_dtoa_r+0x414>
 80097b4:	2c00      	cmp	r4, #0
 80097b6:	f000 80a1 	beq.w	80098fc <_dtoa_r+0x414>
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	dd33      	ble.n	8009826 <_dtoa_r+0x33e>
 80097be:	4bae      	ldr	r3, [pc, #696]	@ (8009a78 <_dtoa_r+0x590>)
 80097c0:	f007 020f 	and.w	r2, r7, #15
 80097c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c8:	ed93 7b00 	vldr	d7, [r3]
 80097cc:	05f8      	lsls	r0, r7, #23
 80097ce:	ed8d 7b04 	vstr	d7, [sp, #16]
 80097d2:	ea4f 1427 	mov.w	r4, r7, asr #4
 80097d6:	d516      	bpl.n	8009806 <_dtoa_r+0x31e>
 80097d8:	4ba8      	ldr	r3, [pc, #672]	@ (8009a7c <_dtoa_r+0x594>)
 80097da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80097e2:	f7f7 f83b 	bl	800085c <__aeabi_ddiv>
 80097e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ea:	f004 040f 	and.w	r4, r4, #15
 80097ee:	2603      	movs	r6, #3
 80097f0:	4da2      	ldr	r5, [pc, #648]	@ (8009a7c <_dtoa_r+0x594>)
 80097f2:	b954      	cbnz	r4, 800980a <_dtoa_r+0x322>
 80097f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fc:	f7f7 f82e 	bl	800085c <__aeabi_ddiv>
 8009800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009804:	e028      	b.n	8009858 <_dtoa_r+0x370>
 8009806:	2602      	movs	r6, #2
 8009808:	e7f2      	b.n	80097f0 <_dtoa_r+0x308>
 800980a:	07e1      	lsls	r1, r4, #31
 800980c:	d508      	bpl.n	8009820 <_dtoa_r+0x338>
 800980e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009812:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009816:	f7f6 fef7 	bl	8000608 <__aeabi_dmul>
 800981a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800981e:	3601      	adds	r6, #1
 8009820:	1064      	asrs	r4, r4, #1
 8009822:	3508      	adds	r5, #8
 8009824:	e7e5      	b.n	80097f2 <_dtoa_r+0x30a>
 8009826:	f000 80d2 	beq.w	80099ce <_dtoa_r+0x4e6>
 800982a:	427c      	negs	r4, r7
 800982c:	4b92      	ldr	r3, [pc, #584]	@ (8009a78 <_dtoa_r+0x590>)
 800982e:	4d93      	ldr	r5, [pc, #588]	@ (8009a7c <_dtoa_r+0x594>)
 8009830:	f004 020f 	and.w	r2, r4, #15
 8009834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009840:	f7f6 fee2 	bl	8000608 <__aeabi_dmul>
 8009844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009848:	1124      	asrs	r4, r4, #4
 800984a:	2300      	movs	r3, #0
 800984c:	2602      	movs	r6, #2
 800984e:	2c00      	cmp	r4, #0
 8009850:	f040 80b2 	bne.w	80099b8 <_dtoa_r+0x4d0>
 8009854:	2b00      	cmp	r3, #0
 8009856:	d1d3      	bne.n	8009800 <_dtoa_r+0x318>
 8009858:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800985a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80b7 	beq.w	80099d2 <_dtoa_r+0x4ea>
 8009864:	4b86      	ldr	r3, [pc, #536]	@ (8009a80 <_dtoa_r+0x598>)
 8009866:	2200      	movs	r2, #0
 8009868:	4620      	mov	r0, r4
 800986a:	4629      	mov	r1, r5
 800986c:	f7f7 f93e 	bl	8000aec <__aeabi_dcmplt>
 8009870:	2800      	cmp	r0, #0
 8009872:	f000 80ae 	beq.w	80099d2 <_dtoa_r+0x4ea>
 8009876:	9b07      	ldr	r3, [sp, #28]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 80aa 	beq.w	80099d2 <_dtoa_r+0x4ea>
 800987e:	9b00      	ldr	r3, [sp, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	dd37      	ble.n	80098f4 <_dtoa_r+0x40c>
 8009884:	1e7b      	subs	r3, r7, #1
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	4620      	mov	r0, r4
 800988a:	4b7e      	ldr	r3, [pc, #504]	@ (8009a84 <_dtoa_r+0x59c>)
 800988c:	2200      	movs	r2, #0
 800988e:	4629      	mov	r1, r5
 8009890:	f7f6 feba 	bl	8000608 <__aeabi_dmul>
 8009894:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009898:	9c00      	ldr	r4, [sp, #0]
 800989a:	3601      	adds	r6, #1
 800989c:	4630      	mov	r0, r6
 800989e:	f7f6 fe49 	bl	8000534 <__aeabi_i2d>
 80098a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098a6:	f7f6 feaf 	bl	8000608 <__aeabi_dmul>
 80098aa:	4b77      	ldr	r3, [pc, #476]	@ (8009a88 <_dtoa_r+0x5a0>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	f7f6 fcf5 	bl	800029c <__adddf3>
 80098b2:	4605      	mov	r5, r0
 80098b4:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	f040 808d 	bne.w	80099d8 <_dtoa_r+0x4f0>
 80098be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098c2:	4b72      	ldr	r3, [pc, #456]	@ (8009a8c <_dtoa_r+0x5a4>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	f7f6 fce7 	bl	8000298 <__aeabi_dsub>
 80098ca:	4602      	mov	r2, r0
 80098cc:	460b      	mov	r3, r1
 80098ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098d2:	462a      	mov	r2, r5
 80098d4:	4633      	mov	r3, r6
 80098d6:	f7f7 f927 	bl	8000b28 <__aeabi_dcmpgt>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f040 828c 	bne.w	8009df8 <_dtoa_r+0x910>
 80098e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098e4:	462a      	mov	r2, r5
 80098e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80098ea:	f7f7 f8ff 	bl	8000aec <__aeabi_dcmplt>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f040 8129 	bne.w	8009b46 <_dtoa_r+0x65e>
 80098f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80098f8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80098fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f2c0 815b 	blt.w	8009bba <_dtoa_r+0x6d2>
 8009904:	2f0e      	cmp	r7, #14
 8009906:	f300 8158 	bgt.w	8009bba <_dtoa_r+0x6d2>
 800990a:	4b5b      	ldr	r3, [pc, #364]	@ (8009a78 <_dtoa_r+0x590>)
 800990c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009910:	ed93 7b00 	vldr	d7, [r3]
 8009914:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009916:	2b00      	cmp	r3, #0
 8009918:	ed8d 7b00 	vstr	d7, [sp]
 800991c:	da03      	bge.n	8009926 <_dtoa_r+0x43e>
 800991e:	9b07      	ldr	r3, [sp, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	f340 8102 	ble.w	8009b2a <_dtoa_r+0x642>
 8009926:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800992a:	4656      	mov	r6, sl
 800992c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009930:	4620      	mov	r0, r4
 8009932:	4629      	mov	r1, r5
 8009934:	f7f6 ff92 	bl	800085c <__aeabi_ddiv>
 8009938:	f7f7 f916 	bl	8000b68 <__aeabi_d2iz>
 800993c:	4680      	mov	r8, r0
 800993e:	f7f6 fdf9 	bl	8000534 <__aeabi_i2d>
 8009942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009946:	f7f6 fe5f 	bl	8000608 <__aeabi_dmul>
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	4620      	mov	r0, r4
 8009950:	4629      	mov	r1, r5
 8009952:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009956:	f7f6 fc9f 	bl	8000298 <__aeabi_dsub>
 800995a:	f806 4b01 	strb.w	r4, [r6], #1
 800995e:	9d07      	ldr	r5, [sp, #28]
 8009960:	eba6 040a 	sub.w	r4, r6, sl
 8009964:	42a5      	cmp	r5, r4
 8009966:	4602      	mov	r2, r0
 8009968:	460b      	mov	r3, r1
 800996a:	f040 8118 	bne.w	8009b9e <_dtoa_r+0x6b6>
 800996e:	f7f6 fc95 	bl	800029c <__adddf3>
 8009972:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009976:	4604      	mov	r4, r0
 8009978:	460d      	mov	r5, r1
 800997a:	f7f7 f8d5 	bl	8000b28 <__aeabi_dcmpgt>
 800997e:	2800      	cmp	r0, #0
 8009980:	f040 80fa 	bne.w	8009b78 <_dtoa_r+0x690>
 8009984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009988:	4620      	mov	r0, r4
 800998a:	4629      	mov	r1, r5
 800998c:	f7f7 f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009990:	b118      	cbz	r0, 800999a <_dtoa_r+0x4b2>
 8009992:	f018 0f01 	tst.w	r8, #1
 8009996:	f040 80ef 	bne.w	8009b78 <_dtoa_r+0x690>
 800999a:	4649      	mov	r1, r9
 800999c:	4658      	mov	r0, fp
 800999e:	f000 fb96 	bl	800a0ce <_Bfree>
 80099a2:	2300      	movs	r3, #0
 80099a4:	7033      	strb	r3, [r6, #0]
 80099a6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80099a8:	3701      	adds	r7, #1
 80099aa:	601f      	str	r7, [r3, #0]
 80099ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f43f add1 	beq.w	8009556 <_dtoa_r+0x6e>
 80099b4:	601e      	str	r6, [r3, #0]
 80099b6:	e5ce      	b.n	8009556 <_dtoa_r+0x6e>
 80099b8:	07e2      	lsls	r2, r4, #31
 80099ba:	d505      	bpl.n	80099c8 <_dtoa_r+0x4e0>
 80099bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099c0:	f7f6 fe22 	bl	8000608 <__aeabi_dmul>
 80099c4:	3601      	adds	r6, #1
 80099c6:	2301      	movs	r3, #1
 80099c8:	1064      	asrs	r4, r4, #1
 80099ca:	3508      	adds	r5, #8
 80099cc:	e73f      	b.n	800984e <_dtoa_r+0x366>
 80099ce:	2602      	movs	r6, #2
 80099d0:	e742      	b.n	8009858 <_dtoa_r+0x370>
 80099d2:	9c07      	ldr	r4, [sp, #28]
 80099d4:	9704      	str	r7, [sp, #16]
 80099d6:	e761      	b.n	800989c <_dtoa_r+0x3b4>
 80099d8:	4b27      	ldr	r3, [pc, #156]	@ (8009a78 <_dtoa_r+0x590>)
 80099da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80099e4:	4454      	add	r4, sl
 80099e6:	2900      	cmp	r1, #0
 80099e8:	d054      	beq.n	8009a94 <_dtoa_r+0x5ac>
 80099ea:	4929      	ldr	r1, [pc, #164]	@ (8009a90 <_dtoa_r+0x5a8>)
 80099ec:	2000      	movs	r0, #0
 80099ee:	f7f6 ff35 	bl	800085c <__aeabi_ddiv>
 80099f2:	4633      	mov	r3, r6
 80099f4:	462a      	mov	r2, r5
 80099f6:	f7f6 fc4f 	bl	8000298 <__aeabi_dsub>
 80099fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099fe:	4656      	mov	r6, sl
 8009a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a04:	f7f7 f8b0 	bl	8000b68 <__aeabi_d2iz>
 8009a08:	4605      	mov	r5, r0
 8009a0a:	f7f6 fd93 	bl	8000534 <__aeabi_i2d>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a16:	f7f6 fc3f 	bl	8000298 <__aeabi_dsub>
 8009a1a:	3530      	adds	r5, #48	@ 0x30
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	460b      	mov	r3, r1
 8009a20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a24:	f806 5b01 	strb.w	r5, [r6], #1
 8009a28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a2c:	f7f7 f85e 	bl	8000aec <__aeabi_dcmplt>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d172      	bne.n	8009b1a <_dtoa_r+0x632>
 8009a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a38:	4911      	ldr	r1, [pc, #68]	@ (8009a80 <_dtoa_r+0x598>)
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	f7f6 fc2c 	bl	8000298 <__aeabi_dsub>
 8009a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a44:	f7f7 f852 	bl	8000aec <__aeabi_dcmplt>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f040 8096 	bne.w	8009b7a <_dtoa_r+0x692>
 8009a4e:	42a6      	cmp	r6, r4
 8009a50:	f43f af50 	beq.w	80098f4 <_dtoa_r+0x40c>
 8009a54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a58:	4b0a      	ldr	r3, [pc, #40]	@ (8009a84 <_dtoa_r+0x59c>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fdd4 	bl	8000608 <__aeabi_dmul>
 8009a60:	4b08      	ldr	r3, [pc, #32]	@ (8009a84 <_dtoa_r+0x59c>)
 8009a62:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009a66:	2200      	movs	r2, #0
 8009a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6c:	f7f6 fdcc 	bl	8000608 <__aeabi_dmul>
 8009a70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a74:	e7c4      	b.n	8009a00 <_dtoa_r+0x518>
 8009a76:	bf00      	nop
 8009a78:	0800d9e8 	.word	0x0800d9e8
 8009a7c:	0800d9c0 	.word	0x0800d9c0
 8009a80:	3ff00000 	.word	0x3ff00000
 8009a84:	40240000 	.word	0x40240000
 8009a88:	401c0000 	.word	0x401c0000
 8009a8c:	40140000 	.word	0x40140000
 8009a90:	3fe00000 	.word	0x3fe00000
 8009a94:	4631      	mov	r1, r6
 8009a96:	4628      	mov	r0, r5
 8009a98:	f7f6 fdb6 	bl	8000608 <__aeabi_dmul>
 8009a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009aa0:	9415      	str	r4, [sp, #84]	@ 0x54
 8009aa2:	4656      	mov	r6, sl
 8009aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aa8:	f7f7 f85e 	bl	8000b68 <__aeabi_d2iz>
 8009aac:	4605      	mov	r5, r0
 8009aae:	f7f6 fd41 	bl	8000534 <__aeabi_i2d>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aba:	f7f6 fbed 	bl	8000298 <__aeabi_dsub>
 8009abe:	3530      	adds	r5, #48	@ 0x30
 8009ac0:	f806 5b01 	strb.w	r5, [r6], #1
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	42a6      	cmp	r6, r4
 8009aca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ace:	f04f 0200 	mov.w	r2, #0
 8009ad2:	d124      	bne.n	8009b1e <_dtoa_r+0x636>
 8009ad4:	4bac      	ldr	r3, [pc, #688]	@ (8009d88 <_dtoa_r+0x8a0>)
 8009ad6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ada:	f7f6 fbdf 	bl	800029c <__adddf3>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ae6:	f7f7 f81f 	bl	8000b28 <__aeabi_dcmpgt>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d145      	bne.n	8009b7a <_dtoa_r+0x692>
 8009aee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009af2:	49a5      	ldr	r1, [pc, #660]	@ (8009d88 <_dtoa_r+0x8a0>)
 8009af4:	2000      	movs	r0, #0
 8009af6:	f7f6 fbcf 	bl	8000298 <__aeabi_dsub>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b02:	f7f6 fff3 	bl	8000aec <__aeabi_dcmplt>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f43f aef4 	beq.w	80098f4 <_dtoa_r+0x40c>
 8009b0c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009b0e:	1e73      	subs	r3, r6, #1
 8009b10:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d0f8      	beq.n	8009b0c <_dtoa_r+0x624>
 8009b1a:	9f04      	ldr	r7, [sp, #16]
 8009b1c:	e73d      	b.n	800999a <_dtoa_r+0x4b2>
 8009b1e:	4b9b      	ldr	r3, [pc, #620]	@ (8009d8c <_dtoa_r+0x8a4>)
 8009b20:	f7f6 fd72 	bl	8000608 <__aeabi_dmul>
 8009b24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b28:	e7bc      	b.n	8009aa4 <_dtoa_r+0x5bc>
 8009b2a:	d10c      	bne.n	8009b46 <_dtoa_r+0x65e>
 8009b2c:	4b98      	ldr	r3, [pc, #608]	@ (8009d90 <_dtoa_r+0x8a8>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b34:	f7f6 fd68 	bl	8000608 <__aeabi_dmul>
 8009b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b3c:	f7f6 ffea 	bl	8000b14 <__aeabi_dcmpge>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	f000 8157 	beq.w	8009df4 <_dtoa_r+0x90c>
 8009b46:	2400      	movs	r4, #0
 8009b48:	4625      	mov	r5, r4
 8009b4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	4656      	mov	r6, sl
 8009b52:	2700      	movs	r7, #0
 8009b54:	4621      	mov	r1, r4
 8009b56:	4658      	mov	r0, fp
 8009b58:	f000 fab9 	bl	800a0ce <_Bfree>
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	d0dc      	beq.n	8009b1a <_dtoa_r+0x632>
 8009b60:	b12f      	cbz	r7, 8009b6e <_dtoa_r+0x686>
 8009b62:	42af      	cmp	r7, r5
 8009b64:	d003      	beq.n	8009b6e <_dtoa_r+0x686>
 8009b66:	4639      	mov	r1, r7
 8009b68:	4658      	mov	r0, fp
 8009b6a:	f000 fab0 	bl	800a0ce <_Bfree>
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4658      	mov	r0, fp
 8009b72:	f000 faac 	bl	800a0ce <_Bfree>
 8009b76:	e7d0      	b.n	8009b1a <_dtoa_r+0x632>
 8009b78:	9704      	str	r7, [sp, #16]
 8009b7a:	4633      	mov	r3, r6
 8009b7c:	461e      	mov	r6, r3
 8009b7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b82:	2a39      	cmp	r2, #57	@ 0x39
 8009b84:	d107      	bne.n	8009b96 <_dtoa_r+0x6ae>
 8009b86:	459a      	cmp	sl, r3
 8009b88:	d1f8      	bne.n	8009b7c <_dtoa_r+0x694>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	3201      	adds	r2, #1
 8009b8e:	9204      	str	r2, [sp, #16]
 8009b90:	2230      	movs	r2, #48	@ 0x30
 8009b92:	f88a 2000 	strb.w	r2, [sl]
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	3201      	adds	r2, #1
 8009b9a:	701a      	strb	r2, [r3, #0]
 8009b9c:	e7bd      	b.n	8009b1a <_dtoa_r+0x632>
 8009b9e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d8c <_dtoa_r+0x8a4>)
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f7f6 fd31 	bl	8000608 <__aeabi_dmul>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	460d      	mov	r5, r1
 8009bae:	f7f6 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	f43f aeba 	beq.w	800992c <_dtoa_r+0x444>
 8009bb8:	e6ef      	b.n	800999a <_dtoa_r+0x4b2>
 8009bba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009bbc:	2a00      	cmp	r2, #0
 8009bbe:	f000 80db 	beq.w	8009d78 <_dtoa_r+0x890>
 8009bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc4:	2a01      	cmp	r2, #1
 8009bc6:	f300 80bf 	bgt.w	8009d48 <_dtoa_r+0x860>
 8009bca:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	f000 80b7 	beq.w	8009d40 <_dtoa_r+0x858>
 8009bd2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009bd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009bd8:	4646      	mov	r6, r8
 8009bda:	9a08      	ldr	r2, [sp, #32]
 8009bdc:	2101      	movs	r1, #1
 8009bde:	441a      	add	r2, r3
 8009be0:	4658      	mov	r0, fp
 8009be2:	4498      	add	r8, r3
 8009be4:	9208      	str	r2, [sp, #32]
 8009be6:	f000 fb57 	bl	800a298 <__i2b>
 8009bea:	4605      	mov	r5, r0
 8009bec:	b15e      	cbz	r6, 8009c06 <_dtoa_r+0x71e>
 8009bee:	9b08      	ldr	r3, [sp, #32]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	dd08      	ble.n	8009c06 <_dtoa_r+0x71e>
 8009bf4:	42b3      	cmp	r3, r6
 8009bf6:	9a08      	ldr	r2, [sp, #32]
 8009bf8:	bfa8      	it	ge
 8009bfa:	4633      	movge	r3, r6
 8009bfc:	eba8 0803 	sub.w	r8, r8, r3
 8009c00:	1af6      	subs	r6, r6, r3
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	9308      	str	r3, [sp, #32]
 8009c06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c08:	b1f3      	cbz	r3, 8009c48 <_dtoa_r+0x760>
 8009c0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 80b7 	beq.w	8009d80 <_dtoa_r+0x898>
 8009c12:	b18c      	cbz	r4, 8009c38 <_dtoa_r+0x750>
 8009c14:	4629      	mov	r1, r5
 8009c16:	4622      	mov	r2, r4
 8009c18:	4658      	mov	r0, fp
 8009c1a:	f000 fbfd 	bl	800a418 <__pow5mult>
 8009c1e:	464a      	mov	r2, r9
 8009c20:	4601      	mov	r1, r0
 8009c22:	4605      	mov	r5, r0
 8009c24:	4658      	mov	r0, fp
 8009c26:	f000 fb4d 	bl	800a2c4 <__multiply>
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	9004      	str	r0, [sp, #16]
 8009c2e:	4658      	mov	r0, fp
 8009c30:	f000 fa4d 	bl	800a0ce <_Bfree>
 8009c34:	9b04      	ldr	r3, [sp, #16]
 8009c36:	4699      	mov	r9, r3
 8009c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c3a:	1b1a      	subs	r2, r3, r4
 8009c3c:	d004      	beq.n	8009c48 <_dtoa_r+0x760>
 8009c3e:	4649      	mov	r1, r9
 8009c40:	4658      	mov	r0, fp
 8009c42:	f000 fbe9 	bl	800a418 <__pow5mult>
 8009c46:	4681      	mov	r9, r0
 8009c48:	2101      	movs	r1, #1
 8009c4a:	4658      	mov	r0, fp
 8009c4c:	f000 fb24 	bl	800a298 <__i2b>
 8009c50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c52:	4604      	mov	r4, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	f000 81cc 	beq.w	8009ff2 <_dtoa_r+0xb0a>
 8009c5a:	461a      	mov	r2, r3
 8009c5c:	4601      	mov	r1, r0
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f000 fbda 	bl	800a418 <__pow5mult>
 8009c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	4604      	mov	r4, r0
 8009c6a:	f300 8095 	bgt.w	8009d98 <_dtoa_r+0x8b0>
 8009c6e:	9b02      	ldr	r3, [sp, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	f040 8087 	bne.w	8009d84 <_dtoa_r+0x89c>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 8089 	bne.w	8009d94 <_dtoa_r+0x8ac>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	051b      	lsls	r3, r3, #20
 8009c8c:	b12b      	cbz	r3, 8009c9a <_dtoa_r+0x7b2>
 8009c8e:	9b08      	ldr	r3, [sp, #32]
 8009c90:	3301      	adds	r3, #1
 8009c92:	9308      	str	r3, [sp, #32]
 8009c94:	f108 0801 	add.w	r8, r8, #1
 8009c98:	2301      	movs	r3, #1
 8009c9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 81ad 	beq.w	8009ffe <_dtoa_r+0xb16>
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009caa:	6918      	ldr	r0, [r3, #16]
 8009cac:	f000 faa8 	bl	800a200 <__hi0bits>
 8009cb0:	f1c0 0020 	rsb	r0, r0, #32
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	4418      	add	r0, r3
 8009cb8:	f010 001f 	ands.w	r0, r0, #31
 8009cbc:	d077      	beq.n	8009dae <_dtoa_r+0x8c6>
 8009cbe:	f1c0 0320 	rsb	r3, r0, #32
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	dd6b      	ble.n	8009d9e <_dtoa_r+0x8b6>
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	f1c0 001c 	rsb	r0, r0, #28
 8009ccc:	4403      	add	r3, r0
 8009cce:	4480      	add	r8, r0
 8009cd0:	4406      	add	r6, r0
 8009cd2:	9308      	str	r3, [sp, #32]
 8009cd4:	f1b8 0f00 	cmp.w	r8, #0
 8009cd8:	dd05      	ble.n	8009ce6 <_dtoa_r+0x7fe>
 8009cda:	4649      	mov	r1, r9
 8009cdc:	4642      	mov	r2, r8
 8009cde:	4658      	mov	r0, fp
 8009ce0:	f000 fbda 	bl	800a498 <__lshift>
 8009ce4:	4681      	mov	r9, r0
 8009ce6:	9b08      	ldr	r3, [sp, #32]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	dd05      	ble.n	8009cf8 <_dtoa_r+0x810>
 8009cec:	4621      	mov	r1, r4
 8009cee:	461a      	mov	r2, r3
 8009cf0:	4658      	mov	r0, fp
 8009cf2:	f000 fbd1 	bl	800a498 <__lshift>
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d059      	beq.n	8009db2 <_dtoa_r+0x8ca>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4648      	mov	r0, r9
 8009d02:	f000 fc35 	bl	800a570 <__mcmp>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	da53      	bge.n	8009db2 <_dtoa_r+0x8ca>
 8009d0a:	1e7b      	subs	r3, r7, #1
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	4649      	mov	r1, r9
 8009d10:	2300      	movs	r3, #0
 8009d12:	220a      	movs	r2, #10
 8009d14:	4658      	mov	r0, fp
 8009d16:	f000 f9e3 	bl	800a0e0 <__multadd>
 8009d1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d1c:	4681      	mov	r9, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	f000 816f 	beq.w	800a002 <_dtoa_r+0xb1a>
 8009d24:	2300      	movs	r3, #0
 8009d26:	4629      	mov	r1, r5
 8009d28:	220a      	movs	r2, #10
 8009d2a:	4658      	mov	r0, fp
 8009d2c:	f000 f9d8 	bl	800a0e0 <__multadd>
 8009d30:	9b00      	ldr	r3, [sp, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	4605      	mov	r5, r0
 8009d36:	dc67      	bgt.n	8009e08 <_dtoa_r+0x920>
 8009d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	dc41      	bgt.n	8009dc2 <_dtoa_r+0x8da>
 8009d3e:	e063      	b.n	8009e08 <_dtoa_r+0x920>
 8009d40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009d42:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009d46:	e746      	b.n	8009bd6 <_dtoa_r+0x6ee>
 8009d48:	9b07      	ldr	r3, [sp, #28]
 8009d4a:	1e5c      	subs	r4, r3, #1
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	bfbf      	itttt	lt
 8009d52:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009d54:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009d56:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009d58:	1ae3      	sublt	r3, r4, r3
 8009d5a:	bfb4      	ite	lt
 8009d5c:	18d2      	addlt	r2, r2, r3
 8009d5e:	1b1c      	subge	r4, r3, r4
 8009d60:	9b07      	ldr	r3, [sp, #28]
 8009d62:	bfbc      	itt	lt
 8009d64:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009d66:	2400      	movlt	r4, #0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfb5      	itete	lt
 8009d6c:	eba8 0603 	sublt.w	r6, r8, r3
 8009d70:	9b07      	ldrge	r3, [sp, #28]
 8009d72:	2300      	movlt	r3, #0
 8009d74:	4646      	movge	r6, r8
 8009d76:	e730      	b.n	8009bda <_dtoa_r+0x6f2>
 8009d78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d7c:	4646      	mov	r6, r8
 8009d7e:	e735      	b.n	8009bec <_dtoa_r+0x704>
 8009d80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d82:	e75c      	b.n	8009c3e <_dtoa_r+0x756>
 8009d84:	2300      	movs	r3, #0
 8009d86:	e788      	b.n	8009c9a <_dtoa_r+0x7b2>
 8009d88:	3fe00000 	.word	0x3fe00000
 8009d8c:	40240000 	.word	0x40240000
 8009d90:	40140000 	.word	0x40140000
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	e780      	b.n	8009c9a <_dtoa_r+0x7b2>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d9c:	e782      	b.n	8009ca4 <_dtoa_r+0x7bc>
 8009d9e:	d099      	beq.n	8009cd4 <_dtoa_r+0x7ec>
 8009da0:	9a08      	ldr	r2, [sp, #32]
 8009da2:	331c      	adds	r3, #28
 8009da4:	441a      	add	r2, r3
 8009da6:	4498      	add	r8, r3
 8009da8:	441e      	add	r6, r3
 8009daa:	9208      	str	r2, [sp, #32]
 8009dac:	e792      	b.n	8009cd4 <_dtoa_r+0x7ec>
 8009dae:	4603      	mov	r3, r0
 8009db0:	e7f6      	b.n	8009da0 <_dtoa_r+0x8b8>
 8009db2:	9b07      	ldr	r3, [sp, #28]
 8009db4:	9704      	str	r7, [sp, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dc20      	bgt.n	8009dfc <_dtoa_r+0x914>
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dbe:	2b02      	cmp	r3, #2
 8009dc0:	dd1e      	ble.n	8009e00 <_dtoa_r+0x918>
 8009dc2:	9b00      	ldr	r3, [sp, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f47f aec0 	bne.w	8009b4a <_dtoa_r+0x662>
 8009dca:	4621      	mov	r1, r4
 8009dcc:	2205      	movs	r2, #5
 8009dce:	4658      	mov	r0, fp
 8009dd0:	f000 f986 	bl	800a0e0 <__multadd>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	4648      	mov	r0, r9
 8009dda:	f000 fbc9 	bl	800a570 <__mcmp>
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f77f aeb3 	ble.w	8009b4a <_dtoa_r+0x662>
 8009de4:	4656      	mov	r6, sl
 8009de6:	2331      	movs	r3, #49	@ 0x31
 8009de8:	f806 3b01 	strb.w	r3, [r6], #1
 8009dec:	9b04      	ldr	r3, [sp, #16]
 8009dee:	3301      	adds	r3, #1
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	e6ae      	b.n	8009b52 <_dtoa_r+0x66a>
 8009df4:	9c07      	ldr	r4, [sp, #28]
 8009df6:	9704      	str	r7, [sp, #16]
 8009df8:	4625      	mov	r5, r4
 8009dfa:	e7f3      	b.n	8009de4 <_dtoa_r+0x8fc>
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 8101 	beq.w	800a00a <_dtoa_r+0xb22>
 8009e08:	2e00      	cmp	r6, #0
 8009e0a:	dd05      	ble.n	8009e18 <_dtoa_r+0x930>
 8009e0c:	4629      	mov	r1, r5
 8009e0e:	4632      	mov	r2, r6
 8009e10:	4658      	mov	r0, fp
 8009e12:	f000 fb41 	bl	800a498 <__lshift>
 8009e16:	4605      	mov	r5, r0
 8009e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d059      	beq.n	8009ed2 <_dtoa_r+0x9ea>
 8009e1e:	6869      	ldr	r1, [r5, #4]
 8009e20:	4658      	mov	r0, fp
 8009e22:	f000 f92f 	bl	800a084 <_Balloc>
 8009e26:	4606      	mov	r6, r0
 8009e28:	b920      	cbnz	r0, 8009e34 <_dtoa_r+0x94c>
 8009e2a:	4b83      	ldr	r3, [pc, #524]	@ (800a038 <_dtoa_r+0xb50>)
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009e32:	e480      	b.n	8009736 <_dtoa_r+0x24e>
 8009e34:	692a      	ldr	r2, [r5, #16]
 8009e36:	3202      	adds	r2, #2
 8009e38:	0092      	lsls	r2, r2, #2
 8009e3a:	f105 010c 	add.w	r1, r5, #12
 8009e3e:	300c      	adds	r0, #12
 8009e40:	f7fc f9f8 	bl	8006234 <memcpy>
 8009e44:	2201      	movs	r2, #1
 8009e46:	4631      	mov	r1, r6
 8009e48:	4658      	mov	r0, fp
 8009e4a:	f000 fb25 	bl	800a498 <__lshift>
 8009e4e:	f10a 0301 	add.w	r3, sl, #1
 8009e52:	9307      	str	r3, [sp, #28]
 8009e54:	9b00      	ldr	r3, [sp, #0]
 8009e56:	4453      	add	r3, sl
 8009e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e5a:	9b02      	ldr	r3, [sp, #8]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	462f      	mov	r7, r5
 8009e62:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e64:	4605      	mov	r5, r0
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	4621      	mov	r1, r4
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	4648      	mov	r0, r9
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	f7ff fab0 	bl	80093d4 <quorem>
 8009e74:	4639      	mov	r1, r7
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	f000 fb77 	bl	800a570 <__mcmp>
 8009e82:	462a      	mov	r2, r5
 8009e84:	9008      	str	r0, [sp, #32]
 8009e86:	4621      	mov	r1, r4
 8009e88:	4658      	mov	r0, fp
 8009e8a:	f000 fb8d 	bl	800a5a8 <__mdiff>
 8009e8e:	68c2      	ldr	r2, [r0, #12]
 8009e90:	4606      	mov	r6, r0
 8009e92:	bb02      	cbnz	r2, 8009ed6 <_dtoa_r+0x9ee>
 8009e94:	4601      	mov	r1, r0
 8009e96:	4648      	mov	r0, r9
 8009e98:	f000 fb6a 	bl	800a570 <__mcmp>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4658      	mov	r0, fp
 8009ea2:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ea4:	f000 f913 	bl	800a0ce <_Bfree>
 8009ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eaa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eac:	9e07      	ldr	r6, [sp, #28]
 8009eae:	ea43 0102 	orr.w	r1, r3, r2
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb4:	4319      	orrs	r1, r3
 8009eb6:	d110      	bne.n	8009eda <_dtoa_r+0x9f2>
 8009eb8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ebc:	d029      	beq.n	8009f12 <_dtoa_r+0xa2a>
 8009ebe:	9b08      	ldr	r3, [sp, #32]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dd02      	ble.n	8009eca <_dtoa_r+0x9e2>
 8009ec4:	9b02      	ldr	r3, [sp, #8]
 8009ec6:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009eca:	9b00      	ldr	r3, [sp, #0]
 8009ecc:	f883 8000 	strb.w	r8, [r3]
 8009ed0:	e640      	b.n	8009b54 <_dtoa_r+0x66c>
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	e7bb      	b.n	8009e4e <_dtoa_r+0x966>
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	e7e1      	b.n	8009e9e <_dtoa_r+0x9b6>
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	db04      	blt.n	8009eea <_dtoa_r+0xa02>
 8009ee0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee2:	430b      	orrs	r3, r1
 8009ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ee6:	430b      	orrs	r3, r1
 8009ee8:	d120      	bne.n	8009f2c <_dtoa_r+0xa44>
 8009eea:	2a00      	cmp	r2, #0
 8009eec:	dded      	ble.n	8009eca <_dtoa_r+0x9e2>
 8009eee:	4649      	mov	r1, r9
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4658      	mov	r0, fp
 8009ef4:	f000 fad0 	bl	800a498 <__lshift>
 8009ef8:	4621      	mov	r1, r4
 8009efa:	4681      	mov	r9, r0
 8009efc:	f000 fb38 	bl	800a570 <__mcmp>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	dc03      	bgt.n	8009f0c <_dtoa_r+0xa24>
 8009f04:	d1e1      	bne.n	8009eca <_dtoa_r+0x9e2>
 8009f06:	f018 0f01 	tst.w	r8, #1
 8009f0a:	d0de      	beq.n	8009eca <_dtoa_r+0x9e2>
 8009f0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f10:	d1d8      	bne.n	8009ec4 <_dtoa_r+0x9dc>
 8009f12:	9a00      	ldr	r2, [sp, #0]
 8009f14:	2339      	movs	r3, #57	@ 0x39
 8009f16:	7013      	strb	r3, [r2, #0]
 8009f18:	4633      	mov	r3, r6
 8009f1a:	461e      	mov	r6, r3
 8009f1c:	3b01      	subs	r3, #1
 8009f1e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009f22:	2a39      	cmp	r2, #57	@ 0x39
 8009f24:	d052      	beq.n	8009fcc <_dtoa_r+0xae4>
 8009f26:	3201      	adds	r2, #1
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	e613      	b.n	8009b54 <_dtoa_r+0x66c>
 8009f2c:	2a00      	cmp	r2, #0
 8009f2e:	dd07      	ble.n	8009f40 <_dtoa_r+0xa58>
 8009f30:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009f34:	d0ed      	beq.n	8009f12 <_dtoa_r+0xa2a>
 8009f36:	9a00      	ldr	r2, [sp, #0]
 8009f38:	f108 0301 	add.w	r3, r8, #1
 8009f3c:	7013      	strb	r3, [r2, #0]
 8009f3e:	e609      	b.n	8009b54 <_dtoa_r+0x66c>
 8009f40:	9b07      	ldr	r3, [sp, #28]
 8009f42:	9a07      	ldr	r2, [sp, #28]
 8009f44:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d028      	beq.n	8009fa0 <_dtoa_r+0xab8>
 8009f4e:	4649      	mov	r1, r9
 8009f50:	2300      	movs	r3, #0
 8009f52:	220a      	movs	r2, #10
 8009f54:	4658      	mov	r0, fp
 8009f56:	f000 f8c3 	bl	800a0e0 <__multadd>
 8009f5a:	42af      	cmp	r7, r5
 8009f5c:	4681      	mov	r9, r0
 8009f5e:	f04f 0300 	mov.w	r3, #0
 8009f62:	f04f 020a 	mov.w	r2, #10
 8009f66:	4639      	mov	r1, r7
 8009f68:	4658      	mov	r0, fp
 8009f6a:	d107      	bne.n	8009f7c <_dtoa_r+0xa94>
 8009f6c:	f000 f8b8 	bl	800a0e0 <__multadd>
 8009f70:	4607      	mov	r7, r0
 8009f72:	4605      	mov	r5, r0
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	3301      	adds	r3, #1
 8009f78:	9307      	str	r3, [sp, #28]
 8009f7a:	e774      	b.n	8009e66 <_dtoa_r+0x97e>
 8009f7c:	f000 f8b0 	bl	800a0e0 <__multadd>
 8009f80:	4629      	mov	r1, r5
 8009f82:	4607      	mov	r7, r0
 8009f84:	2300      	movs	r3, #0
 8009f86:	220a      	movs	r2, #10
 8009f88:	4658      	mov	r0, fp
 8009f8a:	f000 f8a9 	bl	800a0e0 <__multadd>
 8009f8e:	4605      	mov	r5, r0
 8009f90:	e7f0      	b.n	8009f74 <_dtoa_r+0xa8c>
 8009f92:	9b00      	ldr	r3, [sp, #0]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfcc      	ite	gt
 8009f98:	461e      	movgt	r6, r3
 8009f9a:	2601      	movle	r6, #1
 8009f9c:	4456      	add	r6, sl
 8009f9e:	2700      	movs	r7, #0
 8009fa0:	4649      	mov	r1, r9
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f000 fa77 	bl	800a498 <__lshift>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4681      	mov	r9, r0
 8009fae:	f000 fadf 	bl	800a570 <__mcmp>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	dcb0      	bgt.n	8009f18 <_dtoa_r+0xa30>
 8009fb6:	d102      	bne.n	8009fbe <_dtoa_r+0xad6>
 8009fb8:	f018 0f01 	tst.w	r8, #1
 8009fbc:	d1ac      	bne.n	8009f18 <_dtoa_r+0xa30>
 8009fbe:	4633      	mov	r3, r6
 8009fc0:	461e      	mov	r6, r3
 8009fc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fc6:	2a30      	cmp	r2, #48	@ 0x30
 8009fc8:	d0fa      	beq.n	8009fc0 <_dtoa_r+0xad8>
 8009fca:	e5c3      	b.n	8009b54 <_dtoa_r+0x66c>
 8009fcc:	459a      	cmp	sl, r3
 8009fce:	d1a4      	bne.n	8009f1a <_dtoa_r+0xa32>
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	2331      	movs	r3, #49	@ 0x31
 8009fd8:	f88a 3000 	strb.w	r3, [sl]
 8009fdc:	e5ba      	b.n	8009b54 <_dtoa_r+0x66c>
 8009fde:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009fe0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a03c <_dtoa_r+0xb54>
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f43f aab6 	beq.w	8009556 <_dtoa_r+0x6e>
 8009fea:	f10a 0308 	add.w	r3, sl, #8
 8009fee:	f7ff bab0 	b.w	8009552 <_dtoa_r+0x6a>
 8009ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	f77f ae3a 	ble.w	8009c6e <_dtoa_r+0x786>
 8009ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ffc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ffe:	2001      	movs	r0, #1
 800a000:	e658      	b.n	8009cb4 <_dtoa_r+0x7cc>
 800a002:	9b00      	ldr	r3, [sp, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	f77f aed9 	ble.w	8009dbc <_dtoa_r+0x8d4>
 800a00a:	4656      	mov	r6, sl
 800a00c:	4621      	mov	r1, r4
 800a00e:	4648      	mov	r0, r9
 800a010:	f7ff f9e0 	bl	80093d4 <quorem>
 800a014:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a018:	f806 8b01 	strb.w	r8, [r6], #1
 800a01c:	9b00      	ldr	r3, [sp, #0]
 800a01e:	eba6 020a 	sub.w	r2, r6, sl
 800a022:	4293      	cmp	r3, r2
 800a024:	ddb5      	ble.n	8009f92 <_dtoa_r+0xaaa>
 800a026:	4649      	mov	r1, r9
 800a028:	2300      	movs	r3, #0
 800a02a:	220a      	movs	r2, #10
 800a02c:	4658      	mov	r0, fp
 800a02e:	f000 f857 	bl	800a0e0 <__multadd>
 800a032:	4681      	mov	r9, r0
 800a034:	e7ea      	b.n	800a00c <_dtoa_r+0xb24>
 800a036:	bf00      	nop
 800a038:	0800d8eb 	.word	0x0800d8eb
 800a03c:	0800d8de 	.word	0x0800d8de

0800a040 <malloc>:
 800a040:	4b02      	ldr	r3, [pc, #8]	@ (800a04c <malloc+0xc>)
 800a042:	4601      	mov	r1, r0
 800a044:	6818      	ldr	r0, [r3, #0]
 800a046:	f7fc ba29 	b.w	800649c <_malloc_r>
 800a04a:	bf00      	nop
 800a04c:	20000018 	.word	0x20000018

0800a050 <free>:
 800a050:	4b02      	ldr	r3, [pc, #8]	@ (800a05c <free+0xc>)
 800a052:	4601      	mov	r1, r0
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f7fc b961 	b.w	800631c <_free_r>
 800a05a:	bf00      	nop
 800a05c:	20000018 	.word	0x20000018

0800a060 <__ascii_mbtowc>:
 800a060:	b082      	sub	sp, #8
 800a062:	b901      	cbnz	r1, 800a066 <__ascii_mbtowc+0x6>
 800a064:	a901      	add	r1, sp, #4
 800a066:	b142      	cbz	r2, 800a07a <__ascii_mbtowc+0x1a>
 800a068:	b14b      	cbz	r3, 800a07e <__ascii_mbtowc+0x1e>
 800a06a:	7813      	ldrb	r3, [r2, #0]
 800a06c:	600b      	str	r3, [r1, #0]
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	1e10      	subs	r0, r2, #0
 800a072:	bf18      	it	ne
 800a074:	2001      	movne	r0, #1
 800a076:	b002      	add	sp, #8
 800a078:	4770      	bx	lr
 800a07a:	4610      	mov	r0, r2
 800a07c:	e7fb      	b.n	800a076 <__ascii_mbtowc+0x16>
 800a07e:	f06f 0001 	mvn.w	r0, #1
 800a082:	e7f8      	b.n	800a076 <__ascii_mbtowc+0x16>

0800a084 <_Balloc>:
 800a084:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	4605      	mov	r5, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	b17b      	cbz	r3, 800a0ae <_Balloc+0x2a>
 800a08e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800a090:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a094:	b9a0      	cbnz	r0, 800a0c0 <_Balloc+0x3c>
 800a096:	2101      	movs	r1, #1
 800a098:	fa01 f604 	lsl.w	r6, r1, r4
 800a09c:	1d72      	adds	r2, r6, #5
 800a09e:	0092      	lsls	r2, r2, #2
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f001 ffef 	bl	800c084 <_calloc_r>
 800a0a6:	b148      	cbz	r0, 800a0bc <_Balloc+0x38>
 800a0a8:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a0ac:	e00b      	b.n	800a0c6 <_Balloc+0x42>
 800a0ae:	2221      	movs	r2, #33	@ 0x21
 800a0b0:	2104      	movs	r1, #4
 800a0b2:	f001 ffe7 	bl	800c084 <_calloc_r>
 800a0b6:	6468      	str	r0, [r5, #68]	@ 0x44
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d1e8      	bne.n	800a08e <_Balloc+0xa>
 800a0bc:	2000      	movs	r0, #0
 800a0be:	bd70      	pop	{r4, r5, r6, pc}
 800a0c0:	6802      	ldr	r2, [r0, #0]
 800a0c2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0cc:	e7f7      	b.n	800a0be <_Balloc+0x3a>

0800a0ce <_Bfree>:
 800a0ce:	b131      	cbz	r1, 800a0de <_Bfree+0x10>
 800a0d0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a0d2:	684a      	ldr	r2, [r1, #4]
 800a0d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a0d8:	6008      	str	r0, [r1, #0]
 800a0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a0de:	4770      	bx	lr

0800a0e0 <__multadd>:
 800a0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e4:	690d      	ldr	r5, [r1, #16]
 800a0e6:	4607      	mov	r7, r0
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	461e      	mov	r6, r3
 800a0ec:	f101 0c14 	add.w	ip, r1, #20
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a0f6:	b299      	uxth	r1, r3
 800a0f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a0fc:	0c1e      	lsrs	r6, r3, #16
 800a0fe:	0c0b      	lsrs	r3, r1, #16
 800a100:	fb02 3306 	mla	r3, r2, r6, r3
 800a104:	b289      	uxth	r1, r1
 800a106:	3001      	adds	r0, #1
 800a108:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a10c:	4285      	cmp	r5, r0
 800a10e:	f84c 1b04 	str.w	r1, [ip], #4
 800a112:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a116:	dcec      	bgt.n	800a0f2 <__multadd+0x12>
 800a118:	b30e      	cbz	r6, 800a15e <__multadd+0x7e>
 800a11a:	68a3      	ldr	r3, [r4, #8]
 800a11c:	42ab      	cmp	r3, r5
 800a11e:	dc19      	bgt.n	800a154 <__multadd+0x74>
 800a120:	6861      	ldr	r1, [r4, #4]
 800a122:	4638      	mov	r0, r7
 800a124:	3101      	adds	r1, #1
 800a126:	f7ff ffad 	bl	800a084 <_Balloc>
 800a12a:	4680      	mov	r8, r0
 800a12c:	b928      	cbnz	r0, 800a13a <__multadd+0x5a>
 800a12e:	4602      	mov	r2, r0
 800a130:	4b0c      	ldr	r3, [pc, #48]	@ (800a164 <__multadd+0x84>)
 800a132:	480d      	ldr	r0, [pc, #52]	@ (800a168 <__multadd+0x88>)
 800a134:	21ba      	movs	r1, #186	@ 0xba
 800a136:	f001 ff87 	bl	800c048 <__assert_func>
 800a13a:	6922      	ldr	r2, [r4, #16]
 800a13c:	3202      	adds	r2, #2
 800a13e:	f104 010c 	add.w	r1, r4, #12
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	300c      	adds	r0, #12
 800a146:	f7fc f875 	bl	8006234 <memcpy>
 800a14a:	4621      	mov	r1, r4
 800a14c:	4638      	mov	r0, r7
 800a14e:	f7ff ffbe 	bl	800a0ce <_Bfree>
 800a152:	4644      	mov	r4, r8
 800a154:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a158:	3501      	adds	r5, #1
 800a15a:	615e      	str	r6, [r3, #20]
 800a15c:	6125      	str	r5, [r4, #16]
 800a15e:	4620      	mov	r0, r4
 800a160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a164:	0800d8eb 	.word	0x0800d8eb
 800a168:	0800d954 	.word	0x0800d954

0800a16c <__s2b>:
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a170:	460c      	mov	r4, r1
 800a172:	4615      	mov	r5, r2
 800a174:	461f      	mov	r7, r3
 800a176:	2209      	movs	r2, #9
 800a178:	3308      	adds	r3, #8
 800a17a:	4606      	mov	r6, r0
 800a17c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a180:	2100      	movs	r1, #0
 800a182:	2201      	movs	r2, #1
 800a184:	429a      	cmp	r2, r3
 800a186:	db09      	blt.n	800a19c <__s2b+0x30>
 800a188:	4630      	mov	r0, r6
 800a18a:	f7ff ff7b 	bl	800a084 <_Balloc>
 800a18e:	b940      	cbnz	r0, 800a1a2 <__s2b+0x36>
 800a190:	4602      	mov	r2, r0
 800a192:	4b19      	ldr	r3, [pc, #100]	@ (800a1f8 <__s2b+0x8c>)
 800a194:	4819      	ldr	r0, [pc, #100]	@ (800a1fc <__s2b+0x90>)
 800a196:	21d3      	movs	r1, #211	@ 0xd3
 800a198:	f001 ff56 	bl	800c048 <__assert_func>
 800a19c:	0052      	lsls	r2, r2, #1
 800a19e:	3101      	adds	r1, #1
 800a1a0:	e7f0      	b.n	800a184 <__s2b+0x18>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	6143      	str	r3, [r0, #20]
 800a1a6:	2d09      	cmp	r5, #9
 800a1a8:	f04f 0301 	mov.w	r3, #1
 800a1ac:	6103      	str	r3, [r0, #16]
 800a1ae:	dd16      	ble.n	800a1de <__s2b+0x72>
 800a1b0:	f104 0909 	add.w	r9, r4, #9
 800a1b4:	46c8      	mov	r8, r9
 800a1b6:	442c      	add	r4, r5
 800a1b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1bc:	4601      	mov	r1, r0
 800a1be:	3b30      	subs	r3, #48	@ 0x30
 800a1c0:	220a      	movs	r2, #10
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7ff ff8c 	bl	800a0e0 <__multadd>
 800a1c8:	45a0      	cmp	r8, r4
 800a1ca:	d1f5      	bne.n	800a1b8 <__s2b+0x4c>
 800a1cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a1d0:	444c      	add	r4, r9
 800a1d2:	1b2d      	subs	r5, r5, r4
 800a1d4:	1963      	adds	r3, r4, r5
 800a1d6:	42bb      	cmp	r3, r7
 800a1d8:	db04      	blt.n	800a1e4 <__s2b+0x78>
 800a1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1de:	340a      	adds	r4, #10
 800a1e0:	2509      	movs	r5, #9
 800a1e2:	e7f6      	b.n	800a1d2 <__s2b+0x66>
 800a1e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1e8:	4601      	mov	r1, r0
 800a1ea:	3b30      	subs	r3, #48	@ 0x30
 800a1ec:	220a      	movs	r2, #10
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f7ff ff76 	bl	800a0e0 <__multadd>
 800a1f4:	e7ee      	b.n	800a1d4 <__s2b+0x68>
 800a1f6:	bf00      	nop
 800a1f8:	0800d8eb 	.word	0x0800d8eb
 800a1fc:	0800d954 	.word	0x0800d954

0800a200 <__hi0bits>:
 800a200:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a204:	4603      	mov	r3, r0
 800a206:	bf36      	itet	cc
 800a208:	0403      	lslcc	r3, r0, #16
 800a20a:	2000      	movcs	r0, #0
 800a20c:	2010      	movcc	r0, #16
 800a20e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a212:	bf3c      	itt	cc
 800a214:	021b      	lslcc	r3, r3, #8
 800a216:	3008      	addcc	r0, #8
 800a218:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a21c:	bf3c      	itt	cc
 800a21e:	011b      	lslcc	r3, r3, #4
 800a220:	3004      	addcc	r0, #4
 800a222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a226:	bf3c      	itt	cc
 800a228:	009b      	lslcc	r3, r3, #2
 800a22a:	3002      	addcc	r0, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	db05      	blt.n	800a23c <__hi0bits+0x3c>
 800a230:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a234:	f100 0001 	add.w	r0, r0, #1
 800a238:	bf08      	it	eq
 800a23a:	2020      	moveq	r0, #32
 800a23c:	4770      	bx	lr

0800a23e <__lo0bits>:
 800a23e:	6803      	ldr	r3, [r0, #0]
 800a240:	4602      	mov	r2, r0
 800a242:	f013 0007 	ands.w	r0, r3, #7
 800a246:	d00b      	beq.n	800a260 <__lo0bits+0x22>
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d421      	bmi.n	800a290 <__lo0bits+0x52>
 800a24c:	0798      	lsls	r0, r3, #30
 800a24e:	bf49      	itett	mi
 800a250:	085b      	lsrmi	r3, r3, #1
 800a252:	089b      	lsrpl	r3, r3, #2
 800a254:	2001      	movmi	r0, #1
 800a256:	6013      	strmi	r3, [r2, #0]
 800a258:	bf5c      	itt	pl
 800a25a:	6013      	strpl	r3, [r2, #0]
 800a25c:	2002      	movpl	r0, #2
 800a25e:	4770      	bx	lr
 800a260:	b299      	uxth	r1, r3
 800a262:	b909      	cbnz	r1, 800a268 <__lo0bits+0x2a>
 800a264:	0c1b      	lsrs	r3, r3, #16
 800a266:	2010      	movs	r0, #16
 800a268:	b2d9      	uxtb	r1, r3
 800a26a:	b909      	cbnz	r1, 800a270 <__lo0bits+0x32>
 800a26c:	3008      	adds	r0, #8
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	0719      	lsls	r1, r3, #28
 800a272:	bf04      	itt	eq
 800a274:	091b      	lsreq	r3, r3, #4
 800a276:	3004      	addeq	r0, #4
 800a278:	0799      	lsls	r1, r3, #30
 800a27a:	bf04      	itt	eq
 800a27c:	089b      	lsreq	r3, r3, #2
 800a27e:	3002      	addeq	r0, #2
 800a280:	07d9      	lsls	r1, r3, #31
 800a282:	d403      	bmi.n	800a28c <__lo0bits+0x4e>
 800a284:	085b      	lsrs	r3, r3, #1
 800a286:	f100 0001 	add.w	r0, r0, #1
 800a28a:	d003      	beq.n	800a294 <__lo0bits+0x56>
 800a28c:	6013      	str	r3, [r2, #0]
 800a28e:	4770      	bx	lr
 800a290:	2000      	movs	r0, #0
 800a292:	4770      	bx	lr
 800a294:	2020      	movs	r0, #32
 800a296:	4770      	bx	lr

0800a298 <__i2b>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	2101      	movs	r1, #1
 800a29e:	f7ff fef1 	bl	800a084 <_Balloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <__i2b+0x1a>
 800a2a6:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <__i2b+0x24>)
 800a2a8:	4805      	ldr	r0, [pc, #20]	@ (800a2c0 <__i2b+0x28>)
 800a2aa:	f240 1145 	movw	r1, #325	@ 0x145
 800a2ae:	f001 fecb 	bl	800c048 <__assert_func>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	6144      	str	r4, [r0, #20]
 800a2b6:	6103      	str	r3, [r0, #16]
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800d8eb 	.word	0x0800d8eb
 800a2c0:	0800d954 	.word	0x0800d954

0800a2c4 <__multiply>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	690a      	ldr	r2, [r1, #16]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	bfa8      	it	ge
 800a2d2:	4623      	movge	r3, r4
 800a2d4:	460f      	mov	r7, r1
 800a2d6:	bfa4      	itt	ge
 800a2d8:	460c      	movge	r4, r1
 800a2da:	461f      	movge	r7, r3
 800a2dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a2e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a2e4:	68a3      	ldr	r3, [r4, #8]
 800a2e6:	6861      	ldr	r1, [r4, #4]
 800a2e8:	eb0a 0609 	add.w	r6, sl, r9
 800a2ec:	42b3      	cmp	r3, r6
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	bfb8      	it	lt
 800a2f2:	3101      	addlt	r1, #1
 800a2f4:	f7ff fec6 	bl	800a084 <_Balloc>
 800a2f8:	b930      	cbnz	r0, 800a308 <__multiply+0x44>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4b44      	ldr	r3, [pc, #272]	@ (800a410 <__multiply+0x14c>)
 800a2fe:	4845      	ldr	r0, [pc, #276]	@ (800a414 <__multiply+0x150>)
 800a300:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a304:	f001 fea0 	bl	800c048 <__assert_func>
 800a308:	f100 0514 	add.w	r5, r0, #20
 800a30c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a310:	462b      	mov	r3, r5
 800a312:	2200      	movs	r2, #0
 800a314:	4543      	cmp	r3, r8
 800a316:	d321      	bcc.n	800a35c <__multiply+0x98>
 800a318:	f107 0114 	add.w	r1, r7, #20
 800a31c:	f104 0214 	add.w	r2, r4, #20
 800a320:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a324:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a328:	9302      	str	r3, [sp, #8]
 800a32a:	1b13      	subs	r3, r2, r4
 800a32c:	3b15      	subs	r3, #21
 800a32e:	f023 0303 	bic.w	r3, r3, #3
 800a332:	3304      	adds	r3, #4
 800a334:	f104 0715 	add.w	r7, r4, #21
 800a338:	42ba      	cmp	r2, r7
 800a33a:	bf38      	it	cc
 800a33c:	2304      	movcc	r3, #4
 800a33e:	9301      	str	r3, [sp, #4]
 800a340:	9b02      	ldr	r3, [sp, #8]
 800a342:	9103      	str	r1, [sp, #12]
 800a344:	428b      	cmp	r3, r1
 800a346:	d80c      	bhi.n	800a362 <__multiply+0x9e>
 800a348:	2e00      	cmp	r6, #0
 800a34a:	dd03      	ble.n	800a354 <__multiply+0x90>
 800a34c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a350:	2b00      	cmp	r3, #0
 800a352:	d05b      	beq.n	800a40c <__multiply+0x148>
 800a354:	6106      	str	r6, [r0, #16]
 800a356:	b005      	add	sp, #20
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	f843 2b04 	str.w	r2, [r3], #4
 800a360:	e7d8      	b.n	800a314 <__multiply+0x50>
 800a362:	f8b1 a000 	ldrh.w	sl, [r1]
 800a366:	f1ba 0f00 	cmp.w	sl, #0
 800a36a:	d024      	beq.n	800a3b6 <__multiply+0xf2>
 800a36c:	f104 0e14 	add.w	lr, r4, #20
 800a370:	46a9      	mov	r9, r5
 800a372:	f04f 0c00 	mov.w	ip, #0
 800a376:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a37a:	f8d9 3000 	ldr.w	r3, [r9]
 800a37e:	fa1f fb87 	uxth.w	fp, r7
 800a382:	b29b      	uxth	r3, r3
 800a384:	fb0a 330b 	mla	r3, sl, fp, r3
 800a388:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a38c:	f8d9 7000 	ldr.w	r7, [r9]
 800a390:	4463      	add	r3, ip
 800a392:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a396:	fb0a c70b 	mla	r7, sl, fp, ip
 800a39a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3a4:	4572      	cmp	r2, lr
 800a3a6:	f849 3b04 	str.w	r3, [r9], #4
 800a3aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a3ae:	d8e2      	bhi.n	800a376 <__multiply+0xb2>
 800a3b0:	9b01      	ldr	r3, [sp, #4]
 800a3b2:	f845 c003 	str.w	ip, [r5, r3]
 800a3b6:	9b03      	ldr	r3, [sp, #12]
 800a3b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a3bc:	3104      	adds	r1, #4
 800a3be:	f1b9 0f00 	cmp.w	r9, #0
 800a3c2:	d021      	beq.n	800a408 <__multiply+0x144>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	f104 0c14 	add.w	ip, r4, #20
 800a3ca:	46ae      	mov	lr, r5
 800a3cc:	f04f 0a00 	mov.w	sl, #0
 800a3d0:	f8bc b000 	ldrh.w	fp, [ip]
 800a3d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a3d8:	fb09 770b 	mla	r7, r9, fp, r7
 800a3dc:	4457      	add	r7, sl
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a3e4:	f84e 3b04 	str.w	r3, [lr], #4
 800a3e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3f0:	f8be 3000 	ldrh.w	r3, [lr]
 800a3f4:	fb09 330a 	mla	r3, r9, sl, r3
 800a3f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a3fc:	4562      	cmp	r2, ip
 800a3fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a402:	d8e5      	bhi.n	800a3d0 <__multiply+0x10c>
 800a404:	9f01      	ldr	r7, [sp, #4]
 800a406:	51eb      	str	r3, [r5, r7]
 800a408:	3504      	adds	r5, #4
 800a40a:	e799      	b.n	800a340 <__multiply+0x7c>
 800a40c:	3e01      	subs	r6, #1
 800a40e:	e79b      	b.n	800a348 <__multiply+0x84>
 800a410:	0800d8eb 	.word	0x0800d8eb
 800a414:	0800d954 	.word	0x0800d954

0800a418 <__pow5mult>:
 800a418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a41c:	4615      	mov	r5, r2
 800a41e:	f012 0203 	ands.w	r2, r2, #3
 800a422:	4607      	mov	r7, r0
 800a424:	460e      	mov	r6, r1
 800a426:	d007      	beq.n	800a438 <__pow5mult+0x20>
 800a428:	4c1a      	ldr	r4, [pc, #104]	@ (800a494 <__pow5mult+0x7c>)
 800a42a:	3a01      	subs	r2, #1
 800a42c:	2300      	movs	r3, #0
 800a42e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a432:	f7ff fe55 	bl	800a0e0 <__multadd>
 800a436:	4606      	mov	r6, r0
 800a438:	10ad      	asrs	r5, r5, #2
 800a43a:	d027      	beq.n	800a48c <__pow5mult+0x74>
 800a43c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800a43e:	b944      	cbnz	r4, 800a452 <__pow5mult+0x3a>
 800a440:	f240 2171 	movw	r1, #625	@ 0x271
 800a444:	4638      	mov	r0, r7
 800a446:	f7ff ff27 	bl	800a298 <__i2b>
 800a44a:	2300      	movs	r3, #0
 800a44c:	6438      	str	r0, [r7, #64]	@ 0x40
 800a44e:	4604      	mov	r4, r0
 800a450:	6003      	str	r3, [r0, #0]
 800a452:	f04f 0900 	mov.w	r9, #0
 800a456:	07eb      	lsls	r3, r5, #31
 800a458:	d50a      	bpl.n	800a470 <__pow5mult+0x58>
 800a45a:	4631      	mov	r1, r6
 800a45c:	4622      	mov	r2, r4
 800a45e:	4638      	mov	r0, r7
 800a460:	f7ff ff30 	bl	800a2c4 <__multiply>
 800a464:	4631      	mov	r1, r6
 800a466:	4680      	mov	r8, r0
 800a468:	4638      	mov	r0, r7
 800a46a:	f7ff fe30 	bl	800a0ce <_Bfree>
 800a46e:	4646      	mov	r6, r8
 800a470:	106d      	asrs	r5, r5, #1
 800a472:	d00b      	beq.n	800a48c <__pow5mult+0x74>
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	b938      	cbnz	r0, 800a488 <__pow5mult+0x70>
 800a478:	4622      	mov	r2, r4
 800a47a:	4621      	mov	r1, r4
 800a47c:	4638      	mov	r0, r7
 800a47e:	f7ff ff21 	bl	800a2c4 <__multiply>
 800a482:	6020      	str	r0, [r4, #0]
 800a484:	f8c0 9000 	str.w	r9, [r0]
 800a488:	4604      	mov	r4, r0
 800a48a:	e7e4      	b.n	800a456 <__pow5mult+0x3e>
 800a48c:	4630      	mov	r0, r6
 800a48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a492:	bf00      	nop
 800a494:	0800d9b0 	.word	0x0800d9b0

0800a498 <__lshift>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	6849      	ldr	r1, [r1, #4]
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4a6:	68a3      	ldr	r3, [r4, #8]
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	4691      	mov	r9, r2
 800a4ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4b0:	f108 0601 	add.w	r6, r8, #1
 800a4b4:	42b3      	cmp	r3, r6
 800a4b6:	db0b      	blt.n	800a4d0 <__lshift+0x38>
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f7ff fde3 	bl	800a084 <_Balloc>
 800a4be:	4605      	mov	r5, r0
 800a4c0:	b948      	cbnz	r0, 800a4d6 <__lshift+0x3e>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	4b28      	ldr	r3, [pc, #160]	@ (800a568 <__lshift+0xd0>)
 800a4c6:	4829      	ldr	r0, [pc, #164]	@ (800a56c <__lshift+0xd4>)
 800a4c8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4cc:	f001 fdbc 	bl	800c048 <__assert_func>
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	e7ee      	b.n	800a4b4 <__lshift+0x1c>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f100 0114 	add.w	r1, r0, #20
 800a4dc:	f100 0210 	add.w	r2, r0, #16
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	4553      	cmp	r3, sl
 800a4e4:	db33      	blt.n	800a54e <__lshift+0xb6>
 800a4e6:	6920      	ldr	r0, [r4, #16]
 800a4e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4ec:	f104 0314 	add.w	r3, r4, #20
 800a4f0:	f019 091f 	ands.w	r9, r9, #31
 800a4f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4fc:	d02b      	beq.n	800a556 <__lshift+0xbe>
 800a4fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a502:	468a      	mov	sl, r1
 800a504:	2200      	movs	r2, #0
 800a506:	6818      	ldr	r0, [r3, #0]
 800a508:	fa00 f009 	lsl.w	r0, r0, r9
 800a50c:	4310      	orrs	r0, r2
 800a50e:	f84a 0b04 	str.w	r0, [sl], #4
 800a512:	f853 2b04 	ldr.w	r2, [r3], #4
 800a516:	459c      	cmp	ip, r3
 800a518:	fa22 f20e 	lsr.w	r2, r2, lr
 800a51c:	d8f3      	bhi.n	800a506 <__lshift+0x6e>
 800a51e:	ebac 0304 	sub.w	r3, ip, r4
 800a522:	3b15      	subs	r3, #21
 800a524:	f023 0303 	bic.w	r3, r3, #3
 800a528:	3304      	adds	r3, #4
 800a52a:	f104 0015 	add.w	r0, r4, #21
 800a52e:	4584      	cmp	ip, r0
 800a530:	bf38      	it	cc
 800a532:	2304      	movcc	r3, #4
 800a534:	50ca      	str	r2, [r1, r3]
 800a536:	b10a      	cbz	r2, 800a53c <__lshift+0xa4>
 800a538:	f108 0602 	add.w	r6, r8, #2
 800a53c:	3e01      	subs	r6, #1
 800a53e:	4638      	mov	r0, r7
 800a540:	612e      	str	r6, [r5, #16]
 800a542:	4621      	mov	r1, r4
 800a544:	f7ff fdc3 	bl	800a0ce <_Bfree>
 800a548:	4628      	mov	r0, r5
 800a54a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a552:	3301      	adds	r3, #1
 800a554:	e7c5      	b.n	800a4e2 <__lshift+0x4a>
 800a556:	3904      	subs	r1, #4
 800a558:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a560:	459c      	cmp	ip, r3
 800a562:	d8f9      	bhi.n	800a558 <__lshift+0xc0>
 800a564:	e7ea      	b.n	800a53c <__lshift+0xa4>
 800a566:	bf00      	nop
 800a568:	0800d8eb 	.word	0x0800d8eb
 800a56c:	0800d954 	.word	0x0800d954

0800a570 <__mcmp>:
 800a570:	690a      	ldr	r2, [r1, #16]
 800a572:	4603      	mov	r3, r0
 800a574:	6900      	ldr	r0, [r0, #16]
 800a576:	1a80      	subs	r0, r0, r2
 800a578:	b530      	push	{r4, r5, lr}
 800a57a:	d10e      	bne.n	800a59a <__mcmp+0x2a>
 800a57c:	3314      	adds	r3, #20
 800a57e:	3114      	adds	r1, #20
 800a580:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a584:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a588:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a58c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a590:	4295      	cmp	r5, r2
 800a592:	d003      	beq.n	800a59c <__mcmp+0x2c>
 800a594:	d205      	bcs.n	800a5a2 <__mcmp+0x32>
 800a596:	f04f 30ff 	mov.w	r0, #4294967295
 800a59a:	bd30      	pop	{r4, r5, pc}
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	d3f3      	bcc.n	800a588 <__mcmp+0x18>
 800a5a0:	e7fb      	b.n	800a59a <__mcmp+0x2a>
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7f9      	b.n	800a59a <__mcmp+0x2a>
	...

0800a5a8 <__mdiff>:
 800a5a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	4689      	mov	r9, r1
 800a5ae:	4606      	mov	r6, r0
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	4648      	mov	r0, r9
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	f7ff ffdb 	bl	800a570 <__mcmp>
 800a5ba:	1e05      	subs	r5, r0, #0
 800a5bc:	d112      	bne.n	800a5e4 <__mdiff+0x3c>
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	f7ff fd5f 	bl	800a084 <_Balloc>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__mdiff+0x2e>
 800a5ca:	4b3f      	ldr	r3, [pc, #252]	@ (800a6c8 <__mdiff+0x120>)
 800a5cc:	f240 2137 	movw	r1, #567	@ 0x237
 800a5d0:	483e      	ldr	r0, [pc, #248]	@ (800a6cc <__mdiff+0x124>)
 800a5d2:	f001 fd39 	bl	800c048 <__assert_func>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5dc:	4610      	mov	r0, r2
 800a5de:	b003      	add	sp, #12
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	bfbc      	itt	lt
 800a5e6:	464b      	movlt	r3, r9
 800a5e8:	46a1      	movlt	r9, r4
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5f0:	bfba      	itte	lt
 800a5f2:	461c      	movlt	r4, r3
 800a5f4:	2501      	movlt	r5, #1
 800a5f6:	2500      	movge	r5, #0
 800a5f8:	f7ff fd44 	bl	800a084 <_Balloc>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	b918      	cbnz	r0, 800a608 <__mdiff+0x60>
 800a600:	4b31      	ldr	r3, [pc, #196]	@ (800a6c8 <__mdiff+0x120>)
 800a602:	f240 2145 	movw	r1, #581	@ 0x245
 800a606:	e7e3      	b.n	800a5d0 <__mdiff+0x28>
 800a608:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a60c:	6926      	ldr	r6, [r4, #16]
 800a60e:	60c5      	str	r5, [r0, #12]
 800a610:	f109 0310 	add.w	r3, r9, #16
 800a614:	f109 0514 	add.w	r5, r9, #20
 800a618:	f104 0e14 	add.w	lr, r4, #20
 800a61c:	f100 0b14 	add.w	fp, r0, #20
 800a620:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a624:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a628:	9301      	str	r3, [sp, #4]
 800a62a:	46d9      	mov	r9, fp
 800a62c:	f04f 0c00 	mov.w	ip, #0
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a636:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	fa1f f38a 	uxth.w	r3, sl
 800a640:	4619      	mov	r1, r3
 800a642:	b283      	uxth	r3, r0
 800a644:	1acb      	subs	r3, r1, r3
 800a646:	0c00      	lsrs	r0, r0, #16
 800a648:	4463      	add	r3, ip
 800a64a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a64e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a652:	b29b      	uxth	r3, r3
 800a654:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a658:	4576      	cmp	r6, lr
 800a65a:	f849 3b04 	str.w	r3, [r9], #4
 800a65e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a662:	d8e5      	bhi.n	800a630 <__mdiff+0x88>
 800a664:	1b33      	subs	r3, r6, r4
 800a666:	3b15      	subs	r3, #21
 800a668:	f023 0303 	bic.w	r3, r3, #3
 800a66c:	3415      	adds	r4, #21
 800a66e:	3304      	adds	r3, #4
 800a670:	42a6      	cmp	r6, r4
 800a672:	bf38      	it	cc
 800a674:	2304      	movcc	r3, #4
 800a676:	441d      	add	r5, r3
 800a678:	445b      	add	r3, fp
 800a67a:	461e      	mov	r6, r3
 800a67c:	462c      	mov	r4, r5
 800a67e:	4544      	cmp	r4, r8
 800a680:	d30e      	bcc.n	800a6a0 <__mdiff+0xf8>
 800a682:	f108 0103 	add.w	r1, r8, #3
 800a686:	1b49      	subs	r1, r1, r5
 800a688:	f021 0103 	bic.w	r1, r1, #3
 800a68c:	3d03      	subs	r5, #3
 800a68e:	45a8      	cmp	r8, r5
 800a690:	bf38      	it	cc
 800a692:	2100      	movcc	r1, #0
 800a694:	440b      	add	r3, r1
 800a696:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a69a:	b191      	cbz	r1, 800a6c2 <__mdiff+0x11a>
 800a69c:	6117      	str	r7, [r2, #16]
 800a69e:	e79d      	b.n	800a5dc <__mdiff+0x34>
 800a6a0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a6a4:	46e6      	mov	lr, ip
 800a6a6:	0c08      	lsrs	r0, r1, #16
 800a6a8:	fa1c fc81 	uxtah	ip, ip, r1
 800a6ac:	4471      	add	r1, lr
 800a6ae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a6b2:	b289      	uxth	r1, r1
 800a6b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6b8:	f846 1b04 	str.w	r1, [r6], #4
 800a6bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6c0:	e7dd      	b.n	800a67e <__mdiff+0xd6>
 800a6c2:	3f01      	subs	r7, #1
 800a6c4:	e7e7      	b.n	800a696 <__mdiff+0xee>
 800a6c6:	bf00      	nop
 800a6c8:	0800d8eb 	.word	0x0800d8eb
 800a6cc:	0800d954 	.word	0x0800d954

0800a6d0 <__ulp>:
 800a6d0:	b082      	sub	sp, #8
 800a6d2:	ed8d 0b00 	vstr	d0, [sp]
 800a6d6:	9a01      	ldr	r2, [sp, #4]
 800a6d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a718 <__ulp+0x48>)
 800a6da:	4013      	ands	r3, r2
 800a6dc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	dc08      	bgt.n	800a6f6 <__ulp+0x26>
 800a6e4:	425b      	negs	r3, r3
 800a6e6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a6ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a6ee:	da04      	bge.n	800a6fa <__ulp+0x2a>
 800a6f0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a6f4:	4113      	asrs	r3, r2
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	e008      	b.n	800a70c <__ulp+0x3c>
 800a6fa:	f1a2 0314 	sub.w	r3, r2, #20
 800a6fe:	2b1e      	cmp	r3, #30
 800a700:	bfda      	itte	le
 800a702:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a706:	40da      	lsrle	r2, r3
 800a708:	2201      	movgt	r2, #1
 800a70a:	2300      	movs	r3, #0
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	ec41 0b10 	vmov	d0, r0, r1
 800a714:	b002      	add	sp, #8
 800a716:	4770      	bx	lr
 800a718:	7ff00000 	.word	0x7ff00000

0800a71c <__b2d>:
 800a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	6906      	ldr	r6, [r0, #16]
 800a722:	f100 0814 	add.w	r8, r0, #20
 800a726:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a72a:	1f37      	subs	r7, r6, #4
 800a72c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a730:	4610      	mov	r0, r2
 800a732:	f7ff fd65 	bl	800a200 <__hi0bits>
 800a736:	f1c0 0320 	rsb	r3, r0, #32
 800a73a:	280a      	cmp	r0, #10
 800a73c:	600b      	str	r3, [r1, #0]
 800a73e:	491b      	ldr	r1, [pc, #108]	@ (800a7ac <__b2d+0x90>)
 800a740:	dc15      	bgt.n	800a76e <__b2d+0x52>
 800a742:	f1c0 0c0b 	rsb	ip, r0, #11
 800a746:	fa22 f30c 	lsr.w	r3, r2, ip
 800a74a:	45b8      	cmp	r8, r7
 800a74c:	ea43 0501 	orr.w	r5, r3, r1
 800a750:	bf34      	ite	cc
 800a752:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a756:	2300      	movcs	r3, #0
 800a758:	3015      	adds	r0, #21
 800a75a:	fa02 f000 	lsl.w	r0, r2, r0
 800a75e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a762:	4303      	orrs	r3, r0
 800a764:	461c      	mov	r4, r3
 800a766:	ec45 4b10 	vmov	d0, r4, r5
 800a76a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a76e:	45b8      	cmp	r8, r7
 800a770:	bf3a      	itte	cc
 800a772:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a776:	f1a6 0708 	subcc.w	r7, r6, #8
 800a77a:	2300      	movcs	r3, #0
 800a77c:	380b      	subs	r0, #11
 800a77e:	d012      	beq.n	800a7a6 <__b2d+0x8a>
 800a780:	f1c0 0120 	rsb	r1, r0, #32
 800a784:	fa23 f401 	lsr.w	r4, r3, r1
 800a788:	4082      	lsls	r2, r0
 800a78a:	4322      	orrs	r2, r4
 800a78c:	4547      	cmp	r7, r8
 800a78e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a792:	bf8c      	ite	hi
 800a794:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a798:	2200      	movls	r2, #0
 800a79a:	4083      	lsls	r3, r0
 800a79c:	40ca      	lsrs	r2, r1
 800a79e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	e7de      	b.n	800a764 <__b2d+0x48>
 800a7a6:	ea42 0501 	orr.w	r5, r2, r1
 800a7aa:	e7db      	b.n	800a764 <__b2d+0x48>
 800a7ac:	3ff00000 	.word	0x3ff00000

0800a7b0 <__d2b>:
 800a7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7b4:	460f      	mov	r7, r1
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	ec59 8b10 	vmov	r8, r9, d0
 800a7bc:	4616      	mov	r6, r2
 800a7be:	f7ff fc61 	bl	800a084 <_Balloc>
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	b930      	cbnz	r0, 800a7d4 <__d2b+0x24>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	4b23      	ldr	r3, [pc, #140]	@ (800a858 <__d2b+0xa8>)
 800a7ca:	4824      	ldr	r0, [pc, #144]	@ (800a85c <__d2b+0xac>)
 800a7cc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a7d0:	f001 fc3a 	bl	800c048 <__assert_func>
 800a7d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a7d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a7dc:	b10d      	cbz	r5, 800a7e2 <__d2b+0x32>
 800a7de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	f1b8 0300 	subs.w	r3, r8, #0
 800a7e8:	d023      	beq.n	800a832 <__d2b+0x82>
 800a7ea:	4668      	mov	r0, sp
 800a7ec:	9300      	str	r3, [sp, #0]
 800a7ee:	f7ff fd26 	bl	800a23e <__lo0bits>
 800a7f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7f6:	b1d0      	cbz	r0, 800a82e <__d2b+0x7e>
 800a7f8:	f1c0 0320 	rsb	r3, r0, #32
 800a7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a800:	430b      	orrs	r3, r1
 800a802:	40c2      	lsrs	r2, r0
 800a804:	6163      	str	r3, [r4, #20]
 800a806:	9201      	str	r2, [sp, #4]
 800a808:	9b01      	ldr	r3, [sp, #4]
 800a80a:	61a3      	str	r3, [r4, #24]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	bf0c      	ite	eq
 800a810:	2201      	moveq	r2, #1
 800a812:	2202      	movne	r2, #2
 800a814:	6122      	str	r2, [r4, #16]
 800a816:	b1a5      	cbz	r5, 800a842 <__d2b+0x92>
 800a818:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a81c:	4405      	add	r5, r0
 800a81e:	603d      	str	r5, [r7, #0]
 800a820:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a824:	6030      	str	r0, [r6, #0]
 800a826:	4620      	mov	r0, r4
 800a828:	b003      	add	sp, #12
 800a82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a82e:	6161      	str	r1, [r4, #20]
 800a830:	e7ea      	b.n	800a808 <__d2b+0x58>
 800a832:	a801      	add	r0, sp, #4
 800a834:	f7ff fd03 	bl	800a23e <__lo0bits>
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	6163      	str	r3, [r4, #20]
 800a83c:	3020      	adds	r0, #32
 800a83e:	2201      	movs	r2, #1
 800a840:	e7e8      	b.n	800a814 <__d2b+0x64>
 800a842:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a846:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a84a:	6038      	str	r0, [r7, #0]
 800a84c:	6918      	ldr	r0, [r3, #16]
 800a84e:	f7ff fcd7 	bl	800a200 <__hi0bits>
 800a852:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a856:	e7e5      	b.n	800a824 <__d2b+0x74>
 800a858:	0800d8eb 	.word	0x0800d8eb
 800a85c:	0800d954 	.word	0x0800d954

0800a860 <__ratio>:
 800a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a864:	b085      	sub	sp, #20
 800a866:	e9cd 1000 	strd	r1, r0, [sp]
 800a86a:	a902      	add	r1, sp, #8
 800a86c:	f7ff ff56 	bl	800a71c <__b2d>
 800a870:	9800      	ldr	r0, [sp, #0]
 800a872:	a903      	add	r1, sp, #12
 800a874:	ec55 4b10 	vmov	r4, r5, d0
 800a878:	f7ff ff50 	bl	800a71c <__b2d>
 800a87c:	9b01      	ldr	r3, [sp, #4]
 800a87e:	6919      	ldr	r1, [r3, #16]
 800a880:	9b00      	ldr	r3, [sp, #0]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	1ac9      	subs	r1, r1, r3
 800a886:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a88a:	1a9b      	subs	r3, r3, r2
 800a88c:	ec5b ab10 	vmov	sl, fp, d0
 800a890:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a894:	2b00      	cmp	r3, #0
 800a896:	bfce      	itee	gt
 800a898:	462a      	movgt	r2, r5
 800a89a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a89e:	465a      	movle	r2, fp
 800a8a0:	462f      	mov	r7, r5
 800a8a2:	46d9      	mov	r9, fp
 800a8a4:	bfcc      	ite	gt
 800a8a6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8aa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a8ae:	464b      	mov	r3, r9
 800a8b0:	4652      	mov	r2, sl
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	f7f5 ffd1 	bl	800085c <__aeabi_ddiv>
 800a8ba:	ec41 0b10 	vmov	d0, r0, r1
 800a8be:	b005      	add	sp, #20
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8c4 <__copybits>:
 800a8c4:	3901      	subs	r1, #1
 800a8c6:	b570      	push	{r4, r5, r6, lr}
 800a8c8:	1149      	asrs	r1, r1, #5
 800a8ca:	6914      	ldr	r4, [r2, #16]
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	f102 0314 	add.w	r3, r2, #20
 800a8d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a8d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a8da:	1f05      	subs	r5, r0, #4
 800a8dc:	42a3      	cmp	r3, r4
 800a8de:	d30c      	bcc.n	800a8fa <__copybits+0x36>
 800a8e0:	1aa3      	subs	r3, r4, r2
 800a8e2:	3b11      	subs	r3, #17
 800a8e4:	f023 0303 	bic.w	r3, r3, #3
 800a8e8:	3211      	adds	r2, #17
 800a8ea:	42a2      	cmp	r2, r4
 800a8ec:	bf88      	it	hi
 800a8ee:	2300      	movhi	r3, #0
 800a8f0:	4418      	add	r0, r3
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4288      	cmp	r0, r1
 800a8f6:	d305      	bcc.n	800a904 <__copybits+0x40>
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	f853 6b04 	ldr.w	r6, [r3], #4
 800a8fe:	f845 6f04 	str.w	r6, [r5, #4]!
 800a902:	e7eb      	b.n	800a8dc <__copybits+0x18>
 800a904:	f840 3b04 	str.w	r3, [r0], #4
 800a908:	e7f4      	b.n	800a8f4 <__copybits+0x30>

0800a90a <__any_on>:
 800a90a:	f100 0214 	add.w	r2, r0, #20
 800a90e:	6900      	ldr	r0, [r0, #16]
 800a910:	114b      	asrs	r3, r1, #5
 800a912:	4298      	cmp	r0, r3
 800a914:	b510      	push	{r4, lr}
 800a916:	db11      	blt.n	800a93c <__any_on+0x32>
 800a918:	dd0a      	ble.n	800a930 <__any_on+0x26>
 800a91a:	f011 011f 	ands.w	r1, r1, #31
 800a91e:	d007      	beq.n	800a930 <__any_on+0x26>
 800a920:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a924:	fa24 f001 	lsr.w	r0, r4, r1
 800a928:	fa00 f101 	lsl.w	r1, r0, r1
 800a92c:	428c      	cmp	r4, r1
 800a92e:	d10b      	bne.n	800a948 <__any_on+0x3e>
 800a930:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a934:	4293      	cmp	r3, r2
 800a936:	d803      	bhi.n	800a940 <__any_on+0x36>
 800a938:	2000      	movs	r0, #0
 800a93a:	bd10      	pop	{r4, pc}
 800a93c:	4603      	mov	r3, r0
 800a93e:	e7f7      	b.n	800a930 <__any_on+0x26>
 800a940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a944:	2900      	cmp	r1, #0
 800a946:	d0f5      	beq.n	800a934 <__any_on+0x2a>
 800a948:	2001      	movs	r0, #1
 800a94a:	e7f6      	b.n	800a93a <__any_on+0x30>

0800a94c <realloc>:
 800a94c:	4b02      	ldr	r3, [pc, #8]	@ (800a958 <realloc+0xc>)
 800a94e:	460a      	mov	r2, r1
 800a950:	4601      	mov	r1, r0
 800a952:	6818      	ldr	r0, [r3, #0]
 800a954:	f000 b802 	b.w	800a95c <_realloc_r>
 800a958:	20000018 	.word	0x20000018

0800a95c <_realloc_r>:
 800a95c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a960:	4682      	mov	sl, r0
 800a962:	4693      	mov	fp, r2
 800a964:	460c      	mov	r4, r1
 800a966:	b929      	cbnz	r1, 800a974 <_realloc_r+0x18>
 800a968:	4611      	mov	r1, r2
 800a96a:	b003      	add	sp, #12
 800a96c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	f7fb bd94 	b.w	800649c <_malloc_r>
 800a974:	f7fb ffcc 	bl	8006910 <__malloc_lock>
 800a978:	f10b 080b 	add.w	r8, fp, #11
 800a97c:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a980:	f1b8 0f16 	cmp.w	r8, #22
 800a984:	f1a4 0908 	sub.w	r9, r4, #8
 800a988:	f025 0603 	bic.w	r6, r5, #3
 800a98c:	d908      	bls.n	800a9a0 <_realloc_r+0x44>
 800a98e:	f038 0807 	bics.w	r8, r8, #7
 800a992:	d507      	bpl.n	800a9a4 <_realloc_r+0x48>
 800a994:	230c      	movs	r3, #12
 800a996:	f8ca 3000 	str.w	r3, [sl]
 800a99a:	f04f 0b00 	mov.w	fp, #0
 800a99e:	e032      	b.n	800aa06 <_realloc_r+0xaa>
 800a9a0:	f04f 0810 	mov.w	r8, #16
 800a9a4:	45c3      	cmp	fp, r8
 800a9a6:	d8f5      	bhi.n	800a994 <_realloc_r+0x38>
 800a9a8:	4546      	cmp	r6, r8
 800a9aa:	f280 8174 	bge.w	800ac96 <_realloc_r+0x33a>
 800a9ae:	4b9e      	ldr	r3, [pc, #632]	@ (800ac28 <_realloc_r+0x2cc>)
 800a9b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800a9b4:	eb09 0106 	add.w	r1, r9, r6
 800a9b8:	458c      	cmp	ip, r1
 800a9ba:	6848      	ldr	r0, [r1, #4]
 800a9bc:	d005      	beq.n	800a9ca <_realloc_r+0x6e>
 800a9be:	f020 0201 	bic.w	r2, r0, #1
 800a9c2:	440a      	add	r2, r1
 800a9c4:	6852      	ldr	r2, [r2, #4]
 800a9c6:	07d7      	lsls	r7, r2, #31
 800a9c8:	d449      	bmi.n	800aa5e <_realloc_r+0x102>
 800a9ca:	f020 0003 	bic.w	r0, r0, #3
 800a9ce:	458c      	cmp	ip, r1
 800a9d0:	eb06 0700 	add.w	r7, r6, r0
 800a9d4:	d11b      	bne.n	800aa0e <_realloc_r+0xb2>
 800a9d6:	f108 0210 	add.w	r2, r8, #16
 800a9da:	42ba      	cmp	r2, r7
 800a9dc:	dc41      	bgt.n	800aa62 <_realloc_r+0x106>
 800a9de:	eb09 0208 	add.w	r2, r9, r8
 800a9e2:	eba7 0708 	sub.w	r7, r7, r8
 800a9e6:	f047 0701 	orr.w	r7, r7, #1
 800a9ea:	609a      	str	r2, [r3, #8]
 800a9ec:	6057      	str	r7, [r2, #4]
 800a9ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	ea43 0308 	orr.w	r3, r3, r8
 800a9fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9fe:	4650      	mov	r0, sl
 800aa00:	f7fb ff8c 	bl	800691c <__malloc_unlock>
 800aa04:	46a3      	mov	fp, r4
 800aa06:	4658      	mov	r0, fp
 800aa08:	b003      	add	sp, #12
 800aa0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa0e:	45b8      	cmp	r8, r7
 800aa10:	dc27      	bgt.n	800aa62 <_realloc_r+0x106>
 800aa12:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800aa16:	60d3      	str	r3, [r2, #12]
 800aa18:	609a      	str	r2, [r3, #8]
 800aa1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800aa1e:	eba7 0008 	sub.w	r0, r7, r8
 800aa22:	280f      	cmp	r0, #15
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	eb09 0207 	add.w	r2, r9, r7
 800aa2c:	f240 8135 	bls.w	800ac9a <_realloc_r+0x33e>
 800aa30:	eb09 0108 	add.w	r1, r9, r8
 800aa34:	ea48 0303 	orr.w	r3, r8, r3
 800aa38:	f040 0001 	orr.w	r0, r0, #1
 800aa3c:	f8c9 3004 	str.w	r3, [r9, #4]
 800aa40:	6048      	str	r0, [r1, #4]
 800aa42:	6853      	ldr	r3, [r2, #4]
 800aa44:	f043 0301 	orr.w	r3, r3, #1
 800aa48:	6053      	str	r3, [r2, #4]
 800aa4a:	3108      	adds	r1, #8
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	f7fb fc65 	bl	800631c <_free_r>
 800aa52:	4650      	mov	r0, sl
 800aa54:	f7fb ff62 	bl	800691c <__malloc_unlock>
 800aa58:	f109 0b08 	add.w	fp, r9, #8
 800aa5c:	e7d3      	b.n	800aa06 <_realloc_r+0xaa>
 800aa5e:	2000      	movs	r0, #0
 800aa60:	4601      	mov	r1, r0
 800aa62:	07ea      	lsls	r2, r5, #31
 800aa64:	f100 80c7 	bmi.w	800abf6 <_realloc_r+0x29a>
 800aa68:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800aa6c:	eba9 0505 	sub.w	r5, r9, r5
 800aa70:	686a      	ldr	r2, [r5, #4]
 800aa72:	f022 0203 	bic.w	r2, r2, #3
 800aa76:	4432      	add	r2, r6
 800aa78:	9201      	str	r2, [sp, #4]
 800aa7a:	2900      	cmp	r1, #0
 800aa7c:	f000 8086 	beq.w	800ab8c <_realloc_r+0x230>
 800aa80:	458c      	cmp	ip, r1
 800aa82:	eb00 0702 	add.w	r7, r0, r2
 800aa86:	d149      	bne.n	800ab1c <_realloc_r+0x1c0>
 800aa88:	f108 0210 	add.w	r2, r8, #16
 800aa8c:	42ba      	cmp	r2, r7
 800aa8e:	dc7d      	bgt.n	800ab8c <_realloc_r+0x230>
 800aa90:	46ab      	mov	fp, r5
 800aa92:	68ea      	ldr	r2, [r5, #12]
 800aa94:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800aa98:	60ca      	str	r2, [r1, #12]
 800aa9a:	6091      	str	r1, [r2, #8]
 800aa9c:	1f32      	subs	r2, r6, #4
 800aa9e:	2a24      	cmp	r2, #36	@ 0x24
 800aaa0:	d836      	bhi.n	800ab10 <_realloc_r+0x1b4>
 800aaa2:	2a13      	cmp	r2, #19
 800aaa4:	d932      	bls.n	800ab0c <_realloc_r+0x1b0>
 800aaa6:	6821      	ldr	r1, [r4, #0]
 800aaa8:	60a9      	str	r1, [r5, #8]
 800aaaa:	6861      	ldr	r1, [r4, #4]
 800aaac:	60e9      	str	r1, [r5, #12]
 800aaae:	2a1b      	cmp	r2, #27
 800aab0:	d81a      	bhi.n	800aae8 <_realloc_r+0x18c>
 800aab2:	3408      	adds	r4, #8
 800aab4:	f105 0210 	add.w	r2, r5, #16
 800aab8:	6821      	ldr	r1, [r4, #0]
 800aaba:	6011      	str	r1, [r2, #0]
 800aabc:	6861      	ldr	r1, [r4, #4]
 800aabe:	6051      	str	r1, [r2, #4]
 800aac0:	68a1      	ldr	r1, [r4, #8]
 800aac2:	6091      	str	r1, [r2, #8]
 800aac4:	eb05 0208 	add.w	r2, r5, r8
 800aac8:	eba7 0708 	sub.w	r7, r7, r8
 800aacc:	f047 0701 	orr.w	r7, r7, #1
 800aad0:	609a      	str	r2, [r3, #8]
 800aad2:	6057      	str	r7, [r2, #4]
 800aad4:	686b      	ldr	r3, [r5, #4]
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	ea43 0308 	orr.w	r3, r3, r8
 800aade:	606b      	str	r3, [r5, #4]
 800aae0:	4650      	mov	r0, sl
 800aae2:	f7fb ff1b 	bl	800691c <__malloc_unlock>
 800aae6:	e78e      	b.n	800aa06 <_realloc_r+0xaa>
 800aae8:	68a1      	ldr	r1, [r4, #8]
 800aaea:	6129      	str	r1, [r5, #16]
 800aaec:	68e1      	ldr	r1, [r4, #12]
 800aaee:	6169      	str	r1, [r5, #20]
 800aaf0:	2a24      	cmp	r2, #36	@ 0x24
 800aaf2:	bf01      	itttt	eq
 800aaf4:	6922      	ldreq	r2, [r4, #16]
 800aaf6:	61aa      	streq	r2, [r5, #24]
 800aaf8:	6961      	ldreq	r1, [r4, #20]
 800aafa:	61e9      	streq	r1, [r5, #28]
 800aafc:	bf19      	ittee	ne
 800aafe:	3410      	addne	r4, #16
 800ab00:	f105 0218 	addne.w	r2, r5, #24
 800ab04:	f105 0220 	addeq.w	r2, r5, #32
 800ab08:	3418      	addeq	r4, #24
 800ab0a:	e7d5      	b.n	800aab8 <_realloc_r+0x15c>
 800ab0c:	465a      	mov	r2, fp
 800ab0e:	e7d3      	b.n	800aab8 <_realloc_r+0x15c>
 800ab10:	4621      	mov	r1, r4
 800ab12:	4658      	mov	r0, fp
 800ab14:	f001 fa64 	bl	800bfe0 <memmove>
 800ab18:	4b43      	ldr	r3, [pc, #268]	@ (800ac28 <_realloc_r+0x2cc>)
 800ab1a:	e7d3      	b.n	800aac4 <_realloc_r+0x168>
 800ab1c:	45b8      	cmp	r8, r7
 800ab1e:	dc35      	bgt.n	800ab8c <_realloc_r+0x230>
 800ab20:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800ab24:	4628      	mov	r0, r5
 800ab26:	60d3      	str	r3, [r2, #12]
 800ab28:	609a      	str	r2, [r3, #8]
 800ab2a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ab2e:	68eb      	ldr	r3, [r5, #12]
 800ab30:	60d3      	str	r3, [r2, #12]
 800ab32:	609a      	str	r2, [r3, #8]
 800ab34:	1f32      	subs	r2, r6, #4
 800ab36:	2a24      	cmp	r2, #36	@ 0x24
 800ab38:	d824      	bhi.n	800ab84 <_realloc_r+0x228>
 800ab3a:	2a13      	cmp	r2, #19
 800ab3c:	d908      	bls.n	800ab50 <_realloc_r+0x1f4>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	60ab      	str	r3, [r5, #8]
 800ab42:	6863      	ldr	r3, [r4, #4]
 800ab44:	60eb      	str	r3, [r5, #12]
 800ab46:	2a1b      	cmp	r2, #27
 800ab48:	d80a      	bhi.n	800ab60 <_realloc_r+0x204>
 800ab4a:	3408      	adds	r4, #8
 800ab4c:	f105 0010 	add.w	r0, r5, #16
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	6003      	str	r3, [r0, #0]
 800ab54:	6863      	ldr	r3, [r4, #4]
 800ab56:	6043      	str	r3, [r0, #4]
 800ab58:	68a3      	ldr	r3, [r4, #8]
 800ab5a:	6083      	str	r3, [r0, #8]
 800ab5c:	46a9      	mov	r9, r5
 800ab5e:	e75c      	b.n	800aa1a <_realloc_r+0xbe>
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	612b      	str	r3, [r5, #16]
 800ab64:	68e3      	ldr	r3, [r4, #12]
 800ab66:	616b      	str	r3, [r5, #20]
 800ab68:	2a24      	cmp	r2, #36	@ 0x24
 800ab6a:	bf01      	itttt	eq
 800ab6c:	6923      	ldreq	r3, [r4, #16]
 800ab6e:	61ab      	streq	r3, [r5, #24]
 800ab70:	6963      	ldreq	r3, [r4, #20]
 800ab72:	61eb      	streq	r3, [r5, #28]
 800ab74:	bf19      	ittee	ne
 800ab76:	3410      	addne	r4, #16
 800ab78:	f105 0018 	addne.w	r0, r5, #24
 800ab7c:	f105 0020 	addeq.w	r0, r5, #32
 800ab80:	3418      	addeq	r4, #24
 800ab82:	e7e5      	b.n	800ab50 <_realloc_r+0x1f4>
 800ab84:	4621      	mov	r1, r4
 800ab86:	f001 fa2b 	bl	800bfe0 <memmove>
 800ab8a:	e7e7      	b.n	800ab5c <_realloc_r+0x200>
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	4598      	cmp	r8, r3
 800ab90:	dc31      	bgt.n	800abf6 <_realloc_r+0x29a>
 800ab92:	4628      	mov	r0, r5
 800ab94:	68eb      	ldr	r3, [r5, #12]
 800ab96:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ab9a:	60d3      	str	r3, [r2, #12]
 800ab9c:	609a      	str	r2, [r3, #8]
 800ab9e:	1f32      	subs	r2, r6, #4
 800aba0:	2a24      	cmp	r2, #36	@ 0x24
 800aba2:	d824      	bhi.n	800abee <_realloc_r+0x292>
 800aba4:	2a13      	cmp	r2, #19
 800aba6:	d908      	bls.n	800abba <_realloc_r+0x25e>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	60ab      	str	r3, [r5, #8]
 800abac:	6863      	ldr	r3, [r4, #4]
 800abae:	60eb      	str	r3, [r5, #12]
 800abb0:	2a1b      	cmp	r2, #27
 800abb2:	d80a      	bhi.n	800abca <_realloc_r+0x26e>
 800abb4:	3408      	adds	r4, #8
 800abb6:	f105 0010 	add.w	r0, r5, #16
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	6863      	ldr	r3, [r4, #4]
 800abc0:	6043      	str	r3, [r0, #4]
 800abc2:	68a3      	ldr	r3, [r4, #8]
 800abc4:	6083      	str	r3, [r0, #8]
 800abc6:	9f01      	ldr	r7, [sp, #4]
 800abc8:	e7c8      	b.n	800ab5c <_realloc_r+0x200>
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	612b      	str	r3, [r5, #16]
 800abce:	68e3      	ldr	r3, [r4, #12]
 800abd0:	616b      	str	r3, [r5, #20]
 800abd2:	2a24      	cmp	r2, #36	@ 0x24
 800abd4:	bf01      	itttt	eq
 800abd6:	6923      	ldreq	r3, [r4, #16]
 800abd8:	61ab      	streq	r3, [r5, #24]
 800abda:	6963      	ldreq	r3, [r4, #20]
 800abdc:	61eb      	streq	r3, [r5, #28]
 800abde:	bf19      	ittee	ne
 800abe0:	3410      	addne	r4, #16
 800abe2:	f105 0018 	addne.w	r0, r5, #24
 800abe6:	f105 0020 	addeq.w	r0, r5, #32
 800abea:	3418      	addeq	r4, #24
 800abec:	e7e5      	b.n	800abba <_realloc_r+0x25e>
 800abee:	4621      	mov	r1, r4
 800abf0:	f001 f9f6 	bl	800bfe0 <memmove>
 800abf4:	e7e7      	b.n	800abc6 <_realloc_r+0x26a>
 800abf6:	4659      	mov	r1, fp
 800abf8:	4650      	mov	r0, sl
 800abfa:	f7fb fc4f 	bl	800649c <_malloc_r>
 800abfe:	4683      	mov	fp, r0
 800ac00:	b918      	cbnz	r0, 800ac0a <_realloc_r+0x2ae>
 800ac02:	4650      	mov	r0, sl
 800ac04:	f7fb fe8a 	bl	800691c <__malloc_unlock>
 800ac08:	e6c7      	b.n	800a99a <_realloc_r+0x3e>
 800ac0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ac0e:	f023 0301 	bic.w	r3, r3, #1
 800ac12:	444b      	add	r3, r9
 800ac14:	f1a0 0208 	sub.w	r2, r0, #8
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d107      	bne.n	800ac2c <_realloc_r+0x2d0>
 800ac1c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ac20:	f027 0703 	bic.w	r7, r7, #3
 800ac24:	4437      	add	r7, r6
 800ac26:	e6f8      	b.n	800aa1a <_realloc_r+0xbe>
 800ac28:	2000014c 	.word	0x2000014c
 800ac2c:	1f32      	subs	r2, r6, #4
 800ac2e:	2a24      	cmp	r2, #36	@ 0x24
 800ac30:	d82d      	bhi.n	800ac8e <_realloc_r+0x332>
 800ac32:	2a13      	cmp	r2, #19
 800ac34:	d928      	bls.n	800ac88 <_realloc_r+0x32c>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	6003      	str	r3, [r0, #0]
 800ac3a:	6863      	ldr	r3, [r4, #4]
 800ac3c:	6043      	str	r3, [r0, #4]
 800ac3e:	2a1b      	cmp	r2, #27
 800ac40:	d80e      	bhi.n	800ac60 <_realloc_r+0x304>
 800ac42:	f104 0208 	add.w	r2, r4, #8
 800ac46:	f100 0308 	add.w	r3, r0, #8
 800ac4a:	6811      	ldr	r1, [r2, #0]
 800ac4c:	6019      	str	r1, [r3, #0]
 800ac4e:	6851      	ldr	r1, [r2, #4]
 800ac50:	6059      	str	r1, [r3, #4]
 800ac52:	6892      	ldr	r2, [r2, #8]
 800ac54:	609a      	str	r2, [r3, #8]
 800ac56:	4621      	mov	r1, r4
 800ac58:	4650      	mov	r0, sl
 800ac5a:	f7fb fb5f 	bl	800631c <_free_r>
 800ac5e:	e73f      	b.n	800aae0 <_realloc_r+0x184>
 800ac60:	68a3      	ldr	r3, [r4, #8]
 800ac62:	6083      	str	r3, [r0, #8]
 800ac64:	68e3      	ldr	r3, [r4, #12]
 800ac66:	60c3      	str	r3, [r0, #12]
 800ac68:	2a24      	cmp	r2, #36	@ 0x24
 800ac6a:	bf01      	itttt	eq
 800ac6c:	6923      	ldreq	r3, [r4, #16]
 800ac6e:	6103      	streq	r3, [r0, #16]
 800ac70:	6961      	ldreq	r1, [r4, #20]
 800ac72:	6141      	streq	r1, [r0, #20]
 800ac74:	bf19      	ittee	ne
 800ac76:	f104 0210 	addne.w	r2, r4, #16
 800ac7a:	f100 0310 	addne.w	r3, r0, #16
 800ac7e:	f104 0218 	addeq.w	r2, r4, #24
 800ac82:	f100 0318 	addeq.w	r3, r0, #24
 800ac86:	e7e0      	b.n	800ac4a <_realloc_r+0x2ee>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	e7dd      	b.n	800ac4a <_realloc_r+0x2ee>
 800ac8e:	4621      	mov	r1, r4
 800ac90:	f001 f9a6 	bl	800bfe0 <memmove>
 800ac94:	e7df      	b.n	800ac56 <_realloc_r+0x2fa>
 800ac96:	4637      	mov	r7, r6
 800ac98:	e6bf      	b.n	800aa1a <_realloc_r+0xbe>
 800ac9a:	431f      	orrs	r7, r3
 800ac9c:	f8c9 7004 	str.w	r7, [r9, #4]
 800aca0:	6853      	ldr	r3, [r2, #4]
 800aca2:	f043 0301 	orr.w	r3, r3, #1
 800aca6:	6053      	str	r3, [r2, #4]
 800aca8:	e6d3      	b.n	800aa52 <_realloc_r+0xf6>
 800acaa:	bf00      	nop

0800acac <sulp>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	4604      	mov	r4, r0
 800acb0:	460d      	mov	r5, r1
 800acb2:	ec45 4b10 	vmov	d0, r4, r5
 800acb6:	4616      	mov	r6, r2
 800acb8:	f7ff fd0a 	bl	800a6d0 <__ulp>
 800acbc:	ec51 0b10 	vmov	r0, r1, d0
 800acc0:	b17e      	cbz	r6, 800ace2 <sulp+0x36>
 800acc2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acc6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acca:	2b00      	cmp	r3, #0
 800accc:	dd09      	ble.n	800ace2 <sulp+0x36>
 800acce:	051b      	lsls	r3, r3, #20
 800acd0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800acd4:	2400      	movs	r4, #0
 800acd6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800acda:	4622      	mov	r2, r4
 800acdc:	462b      	mov	r3, r5
 800acde:	f7f5 fc93 	bl	8000608 <__aeabi_dmul>
 800ace2:	ec41 0b10 	vmov	d0, r0, r1
 800ace6:	bd70      	pop	{r4, r5, r6, pc}

0800ace8 <_strtod_l>:
 800ace8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acec:	b09f      	sub	sp, #124	@ 0x7c
 800acee:	460c      	mov	r4, r1
 800acf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800acf2:	2200      	movs	r2, #0
 800acf4:	921a      	str	r2, [sp, #104]	@ 0x68
 800acf6:	9005      	str	r0, [sp, #20]
 800acf8:	f04f 0a00 	mov.w	sl, #0
 800acfc:	f04f 0b00 	mov.w	fp, #0
 800ad00:	460a      	mov	r2, r1
 800ad02:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad04:	7811      	ldrb	r1, [r2, #0]
 800ad06:	292b      	cmp	r1, #43	@ 0x2b
 800ad08:	d04a      	beq.n	800ada0 <_strtod_l+0xb8>
 800ad0a:	d838      	bhi.n	800ad7e <_strtod_l+0x96>
 800ad0c:	290d      	cmp	r1, #13
 800ad0e:	d832      	bhi.n	800ad76 <_strtod_l+0x8e>
 800ad10:	2908      	cmp	r1, #8
 800ad12:	d832      	bhi.n	800ad7a <_strtod_l+0x92>
 800ad14:	2900      	cmp	r1, #0
 800ad16:	d03b      	beq.n	800ad90 <_strtod_l+0xa8>
 800ad18:	2200      	movs	r2, #0
 800ad1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad1e:	782a      	ldrb	r2, [r5, #0]
 800ad20:	2a30      	cmp	r2, #48	@ 0x30
 800ad22:	f040 80b3 	bne.w	800ae8c <_strtod_l+0x1a4>
 800ad26:	786a      	ldrb	r2, [r5, #1]
 800ad28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ad2c:	2a58      	cmp	r2, #88	@ 0x58
 800ad2e:	d16e      	bne.n	800ae0e <_strtod_l+0x126>
 800ad30:	9302      	str	r3, [sp, #8]
 800ad32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad34:	9301      	str	r3, [sp, #4]
 800ad36:	ab1a      	add	r3, sp, #104	@ 0x68
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	4a8e      	ldr	r2, [pc, #568]	@ (800af74 <_strtod_l+0x28c>)
 800ad3c:	9805      	ldr	r0, [sp, #20]
 800ad3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ad40:	a919      	add	r1, sp, #100	@ 0x64
 800ad42:	f001 fa3b 	bl	800c1bc <__gethex>
 800ad46:	f010 060f 	ands.w	r6, r0, #15
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	d005      	beq.n	800ad5a <_strtod_l+0x72>
 800ad4e:	2e06      	cmp	r6, #6
 800ad50:	d128      	bne.n	800ada4 <_strtod_l+0xbc>
 800ad52:	3501      	adds	r5, #1
 800ad54:	2300      	movs	r3, #0
 800ad56:	9519      	str	r5, [sp, #100]	@ 0x64
 800ad58:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 858e 	bne.w	800b87e <_strtod_l+0xb96>
 800ad62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad64:	b1cb      	cbz	r3, 800ad9a <_strtod_l+0xb2>
 800ad66:	4652      	mov	r2, sl
 800ad68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ad6c:	ec43 2b10 	vmov	d0, r2, r3
 800ad70:	b01f      	add	sp, #124	@ 0x7c
 800ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad76:	2920      	cmp	r1, #32
 800ad78:	d1ce      	bne.n	800ad18 <_strtod_l+0x30>
 800ad7a:	3201      	adds	r2, #1
 800ad7c:	e7c1      	b.n	800ad02 <_strtod_l+0x1a>
 800ad7e:	292d      	cmp	r1, #45	@ 0x2d
 800ad80:	d1ca      	bne.n	800ad18 <_strtod_l+0x30>
 800ad82:	2101      	movs	r1, #1
 800ad84:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ad86:	1c51      	adds	r1, r2, #1
 800ad88:	9119      	str	r1, [sp, #100]	@ 0x64
 800ad8a:	7852      	ldrb	r2, [r2, #1]
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	d1c5      	bne.n	800ad1c <_strtod_l+0x34>
 800ad90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ad92:	9419      	str	r4, [sp, #100]	@ 0x64
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f040 8570 	bne.w	800b87a <_strtod_l+0xb92>
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	e7e5      	b.n	800ad6c <_strtod_l+0x84>
 800ada0:	2100      	movs	r1, #0
 800ada2:	e7ef      	b.n	800ad84 <_strtod_l+0x9c>
 800ada4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ada6:	b13a      	cbz	r2, 800adb8 <_strtod_l+0xd0>
 800ada8:	2135      	movs	r1, #53	@ 0x35
 800adaa:	a81c      	add	r0, sp, #112	@ 0x70
 800adac:	f7ff fd8a 	bl	800a8c4 <__copybits>
 800adb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800adb2:	9805      	ldr	r0, [sp, #20]
 800adb4:	f7ff f98b 	bl	800a0ce <_Bfree>
 800adb8:	3e01      	subs	r6, #1
 800adba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800adbc:	2e04      	cmp	r6, #4
 800adbe:	d806      	bhi.n	800adce <_strtod_l+0xe6>
 800adc0:	e8df f006 	tbb	[pc, r6]
 800adc4:	201d0314 	.word	0x201d0314
 800adc8:	14          	.byte	0x14
 800adc9:	00          	.byte	0x00
 800adca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800adce:	05e1      	lsls	r1, r4, #23
 800add0:	bf48      	it	mi
 800add2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800add6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800adda:	0d1b      	lsrs	r3, r3, #20
 800addc:	051b      	lsls	r3, r3, #20
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1bb      	bne.n	800ad5a <_strtod_l+0x72>
 800ade2:	f7fb f9f9 	bl	80061d8 <__errno>
 800ade6:	2322      	movs	r3, #34	@ 0x22
 800ade8:	6003      	str	r3, [r0, #0]
 800adea:	e7b6      	b.n	800ad5a <_strtod_l+0x72>
 800adec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800adf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800adf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800adf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800adfc:	e7e7      	b.n	800adce <_strtod_l+0xe6>
 800adfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800af7c <_strtod_l+0x294>
 800ae02:	e7e4      	b.n	800adce <_strtod_l+0xe6>
 800ae04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae08:	f04f 3aff 	mov.w	sl, #4294967295
 800ae0c:	e7df      	b.n	800adce <_strtod_l+0xe6>
 800ae0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae10:	1c5a      	adds	r2, r3, #1
 800ae12:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	2b30      	cmp	r3, #48	@ 0x30
 800ae18:	d0f9      	beq.n	800ae0e <_strtod_l+0x126>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d09d      	beq.n	800ad5a <_strtod_l+0x72>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae24:	930c      	str	r3, [sp, #48]	@ 0x30
 800ae26:	2300      	movs	r3, #0
 800ae28:	9308      	str	r3, [sp, #32]
 800ae2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae2c:	461f      	mov	r7, r3
 800ae2e:	220a      	movs	r2, #10
 800ae30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800ae32:	7805      	ldrb	r5, [r0, #0]
 800ae34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800ae38:	b2d9      	uxtb	r1, r3
 800ae3a:	2909      	cmp	r1, #9
 800ae3c:	d928      	bls.n	800ae90 <_strtod_l+0x1a8>
 800ae3e:	494e      	ldr	r1, [pc, #312]	@ (800af78 <_strtod_l+0x290>)
 800ae40:	2201      	movs	r2, #1
 800ae42:	f001 f8e7 	bl	800c014 <strncmp>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d032      	beq.n	800aeb0 <_strtod_l+0x1c8>
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4681      	mov	r9, r0
 800ae50:	463d      	mov	r5, r7
 800ae52:	4603      	mov	r3, r0
 800ae54:	2a65      	cmp	r2, #101	@ 0x65
 800ae56:	d001      	beq.n	800ae5c <_strtod_l+0x174>
 800ae58:	2a45      	cmp	r2, #69	@ 0x45
 800ae5a:	d114      	bne.n	800ae86 <_strtod_l+0x19e>
 800ae5c:	b91d      	cbnz	r5, 800ae66 <_strtod_l+0x17e>
 800ae5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae60:	4302      	orrs	r2, r0
 800ae62:	d095      	beq.n	800ad90 <_strtod_l+0xa8>
 800ae64:	2500      	movs	r5, #0
 800ae66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ae68:	1c62      	adds	r2, r4, #1
 800ae6a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae6c:	7862      	ldrb	r2, [r4, #1]
 800ae6e:	2a2b      	cmp	r2, #43	@ 0x2b
 800ae70:	d077      	beq.n	800af62 <_strtod_l+0x27a>
 800ae72:	2a2d      	cmp	r2, #45	@ 0x2d
 800ae74:	d07b      	beq.n	800af6e <_strtod_l+0x286>
 800ae76:	f04f 0c00 	mov.w	ip, #0
 800ae7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ae7e:	2909      	cmp	r1, #9
 800ae80:	f240 8082 	bls.w	800af88 <_strtod_l+0x2a0>
 800ae84:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae86:	f04f 0800 	mov.w	r8, #0
 800ae8a:	e0a2      	b.n	800afd2 <_strtod_l+0x2ea>
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	e7c7      	b.n	800ae20 <_strtod_l+0x138>
 800ae90:	2f08      	cmp	r7, #8
 800ae92:	bfd5      	itete	le
 800ae94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ae96:	9908      	ldrgt	r1, [sp, #32]
 800ae98:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800aea0:	f100 0001 	add.w	r0, r0, #1
 800aea4:	bfd4      	ite	le
 800aea6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800aea8:	9308      	strgt	r3, [sp, #32]
 800aeaa:	3701      	adds	r7, #1
 800aeac:	9019      	str	r0, [sp, #100]	@ 0x64
 800aeae:	e7bf      	b.n	800ae30 <_strtod_l+0x148>
 800aeb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb2:	1c5a      	adds	r2, r3, #1
 800aeb4:	9219      	str	r2, [sp, #100]	@ 0x64
 800aeb6:	785a      	ldrb	r2, [r3, #1]
 800aeb8:	b37f      	cbz	r7, 800af1a <_strtod_l+0x232>
 800aeba:	4681      	mov	r9, r0
 800aebc:	463d      	mov	r5, r7
 800aebe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800aec2:	2b09      	cmp	r3, #9
 800aec4:	d912      	bls.n	800aeec <_strtod_l+0x204>
 800aec6:	2301      	movs	r3, #1
 800aec8:	e7c4      	b.n	800ae54 <_strtod_l+0x16c>
 800aeca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	9219      	str	r2, [sp, #100]	@ 0x64
 800aed0:	785a      	ldrb	r2, [r3, #1]
 800aed2:	3001      	adds	r0, #1
 800aed4:	2a30      	cmp	r2, #48	@ 0x30
 800aed6:	d0f8      	beq.n	800aeca <_strtod_l+0x1e2>
 800aed8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800aedc:	2b08      	cmp	r3, #8
 800aede:	f200 84d3 	bhi.w	800b888 <_strtod_l+0xba0>
 800aee2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aee4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aee6:	4681      	mov	r9, r0
 800aee8:	2000      	movs	r0, #0
 800aeea:	4605      	mov	r5, r0
 800aeec:	3a30      	subs	r2, #48	@ 0x30
 800aeee:	f100 0301 	add.w	r3, r0, #1
 800aef2:	d02a      	beq.n	800af4a <_strtod_l+0x262>
 800aef4:	4499      	add	r9, r3
 800aef6:	eb00 0c05 	add.w	ip, r0, r5
 800aefa:	462b      	mov	r3, r5
 800aefc:	210a      	movs	r1, #10
 800aefe:	4563      	cmp	r3, ip
 800af00:	d10d      	bne.n	800af1e <_strtod_l+0x236>
 800af02:	1c69      	adds	r1, r5, #1
 800af04:	4401      	add	r1, r0
 800af06:	4428      	add	r0, r5
 800af08:	2808      	cmp	r0, #8
 800af0a:	dc16      	bgt.n	800af3a <_strtod_l+0x252>
 800af0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af0e:	230a      	movs	r3, #10
 800af10:	fb03 2300 	mla	r3, r3, r0, r2
 800af14:	930a      	str	r3, [sp, #40]	@ 0x28
 800af16:	2300      	movs	r3, #0
 800af18:	e018      	b.n	800af4c <_strtod_l+0x264>
 800af1a:	4638      	mov	r0, r7
 800af1c:	e7da      	b.n	800aed4 <_strtod_l+0x1ec>
 800af1e:	2b08      	cmp	r3, #8
 800af20:	f103 0301 	add.w	r3, r3, #1
 800af24:	dc03      	bgt.n	800af2e <_strtod_l+0x246>
 800af26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800af28:	434e      	muls	r6, r1
 800af2a:	960a      	str	r6, [sp, #40]	@ 0x28
 800af2c:	e7e7      	b.n	800aefe <_strtod_l+0x216>
 800af2e:	2b10      	cmp	r3, #16
 800af30:	bfde      	ittt	le
 800af32:	9e08      	ldrle	r6, [sp, #32]
 800af34:	434e      	mulle	r6, r1
 800af36:	9608      	strle	r6, [sp, #32]
 800af38:	e7e1      	b.n	800aefe <_strtod_l+0x216>
 800af3a:	280f      	cmp	r0, #15
 800af3c:	dceb      	bgt.n	800af16 <_strtod_l+0x22e>
 800af3e:	9808      	ldr	r0, [sp, #32]
 800af40:	230a      	movs	r3, #10
 800af42:	fb03 2300 	mla	r3, r3, r0, r2
 800af46:	9308      	str	r3, [sp, #32]
 800af48:	e7e5      	b.n	800af16 <_strtod_l+0x22e>
 800af4a:	4629      	mov	r1, r5
 800af4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af4e:	1c50      	adds	r0, r2, #1
 800af50:	9019      	str	r0, [sp, #100]	@ 0x64
 800af52:	7852      	ldrb	r2, [r2, #1]
 800af54:	4618      	mov	r0, r3
 800af56:	460d      	mov	r5, r1
 800af58:	e7b1      	b.n	800aebe <_strtod_l+0x1d6>
 800af5a:	f04f 0900 	mov.w	r9, #0
 800af5e:	2301      	movs	r3, #1
 800af60:	e77d      	b.n	800ae5e <_strtod_l+0x176>
 800af62:	f04f 0c00 	mov.w	ip, #0
 800af66:	1ca2      	adds	r2, r4, #2
 800af68:	9219      	str	r2, [sp, #100]	@ 0x64
 800af6a:	78a2      	ldrb	r2, [r4, #2]
 800af6c:	e785      	b.n	800ae7a <_strtod_l+0x192>
 800af6e:	f04f 0c01 	mov.w	ip, #1
 800af72:	e7f8      	b.n	800af66 <_strtod_l+0x27e>
 800af74:	0800dac4 	.word	0x0800dac4
 800af78:	0800d8dc 	.word	0x0800d8dc
 800af7c:	7ff00000 	.word	0x7ff00000
 800af80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af82:	1c51      	adds	r1, r2, #1
 800af84:	9119      	str	r1, [sp, #100]	@ 0x64
 800af86:	7852      	ldrb	r2, [r2, #1]
 800af88:	2a30      	cmp	r2, #48	@ 0x30
 800af8a:	d0f9      	beq.n	800af80 <_strtod_l+0x298>
 800af8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800af90:	2908      	cmp	r1, #8
 800af92:	f63f af78 	bhi.w	800ae86 <_strtod_l+0x19e>
 800af96:	3a30      	subs	r2, #48	@ 0x30
 800af98:	920e      	str	r2, [sp, #56]	@ 0x38
 800af9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800af9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800af9e:	f04f 080a 	mov.w	r8, #10
 800afa2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afa4:	1c56      	adds	r6, r2, #1
 800afa6:	9619      	str	r6, [sp, #100]	@ 0x64
 800afa8:	7852      	ldrb	r2, [r2, #1]
 800afaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800afae:	f1be 0f09 	cmp.w	lr, #9
 800afb2:	d939      	bls.n	800b028 <_strtod_l+0x340>
 800afb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800afb6:	1a76      	subs	r6, r6, r1
 800afb8:	2e08      	cmp	r6, #8
 800afba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800afbe:	dc03      	bgt.n	800afc8 <_strtod_l+0x2e0>
 800afc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800afc2:	4588      	cmp	r8, r1
 800afc4:	bfa8      	it	ge
 800afc6:	4688      	movge	r8, r1
 800afc8:	f1bc 0f00 	cmp.w	ip, #0
 800afcc:	d001      	beq.n	800afd2 <_strtod_l+0x2ea>
 800afce:	f1c8 0800 	rsb	r8, r8, #0
 800afd2:	2d00      	cmp	r5, #0
 800afd4:	d14e      	bne.n	800b074 <_strtod_l+0x38c>
 800afd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800afd8:	4308      	orrs	r0, r1
 800afda:	f47f aebe 	bne.w	800ad5a <_strtod_l+0x72>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	f47f aed6 	bne.w	800ad90 <_strtod_l+0xa8>
 800afe4:	2a69      	cmp	r2, #105	@ 0x69
 800afe6:	d028      	beq.n	800b03a <_strtod_l+0x352>
 800afe8:	dc25      	bgt.n	800b036 <_strtod_l+0x34e>
 800afea:	2a49      	cmp	r2, #73	@ 0x49
 800afec:	d025      	beq.n	800b03a <_strtod_l+0x352>
 800afee:	2a4e      	cmp	r2, #78	@ 0x4e
 800aff0:	f47f aece 	bne.w	800ad90 <_strtod_l+0xa8>
 800aff4:	499b      	ldr	r1, [pc, #620]	@ (800b264 <_strtod_l+0x57c>)
 800aff6:	a819      	add	r0, sp, #100	@ 0x64
 800aff8:	f001 fb02 	bl	800c600 <__match>
 800affc:	2800      	cmp	r0, #0
 800affe:	f43f aec7 	beq.w	800ad90 <_strtod_l+0xa8>
 800b002:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	2b28      	cmp	r3, #40	@ 0x28
 800b008:	d12e      	bne.n	800b068 <_strtod_l+0x380>
 800b00a:	4997      	ldr	r1, [pc, #604]	@ (800b268 <_strtod_l+0x580>)
 800b00c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b00e:	a819      	add	r0, sp, #100	@ 0x64
 800b010:	f001 fb0a 	bl	800c628 <__hexnan>
 800b014:	2805      	cmp	r0, #5
 800b016:	d127      	bne.n	800b068 <_strtod_l+0x380>
 800b018:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b01a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b01e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b022:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b026:	e698      	b.n	800ad5a <_strtod_l+0x72>
 800b028:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b02a:	fb08 2101 	mla	r1, r8, r1, r2
 800b02e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b032:	920e      	str	r2, [sp, #56]	@ 0x38
 800b034:	e7b5      	b.n	800afa2 <_strtod_l+0x2ba>
 800b036:	2a6e      	cmp	r2, #110	@ 0x6e
 800b038:	e7da      	b.n	800aff0 <_strtod_l+0x308>
 800b03a:	498c      	ldr	r1, [pc, #560]	@ (800b26c <_strtod_l+0x584>)
 800b03c:	a819      	add	r0, sp, #100	@ 0x64
 800b03e:	f001 fadf 	bl	800c600 <__match>
 800b042:	2800      	cmp	r0, #0
 800b044:	f43f aea4 	beq.w	800ad90 <_strtod_l+0xa8>
 800b048:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b04a:	4989      	ldr	r1, [pc, #548]	@ (800b270 <_strtod_l+0x588>)
 800b04c:	3b01      	subs	r3, #1
 800b04e:	a819      	add	r0, sp, #100	@ 0x64
 800b050:	9319      	str	r3, [sp, #100]	@ 0x64
 800b052:	f001 fad5 	bl	800c600 <__match>
 800b056:	b910      	cbnz	r0, 800b05e <_strtod_l+0x376>
 800b058:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b05a:	3301      	adds	r3, #1
 800b05c:	9319      	str	r3, [sp, #100]	@ 0x64
 800b05e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b280 <_strtod_l+0x598>
 800b062:	f04f 0a00 	mov.w	sl, #0
 800b066:	e678      	b.n	800ad5a <_strtod_l+0x72>
 800b068:	4882      	ldr	r0, [pc, #520]	@ (800b274 <_strtod_l+0x58c>)
 800b06a:	f000 ffe5 	bl	800c038 <nan>
 800b06e:	ec5b ab10 	vmov	sl, fp, d0
 800b072:	e672      	b.n	800ad5a <_strtod_l+0x72>
 800b074:	eba8 0309 	sub.w	r3, r8, r9
 800b078:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b07a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b07c:	2f00      	cmp	r7, #0
 800b07e:	bf08      	it	eq
 800b080:	462f      	moveq	r7, r5
 800b082:	2d10      	cmp	r5, #16
 800b084:	462c      	mov	r4, r5
 800b086:	bfa8      	it	ge
 800b088:	2410      	movge	r4, #16
 800b08a:	f7f5 fa43 	bl	8000514 <__aeabi_ui2d>
 800b08e:	2d09      	cmp	r5, #9
 800b090:	4682      	mov	sl, r0
 800b092:	468b      	mov	fp, r1
 800b094:	dc13      	bgt.n	800b0be <_strtod_l+0x3d6>
 800b096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f43f ae5e 	beq.w	800ad5a <_strtod_l+0x72>
 800b09e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a0:	dd78      	ble.n	800b194 <_strtod_l+0x4ac>
 800b0a2:	2b16      	cmp	r3, #22
 800b0a4:	dc5f      	bgt.n	800b166 <_strtod_l+0x47e>
 800b0a6:	4974      	ldr	r1, [pc, #464]	@ (800b278 <_strtod_l+0x590>)
 800b0a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0b0:	4652      	mov	r2, sl
 800b0b2:	465b      	mov	r3, fp
 800b0b4:	f7f5 faa8 	bl	8000608 <__aeabi_dmul>
 800b0b8:	4682      	mov	sl, r0
 800b0ba:	468b      	mov	fp, r1
 800b0bc:	e64d      	b.n	800ad5a <_strtod_l+0x72>
 800b0be:	4b6e      	ldr	r3, [pc, #440]	@ (800b278 <_strtod_l+0x590>)
 800b0c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b0c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b0c8:	f7f5 fa9e 	bl	8000608 <__aeabi_dmul>
 800b0cc:	4682      	mov	sl, r0
 800b0ce:	9808      	ldr	r0, [sp, #32]
 800b0d0:	468b      	mov	fp, r1
 800b0d2:	f7f5 fa1f 	bl	8000514 <__aeabi_ui2d>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4650      	mov	r0, sl
 800b0dc:	4659      	mov	r1, fp
 800b0de:	f7f5 f8dd 	bl	800029c <__adddf3>
 800b0e2:	2d0f      	cmp	r5, #15
 800b0e4:	4682      	mov	sl, r0
 800b0e6:	468b      	mov	fp, r1
 800b0e8:	ddd5      	ble.n	800b096 <_strtod_l+0x3ae>
 800b0ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0ec:	1b2c      	subs	r4, r5, r4
 800b0ee:	441c      	add	r4, r3
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	f340 8096 	ble.w	800b222 <_strtod_l+0x53a>
 800b0f6:	f014 030f 	ands.w	r3, r4, #15
 800b0fa:	d00a      	beq.n	800b112 <_strtod_l+0x42a>
 800b0fc:	495e      	ldr	r1, [pc, #376]	@ (800b278 <_strtod_l+0x590>)
 800b0fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b102:	4652      	mov	r2, sl
 800b104:	465b      	mov	r3, fp
 800b106:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b10a:	f7f5 fa7d 	bl	8000608 <__aeabi_dmul>
 800b10e:	4682      	mov	sl, r0
 800b110:	468b      	mov	fp, r1
 800b112:	f034 040f 	bics.w	r4, r4, #15
 800b116:	d073      	beq.n	800b200 <_strtod_l+0x518>
 800b118:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b11c:	dd48      	ble.n	800b1b0 <_strtod_l+0x4c8>
 800b11e:	2400      	movs	r4, #0
 800b120:	46a0      	mov	r8, r4
 800b122:	940a      	str	r4, [sp, #40]	@ 0x28
 800b124:	46a1      	mov	r9, r4
 800b126:	9a05      	ldr	r2, [sp, #20]
 800b128:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b280 <_strtod_l+0x598>
 800b12c:	2322      	movs	r3, #34	@ 0x22
 800b12e:	6013      	str	r3, [r2, #0]
 800b130:	f04f 0a00 	mov.w	sl, #0
 800b134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b136:	2b00      	cmp	r3, #0
 800b138:	f43f ae0f 	beq.w	800ad5a <_strtod_l+0x72>
 800b13c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b13e:	9805      	ldr	r0, [sp, #20]
 800b140:	f7fe ffc5 	bl	800a0ce <_Bfree>
 800b144:	9805      	ldr	r0, [sp, #20]
 800b146:	4649      	mov	r1, r9
 800b148:	f7fe ffc1 	bl	800a0ce <_Bfree>
 800b14c:	9805      	ldr	r0, [sp, #20]
 800b14e:	4641      	mov	r1, r8
 800b150:	f7fe ffbd 	bl	800a0ce <_Bfree>
 800b154:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b156:	9805      	ldr	r0, [sp, #20]
 800b158:	f7fe ffb9 	bl	800a0ce <_Bfree>
 800b15c:	9805      	ldr	r0, [sp, #20]
 800b15e:	4621      	mov	r1, r4
 800b160:	f7fe ffb5 	bl	800a0ce <_Bfree>
 800b164:	e5f9      	b.n	800ad5a <_strtod_l+0x72>
 800b166:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b168:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b16c:	4293      	cmp	r3, r2
 800b16e:	dbbc      	blt.n	800b0ea <_strtod_l+0x402>
 800b170:	4c41      	ldr	r4, [pc, #260]	@ (800b278 <_strtod_l+0x590>)
 800b172:	f1c5 050f 	rsb	r5, r5, #15
 800b176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b17a:	4652      	mov	r2, sl
 800b17c:	465b      	mov	r3, fp
 800b17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b182:	f7f5 fa41 	bl	8000608 <__aeabi_dmul>
 800b186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b188:	1b5d      	subs	r5, r3, r5
 800b18a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b18e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b192:	e78f      	b.n	800b0b4 <_strtod_l+0x3cc>
 800b194:	3316      	adds	r3, #22
 800b196:	dba8      	blt.n	800b0ea <_strtod_l+0x402>
 800b198:	4b37      	ldr	r3, [pc, #220]	@ (800b278 <_strtod_l+0x590>)
 800b19a:	eba9 0808 	sub.w	r8, r9, r8
 800b19e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b1a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	f7f5 fb57 	bl	800085c <__aeabi_ddiv>
 800b1ae:	e783      	b.n	800b0b8 <_strtod_l+0x3d0>
 800b1b0:	4b32      	ldr	r3, [pc, #200]	@ (800b27c <_strtod_l+0x594>)
 800b1b2:	9308      	str	r3, [sp, #32]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	1124      	asrs	r4, r4, #4
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	4659      	mov	r1, fp
 800b1bc:	461e      	mov	r6, r3
 800b1be:	2c01      	cmp	r4, #1
 800b1c0:	dc21      	bgt.n	800b206 <_strtod_l+0x51e>
 800b1c2:	b10b      	cbz	r3, 800b1c8 <_strtod_l+0x4e0>
 800b1c4:	4682      	mov	sl, r0
 800b1c6:	468b      	mov	fp, r1
 800b1c8:	492c      	ldr	r1, [pc, #176]	@ (800b27c <_strtod_l+0x594>)
 800b1ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b1ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1da:	f7f5 fa15 	bl	8000608 <__aeabi_dmul>
 800b1de:	4b28      	ldr	r3, [pc, #160]	@ (800b280 <_strtod_l+0x598>)
 800b1e0:	460a      	mov	r2, r1
 800b1e2:	400b      	ands	r3, r1
 800b1e4:	4927      	ldr	r1, [pc, #156]	@ (800b284 <_strtod_l+0x59c>)
 800b1e6:	428b      	cmp	r3, r1
 800b1e8:	4682      	mov	sl, r0
 800b1ea:	d898      	bhi.n	800b11e <_strtod_l+0x436>
 800b1ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf86      	itte	hi
 800b1f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b288 <_strtod_l+0x5a0>
 800b1f8:	f04f 3aff 	movhi.w	sl, #4294967295
 800b1fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b200:	2300      	movs	r3, #0
 800b202:	9308      	str	r3, [sp, #32]
 800b204:	e07a      	b.n	800b2fc <_strtod_l+0x614>
 800b206:	07e2      	lsls	r2, r4, #31
 800b208:	d505      	bpl.n	800b216 <_strtod_l+0x52e>
 800b20a:	9b08      	ldr	r3, [sp, #32]
 800b20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b210:	f7f5 f9fa 	bl	8000608 <__aeabi_dmul>
 800b214:	2301      	movs	r3, #1
 800b216:	9a08      	ldr	r2, [sp, #32]
 800b218:	3208      	adds	r2, #8
 800b21a:	3601      	adds	r6, #1
 800b21c:	1064      	asrs	r4, r4, #1
 800b21e:	9208      	str	r2, [sp, #32]
 800b220:	e7cd      	b.n	800b1be <_strtod_l+0x4d6>
 800b222:	d0ed      	beq.n	800b200 <_strtod_l+0x518>
 800b224:	4264      	negs	r4, r4
 800b226:	f014 020f 	ands.w	r2, r4, #15
 800b22a:	d00a      	beq.n	800b242 <_strtod_l+0x55a>
 800b22c:	4b12      	ldr	r3, [pc, #72]	@ (800b278 <_strtod_l+0x590>)
 800b22e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b232:	4650      	mov	r0, sl
 800b234:	4659      	mov	r1, fp
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f5 fb0f 	bl	800085c <__aeabi_ddiv>
 800b23e:	4682      	mov	sl, r0
 800b240:	468b      	mov	fp, r1
 800b242:	1124      	asrs	r4, r4, #4
 800b244:	d0dc      	beq.n	800b200 <_strtod_l+0x518>
 800b246:	2c1f      	cmp	r4, #31
 800b248:	dd20      	ble.n	800b28c <_strtod_l+0x5a4>
 800b24a:	2400      	movs	r4, #0
 800b24c:	46a0      	mov	r8, r4
 800b24e:	940a      	str	r4, [sp, #40]	@ 0x28
 800b250:	46a1      	mov	r9, r4
 800b252:	9a05      	ldr	r2, [sp, #20]
 800b254:	2322      	movs	r3, #34	@ 0x22
 800b256:	f04f 0a00 	mov.w	sl, #0
 800b25a:	f04f 0b00 	mov.w	fp, #0
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	e768      	b.n	800b134 <_strtod_l+0x44c>
 800b262:	bf00      	nop
 800b264:	0800d865 	.word	0x0800d865
 800b268:	0800dab0 	.word	0x0800dab0
 800b26c:	0800d85d 	.word	0x0800d85d
 800b270:	0800d8e1 	.word	0x0800d8e1
 800b274:	0800dc3c 	.word	0x0800dc3c
 800b278:	0800d9e8 	.word	0x0800d9e8
 800b27c:	0800d9c0 	.word	0x0800d9c0
 800b280:	7ff00000 	.word	0x7ff00000
 800b284:	7ca00000 	.word	0x7ca00000
 800b288:	7fefffff 	.word	0x7fefffff
 800b28c:	f014 0310 	ands.w	r3, r4, #16
 800b290:	bf18      	it	ne
 800b292:	236a      	movne	r3, #106	@ 0x6a
 800b294:	4ea9      	ldr	r6, [pc, #676]	@ (800b53c <_strtod_l+0x854>)
 800b296:	9308      	str	r3, [sp, #32]
 800b298:	4650      	mov	r0, sl
 800b29a:	4659      	mov	r1, fp
 800b29c:	2300      	movs	r3, #0
 800b29e:	07e2      	lsls	r2, r4, #31
 800b2a0:	d504      	bpl.n	800b2ac <_strtod_l+0x5c4>
 800b2a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2a6:	f7f5 f9af 	bl	8000608 <__aeabi_dmul>
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	1064      	asrs	r4, r4, #1
 800b2ae:	f106 0608 	add.w	r6, r6, #8
 800b2b2:	d1f4      	bne.n	800b29e <_strtod_l+0x5b6>
 800b2b4:	b10b      	cbz	r3, 800b2ba <_strtod_l+0x5d2>
 800b2b6:	4682      	mov	sl, r0
 800b2b8:	468b      	mov	fp, r1
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	b1b3      	cbz	r3, 800b2ec <_strtod_l+0x604>
 800b2be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	4659      	mov	r1, fp
 800b2ca:	dd0f      	ble.n	800b2ec <_strtod_l+0x604>
 800b2cc:	2b1f      	cmp	r3, #31
 800b2ce:	dd55      	ble.n	800b37c <_strtod_l+0x694>
 800b2d0:	2b34      	cmp	r3, #52	@ 0x34
 800b2d2:	bfde      	ittt	le
 800b2d4:	f04f 33ff 	movle.w	r3, #4294967295
 800b2d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b2dc:	4093      	lslle	r3, r2
 800b2de:	f04f 0a00 	mov.w	sl, #0
 800b2e2:	bfcc      	ite	gt
 800b2e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b2e8:	ea03 0b01 	andle.w	fp, r3, r1
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	4650      	mov	r0, sl
 800b2f2:	4659      	mov	r1, fp
 800b2f4:	f7f5 fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1a6      	bne.n	800b24a <_strtod_l+0x562>
 800b2fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b302:	9805      	ldr	r0, [sp, #20]
 800b304:	462b      	mov	r3, r5
 800b306:	463a      	mov	r2, r7
 800b308:	f7fe ff30 	bl	800a16c <__s2b>
 800b30c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b30e:	2800      	cmp	r0, #0
 800b310:	f43f af05 	beq.w	800b11e <_strtod_l+0x436>
 800b314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b316:	2a00      	cmp	r2, #0
 800b318:	eba9 0308 	sub.w	r3, r9, r8
 800b31c:	bfa8      	it	ge
 800b31e:	2300      	movge	r3, #0
 800b320:	9312      	str	r3, [sp, #72]	@ 0x48
 800b322:	2400      	movs	r4, #0
 800b324:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b328:	9316      	str	r3, [sp, #88]	@ 0x58
 800b32a:	46a0      	mov	r8, r4
 800b32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b32e:	9805      	ldr	r0, [sp, #20]
 800b330:	6859      	ldr	r1, [r3, #4]
 800b332:	f7fe fea7 	bl	800a084 <_Balloc>
 800b336:	4681      	mov	r9, r0
 800b338:	2800      	cmp	r0, #0
 800b33a:	f43f aef4 	beq.w	800b126 <_strtod_l+0x43e>
 800b33e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b340:	691a      	ldr	r2, [r3, #16]
 800b342:	3202      	adds	r2, #2
 800b344:	f103 010c 	add.w	r1, r3, #12
 800b348:	0092      	lsls	r2, r2, #2
 800b34a:	300c      	adds	r0, #12
 800b34c:	f7fa ff72 	bl	8006234 <memcpy>
 800b350:	ec4b ab10 	vmov	d0, sl, fp
 800b354:	9805      	ldr	r0, [sp, #20]
 800b356:	aa1c      	add	r2, sp, #112	@ 0x70
 800b358:	a91b      	add	r1, sp, #108	@ 0x6c
 800b35a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b35e:	f7ff fa27 	bl	800a7b0 <__d2b>
 800b362:	901a      	str	r0, [sp, #104]	@ 0x68
 800b364:	2800      	cmp	r0, #0
 800b366:	f43f aede 	beq.w	800b126 <_strtod_l+0x43e>
 800b36a:	9805      	ldr	r0, [sp, #20]
 800b36c:	2101      	movs	r1, #1
 800b36e:	f7fe ff93 	bl	800a298 <__i2b>
 800b372:	4680      	mov	r8, r0
 800b374:	b948      	cbnz	r0, 800b38a <_strtod_l+0x6a2>
 800b376:	f04f 0800 	mov.w	r8, #0
 800b37a:	e6d4      	b.n	800b126 <_strtod_l+0x43e>
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295
 800b380:	fa02 f303 	lsl.w	r3, r2, r3
 800b384:	ea03 0a0a 	and.w	sl, r3, sl
 800b388:	e7b0      	b.n	800b2ec <_strtod_l+0x604>
 800b38a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b38c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b38e:	2d00      	cmp	r5, #0
 800b390:	bfab      	itete	ge
 800b392:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b394:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b396:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b398:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b39a:	bfac      	ite	ge
 800b39c:	18ef      	addge	r7, r5, r3
 800b39e:	1b5e      	sublt	r6, r3, r5
 800b3a0:	9b08      	ldr	r3, [sp, #32]
 800b3a2:	1aed      	subs	r5, r5, r3
 800b3a4:	4415      	add	r5, r2
 800b3a6:	4b66      	ldr	r3, [pc, #408]	@ (800b540 <_strtod_l+0x858>)
 800b3a8:	3d01      	subs	r5, #1
 800b3aa:	429d      	cmp	r5, r3
 800b3ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b3b0:	da50      	bge.n	800b454 <_strtod_l+0x76c>
 800b3b2:	1b5b      	subs	r3, r3, r5
 800b3b4:	2b1f      	cmp	r3, #31
 800b3b6:	eba2 0203 	sub.w	r2, r2, r3
 800b3ba:	f04f 0101 	mov.w	r1, #1
 800b3be:	dc3d      	bgt.n	800b43c <_strtod_l+0x754>
 800b3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800b3ca:	18bd      	adds	r5, r7, r2
 800b3cc:	9b08      	ldr	r3, [sp, #32]
 800b3ce:	42af      	cmp	r7, r5
 800b3d0:	4416      	add	r6, r2
 800b3d2:	441e      	add	r6, r3
 800b3d4:	463b      	mov	r3, r7
 800b3d6:	bfa8      	it	ge
 800b3d8:	462b      	movge	r3, r5
 800b3da:	42b3      	cmp	r3, r6
 800b3dc:	bfa8      	it	ge
 800b3de:	4633      	movge	r3, r6
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	bfc2      	ittt	gt
 800b3e4:	1aed      	subgt	r5, r5, r3
 800b3e6:	1af6      	subgt	r6, r6, r3
 800b3e8:	1aff      	subgt	r7, r7, r3
 800b3ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	dd16      	ble.n	800b41e <_strtod_l+0x736>
 800b3f0:	4641      	mov	r1, r8
 800b3f2:	9805      	ldr	r0, [sp, #20]
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	f7ff f80f 	bl	800a418 <__pow5mult>
 800b3fa:	4680      	mov	r8, r0
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d0ba      	beq.n	800b376 <_strtod_l+0x68e>
 800b400:	4601      	mov	r1, r0
 800b402:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b404:	9805      	ldr	r0, [sp, #20]
 800b406:	f7fe ff5d 	bl	800a2c4 <__multiply>
 800b40a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b40c:	2800      	cmp	r0, #0
 800b40e:	f43f ae8a 	beq.w	800b126 <_strtod_l+0x43e>
 800b412:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b414:	9805      	ldr	r0, [sp, #20]
 800b416:	f7fe fe5a 	bl	800a0ce <_Bfree>
 800b41a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b41c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b41e:	2d00      	cmp	r5, #0
 800b420:	dc1d      	bgt.n	800b45e <_strtod_l+0x776>
 800b422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b424:	2b00      	cmp	r3, #0
 800b426:	dd23      	ble.n	800b470 <_strtod_l+0x788>
 800b428:	4649      	mov	r1, r9
 800b42a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b42c:	9805      	ldr	r0, [sp, #20]
 800b42e:	f7fe fff3 	bl	800a418 <__pow5mult>
 800b432:	4681      	mov	r9, r0
 800b434:	b9e0      	cbnz	r0, 800b470 <_strtod_l+0x788>
 800b436:	f04f 0900 	mov.w	r9, #0
 800b43a:	e674      	b.n	800b126 <_strtod_l+0x43e>
 800b43c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b440:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b444:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b448:	35e2      	adds	r5, #226	@ 0xe2
 800b44a:	fa01 f305 	lsl.w	r3, r1, r5
 800b44e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b450:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b452:	e7ba      	b.n	800b3ca <_strtod_l+0x6e2>
 800b454:	2300      	movs	r3, #0
 800b456:	9310      	str	r3, [sp, #64]	@ 0x40
 800b458:	2301      	movs	r3, #1
 800b45a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b45c:	e7b5      	b.n	800b3ca <_strtod_l+0x6e2>
 800b45e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b460:	9805      	ldr	r0, [sp, #20]
 800b462:	462a      	mov	r2, r5
 800b464:	f7ff f818 	bl	800a498 <__lshift>
 800b468:	901a      	str	r0, [sp, #104]	@ 0x68
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d1d9      	bne.n	800b422 <_strtod_l+0x73a>
 800b46e:	e65a      	b.n	800b126 <_strtod_l+0x43e>
 800b470:	2e00      	cmp	r6, #0
 800b472:	dd07      	ble.n	800b484 <_strtod_l+0x79c>
 800b474:	4649      	mov	r1, r9
 800b476:	9805      	ldr	r0, [sp, #20]
 800b478:	4632      	mov	r2, r6
 800b47a:	f7ff f80d 	bl	800a498 <__lshift>
 800b47e:	4681      	mov	r9, r0
 800b480:	2800      	cmp	r0, #0
 800b482:	d0d8      	beq.n	800b436 <_strtod_l+0x74e>
 800b484:	2f00      	cmp	r7, #0
 800b486:	dd08      	ble.n	800b49a <_strtod_l+0x7b2>
 800b488:	4641      	mov	r1, r8
 800b48a:	9805      	ldr	r0, [sp, #20]
 800b48c:	463a      	mov	r2, r7
 800b48e:	f7ff f803 	bl	800a498 <__lshift>
 800b492:	4680      	mov	r8, r0
 800b494:	2800      	cmp	r0, #0
 800b496:	f43f ae46 	beq.w	800b126 <_strtod_l+0x43e>
 800b49a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b49c:	9805      	ldr	r0, [sp, #20]
 800b49e:	464a      	mov	r2, r9
 800b4a0:	f7ff f882 	bl	800a5a8 <__mdiff>
 800b4a4:	4604      	mov	r4, r0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f ae3d 	beq.w	800b126 <_strtod_l+0x43e>
 800b4ac:	68c3      	ldr	r3, [r0, #12]
 800b4ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60c3      	str	r3, [r0, #12]
 800b4b4:	4641      	mov	r1, r8
 800b4b6:	f7ff f85b 	bl	800a570 <__mcmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	da46      	bge.n	800b54c <_strtod_l+0x864>
 800b4be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c0:	ea53 030a 	orrs.w	r3, r3, sl
 800b4c4:	d16c      	bne.n	800b5a0 <_strtod_l+0x8b8>
 800b4c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d168      	bne.n	800b5a0 <_strtod_l+0x8b8>
 800b4ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4d2:	0d1b      	lsrs	r3, r3, #20
 800b4d4:	051b      	lsls	r3, r3, #20
 800b4d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b4da:	d961      	bls.n	800b5a0 <_strtod_l+0x8b8>
 800b4dc:	6963      	ldr	r3, [r4, #20]
 800b4de:	b913      	cbnz	r3, 800b4e6 <_strtod_l+0x7fe>
 800b4e0:	6923      	ldr	r3, [r4, #16]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	dd5c      	ble.n	800b5a0 <_strtod_l+0x8b8>
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	9805      	ldr	r0, [sp, #20]
 800b4ec:	f7fe ffd4 	bl	800a498 <__lshift>
 800b4f0:	4641      	mov	r1, r8
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	f7ff f83c 	bl	800a570 <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dd51      	ble.n	800b5a0 <_strtod_l+0x8b8>
 800b4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b500:	9a08      	ldr	r2, [sp, #32]
 800b502:	0d1b      	lsrs	r3, r3, #20
 800b504:	051b      	lsls	r3, r3, #20
 800b506:	2a00      	cmp	r2, #0
 800b508:	d06b      	beq.n	800b5e2 <_strtod_l+0x8fa>
 800b50a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b50e:	d868      	bhi.n	800b5e2 <_strtod_l+0x8fa>
 800b510:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b514:	f67f ae9d 	bls.w	800b252 <_strtod_l+0x56a>
 800b518:	4b0a      	ldr	r3, [pc, #40]	@ (800b544 <_strtod_l+0x85c>)
 800b51a:	4650      	mov	r0, sl
 800b51c:	4659      	mov	r1, fp
 800b51e:	2200      	movs	r2, #0
 800b520:	f7f5 f872 	bl	8000608 <__aeabi_dmul>
 800b524:	4b08      	ldr	r3, [pc, #32]	@ (800b548 <_strtod_l+0x860>)
 800b526:	400b      	ands	r3, r1
 800b528:	4682      	mov	sl, r0
 800b52a:	468b      	mov	fp, r1
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f47f ae05 	bne.w	800b13c <_strtod_l+0x454>
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	2322      	movs	r3, #34	@ 0x22
 800b536:	6013      	str	r3, [r2, #0]
 800b538:	e600      	b.n	800b13c <_strtod_l+0x454>
 800b53a:	bf00      	nop
 800b53c:	0800dad8 	.word	0x0800dad8
 800b540:	fffffc02 	.word	0xfffffc02
 800b544:	39500000 	.word	0x39500000
 800b548:	7ff00000 	.word	0x7ff00000
 800b54c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b550:	d165      	bne.n	800b61e <_strtod_l+0x936>
 800b552:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b554:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b558:	b35a      	cbz	r2, 800b5b2 <_strtod_l+0x8ca>
 800b55a:	4a9f      	ldr	r2, [pc, #636]	@ (800b7d8 <_strtod_l+0xaf0>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d12b      	bne.n	800b5b8 <_strtod_l+0x8d0>
 800b560:	9b08      	ldr	r3, [sp, #32]
 800b562:	4651      	mov	r1, sl
 800b564:	b303      	cbz	r3, 800b5a8 <_strtod_l+0x8c0>
 800b566:	4b9d      	ldr	r3, [pc, #628]	@ (800b7dc <_strtod_l+0xaf4>)
 800b568:	465a      	mov	r2, fp
 800b56a:	4013      	ands	r3, r2
 800b56c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b570:	f04f 32ff 	mov.w	r2, #4294967295
 800b574:	d81b      	bhi.n	800b5ae <_strtod_l+0x8c6>
 800b576:	0d1b      	lsrs	r3, r3, #20
 800b578:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b57c:	fa02 f303 	lsl.w	r3, r2, r3
 800b580:	4299      	cmp	r1, r3
 800b582:	d119      	bne.n	800b5b8 <_strtod_l+0x8d0>
 800b584:	4b96      	ldr	r3, [pc, #600]	@ (800b7e0 <_strtod_l+0xaf8>)
 800b586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b588:	429a      	cmp	r2, r3
 800b58a:	d102      	bne.n	800b592 <_strtod_l+0x8aa>
 800b58c:	3101      	adds	r1, #1
 800b58e:	f43f adca 	beq.w	800b126 <_strtod_l+0x43e>
 800b592:	4b92      	ldr	r3, [pc, #584]	@ (800b7dc <_strtod_l+0xaf4>)
 800b594:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b596:	401a      	ands	r2, r3
 800b598:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b59c:	f04f 0a00 	mov.w	sl, #0
 800b5a0:	9b08      	ldr	r3, [sp, #32]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1b8      	bne.n	800b518 <_strtod_l+0x830>
 800b5a6:	e5c9      	b.n	800b13c <_strtod_l+0x454>
 800b5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ac:	e7e8      	b.n	800b580 <_strtod_l+0x898>
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	e7e6      	b.n	800b580 <_strtod_l+0x898>
 800b5b2:	ea53 030a 	orrs.w	r3, r3, sl
 800b5b6:	d0a1      	beq.n	800b4fc <_strtod_l+0x814>
 800b5b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5ba:	b1db      	cbz	r3, 800b5f4 <_strtod_l+0x90c>
 800b5bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5be:	4213      	tst	r3, r2
 800b5c0:	d0ee      	beq.n	800b5a0 <_strtod_l+0x8b8>
 800b5c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5c4:	9a08      	ldr	r2, [sp, #32]
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	b1bb      	cbz	r3, 800b5fc <_strtod_l+0x914>
 800b5cc:	f7ff fb6e 	bl	800acac <sulp>
 800b5d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b5d4:	ec53 2b10 	vmov	r2, r3, d0
 800b5d8:	f7f4 fe60 	bl	800029c <__adddf3>
 800b5dc:	4682      	mov	sl, r0
 800b5de:	468b      	mov	fp, r1
 800b5e0:	e7de      	b.n	800b5a0 <_strtod_l+0x8b8>
 800b5e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b5e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b5ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b5ee:	f04f 3aff 	mov.w	sl, #4294967295
 800b5f2:	e7d5      	b.n	800b5a0 <_strtod_l+0x8b8>
 800b5f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b5f6:	ea13 0f0a 	tst.w	r3, sl
 800b5fa:	e7e1      	b.n	800b5c0 <_strtod_l+0x8d8>
 800b5fc:	f7ff fb56 	bl	800acac <sulp>
 800b600:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b604:	ec53 2b10 	vmov	r2, r3, d0
 800b608:	f7f4 fe46 	bl	8000298 <__aeabi_dsub>
 800b60c:	2200      	movs	r2, #0
 800b60e:	2300      	movs	r3, #0
 800b610:	4682      	mov	sl, r0
 800b612:	468b      	mov	fp, r1
 800b614:	f7f5 fa60 	bl	8000ad8 <__aeabi_dcmpeq>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d0c1      	beq.n	800b5a0 <_strtod_l+0x8b8>
 800b61c:	e619      	b.n	800b252 <_strtod_l+0x56a>
 800b61e:	4641      	mov	r1, r8
 800b620:	4620      	mov	r0, r4
 800b622:	f7ff f91d 	bl	800a860 <__ratio>
 800b626:	ec57 6b10 	vmov	r6, r7, d0
 800b62a:	2200      	movs	r2, #0
 800b62c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b630:	4630      	mov	r0, r6
 800b632:	4639      	mov	r1, r7
 800b634:	f7f5 fa64 	bl	8000b00 <__aeabi_dcmple>
 800b638:	2800      	cmp	r0, #0
 800b63a:	d06f      	beq.n	800b71c <_strtod_l+0xa34>
 800b63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d17a      	bne.n	800b738 <_strtod_l+0xa50>
 800b642:	f1ba 0f00 	cmp.w	sl, #0
 800b646:	d158      	bne.n	800b6fa <_strtod_l+0xa12>
 800b648:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b64a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d15a      	bne.n	800b708 <_strtod_l+0xa20>
 800b652:	4b64      	ldr	r3, [pc, #400]	@ (800b7e4 <_strtod_l+0xafc>)
 800b654:	2200      	movs	r2, #0
 800b656:	4630      	mov	r0, r6
 800b658:	4639      	mov	r1, r7
 800b65a:	f7f5 fa47 	bl	8000aec <__aeabi_dcmplt>
 800b65e:	2800      	cmp	r0, #0
 800b660:	d159      	bne.n	800b716 <_strtod_l+0xa2e>
 800b662:	4630      	mov	r0, r6
 800b664:	4639      	mov	r1, r7
 800b666:	4b60      	ldr	r3, [pc, #384]	@ (800b7e8 <_strtod_l+0xb00>)
 800b668:	2200      	movs	r2, #0
 800b66a:	f7f4 ffcd 	bl	8000608 <__aeabi_dmul>
 800b66e:	4606      	mov	r6, r0
 800b670:	460f      	mov	r7, r1
 800b672:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b676:	9606      	str	r6, [sp, #24]
 800b678:	9307      	str	r3, [sp, #28]
 800b67a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b67e:	4d57      	ldr	r5, [pc, #348]	@ (800b7dc <_strtod_l+0xaf4>)
 800b680:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b686:	401d      	ands	r5, r3
 800b688:	4b58      	ldr	r3, [pc, #352]	@ (800b7ec <_strtod_l+0xb04>)
 800b68a:	429d      	cmp	r5, r3
 800b68c:	f040 80b2 	bne.w	800b7f4 <_strtod_l+0xb0c>
 800b690:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b692:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b696:	ec4b ab10 	vmov	d0, sl, fp
 800b69a:	f7ff f819 	bl	800a6d0 <__ulp>
 800b69e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6a2:	ec51 0b10 	vmov	r0, r1, d0
 800b6a6:	f7f4 ffaf 	bl	8000608 <__aeabi_dmul>
 800b6aa:	4652      	mov	r2, sl
 800b6ac:	465b      	mov	r3, fp
 800b6ae:	f7f4 fdf5 	bl	800029c <__adddf3>
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4949      	ldr	r1, [pc, #292]	@ (800b7dc <_strtod_l+0xaf4>)
 800b6b6:	4a4e      	ldr	r2, [pc, #312]	@ (800b7f0 <_strtod_l+0xb08>)
 800b6b8:	4019      	ands	r1, r3
 800b6ba:	4291      	cmp	r1, r2
 800b6bc:	4682      	mov	sl, r0
 800b6be:	d942      	bls.n	800b746 <_strtod_l+0xa5e>
 800b6c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b6c2:	4b47      	ldr	r3, [pc, #284]	@ (800b7e0 <_strtod_l+0xaf8>)
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d103      	bne.n	800b6d0 <_strtod_l+0x9e8>
 800b6c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	f43f ad2b 	beq.w	800b126 <_strtod_l+0x43e>
 800b6d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b7e0 <_strtod_l+0xaf8>
 800b6d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b6d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b6da:	9805      	ldr	r0, [sp, #20]
 800b6dc:	f7fe fcf7 	bl	800a0ce <_Bfree>
 800b6e0:	9805      	ldr	r0, [sp, #20]
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	f7fe fcf3 	bl	800a0ce <_Bfree>
 800b6e8:	9805      	ldr	r0, [sp, #20]
 800b6ea:	4641      	mov	r1, r8
 800b6ec:	f7fe fcef 	bl	800a0ce <_Bfree>
 800b6f0:	9805      	ldr	r0, [sp, #20]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	f7fe fceb 	bl	800a0ce <_Bfree>
 800b6f8:	e618      	b.n	800b32c <_strtod_l+0x644>
 800b6fa:	f1ba 0f01 	cmp.w	sl, #1
 800b6fe:	d103      	bne.n	800b708 <_strtod_l+0xa20>
 800b700:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b702:	2b00      	cmp	r3, #0
 800b704:	f43f ada5 	beq.w	800b252 <_strtod_l+0x56a>
 800b708:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b7b8 <_strtod_l+0xad0>
 800b70c:	4f35      	ldr	r7, [pc, #212]	@ (800b7e4 <_strtod_l+0xafc>)
 800b70e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b712:	2600      	movs	r6, #0
 800b714:	e7b1      	b.n	800b67a <_strtod_l+0x992>
 800b716:	4f34      	ldr	r7, [pc, #208]	@ (800b7e8 <_strtod_l+0xb00>)
 800b718:	2600      	movs	r6, #0
 800b71a:	e7aa      	b.n	800b672 <_strtod_l+0x98a>
 800b71c:	4b32      	ldr	r3, [pc, #200]	@ (800b7e8 <_strtod_l+0xb00>)
 800b71e:	4630      	mov	r0, r6
 800b720:	4639      	mov	r1, r7
 800b722:	2200      	movs	r2, #0
 800b724:	f7f4 ff70 	bl	8000608 <__aeabi_dmul>
 800b728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d09f      	beq.n	800b672 <_strtod_l+0x98a>
 800b732:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b736:	e7a0      	b.n	800b67a <_strtod_l+0x992>
 800b738:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b7c0 <_strtod_l+0xad8>
 800b73c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b740:	ec57 6b17 	vmov	r6, r7, d7
 800b744:	e799      	b.n	800b67a <_strtod_l+0x992>
 800b746:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b74a:	9b08      	ldr	r3, [sp, #32]
 800b74c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1c1      	bne.n	800b6d8 <_strtod_l+0x9f0>
 800b754:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b758:	0d1b      	lsrs	r3, r3, #20
 800b75a:	051b      	lsls	r3, r3, #20
 800b75c:	429d      	cmp	r5, r3
 800b75e:	d1bb      	bne.n	800b6d8 <_strtod_l+0x9f0>
 800b760:	4630      	mov	r0, r6
 800b762:	4639      	mov	r1, r7
 800b764:	f7f5 fab0 	bl	8000cc8 <__aeabi_d2lz>
 800b768:	f7f4 ff20 	bl	80005ac <__aeabi_l2d>
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f4 fd90 	bl	8000298 <__aeabi_dsub>
 800b778:	460b      	mov	r3, r1
 800b77a:	4602      	mov	r2, r0
 800b77c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b780:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b786:	ea46 060a 	orr.w	r6, r6, sl
 800b78a:	431e      	orrs	r6, r3
 800b78c:	d06f      	beq.n	800b86e <_strtod_l+0xb86>
 800b78e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b7c8 <_strtod_l+0xae0>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f5 f9aa 	bl	8000aec <__aeabi_dcmplt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	f47f accf 	bne.w	800b13c <_strtod_l+0x454>
 800b79e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b7d0 <_strtod_l+0xae8>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7a8:	f7f5 f9be 	bl	8000b28 <__aeabi_dcmpgt>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d093      	beq.n	800b6d8 <_strtod_l+0x9f0>
 800b7b0:	e4c4      	b.n	800b13c <_strtod_l+0x454>
 800b7b2:	bf00      	nop
 800b7b4:	f3af 8000 	nop.w
 800b7b8:	00000000 	.word	0x00000000
 800b7bc:	bff00000 	.word	0xbff00000
 800b7c0:	00000000 	.word	0x00000000
 800b7c4:	3ff00000 	.word	0x3ff00000
 800b7c8:	94a03595 	.word	0x94a03595
 800b7cc:	3fdfffff 	.word	0x3fdfffff
 800b7d0:	35afe535 	.word	0x35afe535
 800b7d4:	3fe00000 	.word	0x3fe00000
 800b7d8:	000fffff 	.word	0x000fffff
 800b7dc:	7ff00000 	.word	0x7ff00000
 800b7e0:	7fefffff 	.word	0x7fefffff
 800b7e4:	3ff00000 	.word	0x3ff00000
 800b7e8:	3fe00000 	.word	0x3fe00000
 800b7ec:	7fe00000 	.word	0x7fe00000
 800b7f0:	7c9fffff 	.word	0x7c9fffff
 800b7f4:	9b08      	ldr	r3, [sp, #32]
 800b7f6:	b323      	cbz	r3, 800b842 <_strtod_l+0xb5a>
 800b7f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b7fc:	d821      	bhi.n	800b842 <_strtod_l+0xb5a>
 800b7fe:	a328      	add	r3, pc, #160	@ (adr r3, 800b8a0 <_strtod_l+0xbb8>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f5 f97a 	bl	8000b00 <__aeabi_dcmple>
 800b80c:	b1a0      	cbz	r0, 800b838 <_strtod_l+0xb50>
 800b80e:	4639      	mov	r1, r7
 800b810:	4630      	mov	r0, r6
 800b812:	f7f5 f9d1 	bl	8000bb8 <__aeabi_d2uiz>
 800b816:	2801      	cmp	r0, #1
 800b818:	bf38      	it	cc
 800b81a:	2001      	movcc	r0, #1
 800b81c:	f7f4 fe7a 	bl	8000514 <__aeabi_ui2d>
 800b820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b822:	4606      	mov	r6, r0
 800b824:	460f      	mov	r7, r1
 800b826:	b9fb      	cbnz	r3, 800b868 <_strtod_l+0xb80>
 800b828:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b82c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b82e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b830:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b834:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b838:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b83a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b83e:	1b5b      	subs	r3, r3, r5
 800b840:	9311      	str	r3, [sp, #68]	@ 0x44
 800b842:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b846:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b84a:	f7fe ff41 	bl	800a6d0 <__ulp>
 800b84e:	4650      	mov	r0, sl
 800b850:	ec53 2b10 	vmov	r2, r3, d0
 800b854:	4659      	mov	r1, fp
 800b856:	f7f4 fed7 	bl	8000608 <__aeabi_dmul>
 800b85a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b85e:	f7f4 fd1d 	bl	800029c <__adddf3>
 800b862:	4682      	mov	sl, r0
 800b864:	468b      	mov	fp, r1
 800b866:	e770      	b.n	800b74a <_strtod_l+0xa62>
 800b868:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b86c:	e7e0      	b.n	800b830 <_strtod_l+0xb48>
 800b86e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b8a8 <_strtod_l+0xbc0>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f5 f93a 	bl	8000aec <__aeabi_dcmplt>
 800b878:	e798      	b.n	800b7ac <_strtod_l+0xac4>
 800b87a:	2300      	movs	r3, #0
 800b87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b87e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	f7ff ba6d 	b.w	800ad62 <_strtod_l+0x7a>
 800b888:	2a65      	cmp	r2, #101	@ 0x65
 800b88a:	f43f ab66 	beq.w	800af5a <_strtod_l+0x272>
 800b88e:	2a45      	cmp	r2, #69	@ 0x45
 800b890:	f43f ab63 	beq.w	800af5a <_strtod_l+0x272>
 800b894:	2301      	movs	r3, #1
 800b896:	f7ff bb9e 	b.w	800afd6 <_strtod_l+0x2ee>
 800b89a:	bf00      	nop
 800b89c:	f3af 8000 	nop.w
 800b8a0:	ffc00000 	.word	0xffc00000
 800b8a4:	41dfffff 	.word	0x41dfffff
 800b8a8:	94a03595 	.word	0x94a03595
 800b8ac:	3fcfffff 	.word	0x3fcfffff

0800b8b0 <_strtod_r>:
 800b8b0:	4b01      	ldr	r3, [pc, #4]	@ (800b8b8 <_strtod_r+0x8>)
 800b8b2:	f7ff ba19 	b.w	800ace8 <_strtod_l>
 800b8b6:	bf00      	nop
 800b8b8:	20000554 	.word	0x20000554

0800b8bc <_strtol_l.constprop.0>:
 800b8bc:	2b24      	cmp	r3, #36	@ 0x24
 800b8be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c2:	4686      	mov	lr, r0
 800b8c4:	4690      	mov	r8, r2
 800b8c6:	d801      	bhi.n	800b8cc <_strtol_l.constprop.0+0x10>
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d106      	bne.n	800b8da <_strtol_l.constprop.0+0x1e>
 800b8cc:	f7fa fc84 	bl	80061d8 <__errno>
 800b8d0:	2316      	movs	r3, #22
 800b8d2:	6003      	str	r3, [r0, #0]
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8da:	4834      	ldr	r0, [pc, #208]	@ (800b9ac <_strtol_l.constprop.0+0xf0>)
 800b8dc:	460d      	mov	r5, r1
 800b8de:	462a      	mov	r2, r5
 800b8e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8e4:	5d06      	ldrb	r6, [r0, r4]
 800b8e6:	f016 0608 	ands.w	r6, r6, #8
 800b8ea:	d1f8      	bne.n	800b8de <_strtol_l.constprop.0+0x22>
 800b8ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800b8ee:	d12d      	bne.n	800b94c <_strtol_l.constprop.0+0x90>
 800b8f0:	782c      	ldrb	r4, [r5, #0]
 800b8f2:	2601      	movs	r6, #1
 800b8f4:	1c95      	adds	r5, r2, #2
 800b8f6:	f033 0210 	bics.w	r2, r3, #16
 800b8fa:	d109      	bne.n	800b910 <_strtol_l.constprop.0+0x54>
 800b8fc:	2c30      	cmp	r4, #48	@ 0x30
 800b8fe:	d12a      	bne.n	800b956 <_strtol_l.constprop.0+0x9a>
 800b900:	782a      	ldrb	r2, [r5, #0]
 800b902:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b906:	2a58      	cmp	r2, #88	@ 0x58
 800b908:	d125      	bne.n	800b956 <_strtol_l.constprop.0+0x9a>
 800b90a:	786c      	ldrb	r4, [r5, #1]
 800b90c:	2310      	movs	r3, #16
 800b90e:	3502      	adds	r5, #2
 800b910:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b914:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b918:	2200      	movs	r2, #0
 800b91a:	fbbc f9f3 	udiv	r9, ip, r3
 800b91e:	4610      	mov	r0, r2
 800b920:	fb03 ca19 	mls	sl, r3, r9, ip
 800b924:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b928:	2f09      	cmp	r7, #9
 800b92a:	d81b      	bhi.n	800b964 <_strtol_l.constprop.0+0xa8>
 800b92c:	463c      	mov	r4, r7
 800b92e:	42a3      	cmp	r3, r4
 800b930:	dd27      	ble.n	800b982 <_strtol_l.constprop.0+0xc6>
 800b932:	1c57      	adds	r7, r2, #1
 800b934:	d007      	beq.n	800b946 <_strtol_l.constprop.0+0x8a>
 800b936:	4581      	cmp	r9, r0
 800b938:	d320      	bcc.n	800b97c <_strtol_l.constprop.0+0xc0>
 800b93a:	d101      	bne.n	800b940 <_strtol_l.constprop.0+0x84>
 800b93c:	45a2      	cmp	sl, r4
 800b93e:	db1d      	blt.n	800b97c <_strtol_l.constprop.0+0xc0>
 800b940:	fb00 4003 	mla	r0, r0, r3, r4
 800b944:	2201      	movs	r2, #1
 800b946:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b94a:	e7eb      	b.n	800b924 <_strtol_l.constprop.0+0x68>
 800b94c:	2c2b      	cmp	r4, #43	@ 0x2b
 800b94e:	bf04      	itt	eq
 800b950:	782c      	ldrbeq	r4, [r5, #0]
 800b952:	1c95      	addeq	r5, r2, #2
 800b954:	e7cf      	b.n	800b8f6 <_strtol_l.constprop.0+0x3a>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1da      	bne.n	800b910 <_strtol_l.constprop.0+0x54>
 800b95a:	2c30      	cmp	r4, #48	@ 0x30
 800b95c:	bf0c      	ite	eq
 800b95e:	2308      	moveq	r3, #8
 800b960:	230a      	movne	r3, #10
 800b962:	e7d5      	b.n	800b910 <_strtol_l.constprop.0+0x54>
 800b964:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b968:	2f19      	cmp	r7, #25
 800b96a:	d801      	bhi.n	800b970 <_strtol_l.constprop.0+0xb4>
 800b96c:	3c37      	subs	r4, #55	@ 0x37
 800b96e:	e7de      	b.n	800b92e <_strtol_l.constprop.0+0x72>
 800b970:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b974:	2f19      	cmp	r7, #25
 800b976:	d804      	bhi.n	800b982 <_strtol_l.constprop.0+0xc6>
 800b978:	3c57      	subs	r4, #87	@ 0x57
 800b97a:	e7d8      	b.n	800b92e <_strtol_l.constprop.0+0x72>
 800b97c:	f04f 32ff 	mov.w	r2, #4294967295
 800b980:	e7e1      	b.n	800b946 <_strtol_l.constprop.0+0x8a>
 800b982:	1c53      	adds	r3, r2, #1
 800b984:	d108      	bne.n	800b998 <_strtol_l.constprop.0+0xdc>
 800b986:	2322      	movs	r3, #34	@ 0x22
 800b988:	f8ce 3000 	str.w	r3, [lr]
 800b98c:	4660      	mov	r0, ip
 800b98e:	f1b8 0f00 	cmp.w	r8, #0
 800b992:	d0a0      	beq.n	800b8d6 <_strtol_l.constprop.0+0x1a>
 800b994:	1e69      	subs	r1, r5, #1
 800b996:	e006      	b.n	800b9a6 <_strtol_l.constprop.0+0xea>
 800b998:	b106      	cbz	r6, 800b99c <_strtol_l.constprop.0+0xe0>
 800b99a:	4240      	negs	r0, r0
 800b99c:	f1b8 0f00 	cmp.w	r8, #0
 800b9a0:	d099      	beq.n	800b8d6 <_strtol_l.constprop.0+0x1a>
 800b9a2:	2a00      	cmp	r2, #0
 800b9a4:	d1f6      	bne.n	800b994 <_strtol_l.constprop.0+0xd8>
 800b9a6:	f8c8 1000 	str.w	r1, [r8]
 800b9aa:	e794      	b.n	800b8d6 <_strtol_l.constprop.0+0x1a>
 800b9ac:	0800db01 	.word	0x0800db01

0800b9b0 <_strtol_r>:
 800b9b0:	f7ff bf84 	b.w	800b8bc <_strtol_l.constprop.0>

0800b9b4 <_strtoul_l.constprop.0>:
 800b9b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9b8:	4e34      	ldr	r6, [pc, #208]	@ (800ba8c <_strtoul_l.constprop.0+0xd8>)
 800b9ba:	4686      	mov	lr, r0
 800b9bc:	460d      	mov	r5, r1
 800b9be:	4628      	mov	r0, r5
 800b9c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9c4:	5d37      	ldrb	r7, [r6, r4]
 800b9c6:	f017 0708 	ands.w	r7, r7, #8
 800b9ca:	d1f8      	bne.n	800b9be <_strtoul_l.constprop.0+0xa>
 800b9cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800b9ce:	d12f      	bne.n	800ba30 <_strtoul_l.constprop.0+0x7c>
 800b9d0:	782c      	ldrb	r4, [r5, #0]
 800b9d2:	2701      	movs	r7, #1
 800b9d4:	1c85      	adds	r5, r0, #2
 800b9d6:	f033 0010 	bics.w	r0, r3, #16
 800b9da:	d109      	bne.n	800b9f0 <_strtoul_l.constprop.0+0x3c>
 800b9dc:	2c30      	cmp	r4, #48	@ 0x30
 800b9de:	d12c      	bne.n	800ba3a <_strtoul_l.constprop.0+0x86>
 800b9e0:	7828      	ldrb	r0, [r5, #0]
 800b9e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b9e6:	2858      	cmp	r0, #88	@ 0x58
 800b9e8:	d127      	bne.n	800ba3a <_strtoul_l.constprop.0+0x86>
 800b9ea:	786c      	ldrb	r4, [r5, #1]
 800b9ec:	2310      	movs	r3, #16
 800b9ee:	3502      	adds	r5, #2
 800b9f0:	f04f 38ff 	mov.w	r8, #4294967295
 800b9f4:	2600      	movs	r6, #0
 800b9f6:	fbb8 f8f3 	udiv	r8, r8, r3
 800b9fa:	fb03 f908 	mul.w	r9, r3, r8
 800b9fe:	ea6f 0909 	mvn.w	r9, r9
 800ba02:	4630      	mov	r0, r6
 800ba04:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ba08:	f1bc 0f09 	cmp.w	ip, #9
 800ba0c:	d81c      	bhi.n	800ba48 <_strtoul_l.constprop.0+0x94>
 800ba0e:	4664      	mov	r4, ip
 800ba10:	42a3      	cmp	r3, r4
 800ba12:	dd2a      	ble.n	800ba6a <_strtoul_l.constprop.0+0xb6>
 800ba14:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ba18:	d007      	beq.n	800ba2a <_strtoul_l.constprop.0+0x76>
 800ba1a:	4580      	cmp	r8, r0
 800ba1c:	d322      	bcc.n	800ba64 <_strtoul_l.constprop.0+0xb0>
 800ba1e:	d101      	bne.n	800ba24 <_strtoul_l.constprop.0+0x70>
 800ba20:	45a1      	cmp	r9, r4
 800ba22:	db1f      	blt.n	800ba64 <_strtoul_l.constprop.0+0xb0>
 800ba24:	fb00 4003 	mla	r0, r0, r3, r4
 800ba28:	2601      	movs	r6, #1
 800ba2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba2e:	e7e9      	b.n	800ba04 <_strtoul_l.constprop.0+0x50>
 800ba30:	2c2b      	cmp	r4, #43	@ 0x2b
 800ba32:	bf04      	itt	eq
 800ba34:	782c      	ldrbeq	r4, [r5, #0]
 800ba36:	1c85      	addeq	r5, r0, #2
 800ba38:	e7cd      	b.n	800b9d6 <_strtoul_l.constprop.0+0x22>
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d1d8      	bne.n	800b9f0 <_strtoul_l.constprop.0+0x3c>
 800ba3e:	2c30      	cmp	r4, #48	@ 0x30
 800ba40:	bf0c      	ite	eq
 800ba42:	2308      	moveq	r3, #8
 800ba44:	230a      	movne	r3, #10
 800ba46:	e7d3      	b.n	800b9f0 <_strtoul_l.constprop.0+0x3c>
 800ba48:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ba4c:	f1bc 0f19 	cmp.w	ip, #25
 800ba50:	d801      	bhi.n	800ba56 <_strtoul_l.constprop.0+0xa2>
 800ba52:	3c37      	subs	r4, #55	@ 0x37
 800ba54:	e7dc      	b.n	800ba10 <_strtoul_l.constprop.0+0x5c>
 800ba56:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ba5a:	f1bc 0f19 	cmp.w	ip, #25
 800ba5e:	d804      	bhi.n	800ba6a <_strtoul_l.constprop.0+0xb6>
 800ba60:	3c57      	subs	r4, #87	@ 0x57
 800ba62:	e7d5      	b.n	800ba10 <_strtoul_l.constprop.0+0x5c>
 800ba64:	f04f 36ff 	mov.w	r6, #4294967295
 800ba68:	e7df      	b.n	800ba2a <_strtoul_l.constprop.0+0x76>
 800ba6a:	1c73      	adds	r3, r6, #1
 800ba6c:	d106      	bne.n	800ba7c <_strtoul_l.constprop.0+0xc8>
 800ba6e:	2322      	movs	r3, #34	@ 0x22
 800ba70:	f8ce 3000 	str.w	r3, [lr]
 800ba74:	4630      	mov	r0, r6
 800ba76:	b932      	cbnz	r2, 800ba86 <_strtoul_l.constprop.0+0xd2>
 800ba78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba7c:	b107      	cbz	r7, 800ba80 <_strtoul_l.constprop.0+0xcc>
 800ba7e:	4240      	negs	r0, r0
 800ba80:	2a00      	cmp	r2, #0
 800ba82:	d0f9      	beq.n	800ba78 <_strtoul_l.constprop.0+0xc4>
 800ba84:	b106      	cbz	r6, 800ba88 <_strtoul_l.constprop.0+0xd4>
 800ba86:	1e69      	subs	r1, r5, #1
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	e7f5      	b.n	800ba78 <_strtoul_l.constprop.0+0xc4>
 800ba8c:	0800db01 	.word	0x0800db01

0800ba90 <_strtoul_r>:
 800ba90:	f7ff bf90 	b.w	800b9b4 <_strtoul_l.constprop.0>

0800ba94 <__ascii_wctomb>:
 800ba94:	4603      	mov	r3, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	b141      	cbz	r1, 800baac <__ascii_wctomb+0x18>
 800ba9a:	2aff      	cmp	r2, #255	@ 0xff
 800ba9c:	d904      	bls.n	800baa8 <__ascii_wctomb+0x14>
 800ba9e:	228a      	movs	r2, #138	@ 0x8a
 800baa0:	601a      	str	r2, [r3, #0]
 800baa2:	f04f 30ff 	mov.w	r0, #4294967295
 800baa6:	4770      	bx	lr
 800baa8:	700a      	strb	r2, [r1, #0]
 800baaa:	2001      	movs	r0, #1
 800baac:	4770      	bx	lr
	...

0800bab0 <_strtoll_l.constprop.0>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	b085      	sub	sp, #20
 800bab6:	4690      	mov	r8, r2
 800bab8:	4a43      	ldr	r2, [pc, #268]	@ (800bbc8 <_strtoll_l.constprop.0+0x118>)
 800baba:	9002      	str	r0, [sp, #8]
 800babc:	4689      	mov	r9, r1
 800babe:	461e      	mov	r6, r3
 800bac0:	460d      	mov	r5, r1
 800bac2:	462b      	mov	r3, r5
 800bac4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bac8:	5d17      	ldrb	r7, [r2, r4]
 800baca:	f017 0708 	ands.w	r7, r7, #8
 800bace:	d1f8      	bne.n	800bac2 <_strtoll_l.constprop.0+0x12>
 800bad0:	2c2d      	cmp	r4, #45	@ 0x2d
 800bad2:	d149      	bne.n	800bb68 <_strtoll_l.constprop.0+0xb8>
 800bad4:	782c      	ldrb	r4, [r5, #0]
 800bad6:	2701      	movs	r7, #1
 800bad8:	1c9d      	adds	r5, r3, #2
 800bada:	f036 0310 	bics.w	r3, r6, #16
 800bade:	d109      	bne.n	800baf4 <_strtoll_l.constprop.0+0x44>
 800bae0:	2c30      	cmp	r4, #48	@ 0x30
 800bae2:	d146      	bne.n	800bb72 <_strtoll_l.constprop.0+0xc2>
 800bae4:	782b      	ldrb	r3, [r5, #0]
 800bae6:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800baea:	2b58      	cmp	r3, #88	@ 0x58
 800baec:	d141      	bne.n	800bb72 <_strtoll_l.constprop.0+0xc2>
 800baee:	786c      	ldrb	r4, [r5, #1]
 800baf0:	2610      	movs	r6, #16
 800baf2:	3502      	adds	r5, #2
 800baf4:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 800baf8:	f107 3bff 	add.w	fp, r7, #4294967295
 800bafc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb00:	17f3      	asrs	r3, r6, #31
 800bb02:	4632      	mov	r2, r6
 800bb04:	4658      	mov	r0, fp
 800bb06:	4651      	mov	r1, sl
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	f7f5 f8c5 	bl	8000c98 <__aeabi_uldivmod>
 800bb0e:	9201      	str	r2, [sp, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	468e      	mov	lr, r1
 800bb14:	4684      	mov	ip, r0
 800bb16:	4611      	mov	r1, r2
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800bb1e:	2b09      	cmp	r3, #9
 800bb20:	d905      	bls.n	800bb2e <_strtoll_l.constprop.0+0x7e>
 800bb22:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 800bb26:	2b19      	cmp	r3, #25
 800bb28:	d82a      	bhi.n	800bb80 <_strtoll_l.constprop.0+0xd0>
 800bb2a:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800bb2e:	429e      	cmp	r6, r3
 800bb30:	dd30      	ble.n	800bb94 <_strtoll_l.constprop.0+0xe4>
 800bb32:	1c54      	adds	r4, r2, #1
 800bb34:	d015      	beq.n	800bb62 <_strtoll_l.constprop.0+0xb2>
 800bb36:	4584      	cmp	ip, r0
 800bb38:	eb7e 0201 	sbcs.w	r2, lr, r1
 800bb3c:	d327      	bcc.n	800bb8e <_strtoll_l.constprop.0+0xde>
 800bb3e:	458e      	cmp	lr, r1
 800bb40:	bf08      	it	eq
 800bb42:	4584      	cmpeq	ip, r0
 800bb44:	d102      	bne.n	800bb4c <_strtoll_l.constprop.0+0x9c>
 800bb46:	9a01      	ldr	r2, [sp, #4]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	db20      	blt.n	800bb8e <_strtoll_l.constprop.0+0xde>
 800bb4c:	9a03      	ldr	r2, [sp, #12]
 800bb4e:	4371      	muls	r1, r6
 800bb50:	fb00 1102 	mla	r1, r0, r2, r1
 800bb54:	fba6 0200 	umull	r0, r2, r6, r0
 800bb58:	440a      	add	r2, r1
 800bb5a:	1818      	adds	r0, r3, r0
 800bb5c:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800bb60:	2201      	movs	r2, #1
 800bb62:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb66:	e7d8      	b.n	800bb1a <_strtoll_l.constprop.0+0x6a>
 800bb68:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb6a:	bf04      	itt	eq
 800bb6c:	782c      	ldrbeq	r4, [r5, #0]
 800bb6e:	1c9d      	addeq	r5, r3, #2
 800bb70:	e7b3      	b.n	800bada <_strtoll_l.constprop.0+0x2a>
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	d1be      	bne.n	800baf4 <_strtoll_l.constprop.0+0x44>
 800bb76:	2c30      	cmp	r4, #48	@ 0x30
 800bb78:	bf0c      	ite	eq
 800bb7a:	2608      	moveq	r6, #8
 800bb7c:	260a      	movne	r6, #10
 800bb7e:	e7b9      	b.n	800baf4 <_strtoll_l.constprop.0+0x44>
 800bb80:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 800bb84:	2b19      	cmp	r3, #25
 800bb86:	d805      	bhi.n	800bb94 <_strtoll_l.constprop.0+0xe4>
 800bb88:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 800bb8c:	e7cf      	b.n	800bb2e <_strtoll_l.constprop.0+0x7e>
 800bb8e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb92:	e7e6      	b.n	800bb62 <_strtoll_l.constprop.0+0xb2>
 800bb94:	1c53      	adds	r3, r2, #1
 800bb96:	d10a      	bne.n	800bbae <_strtoll_l.constprop.0+0xfe>
 800bb98:	9a02      	ldr	r2, [sp, #8]
 800bb9a:	2322      	movs	r3, #34	@ 0x22
 800bb9c:	6013      	str	r3, [r2, #0]
 800bb9e:	4658      	mov	r0, fp
 800bba0:	4651      	mov	r1, sl
 800bba2:	f1b8 0f00 	cmp.w	r8, #0
 800bba6:	d10a      	bne.n	800bbbe <_strtoll_l.constprop.0+0x10e>
 800bba8:	b005      	add	sp, #20
 800bbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbae:	b117      	cbz	r7, 800bbb6 <_strtoll_l.constprop.0+0x106>
 800bbb0:	4240      	negs	r0, r0
 800bbb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800bbb6:	f1b8 0f00 	cmp.w	r8, #0
 800bbba:	d0f5      	beq.n	800bba8 <_strtoll_l.constprop.0+0xf8>
 800bbbc:	b10a      	cbz	r2, 800bbc2 <_strtoll_l.constprop.0+0x112>
 800bbbe:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbc2:	f8c8 9000 	str.w	r9, [r8]
 800bbc6:	e7ef      	b.n	800bba8 <_strtoll_l.constprop.0+0xf8>
 800bbc8:	0800db01 	.word	0x0800db01

0800bbcc <_strtoll_r>:
 800bbcc:	f7ff bf70 	b.w	800bab0 <_strtoll_l.constprop.0>

0800bbd0 <_strtoull_l.constprop.0>:
 800bbd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	4691      	mov	r9, r2
 800bbd6:	4a48      	ldr	r2, [pc, #288]	@ (800bcf8 <_strtoull_l.constprop.0+0x128>)
 800bbd8:	9001      	str	r0, [sp, #4]
 800bbda:	468a      	mov	sl, r1
 800bbdc:	461e      	mov	r6, r3
 800bbde:	460d      	mov	r5, r1
 800bbe0:	462b      	mov	r3, r5
 800bbe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbe6:	5d17      	ldrb	r7, [r2, r4]
 800bbe8:	f017 0708 	ands.w	r7, r7, #8
 800bbec:	d1f8      	bne.n	800bbe0 <_strtoull_l.constprop.0+0x10>
 800bbee:	2c2d      	cmp	r4, #45	@ 0x2d
 800bbf0:	d14a      	bne.n	800bc88 <_strtoull_l.constprop.0+0xb8>
 800bbf2:	782c      	ldrb	r4, [r5, #0]
 800bbf4:	2701      	movs	r7, #1
 800bbf6:	1c9d      	adds	r5, r3, #2
 800bbf8:	f036 0310 	bics.w	r3, r6, #16
 800bbfc:	d109      	bne.n	800bc12 <_strtoull_l.constprop.0+0x42>
 800bbfe:	2c30      	cmp	r4, #48	@ 0x30
 800bc00:	d147      	bne.n	800bc92 <_strtoull_l.constprop.0+0xc2>
 800bc02:	782b      	ldrb	r3, [r5, #0]
 800bc04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bc08:	2b58      	cmp	r3, #88	@ 0x58
 800bc0a:	d142      	bne.n	800bc92 <_strtoull_l.constprop.0+0xc2>
 800bc0c:	786c      	ldrb	r4, [r5, #1]
 800bc0e:	2610      	movs	r6, #16
 800bc10:	3502      	adds	r5, #2
 800bc12:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800bc16:	4632      	mov	r2, r6
 800bc18:	465b      	mov	r3, fp
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1e:	f04f 31ff 	mov.w	r1, #4294967295
 800bc22:	f7f5 f839 	bl	8000c98 <__aeabi_uldivmod>
 800bc26:	4632      	mov	r2, r6
 800bc28:	9000      	str	r0, [sp, #0]
 800bc2a:	4688      	mov	r8, r1
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc32:	f04f 31ff 	mov.w	r1, #4294967295
 800bc36:	f7f5 f82f 	bl	8000c98 <__aeabi_uldivmod>
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bc44:	f1bc 0f09 	cmp.w	ip, #9
 800bc48:	d82a      	bhi.n	800bca0 <_strtoull_l.constprop.0+0xd0>
 800bc4a:	4664      	mov	r4, ip
 800bc4c:	42a6      	cmp	r6, r4
 800bc4e:	dd38      	ble.n	800bcc2 <_strtoull_l.constprop.0+0xf2>
 800bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc54:	d015      	beq.n	800bc82 <_strtoull_l.constprop.0+0xb2>
 800bc56:	9b00      	ldr	r3, [sp, #0]
 800bc58:	4283      	cmp	r3, r0
 800bc5a:	eb78 0301 	sbcs.w	r3, r8, r1
 800bc5e:	d32d      	bcc.n	800bcbc <_strtoull_l.constprop.0+0xec>
 800bc60:	9b00      	ldr	r3, [sp, #0]
 800bc62:	4588      	cmp	r8, r1
 800bc64:	bf08      	it	eq
 800bc66:	4283      	cmpeq	r3, r0
 800bc68:	d101      	bne.n	800bc6e <_strtoull_l.constprop.0+0x9e>
 800bc6a:	42a2      	cmp	r2, r4
 800bc6c:	db26      	blt.n	800bcbc <_strtoull_l.constprop.0+0xec>
 800bc6e:	4371      	muls	r1, r6
 800bc70:	fb00 110b 	mla	r1, r0, fp, r1
 800bc74:	fba6 0300 	umull	r0, r3, r6, r0
 800bc78:	4419      	add	r1, r3
 800bc7a:	1820      	adds	r0, r4, r0
 800bc7c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800bc80:	2301      	movs	r3, #1
 800bc82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bc86:	e7db      	b.n	800bc40 <_strtoull_l.constprop.0+0x70>
 800bc88:	2c2b      	cmp	r4, #43	@ 0x2b
 800bc8a:	bf04      	itt	eq
 800bc8c:	782c      	ldrbeq	r4, [r5, #0]
 800bc8e:	1c9d      	addeq	r5, r3, #2
 800bc90:	e7b2      	b.n	800bbf8 <_strtoull_l.constprop.0+0x28>
 800bc92:	2e00      	cmp	r6, #0
 800bc94:	d1bd      	bne.n	800bc12 <_strtoull_l.constprop.0+0x42>
 800bc96:	2c30      	cmp	r4, #48	@ 0x30
 800bc98:	bf0c      	ite	eq
 800bc9a:	2608      	moveq	r6, #8
 800bc9c:	260a      	movne	r6, #10
 800bc9e:	e7b8      	b.n	800bc12 <_strtoull_l.constprop.0+0x42>
 800bca0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bca4:	f1bc 0f19 	cmp.w	ip, #25
 800bca8:	d801      	bhi.n	800bcae <_strtoull_l.constprop.0+0xde>
 800bcaa:	3c37      	subs	r4, #55	@ 0x37
 800bcac:	e7ce      	b.n	800bc4c <_strtoull_l.constprop.0+0x7c>
 800bcae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bcb2:	f1bc 0f19 	cmp.w	ip, #25
 800bcb6:	d804      	bhi.n	800bcc2 <_strtoull_l.constprop.0+0xf2>
 800bcb8:	3c57      	subs	r4, #87	@ 0x57
 800bcba:	e7c7      	b.n	800bc4c <_strtoull_l.constprop.0+0x7c>
 800bcbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bcc0:	e7df      	b.n	800bc82 <_strtoull_l.constprop.0+0xb2>
 800bcc2:	1c5a      	adds	r2, r3, #1
 800bcc4:	d10a      	bne.n	800bcdc <_strtoull_l.constprop.0+0x10c>
 800bcc6:	9901      	ldr	r1, [sp, #4]
 800bcc8:	2222      	movs	r2, #34	@ 0x22
 800bcca:	600a      	str	r2, [r1, #0]
 800bccc:	4618      	mov	r0, r3
 800bcce:	4619      	mov	r1, r3
 800bcd0:	f1b9 0f00 	cmp.w	r9, #0
 800bcd4:	d10a      	bne.n	800bcec <_strtoull_l.constprop.0+0x11c>
 800bcd6:	b003      	add	sp, #12
 800bcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcdc:	b117      	cbz	r7, 800bce4 <_strtoull_l.constprop.0+0x114>
 800bcde:	4240      	negs	r0, r0
 800bce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800bce4:	f1b9 0f00 	cmp.w	r9, #0
 800bce8:	d0f5      	beq.n	800bcd6 <_strtoull_l.constprop.0+0x106>
 800bcea:	b10b      	cbz	r3, 800bcf0 <_strtoull_l.constprop.0+0x120>
 800bcec:	f105 3aff 	add.w	sl, r5, #4294967295
 800bcf0:	f8c9 a000 	str.w	sl, [r9]
 800bcf4:	e7ef      	b.n	800bcd6 <_strtoull_l.constprop.0+0x106>
 800bcf6:	bf00      	nop
 800bcf8:	0800db01 	.word	0x0800db01

0800bcfc <_strtoull_r>:
 800bcfc:	f7ff bf68 	b.w	800bbd0 <_strtoull_l.constprop.0>

0800bd00 <_mbrtowc_r>:
 800bd00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd02:	4c0a      	ldr	r4, [pc, #40]	@ (800bd2c <_mbrtowc_r+0x2c>)
 800bd04:	9e08      	ldr	r6, [sp, #32]
 800bd06:	f8d4 70e4 	ldr.w	r7, [r4, #228]	@ 0xe4
 800bd0a:	9600      	str	r6, [sp, #0]
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	4614      	mov	r4, r2
 800bd10:	b912      	cbnz	r2, 800bd18 <_mbrtowc_r+0x18>
 800bd12:	4a07      	ldr	r2, [pc, #28]	@ (800bd30 <_mbrtowc_r+0x30>)
 800bd14:	2301      	movs	r3, #1
 800bd16:	4621      	mov	r1, r4
 800bd18:	47b8      	blx	r7
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	bf01      	itttt	eq
 800bd1e:	2300      	moveq	r3, #0
 800bd20:	6033      	streq	r3, [r6, #0]
 800bd22:	238a      	moveq	r3, #138	@ 0x8a
 800bd24:	602b      	streq	r3, [r5, #0]
 800bd26:	b003      	add	sp, #12
 800bd28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	20000554 	.word	0x20000554
 800bd30:	0800dc3c 	.word	0x0800dc3c

0800bd34 <iswspace>:
 800bd34:	2100      	movs	r1, #0
 800bd36:	f000 b801 	b.w	800bd3c <iswspace_l>
	...

0800bd3c <iswspace_l>:
 800bd3c:	28ff      	cmp	r0, #255	@ 0xff
 800bd3e:	bf9d      	ittte	ls
 800bd40:	4b02      	ldrls	r3, [pc, #8]	@ (800bd4c <iswspace_l+0x10>)
 800bd42:	5c18      	ldrbls	r0, [r3, r0]
 800bd44:	f000 0008 	andls.w	r0, r0, #8
 800bd48:	2000      	movhi	r0, #0
 800bd4a:	4770      	bx	lr
 800bd4c:	0800db01 	.word	0x0800db01

0800bd50 <__ssprint_r>:
 800bd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	6893      	ldr	r3, [r2, #8]
 800bd56:	f8d2 b000 	ldr.w	fp, [r2]
 800bd5a:	9001      	str	r0, [sp, #4]
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	4617      	mov	r7, r2
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d157      	bne.n	800be14 <__ssprint_r+0xc4>
 800bd64:	2000      	movs	r0, #0
 800bd66:	2300      	movs	r3, #0
 800bd68:	607b      	str	r3, [r7, #4]
 800bd6a:	b003      	add	sp, #12
 800bd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd70:	e9db a800 	ldrd	sl, r8, [fp]
 800bd74:	f10b 0b08 	add.w	fp, fp, #8
 800bd78:	68a6      	ldr	r6, [r4, #8]
 800bd7a:	6820      	ldr	r0, [r4, #0]
 800bd7c:	f1b8 0f00 	cmp.w	r8, #0
 800bd80:	d0f6      	beq.n	800bd70 <__ssprint_r+0x20>
 800bd82:	45b0      	cmp	r8, r6
 800bd84:	d32e      	bcc.n	800bde4 <__ssprint_r+0x94>
 800bd86:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd8a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bd8e:	d029      	beq.n	800bde4 <__ssprint_r+0x94>
 800bd90:	6921      	ldr	r1, [r4, #16]
 800bd92:	6965      	ldr	r5, [r4, #20]
 800bd94:	eba0 0901 	sub.w	r9, r0, r1
 800bd98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bda0:	f109 0001 	add.w	r0, r9, #1
 800bda4:	106d      	asrs	r5, r5, #1
 800bda6:	4440      	add	r0, r8
 800bda8:	4285      	cmp	r5, r0
 800bdaa:	bf38      	it	cc
 800bdac:	4605      	movcc	r5, r0
 800bdae:	0553      	lsls	r3, r2, #21
 800bdb0:	d534      	bpl.n	800be1c <__ssprint_r+0xcc>
 800bdb2:	9801      	ldr	r0, [sp, #4]
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	f7fa fb71 	bl	800649c <_malloc_r>
 800bdba:	4606      	mov	r6, r0
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d038      	beq.n	800be32 <__ssprint_r+0xe2>
 800bdc0:	464a      	mov	r2, r9
 800bdc2:	6921      	ldr	r1, [r4, #16]
 800bdc4:	f7fa fa36 	bl	8006234 <memcpy>
 800bdc8:	89a2      	ldrh	r2, [r4, #12]
 800bdca:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800bdce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bdd2:	81a2      	strh	r2, [r4, #12]
 800bdd4:	6126      	str	r6, [r4, #16]
 800bdd6:	6165      	str	r5, [r4, #20]
 800bdd8:	444e      	add	r6, r9
 800bdda:	eba5 0509 	sub.w	r5, r5, r9
 800bdde:	6026      	str	r6, [r4, #0]
 800bde0:	60a5      	str	r5, [r4, #8]
 800bde2:	4646      	mov	r6, r8
 800bde4:	4546      	cmp	r6, r8
 800bde6:	bf28      	it	cs
 800bde8:	4646      	movcs	r6, r8
 800bdea:	4632      	mov	r2, r6
 800bdec:	4651      	mov	r1, sl
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	f000 f8f6 	bl	800bfe0 <memmove>
 800bdf4:	68a2      	ldr	r2, [r4, #8]
 800bdf6:	1b92      	subs	r2, r2, r6
 800bdf8:	60a2      	str	r2, [r4, #8]
 800bdfa:	6822      	ldr	r2, [r4, #0]
 800bdfc:	4432      	add	r2, r6
 800bdfe:	6022      	str	r2, [r4, #0]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	eba2 0308 	sub.w	r3, r2, r8
 800be06:	44c2      	add	sl, r8
 800be08:	60bb      	str	r3, [r7, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0aa      	beq.n	800bd64 <__ssprint_r+0x14>
 800be0e:	f04f 0800 	mov.w	r8, #0
 800be12:	e7b1      	b.n	800bd78 <__ssprint_r+0x28>
 800be14:	f04f 0a00 	mov.w	sl, #0
 800be18:	46d0      	mov	r8, sl
 800be1a:	e7ad      	b.n	800bd78 <__ssprint_r+0x28>
 800be1c:	9801      	ldr	r0, [sp, #4]
 800be1e:	462a      	mov	r2, r5
 800be20:	f7fe fd9c 	bl	800a95c <_realloc_r>
 800be24:	4606      	mov	r6, r0
 800be26:	2800      	cmp	r0, #0
 800be28:	d1d4      	bne.n	800bdd4 <__ssprint_r+0x84>
 800be2a:	6921      	ldr	r1, [r4, #16]
 800be2c:	9801      	ldr	r0, [sp, #4]
 800be2e:	f7fa fa75 	bl	800631c <_free_r>
 800be32:	9a01      	ldr	r2, [sp, #4]
 800be34:	230c      	movs	r3, #12
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be3e:	81a3      	strh	r3, [r4, #12]
 800be40:	2300      	movs	r3, #0
 800be42:	60bb      	str	r3, [r7, #8]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	e78d      	b.n	800bd66 <__ssprint_r+0x16>

0800be4a <_sungetc_r>:
 800be4a:	b538      	push	{r3, r4, r5, lr}
 800be4c:	1c4b      	adds	r3, r1, #1
 800be4e:	4614      	mov	r4, r2
 800be50:	d103      	bne.n	800be5a <_sungetc_r+0x10>
 800be52:	f04f 35ff 	mov.w	r5, #4294967295
 800be56:	4628      	mov	r0, r5
 800be58:	bd38      	pop	{r3, r4, r5, pc}
 800be5a:	8993      	ldrh	r3, [r2, #12]
 800be5c:	f023 0320 	bic.w	r3, r3, #32
 800be60:	8193      	strh	r3, [r2, #12]
 800be62:	6853      	ldr	r3, [r2, #4]
 800be64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be66:	b2cd      	uxtb	r5, r1
 800be68:	b18a      	cbz	r2, 800be8e <_sungetc_r+0x44>
 800be6a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800be6c:	429a      	cmp	r2, r3
 800be6e:	dd08      	ble.n	800be82 <_sungetc_r+0x38>
 800be70:	6823      	ldr	r3, [r4, #0]
 800be72:	1e5a      	subs	r2, r3, #1
 800be74:	6022      	str	r2, [r4, #0]
 800be76:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be7a:	6863      	ldr	r3, [r4, #4]
 800be7c:	3301      	adds	r3, #1
 800be7e:	6063      	str	r3, [r4, #4]
 800be80:	e7e9      	b.n	800be56 <_sungetc_r+0xc>
 800be82:	4621      	mov	r1, r4
 800be84:	f000 f872 	bl	800bf6c <__submore>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d0f1      	beq.n	800be70 <_sungetc_r+0x26>
 800be8c:	e7e1      	b.n	800be52 <_sungetc_r+0x8>
 800be8e:	6921      	ldr	r1, [r4, #16]
 800be90:	6822      	ldr	r2, [r4, #0]
 800be92:	b141      	cbz	r1, 800bea6 <_sungetc_r+0x5c>
 800be94:	4291      	cmp	r1, r2
 800be96:	d206      	bcs.n	800bea6 <_sungetc_r+0x5c>
 800be98:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800be9c:	42a9      	cmp	r1, r5
 800be9e:	d102      	bne.n	800bea6 <_sungetc_r+0x5c>
 800bea0:	3a01      	subs	r2, #1
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	e7ea      	b.n	800be7c <_sungetc_r+0x32>
 800bea6:	e9c4 230e 	strd	r2, r3, [r4, #56]	@ 0x38
 800beaa:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800beae:	6323      	str	r3, [r4, #48]	@ 0x30
 800beb0:	2303      	movs	r3, #3
 800beb2:	6363      	str	r3, [r4, #52]	@ 0x34
 800beb4:	4623      	mov	r3, r4
 800beb6:	f803 5f42 	strb.w	r5, [r3, #66]!
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	2301      	movs	r3, #1
 800bebe:	e7de      	b.n	800be7e <_sungetc_r+0x34>

0800bec0 <__ssrefill_r>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	460c      	mov	r4, r1
 800bec4:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800bec6:	b169      	cbz	r1, 800bee4 <__ssrefill_r+0x24>
 800bec8:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800becc:	4299      	cmp	r1, r3
 800bece:	d001      	beq.n	800bed4 <__ssrefill_r+0x14>
 800bed0:	f7fa fa24 	bl	800631c <_free_r>
 800bed4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bed6:	6063      	str	r3, [r4, #4]
 800bed8:	2000      	movs	r0, #0
 800beda:	6320      	str	r0, [r4, #48]	@ 0x30
 800bedc:	b113      	cbz	r3, 800bee4 <__ssrefill_r+0x24>
 800bede:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800bee0:	6023      	str	r3, [r4, #0]
 800bee2:	bd10      	pop	{r4, pc}
 800bee4:	6923      	ldr	r3, [r4, #16]
 800bee6:	6023      	str	r3, [r4, #0]
 800bee8:	2300      	movs	r3, #0
 800beea:	6063      	str	r3, [r4, #4]
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f043 0320 	orr.w	r3, r3, #32
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	f04f 30ff 	mov.w	r0, #4294967295
 800bef8:	e7f3      	b.n	800bee2 <__ssrefill_r+0x22>

0800befa <_sfread_r>:
 800befa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befe:	461f      	mov	r7, r3
 800bf00:	4613      	mov	r3, r2
 800bf02:	437b      	muls	r3, r7
 800bf04:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800bf06:	9000      	str	r0, [sp, #0]
 800bf08:	4688      	mov	r8, r1
 800bf0a:	4691      	mov	r9, r2
 800bf0c:	d028      	beq.n	800bf60 <_sfread_r+0x66>
 800bf0e:	461e      	mov	r6, r3
 800bf10:	f04f 0b00 	mov.w	fp, #0
 800bf14:	e9d4 1500 	ldrd	r1, r5, [r4]
 800bf18:	42b5      	cmp	r5, r6
 800bf1a:	d30b      	bcc.n	800bf34 <_sfread_r+0x3a>
 800bf1c:	4632      	mov	r2, r6
 800bf1e:	4640      	mov	r0, r8
 800bf20:	f7fa f988 	bl	8006234 <memcpy>
 800bf24:	6862      	ldr	r2, [r4, #4]
 800bf26:	6821      	ldr	r1, [r4, #0]
 800bf28:	1b92      	subs	r2, r2, r6
 800bf2a:	4431      	add	r1, r6
 800bf2c:	6062      	str	r2, [r4, #4]
 800bf2e:	6021      	str	r1, [r4, #0]
 800bf30:	463b      	mov	r3, r7
 800bf32:	e015      	b.n	800bf60 <_sfread_r+0x66>
 800bf34:	462a      	mov	r2, r5
 800bf36:	4640      	mov	r0, r8
 800bf38:	9301      	str	r3, [sp, #4]
 800bf3a:	f7fa f97b 	bl	8006234 <memcpy>
 800bf3e:	6822      	ldr	r2, [r4, #0]
 800bf40:	9800      	ldr	r0, [sp, #0]
 800bf42:	442a      	add	r2, r5
 800bf44:	e9c4 2b00 	strd	r2, fp, [r4]
 800bf48:	4621      	mov	r1, r4
 800bf4a:	f7ff ffb9 	bl	800bec0 <__ssrefill_r>
 800bf4e:	44a8      	add	r8, r5
 800bf50:	9b01      	ldr	r3, [sp, #4]
 800bf52:	eba6 0a05 	sub.w	sl, r6, r5
 800bf56:	b138      	cbz	r0, 800bf68 <_sfread_r+0x6e>
 800bf58:	441d      	add	r5, r3
 800bf5a:	1bad      	subs	r5, r5, r6
 800bf5c:	fbb5 f3f9 	udiv	r3, r5, r9
 800bf60:	4618      	mov	r0, r3
 800bf62:	b003      	add	sp, #12
 800bf64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf68:	4656      	mov	r6, sl
 800bf6a:	e7d3      	b.n	800bf14 <_sfread_r+0x1a>

0800bf6c <__submore>:
 800bf6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf70:	460c      	mov	r4, r1
 800bf72:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 800bf74:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800bf78:	4299      	cmp	r1, r3
 800bf7a:	d11d      	bne.n	800bfb8 <__submore+0x4c>
 800bf7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800bf80:	f7fa fa8c 	bl	800649c <_malloc_r>
 800bf84:	b918      	cbnz	r0, 800bf8e <__submore+0x22>
 800bf86:	f04f 30ff 	mov.w	r0, #4294967295
 800bf8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bf92:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf94:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 800bf98:	6320      	str	r0, [r4, #48]	@ 0x30
 800bf9a:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800bf9e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800bfa2:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800bfa6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800bfaa:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800bfae:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800bfb2:	6020      	str	r0, [r4, #0]
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	e7e8      	b.n	800bf8a <__submore+0x1e>
 800bfb8:	6b66      	ldr	r6, [r4, #52]	@ 0x34
 800bfba:	0077      	lsls	r7, r6, #1
 800bfbc:	463a      	mov	r2, r7
 800bfbe:	f7fe fccd 	bl	800a95c <_realloc_r>
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d0de      	beq.n	800bf86 <__submore+0x1a>
 800bfc8:	eb00 0806 	add.w	r8, r0, r6
 800bfcc:	4601      	mov	r1, r0
 800bfce:	4632      	mov	r2, r6
 800bfd0:	4640      	mov	r0, r8
 800bfd2:	f7fa f92f 	bl	8006234 <memcpy>
 800bfd6:	e9c4 570c 	strd	r5, r7, [r4, #48]	@ 0x30
 800bfda:	f8c4 8000 	str.w	r8, [r4]
 800bfde:	e7e9      	b.n	800bfb4 <__submore+0x48>

0800bfe0 <memmove>:
 800bfe0:	4288      	cmp	r0, r1
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	eb01 0402 	add.w	r4, r1, r2
 800bfe8:	d902      	bls.n	800bff0 <memmove+0x10>
 800bfea:	4284      	cmp	r4, r0
 800bfec:	4623      	mov	r3, r4
 800bfee:	d807      	bhi.n	800c000 <memmove+0x20>
 800bff0:	1e43      	subs	r3, r0, #1
 800bff2:	42a1      	cmp	r1, r4
 800bff4:	d008      	beq.n	800c008 <memmove+0x28>
 800bff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bffe:	e7f8      	b.n	800bff2 <memmove+0x12>
 800c000:	4402      	add	r2, r0
 800c002:	4601      	mov	r1, r0
 800c004:	428a      	cmp	r2, r1
 800c006:	d100      	bne.n	800c00a <memmove+0x2a>
 800c008:	bd10      	pop	{r4, pc}
 800c00a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c00e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c012:	e7f7      	b.n	800c004 <memmove+0x24>

0800c014 <strncmp>:
 800c014:	b510      	push	{r4, lr}
 800c016:	b16a      	cbz	r2, 800c034 <strncmp+0x20>
 800c018:	3901      	subs	r1, #1
 800c01a:	1884      	adds	r4, r0, r2
 800c01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c020:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c024:	429a      	cmp	r2, r3
 800c026:	d103      	bne.n	800c030 <strncmp+0x1c>
 800c028:	42a0      	cmp	r0, r4
 800c02a:	d001      	beq.n	800c030 <strncmp+0x1c>
 800c02c:	2a00      	cmp	r2, #0
 800c02e:	d1f5      	bne.n	800c01c <strncmp+0x8>
 800c030:	1ad0      	subs	r0, r2, r3
 800c032:	bd10      	pop	{r4, pc}
 800c034:	4610      	mov	r0, r2
 800c036:	e7fc      	b.n	800c032 <strncmp+0x1e>

0800c038 <nan>:
 800c038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c040 <nan+0x8>
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	00000000 	.word	0x00000000
 800c044:	7ff80000 	.word	0x7ff80000

0800c048 <__assert_func>:
 800c048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c04a:	4614      	mov	r4, r2
 800c04c:	461a      	mov	r2, r3
 800c04e:	4b09      	ldr	r3, [pc, #36]	@ (800c074 <__assert_func+0x2c>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4605      	mov	r5, r0
 800c054:	68d8      	ldr	r0, [r3, #12]
 800c056:	b954      	cbnz	r4, 800c06e <__assert_func+0x26>
 800c058:	4b07      	ldr	r3, [pc, #28]	@ (800c078 <__assert_func+0x30>)
 800c05a:	461c      	mov	r4, r3
 800c05c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c060:	9100      	str	r1, [sp, #0]
 800c062:	462b      	mov	r3, r5
 800c064:	4905      	ldr	r1, [pc, #20]	@ (800c07c <__assert_func+0x34>)
 800c066:	f000 fb7b 	bl	800c760 <fiprintf>
 800c06a:	f001 fa91 	bl	800d590 <abort>
 800c06e:	4b04      	ldr	r3, [pc, #16]	@ (800c080 <__assert_func+0x38>)
 800c070:	e7f4      	b.n	800c05c <__assert_func+0x14>
 800c072:	bf00      	nop
 800c074:	20000018 	.word	0x20000018
 800c078:	0800dc3c 	.word	0x0800dc3c
 800c07c:	0800dc0e 	.word	0x0800dc0e
 800c080:	0800dc01 	.word	0x0800dc01

0800c084 <_calloc_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	fba1 1502 	umull	r1, r5, r1, r2
 800c08a:	b935      	cbnz	r5, 800c09a <_calloc_r+0x16>
 800c08c:	f7fa fa06 	bl	800649c <_malloc_r>
 800c090:	4604      	mov	r4, r0
 800c092:	b938      	cbnz	r0, 800c0a4 <_calloc_r+0x20>
 800c094:	2400      	movs	r4, #0
 800c096:	4620      	mov	r0, r4
 800c098:	bd38      	pop	{r3, r4, r5, pc}
 800c09a:	f7fa f89d 	bl	80061d8 <__errno>
 800c09e:	230c      	movs	r3, #12
 800c0a0:	6003      	str	r3, [r0, #0]
 800c0a2:	e7f7      	b.n	800c094 <_calloc_r+0x10>
 800c0a4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c0a8:	f022 0203 	bic.w	r2, r2, #3
 800c0ac:	3a04      	subs	r2, #4
 800c0ae:	2a24      	cmp	r2, #36	@ 0x24
 800c0b0:	d819      	bhi.n	800c0e6 <_calloc_r+0x62>
 800c0b2:	2a13      	cmp	r2, #19
 800c0b4:	d915      	bls.n	800c0e2 <_calloc_r+0x5e>
 800c0b6:	2a1b      	cmp	r2, #27
 800c0b8:	e9c0 5500 	strd	r5, r5, [r0]
 800c0bc:	d806      	bhi.n	800c0cc <_calloc_r+0x48>
 800c0be:	f100 0308 	add.w	r3, r0, #8
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	e9c3 2200 	strd	r2, r2, [r3]
 800c0c8:	609a      	str	r2, [r3, #8]
 800c0ca:	e7e4      	b.n	800c096 <_calloc_r+0x12>
 800c0cc:	2a24      	cmp	r2, #36	@ 0x24
 800c0ce:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c0d2:	bf11      	iteee	ne
 800c0d4:	f100 0310 	addne.w	r3, r0, #16
 800c0d8:	6105      	streq	r5, [r0, #16]
 800c0da:	f100 0318 	addeq.w	r3, r0, #24
 800c0de:	6145      	streq	r5, [r0, #20]
 800c0e0:	e7ef      	b.n	800c0c2 <_calloc_r+0x3e>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	e7ed      	b.n	800c0c2 <_calloc_r+0x3e>
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7fa f827 	bl	800613a <memset>
 800c0ec:	e7d3      	b.n	800c096 <_calloc_r+0x12>

0800c0ee <rshift>:
 800c0ee:	6903      	ldr	r3, [r0, #16]
 800c0f0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0f8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0fc:	f100 0414 	add.w	r4, r0, #20
 800c100:	dd45      	ble.n	800c18e <rshift+0xa0>
 800c102:	f011 011f 	ands.w	r1, r1, #31
 800c106:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c10a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c10e:	d10c      	bne.n	800c12a <rshift+0x3c>
 800c110:	f100 0710 	add.w	r7, r0, #16
 800c114:	4629      	mov	r1, r5
 800c116:	42b1      	cmp	r1, r6
 800c118:	d334      	bcc.n	800c184 <rshift+0x96>
 800c11a:	1a9b      	subs	r3, r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	1eea      	subs	r2, r5, #3
 800c120:	4296      	cmp	r6, r2
 800c122:	bf38      	it	cc
 800c124:	2300      	movcc	r3, #0
 800c126:	4423      	add	r3, r4
 800c128:	e015      	b.n	800c156 <rshift+0x68>
 800c12a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c12e:	f1c1 0820 	rsb	r8, r1, #32
 800c132:	40cf      	lsrs	r7, r1
 800c134:	f105 0e04 	add.w	lr, r5, #4
 800c138:	46a1      	mov	r9, r4
 800c13a:	4576      	cmp	r6, lr
 800c13c:	46f4      	mov	ip, lr
 800c13e:	d815      	bhi.n	800c16c <rshift+0x7e>
 800c140:	1a9a      	subs	r2, r3, r2
 800c142:	0092      	lsls	r2, r2, #2
 800c144:	3a04      	subs	r2, #4
 800c146:	3501      	adds	r5, #1
 800c148:	42ae      	cmp	r6, r5
 800c14a:	bf38      	it	cc
 800c14c:	2200      	movcc	r2, #0
 800c14e:	18a3      	adds	r3, r4, r2
 800c150:	50a7      	str	r7, [r4, r2]
 800c152:	b107      	cbz	r7, 800c156 <rshift+0x68>
 800c154:	3304      	adds	r3, #4
 800c156:	1b1a      	subs	r2, r3, r4
 800c158:	42a3      	cmp	r3, r4
 800c15a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c15e:	bf08      	it	eq
 800c160:	2300      	moveq	r3, #0
 800c162:	6102      	str	r2, [r0, #16]
 800c164:	bf08      	it	eq
 800c166:	6143      	streq	r3, [r0, #20]
 800c168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c16c:	f8dc c000 	ldr.w	ip, [ip]
 800c170:	fa0c fc08 	lsl.w	ip, ip, r8
 800c174:	ea4c 0707 	orr.w	r7, ip, r7
 800c178:	f849 7b04 	str.w	r7, [r9], #4
 800c17c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c180:	40cf      	lsrs	r7, r1
 800c182:	e7da      	b.n	800c13a <rshift+0x4c>
 800c184:	f851 cb04 	ldr.w	ip, [r1], #4
 800c188:	f847 cf04 	str.w	ip, [r7, #4]!
 800c18c:	e7c3      	b.n	800c116 <rshift+0x28>
 800c18e:	4623      	mov	r3, r4
 800c190:	e7e1      	b.n	800c156 <rshift+0x68>

0800c192 <__hexdig_fun>:
 800c192:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c196:	2b09      	cmp	r3, #9
 800c198:	d802      	bhi.n	800c1a0 <__hexdig_fun+0xe>
 800c19a:	3820      	subs	r0, #32
 800c19c:	b2c0      	uxtb	r0, r0
 800c19e:	4770      	bx	lr
 800c1a0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c1a4:	2b05      	cmp	r3, #5
 800c1a6:	d801      	bhi.n	800c1ac <__hexdig_fun+0x1a>
 800c1a8:	3847      	subs	r0, #71	@ 0x47
 800c1aa:	e7f7      	b.n	800c19c <__hexdig_fun+0xa>
 800c1ac:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c1b0:	2b05      	cmp	r3, #5
 800c1b2:	d801      	bhi.n	800c1b8 <__hexdig_fun+0x26>
 800c1b4:	3827      	subs	r0, #39	@ 0x27
 800c1b6:	e7f1      	b.n	800c19c <__hexdig_fun+0xa>
 800c1b8:	2000      	movs	r0, #0
 800c1ba:	4770      	bx	lr

0800c1bc <__gethex>:
 800c1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c0:	b085      	sub	sp, #20
 800c1c2:	468a      	mov	sl, r1
 800c1c4:	9302      	str	r3, [sp, #8]
 800c1c6:	680b      	ldr	r3, [r1, #0]
 800c1c8:	9001      	str	r0, [sp, #4]
 800c1ca:	4690      	mov	r8, r2
 800c1cc:	1c9c      	adds	r4, r3, #2
 800c1ce:	46a1      	mov	r9, r4
 800c1d0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c1d4:	2830      	cmp	r0, #48	@ 0x30
 800c1d6:	d0fa      	beq.n	800c1ce <__gethex+0x12>
 800c1d8:	eba9 0303 	sub.w	r3, r9, r3
 800c1dc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c1e0:	f7ff ffd7 	bl	800c192 <__hexdig_fun>
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d168      	bne.n	800c2bc <__gethex+0x100>
 800c1ea:	49a0      	ldr	r1, [pc, #640]	@ (800c46c <__gethex+0x2b0>)
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	4648      	mov	r0, r9
 800c1f0:	f7ff ff10 	bl	800c014 <strncmp>
 800c1f4:	4607      	mov	r7, r0
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	d167      	bne.n	800c2ca <__gethex+0x10e>
 800c1fa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c1fe:	4626      	mov	r6, r4
 800c200:	f7ff ffc7 	bl	800c192 <__hexdig_fun>
 800c204:	2800      	cmp	r0, #0
 800c206:	d062      	beq.n	800c2ce <__gethex+0x112>
 800c208:	4623      	mov	r3, r4
 800c20a:	7818      	ldrb	r0, [r3, #0]
 800c20c:	2830      	cmp	r0, #48	@ 0x30
 800c20e:	4699      	mov	r9, r3
 800c210:	f103 0301 	add.w	r3, r3, #1
 800c214:	d0f9      	beq.n	800c20a <__gethex+0x4e>
 800c216:	f7ff ffbc 	bl	800c192 <__hexdig_fun>
 800c21a:	fab0 f580 	clz	r5, r0
 800c21e:	096d      	lsrs	r5, r5, #5
 800c220:	f04f 0b01 	mov.w	fp, #1
 800c224:	464a      	mov	r2, r9
 800c226:	4616      	mov	r6, r2
 800c228:	3201      	adds	r2, #1
 800c22a:	7830      	ldrb	r0, [r6, #0]
 800c22c:	f7ff ffb1 	bl	800c192 <__hexdig_fun>
 800c230:	2800      	cmp	r0, #0
 800c232:	d1f8      	bne.n	800c226 <__gethex+0x6a>
 800c234:	498d      	ldr	r1, [pc, #564]	@ (800c46c <__gethex+0x2b0>)
 800c236:	2201      	movs	r2, #1
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff feeb 	bl	800c014 <strncmp>
 800c23e:	2800      	cmp	r0, #0
 800c240:	d13f      	bne.n	800c2c2 <__gethex+0x106>
 800c242:	b944      	cbnz	r4, 800c256 <__gethex+0x9a>
 800c244:	1c74      	adds	r4, r6, #1
 800c246:	4622      	mov	r2, r4
 800c248:	4616      	mov	r6, r2
 800c24a:	3201      	adds	r2, #1
 800c24c:	7830      	ldrb	r0, [r6, #0]
 800c24e:	f7ff ffa0 	bl	800c192 <__hexdig_fun>
 800c252:	2800      	cmp	r0, #0
 800c254:	d1f8      	bne.n	800c248 <__gethex+0x8c>
 800c256:	1ba4      	subs	r4, r4, r6
 800c258:	00a7      	lsls	r7, r4, #2
 800c25a:	7833      	ldrb	r3, [r6, #0]
 800c25c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c260:	2b50      	cmp	r3, #80	@ 0x50
 800c262:	d13e      	bne.n	800c2e2 <__gethex+0x126>
 800c264:	7873      	ldrb	r3, [r6, #1]
 800c266:	2b2b      	cmp	r3, #43	@ 0x2b
 800c268:	d033      	beq.n	800c2d2 <__gethex+0x116>
 800c26a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c26c:	d034      	beq.n	800c2d8 <__gethex+0x11c>
 800c26e:	1c71      	adds	r1, r6, #1
 800c270:	2400      	movs	r4, #0
 800c272:	7808      	ldrb	r0, [r1, #0]
 800c274:	f7ff ff8d 	bl	800c192 <__hexdig_fun>
 800c278:	1e43      	subs	r3, r0, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b18      	cmp	r3, #24
 800c27e:	d830      	bhi.n	800c2e2 <__gethex+0x126>
 800c280:	f1a0 0210 	sub.w	r2, r0, #16
 800c284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c288:	f7ff ff83 	bl	800c192 <__hexdig_fun>
 800c28c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c290:	fa5f fc8c 	uxtb.w	ip, ip
 800c294:	f1bc 0f18 	cmp.w	ip, #24
 800c298:	f04f 030a 	mov.w	r3, #10
 800c29c:	d91e      	bls.n	800c2dc <__gethex+0x120>
 800c29e:	b104      	cbz	r4, 800c2a2 <__gethex+0xe6>
 800c2a0:	4252      	negs	r2, r2
 800c2a2:	4417      	add	r7, r2
 800c2a4:	f8ca 1000 	str.w	r1, [sl]
 800c2a8:	b1ed      	cbz	r5, 800c2e6 <__gethex+0x12a>
 800c2aa:	f1bb 0f00 	cmp.w	fp, #0
 800c2ae:	bf0c      	ite	eq
 800c2b0:	2506      	moveq	r5, #6
 800c2b2:	2500      	movne	r5, #0
 800c2b4:	4628      	mov	r0, r5
 800c2b6:	b005      	add	sp, #20
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	2500      	movs	r5, #0
 800c2be:	462c      	mov	r4, r5
 800c2c0:	e7b0      	b.n	800c224 <__gethex+0x68>
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	d1c7      	bne.n	800c256 <__gethex+0x9a>
 800c2c6:	4627      	mov	r7, r4
 800c2c8:	e7c7      	b.n	800c25a <__gethex+0x9e>
 800c2ca:	464e      	mov	r6, r9
 800c2cc:	462f      	mov	r7, r5
 800c2ce:	2501      	movs	r5, #1
 800c2d0:	e7c3      	b.n	800c25a <__gethex+0x9e>
 800c2d2:	2400      	movs	r4, #0
 800c2d4:	1cb1      	adds	r1, r6, #2
 800c2d6:	e7cc      	b.n	800c272 <__gethex+0xb6>
 800c2d8:	2401      	movs	r4, #1
 800c2da:	e7fb      	b.n	800c2d4 <__gethex+0x118>
 800c2dc:	fb03 0002 	mla	r0, r3, r2, r0
 800c2e0:	e7ce      	b.n	800c280 <__gethex+0xc4>
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	e7de      	b.n	800c2a4 <__gethex+0xe8>
 800c2e6:	eba6 0309 	sub.w	r3, r6, r9
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	2b07      	cmp	r3, #7
 800c2f0:	dc0a      	bgt.n	800c308 <__gethex+0x14c>
 800c2f2:	9801      	ldr	r0, [sp, #4]
 800c2f4:	f7fd fec6 	bl	800a084 <_Balloc>
 800c2f8:	4604      	mov	r4, r0
 800c2fa:	b940      	cbnz	r0, 800c30e <__gethex+0x152>
 800c2fc:	4b5c      	ldr	r3, [pc, #368]	@ (800c470 <__gethex+0x2b4>)
 800c2fe:	4602      	mov	r2, r0
 800c300:	21e4      	movs	r1, #228	@ 0xe4
 800c302:	485c      	ldr	r0, [pc, #368]	@ (800c474 <__gethex+0x2b8>)
 800c304:	f7ff fea0 	bl	800c048 <__assert_func>
 800c308:	3101      	adds	r1, #1
 800c30a:	105b      	asrs	r3, r3, #1
 800c30c:	e7ef      	b.n	800c2ee <__gethex+0x132>
 800c30e:	f100 0a14 	add.w	sl, r0, #20
 800c312:	2300      	movs	r3, #0
 800c314:	4655      	mov	r5, sl
 800c316:	469b      	mov	fp, r3
 800c318:	45b1      	cmp	r9, r6
 800c31a:	d337      	bcc.n	800c38c <__gethex+0x1d0>
 800c31c:	f845 bb04 	str.w	fp, [r5], #4
 800c320:	eba5 050a 	sub.w	r5, r5, sl
 800c324:	10ad      	asrs	r5, r5, #2
 800c326:	6125      	str	r5, [r4, #16]
 800c328:	4658      	mov	r0, fp
 800c32a:	f7fd ff69 	bl	800a200 <__hi0bits>
 800c32e:	016d      	lsls	r5, r5, #5
 800c330:	f8d8 6000 	ldr.w	r6, [r8]
 800c334:	1a2d      	subs	r5, r5, r0
 800c336:	42b5      	cmp	r5, r6
 800c338:	dd54      	ble.n	800c3e4 <__gethex+0x228>
 800c33a:	1bad      	subs	r5, r5, r6
 800c33c:	4629      	mov	r1, r5
 800c33e:	4620      	mov	r0, r4
 800c340:	f7fe fae3 	bl	800a90a <__any_on>
 800c344:	4681      	mov	r9, r0
 800c346:	b178      	cbz	r0, 800c368 <__gethex+0x1ac>
 800c348:	1e6b      	subs	r3, r5, #1
 800c34a:	1159      	asrs	r1, r3, #5
 800c34c:	f003 021f 	and.w	r2, r3, #31
 800c350:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c354:	f04f 0901 	mov.w	r9, #1
 800c358:	fa09 f202 	lsl.w	r2, r9, r2
 800c35c:	420a      	tst	r2, r1
 800c35e:	d003      	beq.n	800c368 <__gethex+0x1ac>
 800c360:	454b      	cmp	r3, r9
 800c362:	dc36      	bgt.n	800c3d2 <__gethex+0x216>
 800c364:	f04f 0902 	mov.w	r9, #2
 800c368:	4629      	mov	r1, r5
 800c36a:	4620      	mov	r0, r4
 800c36c:	f7ff febf 	bl	800c0ee <rshift>
 800c370:	442f      	add	r7, r5
 800c372:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c376:	42bb      	cmp	r3, r7
 800c378:	da42      	bge.n	800c400 <__gethex+0x244>
 800c37a:	9801      	ldr	r0, [sp, #4]
 800c37c:	4621      	mov	r1, r4
 800c37e:	f7fd fea6 	bl	800a0ce <_Bfree>
 800c382:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c384:	2300      	movs	r3, #0
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	25a3      	movs	r5, #163	@ 0xa3
 800c38a:	e793      	b.n	800c2b4 <__gethex+0xf8>
 800c38c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c390:	2a2e      	cmp	r2, #46	@ 0x2e
 800c392:	d012      	beq.n	800c3ba <__gethex+0x1fe>
 800c394:	2b20      	cmp	r3, #32
 800c396:	d104      	bne.n	800c3a2 <__gethex+0x1e6>
 800c398:	f845 bb04 	str.w	fp, [r5], #4
 800c39c:	f04f 0b00 	mov.w	fp, #0
 800c3a0:	465b      	mov	r3, fp
 800c3a2:	7830      	ldrb	r0, [r6, #0]
 800c3a4:	9303      	str	r3, [sp, #12]
 800c3a6:	f7ff fef4 	bl	800c192 <__hexdig_fun>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	f000 000f 	and.w	r0, r0, #15
 800c3b0:	4098      	lsls	r0, r3
 800c3b2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	e7ae      	b.n	800c318 <__gethex+0x15c>
 800c3ba:	45b1      	cmp	r9, r6
 800c3bc:	d8ea      	bhi.n	800c394 <__gethex+0x1d8>
 800c3be:	492b      	ldr	r1, [pc, #172]	@ (800c46c <__gethex+0x2b0>)
 800c3c0:	9303      	str	r3, [sp, #12]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f7ff fe25 	bl	800c014 <strncmp>
 800c3ca:	9b03      	ldr	r3, [sp, #12]
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	d1e1      	bne.n	800c394 <__gethex+0x1d8>
 800c3d0:	e7a2      	b.n	800c318 <__gethex+0x15c>
 800c3d2:	1ea9      	subs	r1, r5, #2
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	f7fe fa98 	bl	800a90a <__any_on>
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d0c2      	beq.n	800c364 <__gethex+0x1a8>
 800c3de:	f04f 0903 	mov.w	r9, #3
 800c3e2:	e7c1      	b.n	800c368 <__gethex+0x1ac>
 800c3e4:	da09      	bge.n	800c3fa <__gethex+0x23e>
 800c3e6:	1b75      	subs	r5, r6, r5
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	9801      	ldr	r0, [sp, #4]
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	f7fe f853 	bl	800a498 <__lshift>
 800c3f2:	1b7f      	subs	r7, r7, r5
 800c3f4:	4604      	mov	r4, r0
 800c3f6:	f100 0a14 	add.w	sl, r0, #20
 800c3fa:	f04f 0900 	mov.w	r9, #0
 800c3fe:	e7b8      	b.n	800c372 <__gethex+0x1b6>
 800c400:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c404:	42bd      	cmp	r5, r7
 800c406:	dd6f      	ble.n	800c4e8 <__gethex+0x32c>
 800c408:	1bed      	subs	r5, r5, r7
 800c40a:	42ae      	cmp	r6, r5
 800c40c:	dc34      	bgt.n	800c478 <__gethex+0x2bc>
 800c40e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c412:	2b02      	cmp	r3, #2
 800c414:	d022      	beq.n	800c45c <__gethex+0x2a0>
 800c416:	2b03      	cmp	r3, #3
 800c418:	d024      	beq.n	800c464 <__gethex+0x2a8>
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d115      	bne.n	800c44a <__gethex+0x28e>
 800c41e:	42ae      	cmp	r6, r5
 800c420:	d113      	bne.n	800c44a <__gethex+0x28e>
 800c422:	2e01      	cmp	r6, #1
 800c424:	d10b      	bne.n	800c43e <__gethex+0x282>
 800c426:	9a02      	ldr	r2, [sp, #8]
 800c428:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c42c:	6013      	str	r3, [r2, #0]
 800c42e:	2301      	movs	r3, #1
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	f8ca 3000 	str.w	r3, [sl]
 800c436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c438:	2562      	movs	r5, #98	@ 0x62
 800c43a:	601c      	str	r4, [r3, #0]
 800c43c:	e73a      	b.n	800c2b4 <__gethex+0xf8>
 800c43e:	1e71      	subs	r1, r6, #1
 800c440:	4620      	mov	r0, r4
 800c442:	f7fe fa62 	bl	800a90a <__any_on>
 800c446:	2800      	cmp	r0, #0
 800c448:	d1ed      	bne.n	800c426 <__gethex+0x26a>
 800c44a:	9801      	ldr	r0, [sp, #4]
 800c44c:	4621      	mov	r1, r4
 800c44e:	f7fd fe3e 	bl	800a0ce <_Bfree>
 800c452:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c454:	2300      	movs	r3, #0
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	2550      	movs	r5, #80	@ 0x50
 800c45a:	e72b      	b.n	800c2b4 <__gethex+0xf8>
 800c45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d1f3      	bne.n	800c44a <__gethex+0x28e>
 800c462:	e7e0      	b.n	800c426 <__gethex+0x26a>
 800c464:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1dd      	bne.n	800c426 <__gethex+0x26a>
 800c46a:	e7ee      	b.n	800c44a <__gethex+0x28e>
 800c46c:	0800d8dc 	.word	0x0800d8dc
 800c470:	0800d8eb 	.word	0x0800d8eb
 800c474:	0800dc3d 	.word	0x0800dc3d
 800c478:	1e6f      	subs	r7, r5, #1
 800c47a:	f1b9 0f00 	cmp.w	r9, #0
 800c47e:	d130      	bne.n	800c4e2 <__gethex+0x326>
 800c480:	b127      	cbz	r7, 800c48c <__gethex+0x2d0>
 800c482:	4639      	mov	r1, r7
 800c484:	4620      	mov	r0, r4
 800c486:	f7fe fa40 	bl	800a90a <__any_on>
 800c48a:	4681      	mov	r9, r0
 800c48c:	117a      	asrs	r2, r7, #5
 800c48e:	2301      	movs	r3, #1
 800c490:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c494:	f007 071f 	and.w	r7, r7, #31
 800c498:	40bb      	lsls	r3, r7
 800c49a:	4213      	tst	r3, r2
 800c49c:	4629      	mov	r1, r5
 800c49e:	4620      	mov	r0, r4
 800c4a0:	bf18      	it	ne
 800c4a2:	f049 0902 	orrne.w	r9, r9, #2
 800c4a6:	f7ff fe22 	bl	800c0ee <rshift>
 800c4aa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c4ae:	1b76      	subs	r6, r6, r5
 800c4b0:	2502      	movs	r5, #2
 800c4b2:	f1b9 0f00 	cmp.w	r9, #0
 800c4b6:	d047      	beq.n	800c548 <__gethex+0x38c>
 800c4b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d015      	beq.n	800c4ec <__gethex+0x330>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d017      	beq.n	800c4f4 <__gethex+0x338>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d109      	bne.n	800c4dc <__gethex+0x320>
 800c4c8:	f019 0f02 	tst.w	r9, #2
 800c4cc:	d006      	beq.n	800c4dc <__gethex+0x320>
 800c4ce:	f8da 3000 	ldr.w	r3, [sl]
 800c4d2:	ea49 0903 	orr.w	r9, r9, r3
 800c4d6:	f019 0f01 	tst.w	r9, #1
 800c4da:	d10e      	bne.n	800c4fa <__gethex+0x33e>
 800c4dc:	f045 0510 	orr.w	r5, r5, #16
 800c4e0:	e032      	b.n	800c548 <__gethex+0x38c>
 800c4e2:	f04f 0901 	mov.w	r9, #1
 800c4e6:	e7d1      	b.n	800c48c <__gethex+0x2d0>
 800c4e8:	2501      	movs	r5, #1
 800c4ea:	e7e2      	b.n	800c4b2 <__gethex+0x2f6>
 800c4ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4ee:	f1c3 0301 	rsb	r3, r3, #1
 800c4f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0f0      	beq.n	800c4dc <__gethex+0x320>
 800c4fa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4fe:	f104 0314 	add.w	r3, r4, #20
 800c502:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c506:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c50a:	f04f 0c00 	mov.w	ip, #0
 800c50e:	4618      	mov	r0, r3
 800c510:	f853 2b04 	ldr.w	r2, [r3], #4
 800c514:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c518:	d01b      	beq.n	800c552 <__gethex+0x396>
 800c51a:	3201      	adds	r2, #1
 800c51c:	6002      	str	r2, [r0, #0]
 800c51e:	2d02      	cmp	r5, #2
 800c520:	f104 0314 	add.w	r3, r4, #20
 800c524:	d13c      	bne.n	800c5a0 <__gethex+0x3e4>
 800c526:	f8d8 2000 	ldr.w	r2, [r8]
 800c52a:	3a01      	subs	r2, #1
 800c52c:	42b2      	cmp	r2, r6
 800c52e:	d109      	bne.n	800c544 <__gethex+0x388>
 800c530:	1171      	asrs	r1, r6, #5
 800c532:	2201      	movs	r2, #1
 800c534:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c538:	f006 061f 	and.w	r6, r6, #31
 800c53c:	fa02 f606 	lsl.w	r6, r2, r6
 800c540:	421e      	tst	r6, r3
 800c542:	d13a      	bne.n	800c5ba <__gethex+0x3fe>
 800c544:	f045 0520 	orr.w	r5, r5, #32
 800c548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c54a:	601c      	str	r4, [r3, #0]
 800c54c:	9b02      	ldr	r3, [sp, #8]
 800c54e:	601f      	str	r7, [r3, #0]
 800c550:	e6b0      	b.n	800c2b4 <__gethex+0xf8>
 800c552:	4299      	cmp	r1, r3
 800c554:	f843 cc04 	str.w	ip, [r3, #-4]
 800c558:	d8d9      	bhi.n	800c50e <__gethex+0x352>
 800c55a:	68a3      	ldr	r3, [r4, #8]
 800c55c:	459b      	cmp	fp, r3
 800c55e:	db17      	blt.n	800c590 <__gethex+0x3d4>
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	9801      	ldr	r0, [sp, #4]
 800c564:	3101      	adds	r1, #1
 800c566:	f7fd fd8d 	bl	800a084 <_Balloc>
 800c56a:	4681      	mov	r9, r0
 800c56c:	b918      	cbnz	r0, 800c576 <__gethex+0x3ba>
 800c56e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d8 <__gethex+0x41c>)
 800c570:	4602      	mov	r2, r0
 800c572:	2184      	movs	r1, #132	@ 0x84
 800c574:	e6c5      	b.n	800c302 <__gethex+0x146>
 800c576:	6922      	ldr	r2, [r4, #16]
 800c578:	3202      	adds	r2, #2
 800c57a:	f104 010c 	add.w	r1, r4, #12
 800c57e:	0092      	lsls	r2, r2, #2
 800c580:	300c      	adds	r0, #12
 800c582:	f7f9 fe57 	bl	8006234 <memcpy>
 800c586:	4621      	mov	r1, r4
 800c588:	9801      	ldr	r0, [sp, #4]
 800c58a:	f7fd fda0 	bl	800a0ce <_Bfree>
 800c58e:	464c      	mov	r4, r9
 800c590:	6923      	ldr	r3, [r4, #16]
 800c592:	1c5a      	adds	r2, r3, #1
 800c594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c598:	6122      	str	r2, [r4, #16]
 800c59a:	2201      	movs	r2, #1
 800c59c:	615a      	str	r2, [r3, #20]
 800c59e:	e7be      	b.n	800c51e <__gethex+0x362>
 800c5a0:	6922      	ldr	r2, [r4, #16]
 800c5a2:	455a      	cmp	r2, fp
 800c5a4:	dd0b      	ble.n	800c5be <__gethex+0x402>
 800c5a6:	2101      	movs	r1, #1
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	f7ff fda0 	bl	800c0ee <rshift>
 800c5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5b2:	3701      	adds	r7, #1
 800c5b4:	42bb      	cmp	r3, r7
 800c5b6:	f6ff aee0 	blt.w	800c37a <__gethex+0x1be>
 800c5ba:	2501      	movs	r5, #1
 800c5bc:	e7c2      	b.n	800c544 <__gethex+0x388>
 800c5be:	f016 061f 	ands.w	r6, r6, #31
 800c5c2:	d0fa      	beq.n	800c5ba <__gethex+0x3fe>
 800c5c4:	4453      	add	r3, sl
 800c5c6:	f1c6 0620 	rsb	r6, r6, #32
 800c5ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c5ce:	f7fd fe17 	bl	800a200 <__hi0bits>
 800c5d2:	42b0      	cmp	r0, r6
 800c5d4:	dbe7      	blt.n	800c5a6 <__gethex+0x3ea>
 800c5d6:	e7f0      	b.n	800c5ba <__gethex+0x3fe>
 800c5d8:	0800d8eb 	.word	0x0800d8eb

0800c5dc <L_shift>:
 800c5dc:	f1c2 0208 	rsb	r2, r2, #8
 800c5e0:	0092      	lsls	r2, r2, #2
 800c5e2:	b570      	push	{r4, r5, r6, lr}
 800c5e4:	f1c2 0620 	rsb	r6, r2, #32
 800c5e8:	6843      	ldr	r3, [r0, #4]
 800c5ea:	6804      	ldr	r4, [r0, #0]
 800c5ec:	fa03 f506 	lsl.w	r5, r3, r6
 800c5f0:	432c      	orrs	r4, r5
 800c5f2:	40d3      	lsrs	r3, r2
 800c5f4:	6004      	str	r4, [r0, #0]
 800c5f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5fa:	4288      	cmp	r0, r1
 800c5fc:	d3f4      	bcc.n	800c5e8 <L_shift+0xc>
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}

0800c600 <__match>:
 800c600:	b530      	push	{r4, r5, lr}
 800c602:	6803      	ldr	r3, [r0, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c60a:	b914      	cbnz	r4, 800c612 <__match+0x12>
 800c60c:	6003      	str	r3, [r0, #0]
 800c60e:	2001      	movs	r0, #1
 800c610:	bd30      	pop	{r4, r5, pc}
 800c612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c616:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c61a:	2d19      	cmp	r5, #25
 800c61c:	bf98      	it	ls
 800c61e:	3220      	addls	r2, #32
 800c620:	42a2      	cmp	r2, r4
 800c622:	d0f0      	beq.n	800c606 <__match+0x6>
 800c624:	2000      	movs	r0, #0
 800c626:	e7f3      	b.n	800c610 <__match+0x10>

0800c628 <__hexnan>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	680b      	ldr	r3, [r1, #0]
 800c62e:	6801      	ldr	r1, [r0, #0]
 800c630:	115e      	asrs	r6, r3, #5
 800c632:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c636:	f013 031f 	ands.w	r3, r3, #31
 800c63a:	b087      	sub	sp, #28
 800c63c:	bf18      	it	ne
 800c63e:	3604      	addne	r6, #4
 800c640:	2500      	movs	r5, #0
 800c642:	1f37      	subs	r7, r6, #4
 800c644:	4682      	mov	sl, r0
 800c646:	4690      	mov	r8, r2
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c64e:	46b9      	mov	r9, r7
 800c650:	463c      	mov	r4, r7
 800c652:	9502      	str	r5, [sp, #8]
 800c654:	46ab      	mov	fp, r5
 800c656:	784a      	ldrb	r2, [r1, #1]
 800c658:	1c4b      	adds	r3, r1, #1
 800c65a:	9303      	str	r3, [sp, #12]
 800c65c:	b342      	cbz	r2, 800c6b0 <__hexnan+0x88>
 800c65e:	4610      	mov	r0, r2
 800c660:	9105      	str	r1, [sp, #20]
 800c662:	9204      	str	r2, [sp, #16]
 800c664:	f7ff fd95 	bl	800c192 <__hexdig_fun>
 800c668:	2800      	cmp	r0, #0
 800c66a:	d151      	bne.n	800c710 <__hexnan+0xe8>
 800c66c:	9a04      	ldr	r2, [sp, #16]
 800c66e:	9905      	ldr	r1, [sp, #20]
 800c670:	2a20      	cmp	r2, #32
 800c672:	d818      	bhi.n	800c6a6 <__hexnan+0x7e>
 800c674:	9b02      	ldr	r3, [sp, #8]
 800c676:	459b      	cmp	fp, r3
 800c678:	dd13      	ble.n	800c6a2 <__hexnan+0x7a>
 800c67a:	454c      	cmp	r4, r9
 800c67c:	d206      	bcs.n	800c68c <__hexnan+0x64>
 800c67e:	2d07      	cmp	r5, #7
 800c680:	dc04      	bgt.n	800c68c <__hexnan+0x64>
 800c682:	462a      	mov	r2, r5
 800c684:	4649      	mov	r1, r9
 800c686:	4620      	mov	r0, r4
 800c688:	f7ff ffa8 	bl	800c5dc <L_shift>
 800c68c:	4544      	cmp	r4, r8
 800c68e:	d952      	bls.n	800c736 <__hexnan+0x10e>
 800c690:	2300      	movs	r3, #0
 800c692:	f1a4 0904 	sub.w	r9, r4, #4
 800c696:	f844 3c04 	str.w	r3, [r4, #-4]
 800c69a:	f8cd b008 	str.w	fp, [sp, #8]
 800c69e:	464c      	mov	r4, r9
 800c6a0:	461d      	mov	r5, r3
 800c6a2:	9903      	ldr	r1, [sp, #12]
 800c6a4:	e7d7      	b.n	800c656 <__hexnan+0x2e>
 800c6a6:	2a29      	cmp	r2, #41	@ 0x29
 800c6a8:	d157      	bne.n	800c75a <__hexnan+0x132>
 800c6aa:	3102      	adds	r1, #2
 800c6ac:	f8ca 1000 	str.w	r1, [sl]
 800c6b0:	f1bb 0f00 	cmp.w	fp, #0
 800c6b4:	d051      	beq.n	800c75a <__hexnan+0x132>
 800c6b6:	454c      	cmp	r4, r9
 800c6b8:	d206      	bcs.n	800c6c8 <__hexnan+0xa0>
 800c6ba:	2d07      	cmp	r5, #7
 800c6bc:	dc04      	bgt.n	800c6c8 <__hexnan+0xa0>
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	f7ff ff8a 	bl	800c5dc <L_shift>
 800c6c8:	4544      	cmp	r4, r8
 800c6ca:	d936      	bls.n	800c73a <__hexnan+0x112>
 800c6cc:	f1a8 0204 	sub.w	r2, r8, #4
 800c6d0:	4623      	mov	r3, r4
 800c6d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c6d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c6da:	429f      	cmp	r7, r3
 800c6dc:	d2f9      	bcs.n	800c6d2 <__hexnan+0xaa>
 800c6de:	1b3b      	subs	r3, r7, r4
 800c6e0:	f023 0303 	bic.w	r3, r3, #3
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	3401      	adds	r4, #1
 800c6e8:	3e03      	subs	r6, #3
 800c6ea:	42b4      	cmp	r4, r6
 800c6ec:	bf88      	it	hi
 800c6ee:	2304      	movhi	r3, #4
 800c6f0:	4443      	add	r3, r8
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f843 2b04 	str.w	r2, [r3], #4
 800c6f8:	429f      	cmp	r7, r3
 800c6fa:	d2fb      	bcs.n	800c6f4 <__hexnan+0xcc>
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	b91b      	cbnz	r3, 800c708 <__hexnan+0xe0>
 800c700:	4547      	cmp	r7, r8
 800c702:	d128      	bne.n	800c756 <__hexnan+0x12e>
 800c704:	2301      	movs	r3, #1
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	2005      	movs	r0, #5
 800c70a:	b007      	add	sp, #28
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c710:	3501      	adds	r5, #1
 800c712:	2d08      	cmp	r5, #8
 800c714:	f10b 0b01 	add.w	fp, fp, #1
 800c718:	dd06      	ble.n	800c728 <__hexnan+0x100>
 800c71a:	4544      	cmp	r4, r8
 800c71c:	d9c1      	bls.n	800c6a2 <__hexnan+0x7a>
 800c71e:	2300      	movs	r3, #0
 800c720:	f844 3c04 	str.w	r3, [r4, #-4]
 800c724:	2501      	movs	r5, #1
 800c726:	3c04      	subs	r4, #4
 800c728:	6822      	ldr	r2, [r4, #0]
 800c72a:	f000 000f 	and.w	r0, r0, #15
 800c72e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c732:	6020      	str	r0, [r4, #0]
 800c734:	e7b5      	b.n	800c6a2 <__hexnan+0x7a>
 800c736:	2508      	movs	r5, #8
 800c738:	e7b3      	b.n	800c6a2 <__hexnan+0x7a>
 800c73a:	9b01      	ldr	r3, [sp, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d0dd      	beq.n	800c6fc <__hexnan+0xd4>
 800c740:	f1c3 0320 	rsb	r3, r3, #32
 800c744:	f04f 32ff 	mov.w	r2, #4294967295
 800c748:	40da      	lsrs	r2, r3
 800c74a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c74e:	4013      	ands	r3, r2
 800c750:	f846 3c04 	str.w	r3, [r6, #-4]
 800c754:	e7d2      	b.n	800c6fc <__hexnan+0xd4>
 800c756:	3f04      	subs	r7, #4
 800c758:	e7d0      	b.n	800c6fc <__hexnan+0xd4>
 800c75a:	2004      	movs	r0, #4
 800c75c:	e7d5      	b.n	800c70a <__hexnan+0xe2>
	...

0800c760 <fiprintf>:
 800c760:	b40e      	push	{r1, r2, r3}
 800c762:	b503      	push	{r0, r1, lr}
 800c764:	4601      	mov	r1, r0
 800c766:	ab03      	add	r3, sp, #12
 800c768:	4805      	ldr	r0, [pc, #20]	@ (800c780 <fiprintf+0x20>)
 800c76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c76e:	6800      	ldr	r0, [r0, #0]
 800c770:	9301      	str	r3, [sp, #4]
 800c772:	f000 f839 	bl	800c7e8 <_vfiprintf_r>
 800c776:	b002      	add	sp, #8
 800c778:	f85d eb04 	ldr.w	lr, [sp], #4
 800c77c:	b003      	add	sp, #12
 800c77e:	4770      	bx	lr
 800c780:	20000018 	.word	0x20000018

0800c784 <__sprint_r>:
 800c784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c788:	6893      	ldr	r3, [r2, #8]
 800c78a:	4680      	mov	r8, r0
 800c78c:	460e      	mov	r6, r1
 800c78e:	4614      	mov	r4, r2
 800c790:	b343      	cbz	r3, 800c7e4 <__sprint_r+0x60>
 800c792:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800c794:	049d      	lsls	r5, r3, #18
 800c796:	d522      	bpl.n	800c7de <__sprint_r+0x5a>
 800c798:	6815      	ldr	r5, [r2, #0]
 800c79a:	68a0      	ldr	r0, [r4, #8]
 800c79c:	3508      	adds	r5, #8
 800c79e:	b928      	cbnz	r0, 800c7ac <__sprint_r+0x28>
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60a3      	str	r3, [r4, #8]
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	6063      	str	r3, [r4, #4]
 800c7a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ac:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800c7b0:	f04f 0900 	mov.w	r9, #0
 800c7b4:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800c7b8:	45ca      	cmp	sl, r9
 800c7ba:	dc05      	bgt.n	800c7c8 <__sprint_r+0x44>
 800c7bc:	68a3      	ldr	r3, [r4, #8]
 800c7be:	f027 0703 	bic.w	r7, r7, #3
 800c7c2:	1bdb      	subs	r3, r3, r7
 800c7c4:	60a3      	str	r3, [r4, #8]
 800c7c6:	e7e8      	b.n	800c79a <__sprint_r+0x16>
 800c7c8:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	4640      	mov	r0, r8
 800c7d0:	f000 feb5 	bl	800d53e <_fputwc_r>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d0e3      	beq.n	800c7a0 <__sprint_r+0x1c>
 800c7d8:	f109 0901 	add.w	r9, r9, #1
 800c7dc:	e7ec      	b.n	800c7b8 <__sprint_r+0x34>
 800c7de:	f000 fccb 	bl	800d178 <__sfvwrite_r>
 800c7e2:	e7dd      	b.n	800c7a0 <__sprint_r+0x1c>
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	e7dd      	b.n	800c7a4 <__sprint_r+0x20>

0800c7e8 <_vfiprintf_r>:
 800c7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	b0bb      	sub	sp, #236	@ 0xec
 800c7ee:	460f      	mov	r7, r1
 800c7f0:	4693      	mov	fp, r2
 800c7f2:	461c      	mov	r4, r3
 800c7f4:	461d      	mov	r5, r3
 800c7f6:	9000      	str	r0, [sp, #0]
 800c7f8:	b118      	cbz	r0, 800c802 <_vfiprintf_r+0x1a>
 800c7fa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c7fc:	b90b      	cbnz	r3, 800c802 <_vfiprintf_r+0x1a>
 800c7fe:	f7f9 fbd7 	bl	8005fb0 <__sinit>
 800c802:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c804:	07db      	lsls	r3, r3, #31
 800c806:	d405      	bmi.n	800c814 <_vfiprintf_r+0x2c>
 800c808:	89bb      	ldrh	r3, [r7, #12]
 800c80a:	059e      	lsls	r6, r3, #22
 800c80c:	d402      	bmi.n	800c814 <_vfiprintf_r+0x2c>
 800c80e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c810:	f7f9 fd0e 	bl	8006230 <__retarget_lock_acquire_recursive>
 800c814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c818:	0498      	lsls	r0, r3, #18
 800c81a:	d406      	bmi.n	800c82a <_vfiprintf_r+0x42>
 800c81c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c820:	81bb      	strh	r3, [r7, #12]
 800c822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c824:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c828:	667b      	str	r3, [r7, #100]	@ 0x64
 800c82a:	89bb      	ldrh	r3, [r7, #12]
 800c82c:	0719      	lsls	r1, r3, #28
 800c82e:	d501      	bpl.n	800c834 <_vfiprintf_r+0x4c>
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	b9ab      	cbnz	r3, 800c860 <_vfiprintf_r+0x78>
 800c834:	9800      	ldr	r0, [sp, #0]
 800c836:	4639      	mov	r1, r7
 800c838:	f000 fdea 	bl	800d410 <__swsetup_r>
 800c83c:	b180      	cbz	r0, 800c860 <_vfiprintf_r+0x78>
 800c83e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c840:	07da      	lsls	r2, r3, #31
 800c842:	d506      	bpl.n	800c852 <_vfiprintf_r+0x6a>
 800c844:	f04f 33ff 	mov.w	r3, #4294967295
 800c848:	9303      	str	r3, [sp, #12]
 800c84a:	9803      	ldr	r0, [sp, #12]
 800c84c:	b03b      	add	sp, #236	@ 0xec
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	89bb      	ldrh	r3, [r7, #12]
 800c854:	059b      	lsls	r3, r3, #22
 800c856:	d4f5      	bmi.n	800c844 <_vfiprintf_r+0x5c>
 800c858:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c85a:	f7f9 fcea 	bl	8006232 <__retarget_lock_release_recursive>
 800c85e:	e7f1      	b.n	800c844 <_vfiprintf_r+0x5c>
 800c860:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c864:	f003 021a 	and.w	r2, r3, #26
 800c868:	2a0a      	cmp	r2, #10
 800c86a:	d114      	bne.n	800c896 <_vfiprintf_r+0xae>
 800c86c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c870:	2a00      	cmp	r2, #0
 800c872:	db10      	blt.n	800c896 <_vfiprintf_r+0xae>
 800c874:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c876:	07d6      	lsls	r6, r2, #31
 800c878:	d404      	bmi.n	800c884 <_vfiprintf_r+0x9c>
 800c87a:	059d      	lsls	r5, r3, #22
 800c87c:	d402      	bmi.n	800c884 <_vfiprintf_r+0x9c>
 800c87e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c880:	f7f9 fcd7 	bl	8006232 <__retarget_lock_release_recursive>
 800c884:	9800      	ldr	r0, [sp, #0]
 800c886:	4623      	mov	r3, r4
 800c888:	465a      	mov	r2, fp
 800c88a:	4639      	mov	r1, r7
 800c88c:	b03b      	add	sp, #236	@ 0xec
 800c88e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c892:	f000 bc31 	b.w	800d0f8 <__sbprintf>
 800c896:	2300      	movs	r3, #0
 800c898:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800c89c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c8a0:	ae11      	add	r6, sp, #68	@ 0x44
 800c8a2:	960e      	str	r6, [sp, #56]	@ 0x38
 800c8a4:	9307      	str	r3, [sp, #28]
 800c8a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a8:	9303      	str	r3, [sp, #12]
 800c8aa:	465b      	mov	r3, fp
 800c8ac:	461c      	mov	r4, r3
 800c8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b2:	b10a      	cbz	r2, 800c8b8 <_vfiprintf_r+0xd0>
 800c8b4:	2a25      	cmp	r2, #37	@ 0x25
 800c8b6:	d1f9      	bne.n	800c8ac <_vfiprintf_r+0xc4>
 800c8b8:	ebb4 080b 	subs.w	r8, r4, fp
 800c8bc:	d00d      	beq.n	800c8da <_vfiprintf_r+0xf2>
 800c8be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8c0:	4443      	add	r3, r8
 800c8c2:	9310      	str	r3, [sp, #64]	@ 0x40
 800c8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	2b07      	cmp	r3, #7
 800c8ca:	e9c6 b800 	strd	fp, r8, [r6]
 800c8ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c8d0:	dc75      	bgt.n	800c9be <_vfiprintf_r+0x1d6>
 800c8d2:	3608      	adds	r6, #8
 800c8d4:	9b03      	ldr	r3, [sp, #12]
 800c8d6:	4443      	add	r3, r8
 800c8d8:	9303      	str	r3, [sp, #12]
 800c8da:	7823      	ldrb	r3, [r4, #0]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 83cd 	beq.w	800d07c <_vfiprintf_r+0x894>
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c8ec:	3401      	adds	r4, #1
 800c8ee:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800c8f2:	469a      	mov	sl, r3
 800c8f4:	46a3      	mov	fp, r4
 800c8f6:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800c8fa:	f1a3 0220 	sub.w	r2, r3, #32
 800c8fe:	2a5a      	cmp	r2, #90	@ 0x5a
 800c900:	f200 8316 	bhi.w	800cf30 <_vfiprintf_r+0x748>
 800c904:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c908:	0314009a 	.word	0x0314009a
 800c90c:	00a20314 	.word	0x00a20314
 800c910:	03140314 	.word	0x03140314
 800c914:	00820314 	.word	0x00820314
 800c918:	03140314 	.word	0x03140314
 800c91c:	00af00a5 	.word	0x00af00a5
 800c920:	00ac0314 	.word	0x00ac0314
 800c924:	031400b1 	.word	0x031400b1
 800c928:	00d000cd 	.word	0x00d000cd
 800c92c:	00d000d0 	.word	0x00d000d0
 800c930:	00d000d0 	.word	0x00d000d0
 800c934:	00d000d0 	.word	0x00d000d0
 800c938:	00d000d0 	.word	0x00d000d0
 800c93c:	03140314 	.word	0x03140314
 800c940:	03140314 	.word	0x03140314
 800c944:	03140314 	.word	0x03140314
 800c948:	03140314 	.word	0x03140314
 800c94c:	00f70314 	.word	0x00f70314
 800c950:	03140104 	.word	0x03140104
 800c954:	03140314 	.word	0x03140314
 800c958:	03140314 	.word	0x03140314
 800c95c:	03140314 	.word	0x03140314
 800c960:	03140314 	.word	0x03140314
 800c964:	01520314 	.word	0x01520314
 800c968:	03140314 	.word	0x03140314
 800c96c:	019a0314 	.word	0x019a0314
 800c970:	027a0314 	.word	0x027a0314
 800c974:	03140314 	.word	0x03140314
 800c978:	0314029a 	.word	0x0314029a
 800c97c:	03140314 	.word	0x03140314
 800c980:	03140314 	.word	0x03140314
 800c984:	03140314 	.word	0x03140314
 800c988:	03140314 	.word	0x03140314
 800c98c:	00f70314 	.word	0x00f70314
 800c990:	03140106 	.word	0x03140106
 800c994:	03140314 	.word	0x03140314
 800c998:	010600e0 	.word	0x010600e0
 800c99c:	031400f1 	.word	0x031400f1
 800c9a0:	031400eb 	.word	0x031400eb
 800c9a4:	01540132 	.word	0x01540132
 800c9a8:	00f10189 	.word	0x00f10189
 800c9ac:	019a0314 	.word	0x019a0314
 800c9b0:	027c0098 	.word	0x027c0098
 800c9b4:	03140314 	.word	0x03140314
 800c9b8:	03140065 	.word	0x03140065
 800c9bc:	0098      	.short	0x0098
 800c9be:	9800      	ldr	r0, [sp, #0]
 800c9c0:	aa0e      	add	r2, sp, #56	@ 0x38
 800c9c2:	4639      	mov	r1, r7
 800c9c4:	f7ff fede 	bl	800c784 <__sprint_r>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	f040 8336 	bne.w	800d03a <_vfiprintf_r+0x852>
 800c9ce:	ae11      	add	r6, sp, #68	@ 0x44
 800c9d0:	e780      	b.n	800c8d4 <_vfiprintf_r+0xec>
 800c9d2:	4a99      	ldr	r2, [pc, #612]	@ (800cc38 <_vfiprintf_r+0x450>)
 800c9d4:	9205      	str	r2, [sp, #20]
 800c9d6:	f01a 0220 	ands.w	r2, sl, #32
 800c9da:	f000 8231 	beq.w	800ce40 <_vfiprintf_r+0x658>
 800c9de:	3507      	adds	r5, #7
 800c9e0:	f025 0507 	bic.w	r5, r5, #7
 800c9e4:	46a8      	mov	r8, r5
 800c9e6:	686d      	ldr	r5, [r5, #4]
 800c9e8:	f858 4b08 	ldr.w	r4, [r8], #8
 800c9ec:	f01a 0f01 	tst.w	sl, #1
 800c9f0:	d009      	beq.n	800ca06 <_vfiprintf_r+0x21e>
 800c9f2:	ea54 0205 	orrs.w	r2, r4, r5
 800c9f6:	bf1f      	itttt	ne
 800c9f8:	2230      	movne	r2, #48	@ 0x30
 800c9fa:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800c9fe:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800ca02:	f04a 0a02 	orrne.w	sl, sl, #2
 800ca06:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800ca0a:	e112      	b.n	800cc32 <_vfiprintf_r+0x44a>
 800ca0c:	9800      	ldr	r0, [sp, #0]
 800ca0e:	f7fc fc31 	bl	8009274 <_localeconv_r>
 800ca12:	6843      	ldr	r3, [r0, #4]
 800ca14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7f3 fbe2 	bl	80001e0 <strlen>
 800ca1c:	9007      	str	r0, [sp, #28]
 800ca1e:	9800      	ldr	r0, [sp, #0]
 800ca20:	f7fc fc28 	bl	8009274 <_localeconv_r>
 800ca24:	6883      	ldr	r3, [r0, #8]
 800ca26:	9306      	str	r3, [sp, #24]
 800ca28:	9b07      	ldr	r3, [sp, #28]
 800ca2a:	b12b      	cbz	r3, 800ca38 <_vfiprintf_r+0x250>
 800ca2c:	9b06      	ldr	r3, [sp, #24]
 800ca2e:	b11b      	cbz	r3, 800ca38 <_vfiprintf_r+0x250>
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b10b      	cbz	r3, 800ca38 <_vfiprintf_r+0x250>
 800ca34:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800ca38:	465c      	mov	r4, fp
 800ca3a:	e75b      	b.n	800c8f4 <_vfiprintf_r+0x10c>
 800ca3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1f9      	bne.n	800ca38 <_vfiprintf_r+0x250>
 800ca44:	2320      	movs	r3, #32
 800ca46:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800ca4a:	e7f5      	b.n	800ca38 <_vfiprintf_r+0x250>
 800ca4c:	f04a 0a01 	orr.w	sl, sl, #1
 800ca50:	e7f2      	b.n	800ca38 <_vfiprintf_r+0x250>
 800ca52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca56:	9302      	str	r3, [sp, #8]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	daed      	bge.n	800ca38 <_vfiprintf_r+0x250>
 800ca5c:	425b      	negs	r3, r3
 800ca5e:	9302      	str	r3, [sp, #8]
 800ca60:	f04a 0a04 	orr.w	sl, sl, #4
 800ca64:	e7e8      	b.n	800ca38 <_vfiprintf_r+0x250>
 800ca66:	232b      	movs	r3, #43	@ 0x2b
 800ca68:	e7ed      	b.n	800ca46 <_vfiprintf_r+0x25e>
 800ca6a:	465a      	mov	r2, fp
 800ca6c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ca70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca72:	d112      	bne.n	800ca9a <_vfiprintf_r+0x2b2>
 800ca74:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	4693      	mov	fp, r2
 800ca80:	e7da      	b.n	800ca38 <_vfiprintf_r+0x250>
 800ca82:	9b01      	ldr	r3, [sp, #4]
 800ca84:	fb00 1303 	mla	r3, r0, r3, r1
 800ca88:	9301      	str	r3, [sp, #4]
 800ca8a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800ca8e:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800ca92:	2909      	cmp	r1, #9
 800ca94:	d9f5      	bls.n	800ca82 <_vfiprintf_r+0x29a>
 800ca96:	4693      	mov	fp, r2
 800ca98:	e72f      	b.n	800c8fa <_vfiprintf_r+0x112>
 800ca9a:	2100      	movs	r1, #0
 800ca9c:	9101      	str	r1, [sp, #4]
 800ca9e:	200a      	movs	r0, #10
 800caa0:	e7f5      	b.n	800ca8e <_vfiprintf_r+0x2a6>
 800caa2:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800caa6:	e7c7      	b.n	800ca38 <_vfiprintf_r+0x250>
 800caa8:	2100      	movs	r1, #0
 800caaa:	465a      	mov	r2, fp
 800caac:	9102      	str	r1, [sp, #8]
 800caae:	200a      	movs	r0, #10
 800cab0:	9902      	ldr	r1, [sp, #8]
 800cab2:	3b30      	subs	r3, #48	@ 0x30
 800cab4:	fb00 3301 	mla	r3, r0, r1, r3
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cabe:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800cac2:	2909      	cmp	r1, #9
 800cac4:	d9f4      	bls.n	800cab0 <_vfiprintf_r+0x2c8>
 800cac6:	e7e6      	b.n	800ca96 <_vfiprintf_r+0x2ae>
 800cac8:	f89b 3000 	ldrb.w	r3, [fp]
 800cacc:	2b68      	cmp	r3, #104	@ 0x68
 800cace:	bf06      	itte	eq
 800cad0:	f10b 0b01 	addeq.w	fp, fp, #1
 800cad4:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800cad8:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800cadc:	e7ac      	b.n	800ca38 <_vfiprintf_r+0x250>
 800cade:	f89b 3000 	ldrb.w	r3, [fp]
 800cae2:	2b6c      	cmp	r3, #108	@ 0x6c
 800cae4:	d104      	bne.n	800caf0 <_vfiprintf_r+0x308>
 800cae6:	f10b 0b01 	add.w	fp, fp, #1
 800caea:	f04a 0a20 	orr.w	sl, sl, #32
 800caee:	e7a3      	b.n	800ca38 <_vfiprintf_r+0x250>
 800caf0:	f04a 0a10 	orr.w	sl, sl, #16
 800caf4:	e7a0      	b.n	800ca38 <_vfiprintf_r+0x250>
 800caf6:	46a8      	mov	r8, r5
 800caf8:	2400      	movs	r4, #0
 800cafa:	f858 3b04 	ldr.w	r3, [r8], #4
 800cafe:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800cb02:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800cb06:	2301      	movs	r3, #1
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800cb0e:	e0ab      	b.n	800cc68 <_vfiprintf_r+0x480>
 800cb10:	f04a 0a10 	orr.w	sl, sl, #16
 800cb14:	f01a 0f20 	tst.w	sl, #32
 800cb18:	d011      	beq.n	800cb3e <_vfiprintf_r+0x356>
 800cb1a:	3507      	adds	r5, #7
 800cb1c:	f025 0507 	bic.w	r5, r5, #7
 800cb20:	46a8      	mov	r8, r5
 800cb22:	686d      	ldr	r5, [r5, #4]
 800cb24:	f858 4b08 	ldr.w	r4, [r8], #8
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	da06      	bge.n	800cb3a <_vfiprintf_r+0x352>
 800cb2c:	4264      	negs	r4, r4
 800cb2e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800cb32:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800cb36:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e048      	b.n	800cbd0 <_vfiprintf_r+0x3e8>
 800cb3e:	46a8      	mov	r8, r5
 800cb40:	f01a 0f10 	tst.w	sl, #16
 800cb44:	f858 5b04 	ldr.w	r5, [r8], #4
 800cb48:	d002      	beq.n	800cb50 <_vfiprintf_r+0x368>
 800cb4a:	462c      	mov	r4, r5
 800cb4c:	17ed      	asrs	r5, r5, #31
 800cb4e:	e7eb      	b.n	800cb28 <_vfiprintf_r+0x340>
 800cb50:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cb54:	d003      	beq.n	800cb5e <_vfiprintf_r+0x376>
 800cb56:	b22c      	sxth	r4, r5
 800cb58:	f345 35c0 	sbfx	r5, r5, #15, #1
 800cb5c:	e7e4      	b.n	800cb28 <_vfiprintf_r+0x340>
 800cb5e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800cb62:	d0f2      	beq.n	800cb4a <_vfiprintf_r+0x362>
 800cb64:	b26c      	sxtb	r4, r5
 800cb66:	f345 15c0 	sbfx	r5, r5, #7, #1
 800cb6a:	e7dd      	b.n	800cb28 <_vfiprintf_r+0x340>
 800cb6c:	f01a 0f20 	tst.w	sl, #32
 800cb70:	d007      	beq.n	800cb82 <_vfiprintf_r+0x39a>
 800cb72:	9a03      	ldr	r2, [sp, #12]
 800cb74:	682b      	ldr	r3, [r5, #0]
 800cb76:	9903      	ldr	r1, [sp, #12]
 800cb78:	17d2      	asrs	r2, r2, #31
 800cb7a:	e9c3 1200 	strd	r1, r2, [r3]
 800cb7e:	3504      	adds	r5, #4
 800cb80:	e693      	b.n	800c8aa <_vfiprintf_r+0xc2>
 800cb82:	f01a 0f10 	tst.w	sl, #16
 800cb86:	d003      	beq.n	800cb90 <_vfiprintf_r+0x3a8>
 800cb88:	682b      	ldr	r3, [r5, #0]
 800cb8a:	9a03      	ldr	r2, [sp, #12]
 800cb8c:	601a      	str	r2, [r3, #0]
 800cb8e:	e7f6      	b.n	800cb7e <_vfiprintf_r+0x396>
 800cb90:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cb94:	d003      	beq.n	800cb9e <_vfiprintf_r+0x3b6>
 800cb96:	682b      	ldr	r3, [r5, #0]
 800cb98:	9a03      	ldr	r2, [sp, #12]
 800cb9a:	801a      	strh	r2, [r3, #0]
 800cb9c:	e7ef      	b.n	800cb7e <_vfiprintf_r+0x396>
 800cb9e:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800cba2:	d0f1      	beq.n	800cb88 <_vfiprintf_r+0x3a0>
 800cba4:	682b      	ldr	r3, [r5, #0]
 800cba6:	9a03      	ldr	r2, [sp, #12]
 800cba8:	701a      	strb	r2, [r3, #0]
 800cbaa:	e7e8      	b.n	800cb7e <_vfiprintf_r+0x396>
 800cbac:	f04a 0a10 	orr.w	sl, sl, #16
 800cbb0:	f01a 0320 	ands.w	r3, sl, #32
 800cbb4:	d01f      	beq.n	800cbf6 <_vfiprintf_r+0x40e>
 800cbb6:	3507      	adds	r5, #7
 800cbb8:	f025 0507 	bic.w	r5, r5, #7
 800cbbc:	46a8      	mov	r8, r5
 800cbbe:	686d      	ldr	r5, [r5, #4]
 800cbc0:	f858 4b08 	ldr.w	r4, [r8], #8
 800cbc4:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800cbc8:	2300      	movs	r3, #0
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800cbd0:	9a01      	ldr	r2, [sp, #4]
 800cbd2:	3201      	adds	r2, #1
 800cbd4:	f000 825f 	beq.w	800d096 <_vfiprintf_r+0x8ae>
 800cbd8:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800cbdc:	9204      	str	r2, [sp, #16]
 800cbde:	ea54 0205 	orrs.w	r2, r4, r5
 800cbe2:	f040 825e 	bne.w	800d0a2 <_vfiprintf_r+0x8ba>
 800cbe6:	9a01      	ldr	r2, [sp, #4]
 800cbe8:	2a00      	cmp	r2, #0
 800cbea:	f000 8198 	beq.w	800cf1e <_vfiprintf_r+0x736>
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	f040 825a 	bne.w	800d0a8 <_vfiprintf_r+0x8c0>
 800cbf4:	e13b      	b.n	800ce6e <_vfiprintf_r+0x686>
 800cbf6:	46a8      	mov	r8, r5
 800cbf8:	f01a 0510 	ands.w	r5, sl, #16
 800cbfc:	f858 4b04 	ldr.w	r4, [r8], #4
 800cc00:	d001      	beq.n	800cc06 <_vfiprintf_r+0x41e>
 800cc02:	461d      	mov	r5, r3
 800cc04:	e7de      	b.n	800cbc4 <_vfiprintf_r+0x3dc>
 800cc06:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800cc0a:	d001      	beq.n	800cc10 <_vfiprintf_r+0x428>
 800cc0c:	b2a4      	uxth	r4, r4
 800cc0e:	e7d9      	b.n	800cbc4 <_vfiprintf_r+0x3dc>
 800cc10:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800cc14:	d0d6      	beq.n	800cbc4 <_vfiprintf_r+0x3dc>
 800cc16:	b2e4      	uxtb	r4, r4
 800cc18:	e7f3      	b.n	800cc02 <_vfiprintf_r+0x41a>
 800cc1a:	46a8      	mov	r8, r5
 800cc1c:	f647 0330 	movw	r3, #30768	@ 0x7830
 800cc20:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800cc24:	f858 4b04 	ldr.w	r4, [r8], #4
 800cc28:	4b03      	ldr	r3, [pc, #12]	@ (800cc38 <_vfiprintf_r+0x450>)
 800cc2a:	9305      	str	r3, [sp, #20]
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	f04a 0a02 	orr.w	sl, sl, #2
 800cc32:	2302      	movs	r3, #2
 800cc34:	e7c9      	b.n	800cbca <_vfiprintf_r+0x3e2>
 800cc36:	bf00      	nop
 800cc38:	0800d868 	.word	0x0800d868
 800cc3c:	9b01      	ldr	r3, [sp, #4]
 800cc3e:	46a8      	mov	r8, r5
 800cc40:	1c5c      	adds	r4, r3, #1
 800cc42:	f04f 0500 	mov.w	r5, #0
 800cc46:	f858 9b04 	ldr.w	r9, [r8], #4
 800cc4a:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800cc4e:	f000 80d0 	beq.w	800cdf2 <_vfiprintf_r+0x60a>
 800cc52:	461a      	mov	r2, r3
 800cc54:	4629      	mov	r1, r5
 800cc56:	4648      	mov	r0, r9
 800cc58:	f7f3 faca 	bl	80001f0 <memchr>
 800cc5c:	4604      	mov	r4, r0
 800cc5e:	b118      	cbz	r0, 800cc68 <_vfiprintf_r+0x480>
 800cc60:	eba0 0309 	sub.w	r3, r0, r9
 800cc64:	9301      	str	r3, [sp, #4]
 800cc66:	462c      	mov	r4, r5
 800cc68:	9b01      	ldr	r3, [sp, #4]
 800cc6a:	42a3      	cmp	r3, r4
 800cc6c:	bfb8      	it	lt
 800cc6e:	4623      	movlt	r3, r4
 800cc70:	9304      	str	r3, [sp, #16]
 800cc72:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800cc76:	b113      	cbz	r3, 800cc7e <_vfiprintf_r+0x496>
 800cc78:	9b04      	ldr	r3, [sp, #16]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	f01a 0302 	ands.w	r3, sl, #2
 800cc82:	9308      	str	r3, [sp, #32]
 800cc84:	bf1e      	ittt	ne
 800cc86:	9b04      	ldrne	r3, [sp, #16]
 800cc88:	3302      	addne	r3, #2
 800cc8a:	9304      	strne	r3, [sp, #16]
 800cc8c:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800cc90:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc92:	d11f      	bne.n	800ccd4 <_vfiprintf_r+0x4ec>
 800cc94:	9b02      	ldr	r3, [sp, #8]
 800cc96:	9a04      	ldr	r2, [sp, #16]
 800cc98:	1a9d      	subs	r5, r3, r2
 800cc9a:	2d00      	cmp	r5, #0
 800cc9c:	dd1a      	ble.n	800ccd4 <_vfiprintf_r+0x4ec>
 800cc9e:	4ba9      	ldr	r3, [pc, #676]	@ (800cf44 <_vfiprintf_r+0x75c>)
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800cca6:	2d10      	cmp	r5, #16
 800cca8:	f102 0201 	add.w	r2, r2, #1
 800ccac:	f106 0008 	add.w	r0, r6, #8
 800ccb0:	f300 814e 	bgt.w	800cf50 <_vfiprintf_r+0x768>
 800ccb4:	6075      	str	r5, [r6, #4]
 800ccb6:	2a07      	cmp	r2, #7
 800ccb8:	4465      	add	r5, ip
 800ccba:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800ccbe:	f340 815a 	ble.w	800cf76 <_vfiprintf_r+0x78e>
 800ccc2:	9800      	ldr	r0, [sp, #0]
 800ccc4:	aa0e      	add	r2, sp, #56	@ 0x38
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7ff fd5c 	bl	800c784 <__sprint_r>
 800cccc:	2800      	cmp	r0, #0
 800ccce:	f040 81b4 	bne.w	800d03a <_vfiprintf_r+0x852>
 800ccd2:	ae11      	add	r6, sp, #68	@ 0x44
 800ccd4:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800ccd8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ccdc:	b161      	cbz	r1, 800ccf8 <_vfiprintf_r+0x510>
 800ccde:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800cce2:	3301      	adds	r3, #1
 800cce4:	6031      	str	r1, [r6, #0]
 800cce6:	2101      	movs	r1, #1
 800cce8:	440a      	add	r2, r1
 800ccea:	2b07      	cmp	r3, #7
 800ccec:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800ccf0:	6071      	str	r1, [r6, #4]
 800ccf2:	f300 8142 	bgt.w	800cf7a <_vfiprintf_r+0x792>
 800ccf6:	3608      	adds	r6, #8
 800ccf8:	9908      	ldr	r1, [sp, #32]
 800ccfa:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ccfe:	b159      	cbz	r1, 800cd18 <_vfiprintf_r+0x530>
 800cd00:	a90d      	add	r1, sp, #52	@ 0x34
 800cd02:	3301      	adds	r3, #1
 800cd04:	6031      	str	r1, [r6, #0]
 800cd06:	2102      	movs	r1, #2
 800cd08:	440a      	add	r2, r1
 800cd0a:	2b07      	cmp	r3, #7
 800cd0c:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800cd10:	6071      	str	r1, [r6, #4]
 800cd12:	f300 813b 	bgt.w	800cf8c <_vfiprintf_r+0x7a4>
 800cd16:	3608      	adds	r6, #8
 800cd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd1a:	2b80      	cmp	r3, #128	@ 0x80
 800cd1c:	d11f      	bne.n	800cd5e <_vfiprintf_r+0x576>
 800cd1e:	9b02      	ldr	r3, [sp, #8]
 800cd20:	9a04      	ldr	r2, [sp, #16]
 800cd22:	1a9d      	subs	r5, r3, r2
 800cd24:	2d00      	cmp	r5, #0
 800cd26:	dd1a      	ble.n	800cd5e <_vfiprintf_r+0x576>
 800cd28:	4b87      	ldr	r3, [pc, #540]	@ (800cf48 <_vfiprintf_r+0x760>)
 800cd2a:	6033      	str	r3, [r6, #0]
 800cd2c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800cd30:	2d10      	cmp	r5, #16
 800cd32:	f102 0201 	add.w	r2, r2, #1
 800cd36:	f106 0008 	add.w	r0, r6, #8
 800cd3a:	f300 8130 	bgt.w	800cf9e <_vfiprintf_r+0x7b6>
 800cd3e:	6075      	str	r5, [r6, #4]
 800cd40:	2a07      	cmp	r2, #7
 800cd42:	4465      	add	r5, ip
 800cd44:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800cd48:	f340 813c 	ble.w	800cfc4 <_vfiprintf_r+0x7dc>
 800cd4c:	9800      	ldr	r0, [sp, #0]
 800cd4e:	aa0e      	add	r2, sp, #56	@ 0x38
 800cd50:	4639      	mov	r1, r7
 800cd52:	f7ff fd17 	bl	800c784 <__sprint_r>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f040 816f 	bne.w	800d03a <_vfiprintf_r+0x852>
 800cd5c:	ae11      	add	r6, sp, #68	@ 0x44
 800cd5e:	9b01      	ldr	r3, [sp, #4]
 800cd60:	1ae4      	subs	r4, r4, r3
 800cd62:	2c00      	cmp	r4, #0
 800cd64:	dd1a      	ble.n	800cd9c <_vfiprintf_r+0x5b4>
 800cd66:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800cd6a:	4877      	ldr	r0, [pc, #476]	@ (800cf48 <_vfiprintf_r+0x760>)
 800cd6c:	6030      	str	r0, [r6, #0]
 800cd6e:	2c10      	cmp	r4, #16
 800cd70:	f103 0301 	add.w	r3, r3, #1
 800cd74:	f106 0108 	add.w	r1, r6, #8
 800cd78:	f300 8126 	bgt.w	800cfc8 <_vfiprintf_r+0x7e0>
 800cd7c:	6074      	str	r4, [r6, #4]
 800cd7e:	2b07      	cmp	r3, #7
 800cd80:	4414      	add	r4, r2
 800cd82:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800cd86:	f340 8130 	ble.w	800cfea <_vfiprintf_r+0x802>
 800cd8a:	9800      	ldr	r0, [sp, #0]
 800cd8c:	aa0e      	add	r2, sp, #56	@ 0x38
 800cd8e:	4639      	mov	r1, r7
 800cd90:	f7ff fcf8 	bl	800c784 <__sprint_r>
 800cd94:	2800      	cmp	r0, #0
 800cd96:	f040 8150 	bne.w	800d03a <_vfiprintf_r+0x852>
 800cd9a:	ae11      	add	r6, sp, #68	@ 0x44
 800cd9c:	9b01      	ldr	r3, [sp, #4]
 800cd9e:	9a01      	ldr	r2, [sp, #4]
 800cda0:	6073      	str	r3, [r6, #4]
 800cda2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cda4:	f8c6 9000 	str.w	r9, [r6]
 800cda8:	4413      	add	r3, r2
 800cdaa:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cdae:	3301      	adds	r3, #1
 800cdb0:	2b07      	cmp	r3, #7
 800cdb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdb4:	f300 811b 	bgt.w	800cfee <_vfiprintf_r+0x806>
 800cdb8:	f106 0308 	add.w	r3, r6, #8
 800cdbc:	f01a 0f04 	tst.w	sl, #4
 800cdc0:	f040 811d 	bne.w	800cffe <_vfiprintf_r+0x816>
 800cdc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdc8:	9904      	ldr	r1, [sp, #16]
 800cdca:	428a      	cmp	r2, r1
 800cdcc:	bfac      	ite	ge
 800cdce:	189b      	addge	r3, r3, r2
 800cdd0:	185b      	addlt	r3, r3, r1
 800cdd2:	9303      	str	r3, [sp, #12]
 800cdd4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cdd6:	b13b      	cbz	r3, 800cde8 <_vfiprintf_r+0x600>
 800cdd8:	9800      	ldr	r0, [sp, #0]
 800cdda:	aa0e      	add	r2, sp, #56	@ 0x38
 800cddc:	4639      	mov	r1, r7
 800cdde:	f7ff fcd1 	bl	800c784 <__sprint_r>
 800cde2:	2800      	cmp	r0, #0
 800cde4:	f040 8129 	bne.w	800d03a <_vfiprintf_r+0x852>
 800cde8:	2300      	movs	r3, #0
 800cdea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdec:	4645      	mov	r5, r8
 800cdee:	ae11      	add	r6, sp, #68	@ 0x44
 800cdf0:	e55b      	b.n	800c8aa <_vfiprintf_r+0xc2>
 800cdf2:	4648      	mov	r0, r9
 800cdf4:	f7f3 f9f4 	bl	80001e0 <strlen>
 800cdf8:	9001      	str	r0, [sp, #4]
 800cdfa:	e734      	b.n	800cc66 <_vfiprintf_r+0x47e>
 800cdfc:	f04a 0a10 	orr.w	sl, sl, #16
 800ce00:	f01a 0320 	ands.w	r3, sl, #32
 800ce04:	d008      	beq.n	800ce18 <_vfiprintf_r+0x630>
 800ce06:	3507      	adds	r5, #7
 800ce08:	f025 0507 	bic.w	r5, r5, #7
 800ce0c:	46a8      	mov	r8, r5
 800ce0e:	686d      	ldr	r5, [r5, #4]
 800ce10:	f858 4b08 	ldr.w	r4, [r8], #8
 800ce14:	2301      	movs	r3, #1
 800ce16:	e6d8      	b.n	800cbca <_vfiprintf_r+0x3e2>
 800ce18:	46a8      	mov	r8, r5
 800ce1a:	f01a 0510 	ands.w	r5, sl, #16
 800ce1e:	f858 4b04 	ldr.w	r4, [r8], #4
 800ce22:	d001      	beq.n	800ce28 <_vfiprintf_r+0x640>
 800ce24:	461d      	mov	r5, r3
 800ce26:	e7f5      	b.n	800ce14 <_vfiprintf_r+0x62c>
 800ce28:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ce2c:	d001      	beq.n	800ce32 <_vfiprintf_r+0x64a>
 800ce2e:	b2a4      	uxth	r4, r4
 800ce30:	e7f0      	b.n	800ce14 <_vfiprintf_r+0x62c>
 800ce32:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ce36:	d0ed      	beq.n	800ce14 <_vfiprintf_r+0x62c>
 800ce38:	b2e4      	uxtb	r4, r4
 800ce3a:	e7f3      	b.n	800ce24 <_vfiprintf_r+0x63c>
 800ce3c:	4a43      	ldr	r2, [pc, #268]	@ (800cf4c <_vfiprintf_r+0x764>)
 800ce3e:	e5c9      	b.n	800c9d4 <_vfiprintf_r+0x1ec>
 800ce40:	46a8      	mov	r8, r5
 800ce42:	f01a 0510 	ands.w	r5, sl, #16
 800ce46:	f858 4b04 	ldr.w	r4, [r8], #4
 800ce4a:	d001      	beq.n	800ce50 <_vfiprintf_r+0x668>
 800ce4c:	4615      	mov	r5, r2
 800ce4e:	e5cd      	b.n	800c9ec <_vfiprintf_r+0x204>
 800ce50:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800ce54:	d001      	beq.n	800ce5a <_vfiprintf_r+0x672>
 800ce56:	b2a4      	uxth	r4, r4
 800ce58:	e5c8      	b.n	800c9ec <_vfiprintf_r+0x204>
 800ce5a:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ce5e:	f43f adc5 	beq.w	800c9ec <_vfiprintf_r+0x204>
 800ce62:	b2e4      	uxtb	r4, r4
 800ce64:	e7f2      	b.n	800ce4c <_vfiprintf_r+0x664>
 800ce66:	2c0a      	cmp	r4, #10
 800ce68:	f175 0300 	sbcs.w	r3, r5, #0
 800ce6c:	d206      	bcs.n	800ce7c <_vfiprintf_r+0x694>
 800ce6e:	3430      	adds	r4, #48	@ 0x30
 800ce70:	b2e4      	uxtb	r4, r4
 800ce72:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800ce76:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800ce7a:	e131      	b.n	800d0e0 <_vfiprintf_r+0x8f8>
 800ce7c:	ab3a      	add	r3, sp, #232	@ 0xe8
 800ce7e:	9308      	str	r3, [sp, #32]
 800ce80:	9b04      	ldr	r3, [sp, #16]
 800ce82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ce86:	f04f 0a00 	mov.w	sl, #0
 800ce8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce8c:	220a      	movs	r2, #10
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4620      	mov	r0, r4
 800ce92:	4629      	mov	r1, r5
 800ce94:	f7f3 ff00 	bl	8000c98 <__aeabi_uldivmod>
 800ce98:	460b      	mov	r3, r1
 800ce9a:	9908      	ldr	r1, [sp, #32]
 800ce9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ce9e:	3230      	adds	r2, #48	@ 0x30
 800cea0:	f801 2c01 	strb.w	r2, [r1, #-1]
 800cea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cea6:	f101 39ff 	add.w	r9, r1, #4294967295
 800ceaa:	f10a 0a01 	add.w	sl, sl, #1
 800ceae:	b1e2      	cbz	r2, 800ceea <_vfiprintf_r+0x702>
 800ceb0:	9a06      	ldr	r2, [sp, #24]
 800ceb2:	7812      	ldrb	r2, [r2, #0]
 800ceb4:	4552      	cmp	r2, sl
 800ceb6:	d118      	bne.n	800ceea <_vfiprintf_r+0x702>
 800ceb8:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800cebc:	d015      	beq.n	800ceea <_vfiprintf_r+0x702>
 800cebe:	2c0a      	cmp	r4, #10
 800cec0:	f175 0200 	sbcs.w	r2, r5, #0
 800cec4:	d311      	bcc.n	800ceea <_vfiprintf_r+0x702>
 800cec6:	9308      	str	r3, [sp, #32]
 800cec8:	9b07      	ldr	r3, [sp, #28]
 800ceca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cecc:	eba9 0903 	sub.w	r9, r9, r3
 800ced0:	461a      	mov	r2, r3
 800ced2:	4648      	mov	r0, r9
 800ced4:	f7fc f9b4 	bl	8009240 <strncpy>
 800ced8:	9b06      	ldr	r3, [sp, #24]
 800ceda:	785a      	ldrb	r2, [r3, #1]
 800cedc:	9b08      	ldr	r3, [sp, #32]
 800cede:	b172      	cbz	r2, 800cefe <_vfiprintf_r+0x716>
 800cee0:	9a06      	ldr	r2, [sp, #24]
 800cee2:	3201      	adds	r2, #1
 800cee4:	9206      	str	r2, [sp, #24]
 800cee6:	f04f 0a00 	mov.w	sl, #0
 800ceea:	2c0a      	cmp	r4, #10
 800ceec:	f175 0500 	sbcs.w	r5, r5, #0
 800cef0:	f0c0 80f6 	bcc.w	800d0e0 <_vfiprintf_r+0x8f8>
 800cef4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cef6:	f8cd 9020 	str.w	r9, [sp, #32]
 800cefa:	461d      	mov	r5, r3
 800cefc:	e7c6      	b.n	800ce8c <_vfiprintf_r+0x6a4>
 800cefe:	4692      	mov	sl, r2
 800cf00:	e7f3      	b.n	800ceea <_vfiprintf_r+0x702>
 800cf02:	f004 030f 	and.w	r3, r4, #15
 800cf06:	9a05      	ldr	r2, [sp, #20]
 800cf08:	0924      	lsrs	r4, r4, #4
 800cf0a:	5cd3      	ldrb	r3, [r2, r3]
 800cf0c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800cf10:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800cf14:	092d      	lsrs	r5, r5, #4
 800cf16:	ea54 0305 	orrs.w	r3, r4, r5
 800cf1a:	d1f2      	bne.n	800cf02 <_vfiprintf_r+0x71a>
 800cf1c:	e0e0      	b.n	800d0e0 <_vfiprintf_r+0x8f8>
 800cf1e:	b923      	cbnz	r3, 800cf2a <_vfiprintf_r+0x742>
 800cf20:	f01a 0f01 	tst.w	sl, #1
 800cf24:	d001      	beq.n	800cf2a <_vfiprintf_r+0x742>
 800cf26:	2430      	movs	r4, #48	@ 0x30
 800cf28:	e7a3      	b.n	800ce72 <_vfiprintf_r+0x68a>
 800cf2a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800cf2e:	e0d7      	b.n	800d0e0 <_vfiprintf_r+0x8f8>
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 80a3 	beq.w	800d07c <_vfiprintf_r+0x894>
 800cf36:	2400      	movs	r4, #0
 800cf38:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800cf3c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800cf40:	46a8      	mov	r8, r5
 800cf42:	e5e0      	b.n	800cb06 <_vfiprintf_r+0x31e>
 800cf44:	0800dcad 	.word	0x0800dcad
 800cf48:	0800dc9d 	.word	0x0800dc9d
 800cf4c:	0800d879 	.word	0x0800d879
 800cf50:	2110      	movs	r1, #16
 800cf52:	6071      	str	r1, [r6, #4]
 800cf54:	2a07      	cmp	r2, #7
 800cf56:	4461      	add	r1, ip
 800cf58:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800cf5c:	dd08      	ble.n	800cf70 <_vfiprintf_r+0x788>
 800cf5e:	9800      	ldr	r0, [sp, #0]
 800cf60:	aa0e      	add	r2, sp, #56	@ 0x38
 800cf62:	4639      	mov	r1, r7
 800cf64:	f7ff fc0e 	bl	800c784 <__sprint_r>
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d166      	bne.n	800d03a <_vfiprintf_r+0x852>
 800cf6c:	4b60      	ldr	r3, [pc, #384]	@ (800d0f0 <_vfiprintf_r+0x908>)
 800cf6e:	a811      	add	r0, sp, #68	@ 0x44
 800cf70:	3d10      	subs	r5, #16
 800cf72:	4606      	mov	r6, r0
 800cf74:	e694      	b.n	800cca0 <_vfiprintf_r+0x4b8>
 800cf76:	4606      	mov	r6, r0
 800cf78:	e6ac      	b.n	800ccd4 <_vfiprintf_r+0x4ec>
 800cf7a:	9800      	ldr	r0, [sp, #0]
 800cf7c:	aa0e      	add	r2, sp, #56	@ 0x38
 800cf7e:	4639      	mov	r1, r7
 800cf80:	f7ff fc00 	bl	800c784 <__sprint_r>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	d158      	bne.n	800d03a <_vfiprintf_r+0x852>
 800cf88:	ae11      	add	r6, sp, #68	@ 0x44
 800cf8a:	e6b5      	b.n	800ccf8 <_vfiprintf_r+0x510>
 800cf8c:	9800      	ldr	r0, [sp, #0]
 800cf8e:	aa0e      	add	r2, sp, #56	@ 0x38
 800cf90:	4639      	mov	r1, r7
 800cf92:	f7ff fbf7 	bl	800c784 <__sprint_r>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	d14f      	bne.n	800d03a <_vfiprintf_r+0x852>
 800cf9a:	ae11      	add	r6, sp, #68	@ 0x44
 800cf9c:	e6bc      	b.n	800cd18 <_vfiprintf_r+0x530>
 800cf9e:	2110      	movs	r1, #16
 800cfa0:	6071      	str	r1, [r6, #4]
 800cfa2:	2a07      	cmp	r2, #7
 800cfa4:	4461      	add	r1, ip
 800cfa6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800cfaa:	dd08      	ble.n	800cfbe <_vfiprintf_r+0x7d6>
 800cfac:	9800      	ldr	r0, [sp, #0]
 800cfae:	aa0e      	add	r2, sp, #56	@ 0x38
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7ff fbe7 	bl	800c784 <__sprint_r>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d13f      	bne.n	800d03a <_vfiprintf_r+0x852>
 800cfba:	4b4e      	ldr	r3, [pc, #312]	@ (800d0f4 <_vfiprintf_r+0x90c>)
 800cfbc:	a811      	add	r0, sp, #68	@ 0x44
 800cfbe:	3d10      	subs	r5, #16
 800cfc0:	4606      	mov	r6, r0
 800cfc2:	e6b2      	b.n	800cd2a <_vfiprintf_r+0x542>
 800cfc4:	4606      	mov	r6, r0
 800cfc6:	e6ca      	b.n	800cd5e <_vfiprintf_r+0x576>
 800cfc8:	2010      	movs	r0, #16
 800cfca:	4402      	add	r2, r0
 800cfcc:	2b07      	cmp	r3, #7
 800cfce:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800cfd2:	6070      	str	r0, [r6, #4]
 800cfd4:	dd06      	ble.n	800cfe4 <_vfiprintf_r+0x7fc>
 800cfd6:	9800      	ldr	r0, [sp, #0]
 800cfd8:	aa0e      	add	r2, sp, #56	@ 0x38
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7ff fbd2 	bl	800c784 <__sprint_r>
 800cfe0:	bb58      	cbnz	r0, 800d03a <_vfiprintf_r+0x852>
 800cfe2:	a911      	add	r1, sp, #68	@ 0x44
 800cfe4:	3c10      	subs	r4, #16
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	e6bd      	b.n	800cd66 <_vfiprintf_r+0x57e>
 800cfea:	460e      	mov	r6, r1
 800cfec:	e6d6      	b.n	800cd9c <_vfiprintf_r+0x5b4>
 800cfee:	9800      	ldr	r0, [sp, #0]
 800cff0:	aa0e      	add	r2, sp, #56	@ 0x38
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7ff fbc6 	bl	800c784 <__sprint_r>
 800cff8:	b9f8      	cbnz	r0, 800d03a <_vfiprintf_r+0x852>
 800cffa:	ab11      	add	r3, sp, #68	@ 0x44
 800cffc:	e6de      	b.n	800cdbc <_vfiprintf_r+0x5d4>
 800cffe:	9a02      	ldr	r2, [sp, #8]
 800d000:	9904      	ldr	r1, [sp, #16]
 800d002:	1a54      	subs	r4, r2, r1
 800d004:	2c00      	cmp	r4, #0
 800d006:	f77f aedd 	ble.w	800cdc4 <_vfiprintf_r+0x5dc>
 800d00a:	4d39      	ldr	r5, [pc, #228]	@ (800d0f0 <_vfiprintf_r+0x908>)
 800d00c:	2610      	movs	r6, #16
 800d00e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800d012:	2c10      	cmp	r4, #16
 800d014:	f102 0201 	add.w	r2, r2, #1
 800d018:	601d      	str	r5, [r3, #0]
 800d01a:	dc1d      	bgt.n	800d058 <_vfiprintf_r+0x870>
 800d01c:	605c      	str	r4, [r3, #4]
 800d01e:	2a07      	cmp	r2, #7
 800d020:	440c      	add	r4, r1
 800d022:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800d026:	f77f aecd 	ble.w	800cdc4 <_vfiprintf_r+0x5dc>
 800d02a:	9800      	ldr	r0, [sp, #0]
 800d02c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d02e:	4639      	mov	r1, r7
 800d030:	f7ff fba8 	bl	800c784 <__sprint_r>
 800d034:	2800      	cmp	r0, #0
 800d036:	f43f aec5 	beq.w	800cdc4 <_vfiprintf_r+0x5dc>
 800d03a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d03c:	07d9      	lsls	r1, r3, #31
 800d03e:	d405      	bmi.n	800d04c <_vfiprintf_r+0x864>
 800d040:	89bb      	ldrh	r3, [r7, #12]
 800d042:	059a      	lsls	r2, r3, #22
 800d044:	d402      	bmi.n	800d04c <_vfiprintf_r+0x864>
 800d046:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d048:	f7f9 f8f3 	bl	8006232 <__retarget_lock_release_recursive>
 800d04c:	89bb      	ldrh	r3, [r7, #12]
 800d04e:	065b      	lsls	r3, r3, #25
 800d050:	f57f abfb 	bpl.w	800c84a <_vfiprintf_r+0x62>
 800d054:	f7ff bbf6 	b.w	800c844 <_vfiprintf_r+0x5c>
 800d058:	3110      	adds	r1, #16
 800d05a:	2a07      	cmp	r2, #7
 800d05c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d060:	605e      	str	r6, [r3, #4]
 800d062:	dc02      	bgt.n	800d06a <_vfiprintf_r+0x882>
 800d064:	3308      	adds	r3, #8
 800d066:	3c10      	subs	r4, #16
 800d068:	e7d1      	b.n	800d00e <_vfiprintf_r+0x826>
 800d06a:	9800      	ldr	r0, [sp, #0]
 800d06c:	aa0e      	add	r2, sp, #56	@ 0x38
 800d06e:	4639      	mov	r1, r7
 800d070:	f7ff fb88 	bl	800c784 <__sprint_r>
 800d074:	2800      	cmp	r0, #0
 800d076:	d1e0      	bne.n	800d03a <_vfiprintf_r+0x852>
 800d078:	ab11      	add	r3, sp, #68	@ 0x44
 800d07a:	e7f4      	b.n	800d066 <_vfiprintf_r+0x87e>
 800d07c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d07e:	b913      	cbnz	r3, 800d086 <_vfiprintf_r+0x89e>
 800d080:	2300      	movs	r3, #0
 800d082:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d084:	e7d9      	b.n	800d03a <_vfiprintf_r+0x852>
 800d086:	9800      	ldr	r0, [sp, #0]
 800d088:	aa0e      	add	r2, sp, #56	@ 0x38
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7ff fb7a 	bl	800c784 <__sprint_r>
 800d090:	2800      	cmp	r0, #0
 800d092:	d0f5      	beq.n	800d080 <_vfiprintf_r+0x898>
 800d094:	e7d1      	b.n	800d03a <_vfiprintf_r+0x852>
 800d096:	ea54 0205 	orrs.w	r2, r4, r5
 800d09a:	f8cd a010 	str.w	sl, [sp, #16]
 800d09e:	f43f ada6 	beq.w	800cbee <_vfiprintf_r+0x406>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	f43f aedf 	beq.w	800ce66 <_vfiprintf_r+0x67e>
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d0ae:	f43f af28 	beq.w	800cf02 <_vfiprintf_r+0x71a>
 800d0b2:	f004 0307 	and.w	r3, r4, #7
 800d0b6:	08e4      	lsrs	r4, r4, #3
 800d0b8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d0bc:	08ed      	lsrs	r5, r5, #3
 800d0be:	3330      	adds	r3, #48	@ 0x30
 800d0c0:	ea54 0105 	orrs.w	r1, r4, r5
 800d0c4:	464a      	mov	r2, r9
 800d0c6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d0ca:	d1f2      	bne.n	800d0b2 <_vfiprintf_r+0x8ca>
 800d0cc:	9904      	ldr	r1, [sp, #16]
 800d0ce:	07c8      	lsls	r0, r1, #31
 800d0d0:	d506      	bpl.n	800d0e0 <_vfiprintf_r+0x8f8>
 800d0d2:	2b30      	cmp	r3, #48	@ 0x30
 800d0d4:	d004      	beq.n	800d0e0 <_vfiprintf_r+0x8f8>
 800d0d6:	2330      	movs	r3, #48	@ 0x30
 800d0d8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800d0dc:	f1a2 0902 	sub.w	r9, r2, #2
 800d0e0:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d0e2:	eba3 0309 	sub.w	r3, r3, r9
 800d0e6:	9c01      	ldr	r4, [sp, #4]
 800d0e8:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	e5bb      	b.n	800cc68 <_vfiprintf_r+0x480>
 800d0f0:	0800dcad 	.word	0x0800dcad
 800d0f4:	0800dc9d 	.word	0x0800dc9d

0800d0f8 <__sbprintf>:
 800d0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0fa:	461f      	mov	r7, r3
 800d0fc:	898b      	ldrh	r3, [r1, #12]
 800d0fe:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800d102:	f023 0302 	bic.w	r3, r3, #2
 800d106:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d10a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800d10c:	9319      	str	r3, [sp, #100]	@ 0x64
 800d10e:	89cb      	ldrh	r3, [r1, #14]
 800d110:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d114:	69cb      	ldr	r3, [r1, #28]
 800d116:	9307      	str	r3, [sp, #28]
 800d118:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800d11a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d11c:	ab1a      	add	r3, sp, #104	@ 0x68
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	9304      	str	r3, [sp, #16]
 800d122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d126:	4615      	mov	r5, r2
 800d128:	4606      	mov	r6, r0
 800d12a:	9302      	str	r3, [sp, #8]
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	a816      	add	r0, sp, #88	@ 0x58
 800d130:	2300      	movs	r3, #0
 800d132:	460c      	mov	r4, r1
 800d134:	9306      	str	r3, [sp, #24]
 800d136:	f7f9 f879 	bl	800622c <__retarget_lock_init_recursive>
 800d13a:	462a      	mov	r2, r5
 800d13c:	463b      	mov	r3, r7
 800d13e:	4669      	mov	r1, sp
 800d140:	4630      	mov	r0, r6
 800d142:	f7ff fb51 	bl	800c7e8 <_vfiprintf_r>
 800d146:	1e05      	subs	r5, r0, #0
 800d148:	db07      	blt.n	800d15a <__sbprintf+0x62>
 800d14a:	4669      	mov	r1, sp
 800d14c:	4630      	mov	r0, r6
 800d14e:	f7fc f819 	bl	8009184 <_fflush_r>
 800d152:	2800      	cmp	r0, #0
 800d154:	bf18      	it	ne
 800d156:	f04f 35ff 	movne.w	r5, #4294967295
 800d15a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d15e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d160:	065b      	lsls	r3, r3, #25
 800d162:	bf42      	ittt	mi
 800d164:	89a3      	ldrhmi	r3, [r4, #12]
 800d166:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800d16a:	81a3      	strhmi	r3, [r4, #12]
 800d16c:	f7f9 f85f 	bl	800622e <__retarget_lock_close_recursive>
 800d170:	4628      	mov	r0, r5
 800d172:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800d176:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d178 <__sfvwrite_r>:
 800d178:	6893      	ldr	r3, [r2, #8]
 800d17a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d17e:	4606      	mov	r6, r0
 800d180:	460c      	mov	r4, r1
 800d182:	4691      	mov	r9, r2
 800d184:	b91b      	cbnz	r3, 800d18e <__sfvwrite_r+0x16>
 800d186:	2000      	movs	r0, #0
 800d188:	b003      	add	sp, #12
 800d18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d18e:	898b      	ldrh	r3, [r1, #12]
 800d190:	0718      	lsls	r0, r3, #28
 800d192:	d550      	bpl.n	800d236 <__sfvwrite_r+0xbe>
 800d194:	690b      	ldr	r3, [r1, #16]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d04d      	beq.n	800d236 <__sfvwrite_r+0xbe>
 800d19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d19e:	f8d9 8000 	ldr.w	r8, [r9]
 800d1a2:	f013 0702 	ands.w	r7, r3, #2
 800d1a6:	d16b      	bne.n	800d280 <__sfvwrite_r+0x108>
 800d1a8:	f013 0301 	ands.w	r3, r3, #1
 800d1ac:	f000 809c 	beq.w	800d2e8 <__sfvwrite_r+0x170>
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	46ba      	mov	sl, r7
 800d1b4:	46bb      	mov	fp, r7
 800d1b6:	f1bb 0f00 	cmp.w	fp, #0
 800d1ba:	f000 8103 	beq.w	800d3c4 <__sfvwrite_r+0x24c>
 800d1be:	b950      	cbnz	r0, 800d1d6 <__sfvwrite_r+0x5e>
 800d1c0:	465a      	mov	r2, fp
 800d1c2:	210a      	movs	r1, #10
 800d1c4:	4650      	mov	r0, sl
 800d1c6:	f7f3 f813 	bl	80001f0 <memchr>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	f000 8100 	beq.w	800d3d0 <__sfvwrite_r+0x258>
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	eba0 070a 	sub.w	r7, r0, sl
 800d1d6:	6820      	ldr	r0, [r4, #0]
 800d1d8:	6921      	ldr	r1, [r4, #16]
 800d1da:	68a5      	ldr	r5, [r4, #8]
 800d1dc:	6963      	ldr	r3, [r4, #20]
 800d1de:	455f      	cmp	r7, fp
 800d1e0:	463a      	mov	r2, r7
 800d1e2:	bf28      	it	cs
 800d1e4:	465a      	movcs	r2, fp
 800d1e6:	4288      	cmp	r0, r1
 800d1e8:	f240 80f5 	bls.w	800d3d6 <__sfvwrite_r+0x25e>
 800d1ec:	441d      	add	r5, r3
 800d1ee:	42aa      	cmp	r2, r5
 800d1f0:	f340 80f1 	ble.w	800d3d6 <__sfvwrite_r+0x25e>
 800d1f4:	4651      	mov	r1, sl
 800d1f6:	462a      	mov	r2, r5
 800d1f8:	f7fe fef2 	bl	800bfe0 <memmove>
 800d1fc:	6823      	ldr	r3, [r4, #0]
 800d1fe:	442b      	add	r3, r5
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	4621      	mov	r1, r4
 800d204:	4630      	mov	r0, r6
 800d206:	f7fb ffbd 	bl	8009184 <_fflush_r>
 800d20a:	2800      	cmp	r0, #0
 800d20c:	d167      	bne.n	800d2de <__sfvwrite_r+0x166>
 800d20e:	1b7f      	subs	r7, r7, r5
 800d210:	f040 80f9 	bne.w	800d406 <__sfvwrite_r+0x28e>
 800d214:	4621      	mov	r1, r4
 800d216:	4630      	mov	r0, r6
 800d218:	f7fb ffb4 	bl	8009184 <_fflush_r>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d15e      	bne.n	800d2de <__sfvwrite_r+0x166>
 800d220:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d224:	1b5b      	subs	r3, r3, r5
 800d226:	44aa      	add	sl, r5
 800d228:	ebab 0b05 	sub.w	fp, fp, r5
 800d22c:	f8c9 3008 	str.w	r3, [r9, #8]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1c0      	bne.n	800d1b6 <__sfvwrite_r+0x3e>
 800d234:	e7a7      	b.n	800d186 <__sfvwrite_r+0xe>
 800d236:	4621      	mov	r1, r4
 800d238:	4630      	mov	r0, r6
 800d23a:	f000 f8e9 	bl	800d410 <__swsetup_r>
 800d23e:	2800      	cmp	r0, #0
 800d240:	d0ab      	beq.n	800d19a <__sfvwrite_r+0x22>
 800d242:	f04f 30ff 	mov.w	r0, #4294967295
 800d246:	e79f      	b.n	800d188 <__sfvwrite_r+0x10>
 800d248:	e9d8 a500 	ldrd	sl, r5, [r8]
 800d24c:	f108 0808 	add.w	r8, r8, #8
 800d250:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d254:	69e1      	ldr	r1, [r4, #28]
 800d256:	2d00      	cmp	r5, #0
 800d258:	d0f6      	beq.n	800d248 <__sfvwrite_r+0xd0>
 800d25a:	42bd      	cmp	r5, r7
 800d25c:	462b      	mov	r3, r5
 800d25e:	4652      	mov	r2, sl
 800d260:	bf28      	it	cs
 800d262:	463b      	movcs	r3, r7
 800d264:	4630      	mov	r0, r6
 800d266:	47d8      	blx	fp
 800d268:	2800      	cmp	r0, #0
 800d26a:	dd38      	ble.n	800d2de <__sfvwrite_r+0x166>
 800d26c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d270:	1a1b      	subs	r3, r3, r0
 800d272:	4482      	add	sl, r0
 800d274:	1a2d      	subs	r5, r5, r0
 800d276:	f8c9 3008 	str.w	r3, [r9, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1e8      	bne.n	800d250 <__sfvwrite_r+0xd8>
 800d27e:	e782      	b.n	800d186 <__sfvwrite_r+0xe>
 800d280:	f04f 0a00 	mov.w	sl, #0
 800d284:	4f61      	ldr	r7, [pc, #388]	@ (800d40c <__sfvwrite_r+0x294>)
 800d286:	4655      	mov	r5, sl
 800d288:	e7e2      	b.n	800d250 <__sfvwrite_r+0xd8>
 800d28a:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800d28e:	f108 0808 	add.w	r8, r8, #8
 800d292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d296:	6820      	ldr	r0, [r4, #0]
 800d298:	68a2      	ldr	r2, [r4, #8]
 800d29a:	f1ba 0f00 	cmp.w	sl, #0
 800d29e:	d0f4      	beq.n	800d28a <__sfvwrite_r+0x112>
 800d2a0:	0599      	lsls	r1, r3, #22
 800d2a2:	d563      	bpl.n	800d36c <__sfvwrite_r+0x1f4>
 800d2a4:	4552      	cmp	r2, sl
 800d2a6:	d836      	bhi.n	800d316 <__sfvwrite_r+0x19e>
 800d2a8:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800d2ac:	d033      	beq.n	800d316 <__sfvwrite_r+0x19e>
 800d2ae:	6921      	ldr	r1, [r4, #16]
 800d2b0:	6965      	ldr	r5, [r4, #20]
 800d2b2:	eba0 0b01 	sub.w	fp, r0, r1
 800d2b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d2ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d2be:	f10b 0201 	add.w	r2, fp, #1
 800d2c2:	106d      	asrs	r5, r5, #1
 800d2c4:	4452      	add	r2, sl
 800d2c6:	4295      	cmp	r5, r2
 800d2c8:	bf38      	it	cc
 800d2ca:	4615      	movcc	r5, r2
 800d2cc:	055b      	lsls	r3, r3, #21
 800d2ce:	d53d      	bpl.n	800d34c <__sfvwrite_r+0x1d4>
 800d2d0:	4629      	mov	r1, r5
 800d2d2:	4630      	mov	r0, r6
 800d2d4:	f7f9 f8e2 	bl	800649c <_malloc_r>
 800d2d8:	b948      	cbnz	r0, 800d2ee <__sfvwrite_r+0x176>
 800d2da:	230c      	movs	r3, #12
 800d2dc:	6033      	str	r3, [r6, #0]
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2e4:	81a3      	strh	r3, [r4, #12]
 800d2e6:	e7ac      	b.n	800d242 <__sfvwrite_r+0xca>
 800d2e8:	461f      	mov	r7, r3
 800d2ea:	469a      	mov	sl, r3
 800d2ec:	e7d1      	b.n	800d292 <__sfvwrite_r+0x11a>
 800d2ee:	465a      	mov	r2, fp
 800d2f0:	6921      	ldr	r1, [r4, #16]
 800d2f2:	9001      	str	r0, [sp, #4]
 800d2f4:	f7f8 ff9e 	bl	8006234 <memcpy>
 800d2f8:	89a2      	ldrh	r2, [r4, #12]
 800d2fa:	9b01      	ldr	r3, [sp, #4]
 800d2fc:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800d300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d304:	81a2      	strh	r2, [r4, #12]
 800d306:	6123      	str	r3, [r4, #16]
 800d308:	6165      	str	r5, [r4, #20]
 800d30a:	445b      	add	r3, fp
 800d30c:	eba5 050b 	sub.w	r5, r5, fp
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	4652      	mov	r2, sl
 800d314:	60a5      	str	r5, [r4, #8]
 800d316:	4552      	cmp	r2, sl
 800d318:	bf28      	it	cs
 800d31a:	4652      	movcs	r2, sl
 800d31c:	6820      	ldr	r0, [r4, #0]
 800d31e:	9201      	str	r2, [sp, #4]
 800d320:	4639      	mov	r1, r7
 800d322:	f7fe fe5d 	bl	800bfe0 <memmove>
 800d326:	68a3      	ldr	r3, [r4, #8]
 800d328:	9a01      	ldr	r2, [sp, #4]
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	60a3      	str	r3, [r4, #8]
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	4413      	add	r3, r2
 800d332:	4655      	mov	r5, sl
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d33a:	1b5b      	subs	r3, r3, r5
 800d33c:	442f      	add	r7, r5
 800d33e:	ebaa 0a05 	sub.w	sl, sl, r5
 800d342:	f8c9 3008 	str.w	r3, [r9, #8]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1a3      	bne.n	800d292 <__sfvwrite_r+0x11a>
 800d34a:	e71c      	b.n	800d186 <__sfvwrite_r+0xe>
 800d34c:	462a      	mov	r2, r5
 800d34e:	4630      	mov	r0, r6
 800d350:	f7fd fb04 	bl	800a95c <_realloc_r>
 800d354:	4603      	mov	r3, r0
 800d356:	2800      	cmp	r0, #0
 800d358:	d1d5      	bne.n	800d306 <__sfvwrite_r+0x18e>
 800d35a:	6921      	ldr	r1, [r4, #16]
 800d35c:	4630      	mov	r0, r6
 800d35e:	f7f8 ffdd 	bl	800631c <_free_r>
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d368:	81a3      	strh	r3, [r4, #12]
 800d36a:	e7b6      	b.n	800d2da <__sfvwrite_r+0x162>
 800d36c:	6923      	ldr	r3, [r4, #16]
 800d36e:	4283      	cmp	r3, r0
 800d370:	d302      	bcc.n	800d378 <__sfvwrite_r+0x200>
 800d372:	6961      	ldr	r1, [r4, #20]
 800d374:	4551      	cmp	r1, sl
 800d376:	d915      	bls.n	800d3a4 <__sfvwrite_r+0x22c>
 800d378:	4552      	cmp	r2, sl
 800d37a:	bf28      	it	cs
 800d37c:	4652      	movcs	r2, sl
 800d37e:	4639      	mov	r1, r7
 800d380:	4615      	mov	r5, r2
 800d382:	f7fe fe2d 	bl	800bfe0 <memmove>
 800d386:	68a3      	ldr	r3, [r4, #8]
 800d388:	6822      	ldr	r2, [r4, #0]
 800d38a:	1b5b      	subs	r3, r3, r5
 800d38c:	442a      	add	r2, r5
 800d38e:	60a3      	str	r3, [r4, #8]
 800d390:	6022      	str	r2, [r4, #0]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d1cf      	bne.n	800d336 <__sfvwrite_r+0x1be>
 800d396:	4621      	mov	r1, r4
 800d398:	4630      	mov	r0, r6
 800d39a:	f7fb fef3 	bl	8009184 <_fflush_r>
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	d0c9      	beq.n	800d336 <__sfvwrite_r+0x1be>
 800d3a2:	e79c      	b.n	800d2de <__sfvwrite_r+0x166>
 800d3a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d3a8:	4553      	cmp	r3, sl
 800d3aa:	bf28      	it	cs
 800d3ac:	4653      	movcs	r3, sl
 800d3ae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d3b0:	fb93 f3f1 	sdiv	r3, r3, r1
 800d3b4:	463a      	mov	r2, r7
 800d3b6:	434b      	muls	r3, r1
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	69e1      	ldr	r1, [r4, #28]
 800d3bc:	47a8      	blx	r5
 800d3be:	1e05      	subs	r5, r0, #0
 800d3c0:	dcb9      	bgt.n	800d336 <__sfvwrite_r+0x1be>
 800d3c2:	e78c      	b.n	800d2de <__sfvwrite_r+0x166>
 800d3c4:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800d3c8:	2000      	movs	r0, #0
 800d3ca:	f108 0808 	add.w	r8, r8, #8
 800d3ce:	e6f2      	b.n	800d1b6 <__sfvwrite_r+0x3e>
 800d3d0:	f10b 0701 	add.w	r7, fp, #1
 800d3d4:	e6ff      	b.n	800d1d6 <__sfvwrite_r+0x5e>
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	dc08      	bgt.n	800d3ec <__sfvwrite_r+0x274>
 800d3da:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d3dc:	69e1      	ldr	r1, [r4, #28]
 800d3de:	4652      	mov	r2, sl
 800d3e0:	4630      	mov	r0, r6
 800d3e2:	47a8      	blx	r5
 800d3e4:	1e05      	subs	r5, r0, #0
 800d3e6:	f73f af12 	bgt.w	800d20e <__sfvwrite_r+0x96>
 800d3ea:	e778      	b.n	800d2de <__sfvwrite_r+0x166>
 800d3ec:	4651      	mov	r1, sl
 800d3ee:	9201      	str	r2, [sp, #4]
 800d3f0:	f7fe fdf6 	bl	800bfe0 <memmove>
 800d3f4:	9a01      	ldr	r2, [sp, #4]
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	1a9b      	subs	r3, r3, r2
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	4413      	add	r3, r2
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	4615      	mov	r5, r2
 800d404:	e703      	b.n	800d20e <__sfvwrite_r+0x96>
 800d406:	2001      	movs	r0, #1
 800d408:	e70a      	b.n	800d220 <__sfvwrite_r+0xa8>
 800d40a:	bf00      	nop
 800d40c:	7ffffc00 	.word	0x7ffffc00

0800d410 <__swsetup_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4b29      	ldr	r3, [pc, #164]	@ (800d4b8 <__swsetup_r+0xa8>)
 800d414:	4605      	mov	r5, r0
 800d416:	6818      	ldr	r0, [r3, #0]
 800d418:	460c      	mov	r4, r1
 800d41a:	b118      	cbz	r0, 800d424 <__swsetup_r+0x14>
 800d41c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d41e:	b90b      	cbnz	r3, 800d424 <__swsetup_r+0x14>
 800d420:	f7f8 fdc6 	bl	8005fb0 <__sinit>
 800d424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d428:	0719      	lsls	r1, r3, #28
 800d42a:	d422      	bmi.n	800d472 <__swsetup_r+0x62>
 800d42c:	06da      	lsls	r2, r3, #27
 800d42e:	d407      	bmi.n	800d440 <__swsetup_r+0x30>
 800d430:	2209      	movs	r2, #9
 800d432:	602a      	str	r2, [r5, #0]
 800d434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d438:	81a3      	strh	r3, [r4, #12]
 800d43a:	f04f 30ff 	mov.w	r0, #4294967295
 800d43e:	e033      	b.n	800d4a8 <__swsetup_r+0x98>
 800d440:	0758      	lsls	r0, r3, #29
 800d442:	d512      	bpl.n	800d46a <__swsetup_r+0x5a>
 800d444:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d446:	b141      	cbz	r1, 800d45a <__swsetup_r+0x4a>
 800d448:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800d44c:	4299      	cmp	r1, r3
 800d44e:	d002      	beq.n	800d456 <__swsetup_r+0x46>
 800d450:	4628      	mov	r0, r5
 800d452:	f7f8 ff63 	bl	800631c <_free_r>
 800d456:	2300      	movs	r3, #0
 800d458:	6323      	str	r3, [r4, #48]	@ 0x30
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	2300      	movs	r3, #0
 800d464:	6063      	str	r3, [r4, #4]
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	6023      	str	r3, [r4, #0]
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f043 0308 	orr.w	r3, r3, #8
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	6923      	ldr	r3, [r4, #16]
 800d474:	b94b      	cbnz	r3, 800d48a <__swsetup_r+0x7a>
 800d476:	89a3      	ldrh	r3, [r4, #12]
 800d478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d480:	d003      	beq.n	800d48a <__swsetup_r+0x7a>
 800d482:	4621      	mov	r1, r4
 800d484:	4628      	mov	r0, r5
 800d486:	f000 f8c9 	bl	800d61c <__smakebuf_r>
 800d48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d48e:	f013 0201 	ands.w	r2, r3, #1
 800d492:	d00a      	beq.n	800d4aa <__swsetup_r+0x9a>
 800d494:	2200      	movs	r2, #0
 800d496:	60a2      	str	r2, [r4, #8]
 800d498:	6962      	ldr	r2, [r4, #20]
 800d49a:	4252      	negs	r2, r2
 800d49c:	61a2      	str	r2, [r4, #24]
 800d49e:	6922      	ldr	r2, [r4, #16]
 800d4a0:	b942      	cbnz	r2, 800d4b4 <__swsetup_r+0xa4>
 800d4a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4a6:	d1c5      	bne.n	800d434 <__swsetup_r+0x24>
 800d4a8:	bd38      	pop	{r3, r4, r5, pc}
 800d4aa:	0799      	lsls	r1, r3, #30
 800d4ac:	bf58      	it	pl
 800d4ae:	6962      	ldrpl	r2, [r4, #20]
 800d4b0:	60a2      	str	r2, [r4, #8]
 800d4b2:	e7f4      	b.n	800d49e <__swsetup_r+0x8e>
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	e7f7      	b.n	800d4a8 <__swsetup_r+0x98>
 800d4b8:	20000018 	.word	0x20000018

0800d4bc <__fputwc>:
 800d4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	4680      	mov	r8, r0
 800d4c2:	460f      	mov	r7, r1
 800d4c4:	4614      	mov	r4, r2
 800d4c6:	f7fb fecf 	bl	8009268 <__locale_mb_cur_max>
 800d4ca:	2801      	cmp	r0, #1
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	d11b      	bne.n	800d508 <__fputwc+0x4c>
 800d4d0:	1e7b      	subs	r3, r7, #1
 800d4d2:	2bfe      	cmp	r3, #254	@ 0xfe
 800d4d4:	d818      	bhi.n	800d508 <__fputwc+0x4c>
 800d4d6:	f88d 7004 	strb.w	r7, [sp, #4]
 800d4da:	2600      	movs	r6, #0
 800d4dc:	f10d 0904 	add.w	r9, sp, #4
 800d4e0:	42ae      	cmp	r6, r5
 800d4e2:	d021      	beq.n	800d528 <__fputwc+0x6c>
 800d4e4:	68a3      	ldr	r3, [r4, #8]
 800d4e6:	f816 1009 	ldrb.w	r1, [r6, r9]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	60a3      	str	r3, [r4, #8]
 800d4f0:	da04      	bge.n	800d4fc <__fputwc+0x40>
 800d4f2:	69a2      	ldr	r2, [r4, #24]
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	db1b      	blt.n	800d530 <__fputwc+0x74>
 800d4f8:	290a      	cmp	r1, #10
 800d4fa:	d019      	beq.n	800d530 <__fputwc+0x74>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	6022      	str	r2, [r4, #0]
 800d502:	7019      	strb	r1, [r3, #0]
 800d504:	3601      	adds	r6, #1
 800d506:	e7eb      	b.n	800d4e0 <__fputwc+0x24>
 800d508:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800d50c:	463a      	mov	r2, r7
 800d50e:	a901      	add	r1, sp, #4
 800d510:	4640      	mov	r0, r8
 800d512:	f000 f845 	bl	800d5a0 <_wcrtomb_r>
 800d516:	1c43      	adds	r3, r0, #1
 800d518:	4605      	mov	r5, r0
 800d51a:	d1de      	bne.n	800d4da <__fputwc+0x1e>
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d522:	81a3      	strh	r3, [r4, #12]
 800d524:	f04f 37ff 	mov.w	r7, #4294967295
 800d528:	4638      	mov	r0, r7
 800d52a:	b003      	add	sp, #12
 800d52c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d530:	4622      	mov	r2, r4
 800d532:	4640      	mov	r0, r8
 800d534:	f000 f8ae 	bl	800d694 <__swbuf_r>
 800d538:	3001      	adds	r0, #1
 800d53a:	d1e3      	bne.n	800d504 <__fputwc+0x48>
 800d53c:	e7f2      	b.n	800d524 <__fputwc+0x68>

0800d53e <_fputwc_r>:
 800d53e:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800d540:	07db      	lsls	r3, r3, #31
 800d542:	b570      	push	{r4, r5, r6, lr}
 800d544:	4605      	mov	r5, r0
 800d546:	460e      	mov	r6, r1
 800d548:	4614      	mov	r4, r2
 800d54a:	d405      	bmi.n	800d558 <_fputwc_r+0x1a>
 800d54c:	8993      	ldrh	r3, [r2, #12]
 800d54e:	0598      	lsls	r0, r3, #22
 800d550:	d402      	bmi.n	800d558 <_fputwc_r+0x1a>
 800d552:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800d554:	f7f8 fe6c 	bl	8006230 <__retarget_lock_acquire_recursive>
 800d558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55c:	0499      	lsls	r1, r3, #18
 800d55e:	d406      	bmi.n	800d56e <_fputwc_r+0x30>
 800d560:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d564:	81a3      	strh	r3, [r4, #12]
 800d566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d568:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d56c:	6663      	str	r3, [r4, #100]	@ 0x64
 800d56e:	4622      	mov	r2, r4
 800d570:	4628      	mov	r0, r5
 800d572:	4631      	mov	r1, r6
 800d574:	f7ff ffa2 	bl	800d4bc <__fputwc>
 800d578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d57a:	07da      	lsls	r2, r3, #31
 800d57c:	4605      	mov	r5, r0
 800d57e:	d405      	bmi.n	800d58c <_fputwc_r+0x4e>
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	059b      	lsls	r3, r3, #22
 800d584:	d402      	bmi.n	800d58c <_fputwc_r+0x4e>
 800d586:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d588:	f7f8 fe53 	bl	8006232 <__retarget_lock_release_recursive>
 800d58c:	4628      	mov	r0, r5
 800d58e:	bd70      	pop	{r4, r5, r6, pc}

0800d590 <abort>:
 800d590:	b508      	push	{r3, lr}
 800d592:	2006      	movs	r0, #6
 800d594:	f000 f8f0 	bl	800d778 <raise>
 800d598:	2001      	movs	r0, #1
 800d59a:	f7f4 feaf 	bl	80022fc <_exit>
	...

0800d5a0 <_wcrtomb_r>:
 800d5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5a2:	4c09      	ldr	r4, [pc, #36]	@ (800d5c8 <_wcrtomb_r+0x28>)
 800d5a4:	b085      	sub	sp, #20
 800d5a6:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	461e      	mov	r6, r3
 800d5ae:	b909      	cbnz	r1, 800d5b4 <_wcrtomb_r+0x14>
 800d5b0:	460a      	mov	r2, r1
 800d5b2:	a901      	add	r1, sp, #4
 800d5b4:	47b8      	blx	r7
 800d5b6:	1c43      	adds	r3, r0, #1
 800d5b8:	bf01      	itttt	eq
 800d5ba:	2300      	moveq	r3, #0
 800d5bc:	6033      	streq	r3, [r6, #0]
 800d5be:	238a      	moveq	r3, #138	@ 0x8a
 800d5c0:	602b      	streq	r3, [r5, #0]
 800d5c2:	b005      	add	sp, #20
 800d5c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	20000554 	.word	0x20000554

0800d5cc <__swhatbuf_r>:
 800d5cc:	b570      	push	{r4, r5, r6, lr}
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d4:	2900      	cmp	r1, #0
 800d5d6:	b096      	sub	sp, #88	@ 0x58
 800d5d8:	4615      	mov	r5, r2
 800d5da:	461e      	mov	r6, r3
 800d5dc:	da07      	bge.n	800d5ee <__swhatbuf_r+0x22>
 800d5de:	89a1      	ldrh	r1, [r4, #12]
 800d5e0:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800d5e4:	d117      	bne.n	800d616 <__swhatbuf_r+0x4a>
 800d5e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5ea:	4608      	mov	r0, r1
 800d5ec:	e00f      	b.n	800d60e <__swhatbuf_r+0x42>
 800d5ee:	466a      	mov	r2, sp
 800d5f0:	f000 f8ca 	bl	800d788 <_fstat_r>
 800d5f4:	2800      	cmp	r0, #0
 800d5f6:	dbf2      	blt.n	800d5de <__swhatbuf_r+0x12>
 800d5f8:	9901      	ldr	r1, [sp, #4]
 800d5fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d602:	4259      	negs	r1, r3
 800d604:	4159      	adcs	r1, r3
 800d606:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d60a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d60e:	6031      	str	r1, [r6, #0]
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	b016      	add	sp, #88	@ 0x58
 800d614:	bd70      	pop	{r4, r5, r6, pc}
 800d616:	2100      	movs	r1, #0
 800d618:	2340      	movs	r3, #64	@ 0x40
 800d61a:	e7e6      	b.n	800d5ea <__swhatbuf_r+0x1e>

0800d61c <__smakebuf_r>:
 800d61c:	898b      	ldrh	r3, [r1, #12]
 800d61e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d620:	079d      	lsls	r5, r3, #30
 800d622:	4606      	mov	r6, r0
 800d624:	460c      	mov	r4, r1
 800d626:	d507      	bpl.n	800d638 <__smakebuf_r+0x1c>
 800d628:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	6123      	str	r3, [r4, #16]
 800d630:	2301      	movs	r3, #1
 800d632:	6163      	str	r3, [r4, #20]
 800d634:	b003      	add	sp, #12
 800d636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d638:	ab01      	add	r3, sp, #4
 800d63a:	466a      	mov	r2, sp
 800d63c:	f7ff ffc6 	bl	800d5cc <__swhatbuf_r>
 800d640:	9f00      	ldr	r7, [sp, #0]
 800d642:	4605      	mov	r5, r0
 800d644:	4639      	mov	r1, r7
 800d646:	4630      	mov	r0, r6
 800d648:	f7f8 ff28 	bl	800649c <_malloc_r>
 800d64c:	b948      	cbnz	r0, 800d662 <__smakebuf_r+0x46>
 800d64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d652:	059a      	lsls	r2, r3, #22
 800d654:	d4ee      	bmi.n	800d634 <__smakebuf_r+0x18>
 800d656:	f023 0303 	bic.w	r3, r3, #3
 800d65a:	f043 0302 	orr.w	r3, r3, #2
 800d65e:	81a3      	strh	r3, [r4, #12]
 800d660:	e7e2      	b.n	800d628 <__smakebuf_r+0xc>
 800d662:	89a3      	ldrh	r3, [r4, #12]
 800d664:	6020      	str	r0, [r4, #0]
 800d666:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d66a:	81a3      	strh	r3, [r4, #12]
 800d66c:	9b01      	ldr	r3, [sp, #4]
 800d66e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d672:	b15b      	cbz	r3, 800d68c <__smakebuf_r+0x70>
 800d674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d678:	4630      	mov	r0, r6
 800d67a:	f000 f897 	bl	800d7ac <_isatty_r>
 800d67e:	b128      	cbz	r0, 800d68c <__smakebuf_r+0x70>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	f023 0303 	bic.w	r3, r3, #3
 800d686:	f043 0301 	orr.w	r3, r3, #1
 800d68a:	81a3      	strh	r3, [r4, #12]
 800d68c:	89a3      	ldrh	r3, [r4, #12]
 800d68e:	431d      	orrs	r5, r3
 800d690:	81a5      	strh	r5, [r4, #12]
 800d692:	e7cf      	b.n	800d634 <__smakebuf_r+0x18>

0800d694 <__swbuf_r>:
 800d694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d696:	460e      	mov	r6, r1
 800d698:	4614      	mov	r4, r2
 800d69a:	4605      	mov	r5, r0
 800d69c:	b118      	cbz	r0, 800d6a6 <__swbuf_r+0x12>
 800d69e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d6a0:	b90b      	cbnz	r3, 800d6a6 <__swbuf_r+0x12>
 800d6a2:	f7f8 fc85 	bl	8005fb0 <__sinit>
 800d6a6:	69a3      	ldr	r3, [r4, #24]
 800d6a8:	60a3      	str	r3, [r4, #8]
 800d6aa:	89a3      	ldrh	r3, [r4, #12]
 800d6ac:	0719      	lsls	r1, r3, #28
 800d6ae:	d501      	bpl.n	800d6b4 <__swbuf_r+0x20>
 800d6b0:	6923      	ldr	r3, [r4, #16]
 800d6b2:	b943      	cbnz	r3, 800d6c6 <__swbuf_r+0x32>
 800d6b4:	4621      	mov	r1, r4
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	f7ff feaa 	bl	800d410 <__swsetup_r>
 800d6bc:	b118      	cbz	r0, 800d6c6 <__swbuf_r+0x32>
 800d6be:	f04f 37ff 	mov.w	r7, #4294967295
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ca:	b2f6      	uxtb	r6, r6
 800d6cc:	049a      	lsls	r2, r3, #18
 800d6ce:	4637      	mov	r7, r6
 800d6d0:	d406      	bmi.n	800d6e0 <__swbuf_r+0x4c>
 800d6d2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d6d6:	81a3      	strh	r3, [r4, #12]
 800d6d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d6de:	6663      	str	r3, [r4, #100]	@ 0x64
 800d6e0:	6823      	ldr	r3, [r4, #0]
 800d6e2:	6922      	ldr	r2, [r4, #16]
 800d6e4:	1a98      	subs	r0, r3, r2
 800d6e6:	6963      	ldr	r3, [r4, #20]
 800d6e8:	4283      	cmp	r3, r0
 800d6ea:	dc05      	bgt.n	800d6f8 <__swbuf_r+0x64>
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f7fb fd48 	bl	8009184 <_fflush_r>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d1e2      	bne.n	800d6be <__swbuf_r+0x2a>
 800d6f8:	68a3      	ldr	r3, [r4, #8]
 800d6fa:	3b01      	subs	r3, #1
 800d6fc:	60a3      	str	r3, [r4, #8]
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	1c5a      	adds	r2, r3, #1
 800d702:	6022      	str	r2, [r4, #0]
 800d704:	701e      	strb	r6, [r3, #0]
 800d706:	6962      	ldr	r2, [r4, #20]
 800d708:	1c43      	adds	r3, r0, #1
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d004      	beq.n	800d718 <__swbuf_r+0x84>
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	07db      	lsls	r3, r3, #31
 800d712:	d5d6      	bpl.n	800d6c2 <__swbuf_r+0x2e>
 800d714:	2e0a      	cmp	r6, #10
 800d716:	d1d4      	bne.n	800d6c2 <__swbuf_r+0x2e>
 800d718:	4621      	mov	r1, r4
 800d71a:	4628      	mov	r0, r5
 800d71c:	f7fb fd32 	bl	8009184 <_fflush_r>
 800d720:	2800      	cmp	r0, #0
 800d722:	d0ce      	beq.n	800d6c2 <__swbuf_r+0x2e>
 800d724:	e7cb      	b.n	800d6be <__swbuf_r+0x2a>

0800d726 <_raise_r>:
 800d726:	291f      	cmp	r1, #31
 800d728:	b538      	push	{r3, r4, r5, lr}
 800d72a:	4605      	mov	r5, r0
 800d72c:	460c      	mov	r4, r1
 800d72e:	d904      	bls.n	800d73a <_raise_r+0x14>
 800d730:	2316      	movs	r3, #22
 800d732:	6003      	str	r3, [r0, #0]
 800d734:	f04f 30ff 	mov.w	r0, #4294967295
 800d738:	bd38      	pop	{r3, r4, r5, pc}
 800d73a:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800d73e:	b112      	cbz	r2, 800d746 <_raise_r+0x20>
 800d740:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d744:	b94b      	cbnz	r3, 800d75a <_raise_r+0x34>
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f852 	bl	800d7f0 <_getpid_r>
 800d74c:	4622      	mov	r2, r4
 800d74e:	4601      	mov	r1, r0
 800d750:	4628      	mov	r0, r5
 800d752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d756:	f000 b839 	b.w	800d7cc <_kill_r>
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d00a      	beq.n	800d774 <_raise_r+0x4e>
 800d75e:	1c59      	adds	r1, r3, #1
 800d760:	d103      	bne.n	800d76a <_raise_r+0x44>
 800d762:	2316      	movs	r3, #22
 800d764:	6003      	str	r3, [r0, #0]
 800d766:	2001      	movs	r0, #1
 800d768:	e7e6      	b.n	800d738 <_raise_r+0x12>
 800d76a:	2100      	movs	r1, #0
 800d76c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d770:	4620      	mov	r0, r4
 800d772:	4798      	blx	r3
 800d774:	2000      	movs	r0, #0
 800d776:	e7df      	b.n	800d738 <_raise_r+0x12>

0800d778 <raise>:
 800d778:	4b02      	ldr	r3, [pc, #8]	@ (800d784 <raise+0xc>)
 800d77a:	4601      	mov	r1, r0
 800d77c:	6818      	ldr	r0, [r3, #0]
 800d77e:	f7ff bfd2 	b.w	800d726 <_raise_r>
 800d782:	bf00      	nop
 800d784:	20000018 	.word	0x20000018

0800d788 <_fstat_r>:
 800d788:	b538      	push	{r3, r4, r5, lr}
 800d78a:	4d07      	ldr	r5, [pc, #28]	@ (800d7a8 <_fstat_r+0x20>)
 800d78c:	2300      	movs	r3, #0
 800d78e:	4604      	mov	r4, r0
 800d790:	4608      	mov	r0, r1
 800d792:	4611      	mov	r1, r2
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	f7f4 fe01 	bl	800239c <_fstat>
 800d79a:	1c43      	adds	r3, r0, #1
 800d79c:	d102      	bne.n	800d7a4 <_fstat_r+0x1c>
 800d79e:	682b      	ldr	r3, [r5, #0]
 800d7a0:	b103      	cbz	r3, 800d7a4 <_fstat_r+0x1c>
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20000ac4 	.word	0x20000ac4

0800d7ac <_isatty_r>:
 800d7ac:	b538      	push	{r3, r4, r5, lr}
 800d7ae:	4d06      	ldr	r5, [pc, #24]	@ (800d7c8 <_isatty_r+0x1c>)
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4604      	mov	r4, r0
 800d7b4:	4608      	mov	r0, r1
 800d7b6:	602b      	str	r3, [r5, #0]
 800d7b8:	f7f4 fe00 	bl	80023bc <_isatty>
 800d7bc:	1c43      	adds	r3, r0, #1
 800d7be:	d102      	bne.n	800d7c6 <_isatty_r+0x1a>
 800d7c0:	682b      	ldr	r3, [r5, #0]
 800d7c2:	b103      	cbz	r3, 800d7c6 <_isatty_r+0x1a>
 800d7c4:	6023      	str	r3, [r4, #0]
 800d7c6:	bd38      	pop	{r3, r4, r5, pc}
 800d7c8:	20000ac4 	.word	0x20000ac4

0800d7cc <_kill_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d07      	ldr	r5, [pc, #28]	@ (800d7ec <_kill_r+0x20>)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	4611      	mov	r1, r2
 800d7d8:	602b      	str	r3, [r5, #0]
 800d7da:	f7f4 fd7f 	bl	80022dc <_kill>
 800d7de:	1c43      	adds	r3, r0, #1
 800d7e0:	d102      	bne.n	800d7e8 <_kill_r+0x1c>
 800d7e2:	682b      	ldr	r3, [r5, #0]
 800d7e4:	b103      	cbz	r3, 800d7e8 <_kill_r+0x1c>
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	bd38      	pop	{r3, r4, r5, pc}
 800d7ea:	bf00      	nop
 800d7ec:	20000ac4 	.word	0x20000ac4

0800d7f0 <_getpid_r>:
 800d7f0:	f7f4 bd6c 	b.w	80022cc <_getpid>

0800d7f4 <_init>:
 800d7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7f6:	bf00      	nop
 800d7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7fa:	bc08      	pop	{r3}
 800d7fc:	469e      	mov	lr, r3
 800d7fe:	4770      	bx	lr

0800d800 <_fini>:
 800d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d802:	bf00      	nop
 800d804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d806:	bc08      	pop	{r3}
 800d808:	469e      	mov	lr, r3
 800d80a:	4770      	bx	lr
